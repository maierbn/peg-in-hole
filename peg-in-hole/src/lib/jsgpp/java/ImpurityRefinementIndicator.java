/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package sgpp;

public class ImpurityRefinementIndicator extends RefinementFunctor {
  private transient long swigCPtr;

  protected ImpurityRefinementIndicator(long cPtr, boolean cMemoryOwn) {
    super(jsgppJNI.ImpurityRefinementIndicator_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(ImpurityRefinementIndicator obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        jsgppJNI.delete_ImpurityRefinementIndicator(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public ImpurityRefinementIndicator(Grid grid, DataMatrix dataset, DataVector alphas, DataVector w1, DataVector w2, DataVector classesComputed, double threshold, long refinementsNum) {
    this(jsgppJNI.new_ImpurityRefinementIndicator__SWIG_0(Grid.getCPtr(grid), grid, DataMatrix.getCPtr(dataset), dataset, DataVector.getCPtr(alphas), alphas, DataVector.getCPtr(w1), w1, DataVector.getCPtr(w2), w2, DataVector.getCPtr(classesComputed), classesComputed, threshold, refinementsNum), true);
  }

  public ImpurityRefinementIndicator(Grid grid, DataMatrix dataset, DataVector alphas, DataVector w1, DataVector w2, DataVector classesComputed, double threshold) {
    this(jsgppJNI.new_ImpurityRefinementIndicator__SWIG_1(Grid.getCPtr(grid), grid, DataMatrix.getCPtr(dataset), dataset, DataVector.getCPtr(alphas), alphas, DataVector.getCPtr(w1), w1, DataVector.getCPtr(w2), w2, DataVector.getCPtr(classesComputed), classesComputed, threshold), true);
  }

  public ImpurityRefinementIndicator(Grid grid, DataMatrix dataset, DataVector alphas, DataVector w1, DataVector w2, DataVector classesComputed) {
    this(jsgppJNI.new_ImpurityRefinementIndicator__SWIG_2(Grid.getCPtr(grid), grid, DataMatrix.getCPtr(dataset), dataset, DataVector.getCPtr(alphas), alphas, DataVector.getCPtr(w1), w1, DataVector.getCPtr(w2), w2, DataVector.getCPtr(classesComputed), classesComputed), true);
  }

  public double operatorParentheses(GridPoint point) {
    return jsgppJNI.ImpurityRefinementIndicator_operatorParentheses__SWIG_0(swigCPtr, this, GridPoint.getCPtr(point), point);
  }

  public long getRefinementsNum() {
    return jsgppJNI.ImpurityRefinementIndicator_getRefinementsNum(swigCPtr, this);
  }

  public double getRefinementThreshold() {
    return jsgppJNI.ImpurityRefinementIndicator_getRefinementThreshold(swigCPtr, this);
  }

  public double start() {
    return jsgppJNI.ImpurityRefinementIndicator_start(swigCPtr, this);
  }

  public double operatorParentheses(GridStorage storage, long seq) {
    return jsgppJNI.ImpurityRefinementIndicator_operatorParentheses__SWIG_1(swigCPtr, this, GridStorage.getCPtr(storage), storage, seq);
  }

  public void update(GridPoint point) {
    jsgppJNI.ImpurityRefinementIndicator_update(swigCPtr, this, GridPoint.getCPtr(point), point);
  }

  public void setAlphas(DataVector value) {
    jsgppJNI.ImpurityRefinementIndicator_alphas_set(swigCPtr, this, DataVector.getCPtr(value), value);
  }

  public DataVector getAlphas() {
    long cPtr = jsgppJNI.ImpurityRefinementIndicator_alphas_get(swigCPtr, this);
    return (cPtr == 0) ? null : new DataVector(cPtr, false);
  }

  public void setW1(DataVector value) {
    jsgppJNI.ImpurityRefinementIndicator_w1_set(swigCPtr, this, DataVector.getCPtr(value), value);
  }

  public DataVector getW1() {
    long cPtr = jsgppJNI.ImpurityRefinementIndicator_w1_get(swigCPtr, this);
    return (cPtr == 0) ? null : new DataVector(cPtr, false);
  }

  public void setW2(DataVector value) {
    jsgppJNI.ImpurityRefinementIndicator_w2_set(swigCPtr, this, DataVector.getCPtr(value), value);
  }

  public DataVector getW2() {
    long cPtr = jsgppJNI.ImpurityRefinementIndicator_w2_get(swigCPtr, this);
    return (cPtr == 0) ? null : new DataVector(cPtr, false);
  }

}
