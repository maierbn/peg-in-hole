/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package sgpp;

public class ParabolicPDESolver extends PDESolver {
  private transient long swigCPtr;

  protected ParabolicPDESolver(long cPtr, boolean cMemoryOwn) {
    super(jsgppJNI.ParabolicPDESolver_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(ParabolicPDESolver obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        jsgppJNI.delete_ParabolicPDESolver(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public void solveImplicitEuler(long numTimesteps, double timestepsize, long maxCGIterations, double epsilonCG, DataVector alpha, boolean verbose, boolean generateAnimation) {
    jsgppJNI.ParabolicPDESolver_solveImplicitEuler__SWIG_0(swigCPtr, this, numTimesteps, timestepsize, maxCGIterations, epsilonCG, DataVector.getCPtr(alpha), alpha, verbose, generateAnimation);
  }

  public void solveImplicitEuler(long numTimesteps, double timestepsize, long maxCGIterations, double epsilonCG, DataVector alpha, boolean verbose) {
    jsgppJNI.ParabolicPDESolver_solveImplicitEuler__SWIG_1(swigCPtr, this, numTimesteps, timestepsize, maxCGIterations, epsilonCG, DataVector.getCPtr(alpha), alpha, verbose);
  }

  public void solveImplicitEuler(long numTimesteps, double timestepsize, long maxCGIterations, double epsilonCG, DataVector alpha) {
    jsgppJNI.ParabolicPDESolver_solveImplicitEuler__SWIG_2(swigCPtr, this, numTimesteps, timestepsize, maxCGIterations, epsilonCG, DataVector.getCPtr(alpha), alpha);
  }

  public void solveExplicitEuler(long numTimesteps, double timestepsize, long maxCGIterations, double epsilonCG, DataVector alpha, boolean verbose, boolean generateAnimation) {
    jsgppJNI.ParabolicPDESolver_solveExplicitEuler__SWIG_0(swigCPtr, this, numTimesteps, timestepsize, maxCGIterations, epsilonCG, DataVector.getCPtr(alpha), alpha, verbose, generateAnimation);
  }

  public void solveExplicitEuler(long numTimesteps, double timestepsize, long maxCGIterations, double epsilonCG, DataVector alpha, boolean verbose) {
    jsgppJNI.ParabolicPDESolver_solveExplicitEuler__SWIG_1(swigCPtr, this, numTimesteps, timestepsize, maxCGIterations, epsilonCG, DataVector.getCPtr(alpha), alpha, verbose);
  }

  public void solveExplicitEuler(long numTimesteps, double timestepsize, long maxCGIterations, double epsilonCG, DataVector alpha) {
    jsgppJNI.ParabolicPDESolver_solveExplicitEuler__SWIG_2(swigCPtr, this, numTimesteps, timestepsize, maxCGIterations, epsilonCG, DataVector.getCPtr(alpha), alpha);
  }

  public void solveCrankNicolson(long numTimesteps, double timestepsize, long maxCGIterations, double epsilonCG, DataVector alpha, long NumImEul) {
    jsgppJNI.ParabolicPDESolver_solveCrankNicolson__SWIG_0(swigCPtr, this, numTimesteps, timestepsize, maxCGIterations, epsilonCG, DataVector.getCPtr(alpha), alpha, NumImEul);
  }

  public void solveCrankNicolson(long numTimesteps, double timestepsize, long maxCGIterations, double epsilonCG, DataVector alpha) {
    jsgppJNI.ParabolicPDESolver_solveCrankNicolson__SWIG_1(swigCPtr, this, numTimesteps, timestepsize, maxCGIterations, epsilonCG, DataVector.getCPtr(alpha), alpha);
  }

}
