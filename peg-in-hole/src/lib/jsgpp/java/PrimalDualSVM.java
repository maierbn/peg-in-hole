/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package sgpp;

public class PrimalDualSVM {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected PrimalDualSVM(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(PrimalDualSVM obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        jsgppJNI.delete_PrimalDualSVM(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public PrimalDualSVM(long dim, long inputDim, long budget, boolean useBias) {
    this(jsgppJNI.new_PrimalDualSVM(dim, inputDim, budget, useBias), true);
  }

  public double predictRaw(Grid grid, DataVector x, long dataDim, boolean trans) {
    return jsgppJNI.PrimalDualSVM_predictRaw__SWIG_0(swigCPtr, this, Grid.getCPtr(grid), grid, DataVector.getCPtr(x), x, dataDim, trans);
  }

  public double predictRaw(Grid grid, DataVector x, long dataDim) {
    return jsgppJNI.PrimalDualSVM_predictRaw__SWIG_1(swigCPtr, this, Grid.getCPtr(grid), grid, DataVector.getCPtr(x), x, dataDim);
  }

  public int predict(Grid grid, DataVector x, long dataDim) {
    return jsgppJNI.PrimalDualSVM_predict(swigCPtr, this, Grid.getCPtr(grid), grid, DataVector.getCPtr(x), x, dataDim);
  }

  public void add(Grid grid, DataVector x, double alpha, long dataDim) {
    jsgppJNI.PrimalDualSVM_add(swigCPtr, this, Grid.getCPtr(grid), grid, DataVector.getCPtr(x), x, alpha, dataDim);
  }

  public void multiply(double scalar) {
    jsgppJNI.PrimalDualSVM_multiply(swigCPtr, this, scalar);
  }

  public void setSvs(DataMatrix value) {
    jsgppJNI.PrimalDualSVM_svs_set(swigCPtr, this, DataMatrix.getCPtr(value), value);
  }

  public DataMatrix getSvs() {
    long cPtr = jsgppJNI.PrimalDualSVM_svs_get(swigCPtr, this);
    return (cPtr == 0) ? null : new DataMatrix(cPtr, false);
  }

  public void setAlphas(DataVector value) {
    jsgppJNI.PrimalDualSVM_alphas_set(swigCPtr, this, DataVector.getCPtr(value), value);
  }

  public DataVector getAlphas() {
    long cPtr = jsgppJNI.PrimalDualSVM_alphas_get(swigCPtr, this);
    return (cPtr == 0) ? null : new DataVector(cPtr, false);
  }

  public void setNorms(DataVector value) {
    jsgppJNI.PrimalDualSVM_norms_set(swigCPtr, this, DataVector.getCPtr(value), value);
  }

  public DataVector getNorms() {
    long cPtr = jsgppJNI.PrimalDualSVM_norms_get(swigCPtr, this);
    return (cPtr == 0) ? null : new DataVector(cPtr, false);
  }

  public void setW(DataVector value) {
    jsgppJNI.PrimalDualSVM_w_set(swigCPtr, this, DataVector.getCPtr(value), value);
  }

  public DataVector getW() {
    long cPtr = jsgppJNI.PrimalDualSVM_w_get(swigCPtr, this);
    return (cPtr == 0) ? null : new DataVector(cPtr, false);
  }

  public void setW2(DataVector value) {
    jsgppJNI.PrimalDualSVM_w2_set(swigCPtr, this, DataVector.getCPtr(value), value);
  }

  public DataVector getW2() {
    long cPtr = jsgppJNI.PrimalDualSVM_w2_get(swigCPtr, this);
    return (cPtr == 0) ? null : new DataVector(cPtr, false);
  }

}
