/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package sgpp;

public class OptNewton extends OptUnconstrainedOptimizer {
  private transient long swigCPtr;

  protected OptNewton(long cPtr, boolean cMemoryOwn) {
    super(jsgppJNI.OptNewton_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(OptNewton obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        jsgppJNI.delete_OptNewton(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public OptNewton(OptScalarFunction f, OptScalarFunctionHessian fHessian, long maxItCount, double beta, double gamma, double tolerance, double epsilon, double alpha1, double alpha2, double p) {
    this(jsgppJNI.new_OptNewton__SWIG_0(OptScalarFunction.getCPtr(f), f, OptScalarFunctionHessian.getCPtr(fHessian), fHessian, maxItCount, beta, gamma, tolerance, epsilon, alpha1, alpha2, p), true);
  }

  public OptNewton(OptScalarFunction f, OptScalarFunctionHessian fHessian, long maxItCount, double beta, double gamma, double tolerance, double epsilon, double alpha1, double alpha2) {
    this(jsgppJNI.new_OptNewton__SWIG_1(OptScalarFunction.getCPtr(f), f, OptScalarFunctionHessian.getCPtr(fHessian), fHessian, maxItCount, beta, gamma, tolerance, epsilon, alpha1, alpha2), true);
  }

  public OptNewton(OptScalarFunction f, OptScalarFunctionHessian fHessian, long maxItCount, double beta, double gamma, double tolerance, double epsilon, double alpha1) {
    this(jsgppJNI.new_OptNewton__SWIG_2(OptScalarFunction.getCPtr(f), f, OptScalarFunctionHessian.getCPtr(fHessian), fHessian, maxItCount, beta, gamma, tolerance, epsilon, alpha1), true);
  }

  public OptNewton(OptScalarFunction f, OptScalarFunctionHessian fHessian, long maxItCount, double beta, double gamma, double tolerance, double epsilon) {
    this(jsgppJNI.new_OptNewton__SWIG_3(OptScalarFunction.getCPtr(f), f, OptScalarFunctionHessian.getCPtr(fHessian), fHessian, maxItCount, beta, gamma, tolerance, epsilon), true);
  }

  public OptNewton(OptScalarFunction f, OptScalarFunctionHessian fHessian, long maxItCount, double beta, double gamma, double tolerance) {
    this(jsgppJNI.new_OptNewton__SWIG_4(OptScalarFunction.getCPtr(f), f, OptScalarFunctionHessian.getCPtr(fHessian), fHessian, maxItCount, beta, gamma, tolerance), true);
  }

  public OptNewton(OptScalarFunction f, OptScalarFunctionHessian fHessian, long maxItCount, double beta, double gamma) {
    this(jsgppJNI.new_OptNewton__SWIG_5(OptScalarFunction.getCPtr(f), f, OptScalarFunctionHessian.getCPtr(fHessian), fHessian, maxItCount, beta, gamma), true);
  }

  public OptNewton(OptScalarFunction f, OptScalarFunctionHessian fHessian, long maxItCount, double beta) {
    this(jsgppJNI.new_OptNewton__SWIG_6(OptScalarFunction.getCPtr(f), f, OptScalarFunctionHessian.getCPtr(fHessian), fHessian, maxItCount, beta), true);
  }

  public OptNewton(OptScalarFunction f, OptScalarFunctionHessian fHessian, long maxItCount) {
    this(jsgppJNI.new_OptNewton__SWIG_7(OptScalarFunction.getCPtr(f), f, OptScalarFunctionHessian.getCPtr(fHessian), fHessian, maxItCount), true);
  }

  public OptNewton(OptScalarFunction f, OptScalarFunctionHessian fHessian) {
    this(jsgppJNI.new_OptNewton__SWIG_8(OptScalarFunction.getCPtr(f), f, OptScalarFunctionHessian.getCPtr(fHessian), fHessian), true);
  }

  public OptNewton(OptScalarFunction f, OptScalarFunctionHessian fHessian, long maxItCount, double beta, double gamma, double tolerance, double epsilon, double alpha1, double alpha2, double p, OptSLESolver sleSolver) {
    this(jsgppJNI.new_OptNewton__SWIG_9(OptScalarFunction.getCPtr(f), f, OptScalarFunctionHessian.getCPtr(fHessian), fHessian, maxItCount, beta, gamma, tolerance, epsilon, alpha1, alpha2, p, OptSLESolver.getCPtr(sleSolver), sleSolver), true);
  }

  public OptNewton(OptNewton other) {
    this(jsgppJNI.new_OptNewton__SWIG_10(OptNewton.getCPtr(other), other), true);
  }

  public void optimize() {
    jsgppJNI.OptNewton_optimize(swigCPtr, this);
  }

  public OptScalarFunctionHessian getObjectiveHessian() {
    return new OptScalarFunctionHessian(jsgppJNI.OptNewton_getObjectiveHessian(swigCPtr, this), false);
  }

  public double getBeta() {
    return jsgppJNI.OptNewton_getBeta(swigCPtr, this);
  }

  public void setBeta(double beta) {
    jsgppJNI.OptNewton_setBeta(swigCPtr, this, beta);
  }

  public double getGamma() {
    return jsgppJNI.OptNewton_getGamma(swigCPtr, this);
  }

  public void setGamma(double gamma) {
    jsgppJNI.OptNewton_setGamma(swigCPtr, this, gamma);
  }

  public double getTolerance() {
    return jsgppJNI.OptNewton_getTolerance(swigCPtr, this);
  }

  public void setTolerance(double tolerance) {
    jsgppJNI.OptNewton_setTolerance(swigCPtr, this, tolerance);
  }

  public double getEpsilon() {
    return jsgppJNI.OptNewton_getEpsilon(swigCPtr, this);
  }

  public void setEpsilon(double epsilon) {
    jsgppJNI.OptNewton_setEpsilon(swigCPtr, this, epsilon);
  }

  public double getAlpha1() {
    return jsgppJNI.OptNewton_getAlpha1(swigCPtr, this);
  }

  public void setAlpha1(double alpha1) {
    jsgppJNI.OptNewton_setAlpha1(swigCPtr, this, alpha1);
  }

  public double getAlpha2() {
    return jsgppJNI.OptNewton_getAlpha2(swigCPtr, this);
  }

  public void setAlpha2(double alpha2) {
    jsgppJNI.OptNewton_setAlpha2(swigCPtr, this, alpha2);
  }

  public double getP() {
    return jsgppJNI.OptNewton_getP(swigCPtr, this);
  }

  public void setP(double p) {
    jsgppJNI.OptNewton_setP(swigCPtr, this, p);
  }

  public void clone(SWIGTYPE_p_std__unique_ptrT_sgpp__optimization__optimizer__UnconstrainedOptimizer_t clone) {
    jsgppJNI.OptNewton_clone(swigCPtr, this, SWIGTYPE_p_std__unique_ptrT_sgpp__optimization__optimizer__UnconstrainedOptimizer_t.getCPtr(clone));
  }

  public final static double DEFAULT_BETA = jsgppJNI.OptNewton_DEFAULT_BETA_get();
  public final static double DEFAULT_GAMMA = jsgppJNI.OptNewton_DEFAULT_GAMMA_get();
  public final static double DEFAULT_TOLERANCE = jsgppJNI.OptNewton_DEFAULT_TOLERANCE_get();
  public final static double DEFAULT_EPSILON = jsgppJNI.OptNewton_DEFAULT_EPSILON_get();
  public final static double DEFAULT_ALPHA1 = jsgppJNI.OptNewton_DEFAULT_ALPHA1_get();
  public final static double DEFAULT_ALPHA2 = jsgppJNI.OptNewton_DEFAULT_ALPHA2_get();
  public final static double DEFAULT_P = jsgppJNI.OptNewton_DEFAULT_P_get();
}
