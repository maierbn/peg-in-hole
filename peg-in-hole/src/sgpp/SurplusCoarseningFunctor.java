/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package sgpp;

public class SurplusCoarseningFunctor extends CoarseningFunctor {
  private transient long swigCPtr;

  protected SurplusCoarseningFunctor(long cPtr, boolean cMemoryOwn) {
    super(jsgppJNI.SurplusCoarseningFunctor_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(SurplusCoarseningFunctor obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        jsgppJNI.delete_SurplusCoarseningFunctor(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public SurplusCoarseningFunctor(DataVector alpha, long removements_num, double threshold) {
    this(jsgppJNI.new_SurplusCoarseningFunctor__SWIG_0(DataVector.getCPtr(alpha), alpha, removements_num, threshold), true);
  }

  public SurplusCoarseningFunctor(DataVector alpha, long removements_num) {
    this(jsgppJNI.new_SurplusCoarseningFunctor__SWIG_1(DataVector.getCPtr(alpha), alpha, removements_num), true);
  }

  public SurplusCoarseningFunctor(DataVector alpha) {
    this(jsgppJNI.new_SurplusCoarseningFunctor__SWIG_2(DataVector.getCPtr(alpha), alpha), true);
  }

  public double operatorParentheses(GridStorage storage, long seq) {
    return jsgppJNI.SurplusCoarseningFunctor_operatorParentheses(swigCPtr, this, GridStorage.getCPtr(storage), storage, seq);
  }

  public double start() {
    return jsgppJNI.SurplusCoarseningFunctor_start(swigCPtr, this);
  }

  public long getRemovementsNum() {
    return jsgppJNI.SurplusCoarseningFunctor_getRemovementsNum(swigCPtr, this);
  }

  public double getCoarseningThreshold() {
    return jsgppJNI.SurplusCoarseningFunctor_getCoarseningThreshold(swigCPtr, this);
  }

}
