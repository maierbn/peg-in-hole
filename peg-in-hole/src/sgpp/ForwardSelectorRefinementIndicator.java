/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package sgpp;

public class ForwardSelectorRefinementIndicator extends RefinementFunctor {
  private transient long swigCPtr;

  protected ForwardSelectorRefinementIndicator(long cPtr, boolean cMemoryOwn) {
    super(jsgppJNI.ForwardSelectorRefinementIndicator_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(ForwardSelectorRefinementIndicator obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        jsgppJNI.delete_ForwardSelectorRefinementIndicator(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public ForwardSelectorRefinementIndicator(Grid grid, DataMatrix svs, DataVector alphas, DataVector w1, DataVector w2, double beta, double threshold, long refinementsNum, boolean performUpdate) {
    this(jsgppJNI.new_ForwardSelectorRefinementIndicator__SWIG_0(Grid.getCPtr(grid), grid, DataMatrix.getCPtr(svs), svs, DataVector.getCPtr(alphas), alphas, DataVector.getCPtr(w1), w1, DataVector.getCPtr(w2), w2, beta, threshold, refinementsNum, performUpdate), true);
  }

  public ForwardSelectorRefinementIndicator(Grid grid, DataMatrix svs, DataVector alphas, DataVector w1, DataVector w2, double beta, double threshold, long refinementsNum) {
    this(jsgppJNI.new_ForwardSelectorRefinementIndicator__SWIG_1(Grid.getCPtr(grid), grid, DataMatrix.getCPtr(svs), svs, DataVector.getCPtr(alphas), alphas, DataVector.getCPtr(w1), w1, DataVector.getCPtr(w2), w2, beta, threshold, refinementsNum), true);
  }

  public ForwardSelectorRefinementIndicator(Grid grid, DataMatrix svs, DataVector alphas, DataVector w1, DataVector w2, double beta, double threshold) {
    this(jsgppJNI.new_ForwardSelectorRefinementIndicator__SWIG_2(Grid.getCPtr(grid), grid, DataMatrix.getCPtr(svs), svs, DataVector.getCPtr(alphas), alphas, DataVector.getCPtr(w1), w1, DataVector.getCPtr(w2), w2, beta, threshold), true);
  }

  public ForwardSelectorRefinementIndicator(Grid grid, DataMatrix svs, DataVector alphas, DataVector w1, DataVector w2, double beta) {
    this(jsgppJNI.new_ForwardSelectorRefinementIndicator__SWIG_3(Grid.getCPtr(grid), grid, DataMatrix.getCPtr(svs), svs, DataVector.getCPtr(alphas), alphas, DataVector.getCPtr(w1), w1, DataVector.getCPtr(w2), w2, beta), true);
  }

  public double operatorParentheses(GridStorage storage, long seq) {
    return jsgppJNI.ForwardSelectorRefinementIndicator_operatorParentheses__SWIG_0(swigCPtr, this, GridStorage.getCPtr(storage), storage, seq);
  }

  public double runOperator(GridStorage storage, long seq) {
    return jsgppJNI.ForwardSelectorRefinementIndicator_runOperator(swigCPtr, this, GridStorage.getCPtr(storage), storage, seq);
  }

  public long getRefinementsNum() {
    return jsgppJNI.ForwardSelectorRefinementIndicator_getRefinementsNum(swigCPtr, this);
  }

  public double getRefinementThreshold() {
    return jsgppJNI.ForwardSelectorRefinementIndicator_getRefinementThreshold(swigCPtr, this);
  }

  public double start() {
    return jsgppJNI.ForwardSelectorRefinementIndicator_start(swigCPtr, this);
  }

  public double operatorParentheses(GridPoint point) {
    return jsgppJNI.ForwardSelectorRefinementIndicator_operatorParentheses__SWIG_1(swigCPtr, this, GridPoint.getCPtr(point), point);
  }

  public void update(GridPoint point) {
    jsgppJNI.ForwardSelectorRefinementIndicator_update(swigCPtr, this, GridPoint.getCPtr(point), point);
  }

}
