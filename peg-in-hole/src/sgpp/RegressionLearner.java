/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package sgpp;

public class RegressionLearner {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected RegressionLearner(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(RegressionLearner obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        jsgppJNI.delete_RegressionLearner(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public RegressionLearner(RegularGridConfiguration gridConfig, AdpativityConfiguration adaptivityConfig, SLESolverConfiguration solverConfig, SLESolverConfiguration finalSolverConfig, RegularizationConfiguration regularizationConfig, SWIGTYPE_p_std__vectorT_std__vectorT_size_t_t_t terms) {
    this(jsgppJNI.new_RegressionLearner__SWIG_0(RegularGridConfiguration.getCPtr(gridConfig), gridConfig, AdpativityConfiguration.getCPtr(adaptivityConfig), adaptivityConfig, SLESolverConfiguration.getCPtr(solverConfig), solverConfig, SLESolverConfiguration.getCPtr(finalSolverConfig), finalSolverConfig, RegularizationConfiguration.getCPtr(regularizationConfig), regularizationConfig, SWIGTYPE_p_std__vectorT_std__vectorT_size_t_t_t.getCPtr(terms)), true);
  }

  public RegressionLearner(RegularGridConfiguration gridConfig, AdpativityConfiguration adaptivityConfig, SLESolverConfiguration solverConfig, SLESolverConfiguration finalSolverConfig, RegularizationConfiguration regularizationConfig) {
    this(jsgppJNI.new_RegressionLearner__SWIG_1(RegularGridConfiguration.getCPtr(gridConfig), gridConfig, AdpativityConfiguration.getCPtr(adaptivityConfig), adaptivityConfig, SLESolverConfiguration.getCPtr(solverConfig), solverConfig, SLESolverConfiguration.getCPtr(finalSolverConfig), finalSolverConfig, RegularizationConfiguration.getCPtr(regularizationConfig), regularizationConfig), true);
  }

  public void train(DataMatrix trainDataset, DataVector classes) {
    jsgppJNI.RegressionLearner_train(swigCPtr, this, DataMatrix.getCPtr(trainDataset), trainDataset, DataVector.getCPtr(classes), classes);
  }

  public DataVector predict(DataMatrix data) {
    return new DataVector(jsgppJNI.RegressionLearner_predict(swigCPtr, this, DataMatrix.getCPtr(data), data), true);
  }

  public long getGridSize() {
    return jsgppJNI.RegressionLearner_getGridSize(swigCPtr, this);
  }

  public Grid getGrid() {
    return new Grid(jsgppJNI.RegressionLearner_getGrid(swigCPtr, this), false);
  }

  public double getMSE(DataMatrix data, DataVector y) {
    return jsgppJNI.RegressionLearner_getMSE(swigCPtr, this, DataMatrix.getCPtr(data), data, DataVector.getCPtr(y), y);
  }

  public DataVector getWeights() {
    return new DataVector(jsgppJNI.RegressionLearner_getWeights(swigCPtr, this), true);
  }

  public void setWeights(DataVector weights) {
    jsgppJNI.RegressionLearner_setWeights(swigCPtr, this, DataVector.getCPtr(weights), weights);
  }

}
