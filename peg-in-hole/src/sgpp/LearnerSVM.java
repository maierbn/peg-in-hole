/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package sgpp;

public class LearnerSVM {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected LearnerSVM(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(LearnerSVM obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        jsgppJNI.delete_LearnerSVM(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public LearnerSVM(RegularGridConfiguration gridConfig, AdpativityConfiguration adaptConfig, DataMatrix pTrainData, DataVector pTrainLabels, DataMatrix pTestData, DataVector pTestLabels, DataMatrix pValidData, DataVector pValidLabels) {
    this(jsgppJNI.new_LearnerSVM(RegularGridConfiguration.getCPtr(gridConfig), gridConfig, AdpativityConfiguration.getCPtr(adaptConfig), adaptConfig, DataMatrix.getCPtr(pTrainData), pTrainData, DataVector.getCPtr(pTrainLabels), pTrainLabels, DataMatrix.getCPtr(pTestData), pTestData, DataVector.getCPtr(pTestLabels), pTestLabels, DataMatrix.getCPtr(pValidData), pValidData, DataVector.getCPtr(pValidLabels), pValidLabels), true);
  }

  public void initialize(long budget) {
    jsgppJNI.LearnerSVM_initialize(swigCPtr, this, budget);
  }

  public void train(long maxDataPasses, double lambda, double betaRef, String refType, String refMonitor, long refPeriod, double errorDeclineThreshold, long errorDeclineBufferSize, long minRefInterval) {
    jsgppJNI.LearnerSVM_train(swigCPtr, this, maxDataPasses, lambda, betaRef, refType, refMonitor, refPeriod, errorDeclineThreshold, errorDeclineBufferSize, minRefInterval);
  }

  public void storeResults(DataMatrix testDataset) {
    jsgppJNI.LearnerSVM_storeResults(swigCPtr, this, DataMatrix.getCPtr(testDataset), testDataset);
  }

  public double getAccuracy(DataMatrix testDataset, DataVector referenceLabels, double threshold) {
    return jsgppJNI.LearnerSVM_getAccuracy__SWIG_0(swigCPtr, this, DataMatrix.getCPtr(testDataset), testDataset, DataVector.getCPtr(referenceLabels), referenceLabels, threshold);
  }

  public double getAccuracy(DataVector referenceLabels, double threshold, DataVector predictedLabels) {
    return jsgppJNI.LearnerSVM_getAccuracy__SWIG_1(swigCPtr, this, DataVector.getCPtr(referenceLabels), referenceLabels, threshold, DataVector.getCPtr(predictedLabels), predictedLabels);
  }

  public void predict(DataMatrix testData, DataVector predictedLabels) {
    jsgppJNI.LearnerSVM_predict(swigCPtr, this, DataMatrix.getCPtr(testData), testData, DataVector.getCPtr(predictedLabels), predictedLabels);
  }

  public double getError(DataMatrix data, DataVector labels, String errorType) {
    return jsgppJNI.LearnerSVM_getError(swigCPtr, this, DataMatrix.getCPtr(data), data, DataVector.getCPtr(labels), labels, errorType);
  }

  public void setError(double value) {
    jsgppJNI.LearnerSVM_error_set(swigCPtr, this, value);
  }

  public double getError() {
    return jsgppJNI.LearnerSVM_error_get(swigCPtr, this);
  }

  public void setAvgErrors(DataVector value) {
    jsgppJNI.LearnerSVM_avgErrors_set(swigCPtr, this, DataVector.getCPtr(value), value);
  }

  public DataVector getAvgErrors() {
    long cPtr = jsgppJNI.LearnerSVM_avgErrors_get(swigCPtr, this);
    return (cPtr == 0) ? null : new DataVector(cPtr, false);
  }

}
