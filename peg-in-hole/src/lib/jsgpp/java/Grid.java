/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package sgpp;

public class Grid {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected Grid(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Grid obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        jsgppJNI.delete_Grid(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public static Grid createGrid(RegularGridConfiguration gridConfig) {
    long cPtr = jsgppJNI.Grid_createGrid(RegularGridConfiguration.getCPtr(gridConfig), gridConfig);
    return (cPtr == 0) ? null : new Grid(cPtr, false);
  }

  public static Grid createLinearGrid(long dim) {
    long cPtr = jsgppJNI.Grid_createLinearGrid(dim);
    return (cPtr == 0) ? null : new Grid(cPtr, true);
  }

  public static Grid createLinearStretchedGrid(long dim) {
    long cPtr = jsgppJNI.Grid_createLinearStretchedGrid(dim);
    return (cPtr == 0) ? null : new Grid(cPtr, true);
  }

  public static Grid createLinearBoundaryGrid(long dim, long boundaryLevel) {
    long cPtr = jsgppJNI.Grid_createLinearBoundaryGrid__SWIG_0(dim, boundaryLevel);
    return (cPtr == 0) ? null : new Grid(cPtr, true);
  }

  public static Grid createLinearClenshawCurtisGrid(long dim) {
    long cPtr = jsgppJNI.Grid_createLinearClenshawCurtisGrid(dim);
    return (cPtr == 0) ? null : new Grid(cPtr, true);
  }

  public static Grid createLinearBoundaryGrid(long dim) {
    long cPtr = jsgppJNI.Grid_createLinearBoundaryGrid__SWIG_1(dim);
    return (cPtr == 0) ? null : new Grid(cPtr, true);
  }

  public static Grid createLinearStretchedBoundaryGrid(long dim) {
    long cPtr = jsgppJNI.Grid_createLinearStretchedBoundaryGrid(dim);
    return (cPtr == 0) ? null : new Grid(cPtr, true);
  }

  public static Grid createModLinearGrid(long dim) {
    long cPtr = jsgppJNI.Grid_createModLinearGrid(dim);
    return (cPtr == 0) ? null : new Grid(cPtr, true);
  }

  public static Grid createPolyGrid(long dim, long degree) {
    long cPtr = jsgppJNI.Grid_createPolyGrid(dim, degree);
    return (cPtr == 0) ? null : new Grid(cPtr, true);
  }

  public static Grid createPolyBoundaryGrid(long dim, long degree) {
    long cPtr = jsgppJNI.Grid_createPolyBoundaryGrid(dim, degree);
    return (cPtr == 0) ? null : new Grid(cPtr, true);
  }

  public static Grid createModPolyGrid(long dim, long degree) {
    long cPtr = jsgppJNI.Grid_createModPolyGrid(dim, degree);
    return (cPtr == 0) ? null : new Grid(cPtr, true);
  }

  public static Grid createWaveletGrid(long dim) {
    long cPtr = jsgppJNI.Grid_createWaveletGrid(dim);
    return (cPtr == 0) ? null : new Grid(cPtr, true);
  }

  public static Grid createWaveletBoundaryGrid(long dim) {
    long cPtr = jsgppJNI.Grid_createWaveletBoundaryGrid(dim);
    return (cPtr == 0) ? null : new Grid(cPtr, true);
  }

  public static Grid createModWaveletGrid(long dim) {
    long cPtr = jsgppJNI.Grid_createModWaveletGrid(dim);
    return (cPtr == 0) ? null : new Grid(cPtr, true);
  }

  public static Grid createBsplineGrid(long dim, long degree) {
    long cPtr = jsgppJNI.Grid_createBsplineGrid(dim, degree);
    return (cPtr == 0) ? null : new Grid(cPtr, true);
  }

  public static Grid createBsplineBoundaryGrid(long dim, long degree) {
    long cPtr = jsgppJNI.Grid_createBsplineBoundaryGrid(dim, degree);
    return (cPtr == 0) ? null : new Grid(cPtr, true);
  }

  public static Grid createBsplineClenshawCurtisGrid(long dim, long degree) {
    long cPtr = jsgppJNI.Grid_createBsplineClenshawCurtisGrid(dim, degree);
    return (cPtr == 0) ? null : new Grid(cPtr, true);
  }

  public static Grid createModBsplineGrid(long dim, long degree) {
    long cPtr = jsgppJNI.Grid_createModBsplineGrid(dim, degree);
    return (cPtr == 0) ? null : new Grid(cPtr, true);
  }

  public static Grid createModBsplineClenshawCurtisGrid(long dim, long degree) {
    long cPtr = jsgppJNI.Grid_createModBsplineClenshawCurtisGrid(dim, degree);
    return (cPtr == 0) ? null : new Grid(cPtr, true);
  }

  public static Grid createFundamentalSplineGrid(long dim, long degree) {
    long cPtr = jsgppJNI.Grid_createFundamentalSplineGrid(dim, degree);
    return (cPtr == 0) ? null : new Grid(cPtr, true);
  }

  public static Grid createModFundamentalSplineGrid(long dim, long degree) {
    long cPtr = jsgppJNI.Grid_createModFundamentalSplineGrid(dim, degree);
    return (cPtr == 0) ? null : new Grid(cPtr, false);
  }

  public static Grid createSquareRootGrid(long dim) {
    long cPtr = jsgppJNI.Grid_createSquareRootGrid(dim);
    return (cPtr == 0) ? null : new Grid(cPtr, true);
  }

  public static Grid createLinearTruncatedBoundaryGrid(long dim) {
    long cPtr = jsgppJNI.Grid_createLinearTruncatedBoundaryGrid(dim);
    return (cPtr == 0) ? null : new Grid(cPtr, true);
  }

  public static Grid createPrewaveletGrid(long dim) {
    long cPtr = jsgppJNI.Grid_createPrewaveletGrid(dim);
    return (cPtr == 0) ? null : new Grid(cPtr, true);
  }

  public static Grid createLinearGridStencil(long dim) {
    long cPtr = jsgppJNI.Grid_createLinearGridStencil(dim);
    return (cPtr == 0) ? null : new Grid(cPtr, false);
  }

  public static Grid createModLinearGridStencil(long dim) {
    long cPtr = jsgppJNI.Grid_createModLinearGridStencil(dim);
    return (cPtr == 0) ? null : new Grid(cPtr, false);
  }

  public static Grid createPeriodicGrid(long dim) {
    long cPtr = jsgppJNI.Grid_createPeriodicGrid(dim);
    return (cPtr == 0) ? null : new Grid(cPtr, true);
  }

  public static Grid unserialize(SWIGTYPE_p_std__string istr) {
    long cPtr = jsgppJNI.Grid_unserialize(SWIGTYPE_p_std__string.getCPtr(istr));
    return (cPtr == 0) ? null : new Grid(cPtr, true);
  }

  public GridStorage getStorage() {
    return new GridStorage(jsgppJNI.Grid_getStorage(swigCPtr, this), false);
  }

  public BoundingBox getBoundingBox() {
    return new BoundingBox(jsgppJNI.Grid_getBoundingBox(swigCPtr, this), false);
  }

  public Stretching getStretching() {
    return new Stretching(jsgppJNI.Grid_getStretching(swigCPtr, this), false);
  }

  public GridGenerator getGenerator() {
    return new GridGenerator(jsgppJNI.Grid_getGenerator(swigCPtr, this), false);
  }

  public GridType getType() {
    return GridType.swigToEnum(jsgppJNI.Grid_getType(swigCPtr, this));
  }

  public SBasis getBasis() {
    return new SBasis(jsgppJNI.Grid_getBasis(swigCPtr, this), false);
  }

  public void serialize(SWIGTYPE_p_std__string ostr) {
    jsgppJNI.Grid_serialize(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(ostr));
  }

  public void refine(DataVector vector, int num) {
    jsgppJNI.Grid_refine(swigCPtr, this, DataVector.getCPtr(vector), vector, num);
  }

  public void insertPoint(long dim, SWIGTYPE_p_unsigned_int levels, SWIGTYPE_p_unsigned_int indeces, boolean isLeaf) {
    jsgppJNI.Grid_insertPoint(swigCPtr, this, dim, SWIGTYPE_p_unsigned_int.getCPtr(levels), SWIGTYPE_p_unsigned_int.getCPtr(indeces), isLeaf);
  }

  public int getSize() {
    return jsgppJNI.Grid_getSize(swigCPtr, this);
  }

  public Grid clone() {
    long cPtr = jsgppJNI.Grid_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new Grid(cPtr, true);
  }

  public Grid createMemento() {
    long cPtr = jsgppJNI.Grid_createMemento(swigCPtr, this);
    return (cPtr == 0) ? null : new Grid(cPtr, false);
  }

  public static Grid setMemento(SWIGTYPE_p_std__string istr) {
    long cPtr = jsgppJNI.Grid_setMemento(SWIGTYPE_p_std__string.getCPtr(istr));
    return (cPtr == 0) ? null : new Grid(cPtr, false);
  }

  public int getDegree() {
    return jsgppJNI.Grid_getDegree(swigCPtr, this);
  }

}
