/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package sgpp;

public class GaussianKDE extends DensityEstimator {
  private transient long swigCPtr;

  protected GaussianKDE(long cPtr, boolean cMemoryOwn) {
    super(jsgppJNI.GaussianKDE_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(GaussianKDE obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        jsgppJNI.delete_GaussianKDE(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public GaussianKDE() {
    this(jsgppJNI.new_GaussianKDE__SWIG_0(), true);
  }

  public GaussianKDE(SWIGTYPE_p_std__vectorT_std__shared_ptrT_sgpp__base__DataVector_t_t samplesVec) {
    this(jsgppJNI.new_GaussianKDE__SWIG_1(SWIGTYPE_p_std__vectorT_std__shared_ptrT_sgpp__base__DataVector_t_t.getCPtr(samplesVec)), true);
  }

  public GaussianKDE(DataMatrix samples) {
    this(jsgppJNI.new_GaussianKDE__SWIG_2(DataMatrix.getCPtr(samples), samples), true);
  }

  public GaussianKDE(GaussianKDE kde) {
    this(jsgppJNI.new_GaussianKDE__SWIG_3(GaussianKDE.getCPtr(kde), kde), true);
  }

  public void initialize(DataMatrix samples) {
    jsgppJNI.GaussianKDE_initialize__SWIG_0(swigCPtr, this, DataMatrix.getCPtr(samples), samples);
  }

  public void initialize(SWIGTYPE_p_std__vectorT_std__shared_ptrT_sgpp__base__DataVector_t_t samplesVec) {
    jsgppJNI.GaussianKDE_initialize__SWIG_1(swigCPtr, this, SWIGTYPE_p_std__vectorT_std__shared_ptrT_sgpp__base__DataVector_t_t.getCPtr(samplesVec));
  }

  public double mean() {
    return jsgppJNI.GaussianKDE_mean(swigCPtr, this);
  }

  public double variance() {
    return jsgppJNI.GaussianKDE_variance(swigCPtr, this);
  }

  public void cov(DataMatrix cov) {
    jsgppJNI.GaussianKDE_cov(swigCPtr, this, DataMatrix.getCPtr(cov), cov);
  }

  public double pdf(DataVector x) {
    return jsgppJNI.GaussianKDE_pdf__SWIG_0(swigCPtr, this, DataVector.getCPtr(x), x);
  }

  public void pdf(DataMatrix points, DataVector res) {
    jsgppJNI.GaussianKDE_pdf__SWIG_1(swigCPtr, this, DataMatrix.getCPtr(points), points, DataVector.getCPtr(res), res);
  }

  public void getConditionalizationFactor(DataVector pcond) {
    jsgppJNI.GaussianKDE_getConditionalizationFactor(swigCPtr, this, DataVector.getCPtr(pcond), pcond);
  }

  public void setConditionalizationFactor(DataVector pcond) {
    jsgppJNI.GaussianKDE_setConditionalizationFactor(swigCPtr, this, DataVector.getCPtr(pcond), pcond);
  }

  public void updateConditionalizationFactors(DataVector x, SizeTVector dims, DataVector pcond) {
    jsgppJNI.GaussianKDE_updateConditionalizationFactors(swigCPtr, this, DataVector.getCPtr(x), x, SizeTVector.getCPtr(dims), dims, DataVector.getCPtr(pcond), pcond);
  }

  public void getBandwidths(DataVector sigma) {
    jsgppJNI.GaussianKDE_getBandwidths(swigCPtr, this, DataVector.getCPtr(sigma), sigma);
  }

  public SWIGTYPE_p_std__shared_ptrT_sgpp__base__DataMatrix_t getSamples() {
    return new SWIGTYPE_p_std__shared_ptrT_sgpp__base__DataMatrix_t(jsgppJNI.GaussianKDE_getSamples__SWIG_0(swigCPtr, this), true);
  }

  public SWIGTYPE_p_std__shared_ptrT_sgpp__base__DataVector_t getSamples(long dim) {
    return new SWIGTYPE_p_std__shared_ptrT_sgpp__base__DataVector_t(jsgppJNI.GaussianKDE_getSamples__SWIG_1(swigCPtr, this, dim), true);
  }

  public long getDim() {
    return jsgppJNI.GaussianKDE_getDim(swigCPtr, this);
  }

  public long getNsamples() {
    return jsgppJNI.GaussianKDE_getNsamples(swigCPtr, this);
  }

}
