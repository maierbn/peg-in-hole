/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package sgpp;

public class GaussHermiteQuadRule1D extends QuadRule1D {
  private transient long swigCPtr;

  protected GaussHermiteQuadRule1D(long cPtr, boolean cMemoryOwn) {
    super(jsgppJNI.GaussHermiteQuadRule1D_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(GaussHermiteQuadRule1D obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        jsgppJNI.delete_GaussHermiteQuadRule1D(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public GaussHermiteQuadRule1D() {
    this(jsgppJNI.new_GaussHermiteQuadRule1D(), true);
  }

  public void getLevelPointsAndWeightsNormalized(long level, DataVector coordinates, DataVector weights, double mean, double stdd) {
    jsgppJNI.GaussHermiteQuadRule1D_getLevelPointsAndWeightsNormalized__SWIG_0(swigCPtr, this, level, DataVector.getCPtr(coordinates), coordinates, DataVector.getCPtr(weights), weights, mean, stdd);
  }

  public void getLevelPointsAndWeightsNormalized(long level, DataVector coordinates, DataVector weights, double mean) {
    jsgppJNI.GaussHermiteQuadRule1D_getLevelPointsAndWeightsNormalized__SWIG_1(swigCPtr, this, level, DataVector.getCPtr(coordinates), coordinates, DataVector.getCPtr(weights), weights, mean);
  }

  public void getLevelPointsAndWeightsNormalized(long level, DataVector coordinates, DataVector weights) {
    jsgppJNI.GaussHermiteQuadRule1D_getLevelPointsAndWeightsNormalized__SWIG_2(swigCPtr, this, level, DataVector.getCPtr(coordinates), coordinates, DataVector.getCPtr(weights), weights);
  }

  public static GaussHermiteQuadRule1D getInstance() {
    return new GaussHermiteQuadRule1D(jsgppJNI.GaussHermiteQuadRule1D_getInstance(), false);
  }

}
