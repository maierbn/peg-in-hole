/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package sgpp;

public class OptDifferentialEvolution extends OptUnconstrainedOptimizer {
  private transient long swigCPtr;

  protected OptDifferentialEvolution(long cPtr, boolean cMemoryOwn) {
    super(jsgppJNI.OptDifferentialEvolution_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(OptDifferentialEvolution obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        jsgppJNI.delete_OptDifferentialEvolution(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public OptDifferentialEvolution(OptScalarFunction f, long maxFcnEvalCount, long populationSize, double crossoverProbability, double scalingFactor, long idleGenerationsCount, double avgImprovementThreshold, double maxDistanceThreshold) {
    this(jsgppJNI.new_OptDifferentialEvolution__SWIG_0(OptScalarFunction.getCPtr(f), f, maxFcnEvalCount, populationSize, crossoverProbability, scalingFactor, idleGenerationsCount, avgImprovementThreshold, maxDistanceThreshold), true);
  }

  public OptDifferentialEvolution(OptScalarFunction f, long maxFcnEvalCount, long populationSize, double crossoverProbability, double scalingFactor, long idleGenerationsCount, double avgImprovementThreshold) {
    this(jsgppJNI.new_OptDifferentialEvolution__SWIG_1(OptScalarFunction.getCPtr(f), f, maxFcnEvalCount, populationSize, crossoverProbability, scalingFactor, idleGenerationsCount, avgImprovementThreshold), true);
  }

  public OptDifferentialEvolution(OptScalarFunction f, long maxFcnEvalCount, long populationSize, double crossoverProbability, double scalingFactor, long idleGenerationsCount) {
    this(jsgppJNI.new_OptDifferentialEvolution__SWIG_2(OptScalarFunction.getCPtr(f), f, maxFcnEvalCount, populationSize, crossoverProbability, scalingFactor, idleGenerationsCount), true);
  }

  public OptDifferentialEvolution(OptScalarFunction f, long maxFcnEvalCount, long populationSize, double crossoverProbability, double scalingFactor) {
    this(jsgppJNI.new_OptDifferentialEvolution__SWIG_3(OptScalarFunction.getCPtr(f), f, maxFcnEvalCount, populationSize, crossoverProbability, scalingFactor), true);
  }

  public OptDifferentialEvolution(OptScalarFunction f, long maxFcnEvalCount, long populationSize, double crossoverProbability) {
    this(jsgppJNI.new_OptDifferentialEvolution__SWIG_4(OptScalarFunction.getCPtr(f), f, maxFcnEvalCount, populationSize, crossoverProbability), true);
  }

  public OptDifferentialEvolution(OptScalarFunction f, long maxFcnEvalCount, long populationSize) {
    this(jsgppJNI.new_OptDifferentialEvolution__SWIG_5(OptScalarFunction.getCPtr(f), f, maxFcnEvalCount, populationSize), true);
  }

  public OptDifferentialEvolution(OptScalarFunction f, long maxFcnEvalCount) {
    this(jsgppJNI.new_OptDifferentialEvolution__SWIG_6(OptScalarFunction.getCPtr(f), f, maxFcnEvalCount), true);
  }

  public OptDifferentialEvolution(OptScalarFunction f) {
    this(jsgppJNI.new_OptDifferentialEvolution__SWIG_7(OptScalarFunction.getCPtr(f), f), true);
  }

  public OptDifferentialEvolution(OptDifferentialEvolution other) {
    this(jsgppJNI.new_OptDifferentialEvolution__SWIG_8(OptDifferentialEvolution.getCPtr(other), other), true);
  }

  public void optimize() {
    jsgppJNI.OptDifferentialEvolution_optimize(swigCPtr, this);
  }

  public long getPopulationSize() {
    return jsgppJNI.OptDifferentialEvolution_getPopulationSize(swigCPtr, this);
  }

  public void setPopulationSize(long populationSize) {
    jsgppJNI.OptDifferentialEvolution_setPopulationSize(swigCPtr, this, populationSize);
  }

  public void clone(SWIGTYPE_p_std__unique_ptrT_sgpp__optimization__optimizer__UnconstrainedOptimizer_t clone) {
    jsgppJNI.OptDifferentialEvolution_clone(swigCPtr, this, SWIGTYPE_p_std__unique_ptrT_sgpp__optimization__optimizer__UnconstrainedOptimizer_t.getCPtr(clone));
  }

  public final static double DEFAULT_CROSSOVER_PROBABILITY = jsgppJNI.OptDifferentialEvolution_DEFAULT_CROSSOVER_PROBABILITY_get();
  public final static double DEFAULT_SCALING_FACTOR = jsgppJNI.OptDifferentialEvolution_DEFAULT_SCALING_FACTOR_get();
  public final static long DEFAULT_IDLE_GENERATIONS_COUNT = jsgppJNI.OptDifferentialEvolution_DEFAULT_IDLE_GENERATIONS_COUNT_get();
  public final static double DEFAULT_AVG_IMPROVEMENT_THRESHOLD = jsgppJNI.OptDifferentialEvolution_DEFAULT_AVG_IMPROVEMENT_THRESHOLD_get();
  public final static double DEFAULT_MAX_DISTANCE_THRESHOLD = jsgppJNI.OptDifferentialEvolution_DEFAULT_MAX_DISTANCE_THRESHOLD_get();
}
