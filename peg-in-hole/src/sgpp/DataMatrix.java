/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package sgpp;

public class DataMatrix extends DoubleVector {
  private transient long swigCPtr;

  protected DataMatrix(long cPtr, boolean cMemoryOwn) {
    super(jsgppJNI.DataMatrix_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(DataMatrix obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        jsgppJNI.delete_DataMatrix(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public DataMatrix() {
    this(jsgppJNI.new_DataMatrix__SWIG_0(), true);
  }

  public DataMatrix(DataMatrix arg0) {
    this(jsgppJNI.new_DataMatrix__SWIG_1(DataMatrix.getCPtr(arg0), arg0), true);
  }

  public DataMatrix operatorAssignment(DataMatrix arg0) {
    return new DataMatrix(jsgppJNI.DataMatrix_operatorAssignment(swigCPtr, this, DataMatrix.getCPtr(arg0), arg0), false);
  }

  public DataMatrix(long nrows, long ncols) {
    this(jsgppJNI.new_DataMatrix__SWIG_2(nrows, ncols), true);
  }

  public DataMatrix(long nrows, long ncols, double value) {
    this(jsgppJNI.new_DataMatrix__SWIG_3(nrows, ncols, value), true);
  }

  public DataMatrix(SWIGTYPE_p_double input, long nrows, long ncols) {
    this(jsgppJNI.new_DataMatrix__SWIG_4(SWIGTYPE_p_double.getCPtr(input), nrows, ncols), true);
  }

  public static DataMatrix fromFile(String fileName) {
    return new DataMatrix(jsgppJNI.DataMatrix_fromFile(fileName), true);
  }

  public static DataMatrix fromString(String serializedVector) {
    return new DataMatrix(jsgppJNI.DataMatrix_fromString(serializedVector), true);
  }

  public void resize(long nrows) {
    jsgppJNI.DataMatrix_resize__SWIG_0(swigCPtr, this, nrows);
  }

  public void resizeRows(long nrows) {
    jsgppJNI.DataMatrix_resizeRows(swigCPtr, this, nrows);
  }

  public void resize(long nrows, long ncols) {
    jsgppJNI.DataMatrix_resize__SWIG_1(swigCPtr, this, nrows, ncols);
  }

  public void resizeRowsCols(long nrows, long ncols) {
    jsgppJNI.DataMatrix_resizeRowsCols(swigCPtr, this, nrows, ncols);
  }

  public void resizeQuadratic(long size) {
    jsgppJNI.DataMatrix_resizeQuadratic(swigCPtr, this, size);
  }

  public void resizeZero(long nrows) {
    jsgppJNI.DataMatrix_resizeZero__SWIG_0(swigCPtr, this, nrows);
  }

  public void resizeZero(long nrows, long ncols) {
    jsgppJNI.DataMatrix_resizeZero__SWIG_1(swigCPtr, this, nrows, ncols);
  }

  public void resizeToSubMatrix(long row_1, long col_1, long row_2, long col_2) {
    jsgppJNI.DataMatrix_resizeToSubMatrix(swigCPtr, this, row_1, col_1, row_2, col_2);
  }

  public void reserveAdditionalRows(long inc_nrows) {
    jsgppJNI.DataMatrix_reserveAdditionalRows(swigCPtr, this, inc_nrows);
  }

  public long appendRow() {
    return jsgppJNI.DataMatrix_appendRow__SWIG_0(swigCPtr, this);
  }

  public long appendRow(DataVector vec) {
    return jsgppJNI.DataMatrix_appendRow__SWIG_1(swigCPtr, this, DataVector.getCPtr(vec), vec);
  }

  public long appendCol(DataVector vec) {
    return jsgppJNI.DataMatrix_appendCol(swigCPtr, this, DataVector.getCPtr(vec), vec);
  }

  public void setAll(double value) {
    jsgppJNI.DataMatrix_setAll(swigCPtr, this, value);
  }

  public void copyFrom(DataMatrix matr) {
    jsgppJNI.DataMatrix_copyFrom(swigCPtr, this, DataMatrix.getCPtr(matr), matr);
  }

  public void transpose() {
    jsgppJNI.DataMatrix_transpose(swigCPtr, this);
  }

  public double get(long row, long col) {
    return jsgppJNI.DataMatrix_get(swigCPtr, this, row, col);
  }

  public void set(long row, long col, double value) {
    jsgppJNI.DataMatrix_set(swigCPtr, this, row, col, value);
  }

  public void getRow(long row, DataVector vec) {
    jsgppJNI.DataMatrix_getRow__SWIG_0(swigCPtr, this, row, DataVector.getCPtr(vec), vec);
  }

  public void getRow(long row, DoubleVector vec) {
    jsgppJNI.DataMatrix_getRow__SWIG_1(swigCPtr, this, row, DoubleVector.getCPtr(vec), vec);
  }

  public void setRow(long row, DataVector vec) {
    jsgppJNI.DataMatrix_setRow(swigCPtr, this, row, DataVector.getCPtr(vec), vec);
  }

  public void getColumn(long col, DataVector vec) {
    jsgppJNI.DataMatrix_getColumn(swigCPtr, this, col, DataVector.getCPtr(vec), vec);
  }

  public void setColumn(long col, DataVector vec) {
    jsgppJNI.DataMatrix_setColumn(swigCPtr, this, col, DataVector.getCPtr(vec), vec);
  }

  public void add(DataMatrix matr) {
    jsgppJNI.DataMatrix_add(swigCPtr, this, DataMatrix.getCPtr(matr), matr);
  }

  public void sub(DataMatrix matr) {
    jsgppJNI.DataMatrix_sub(swigCPtr, this, DataMatrix.getCPtr(matr), matr);
  }

  public void addReduce(DataVector reduction) {
    jsgppJNI.DataMatrix_addReduce__SWIG_0(swigCPtr, this, DataVector.getCPtr(reduction), reduction);
  }

  public void addReduce(DataVector reduction, DataVector beta, long start_beta) {
    jsgppJNI.DataMatrix_addReduce__SWIG_1(swigCPtr, this, DataVector.getCPtr(reduction), reduction, DataVector.getCPtr(beta), beta, start_beta);
  }

  public void expand(DataVector expand) {
    jsgppJNI.DataMatrix_expand(swigCPtr, this, DataVector.getCPtr(expand), expand);
  }

  public void componentwise_mult(DataMatrix matr) {
    jsgppJNI.DataMatrix_componentwise_mult(swigCPtr, this, DataMatrix.getCPtr(matr), matr);
  }

  public void componentwise_div(DataMatrix matr) {
    jsgppJNI.DataMatrix_componentwise_div(swigCPtr, this, DataMatrix.getCPtr(matr), matr);
  }

  public void mult(double scalar) {
    jsgppJNI.DataMatrix_mult__SWIG_0(swigCPtr, this, scalar);
  }

  public void mult(DataVector x, DataVector y) {
    jsgppJNI.DataMatrix_mult__SWIG_1(swigCPtr, this, DataVector.getCPtr(x), x, DataVector.getCPtr(y), y);
  }

  public void sqr() {
    jsgppJNI.DataMatrix_sqr(swigCPtr, this);
  }

  public void sqrt() {
    jsgppJNI.DataMatrix_sqrt(swigCPtr, this);
  }

  public void abs() {
    jsgppJNI.DataMatrix_abs(swigCPtr, this);
  }

  public double sum() {
    return jsgppJNI.DataMatrix_sum(swigCPtr, this);
  }

  public double min(long col) {
    return jsgppJNI.DataMatrix_min__SWIG_0(swigCPtr, this, col);
  }

  public double min() {
    return jsgppJNI.DataMatrix_min__SWIG_1(swigCPtr, this);
  }

  public double max(long col) {
    return jsgppJNI.DataMatrix_max__SWIG_0(swigCPtr, this, col);
  }

  public double max() {
    return jsgppJNI.DataMatrix_max__SWIG_1(swigCPtr, this);
  }

  public void minmax(long col, SWIGTYPE_p_double min, SWIGTYPE_p_double max) {
    jsgppJNI.DataMatrix_minmax__SWIG_0(swigCPtr, this, col, SWIGTYPE_p_double.getCPtr(min), SWIGTYPE_p_double.getCPtr(max));
  }

  public void minmax(SWIGTYPE_p_double min, SWIGTYPE_p_double max) {
    jsgppJNI.DataMatrix_minmax__SWIG_1(swigCPtr, this, SWIGTYPE_p_double.getCPtr(min), SWIGTYPE_p_double.getCPtr(max));
  }

  public long getSize() {
    return jsgppJNI.DataMatrix_getSize(swigCPtr, this);
  }

  public long getAdditionallyReservedRows() {
    return jsgppJNI.DataMatrix_getAdditionallyReservedRows(swigCPtr, this);
  }

  public long getNumberNonZero() {
    return jsgppJNI.DataMatrix_getNumberNonZero(swigCPtr, this);
  }

  public long getNrows() {
    return jsgppJNI.DataMatrix_getNrows(swigCPtr, this);
  }

  public long getNcols() {
    return jsgppJNI.DataMatrix_getNcols(swigCPtr, this);
  }

  public void normalizeDimension(long d) {
    jsgppJNI.DataMatrix_normalizeDimension__SWIG_0(swigCPtr, this, d);
  }

  public void normalizeDimension(long d, double border) {
    jsgppJNI.DataMatrix_normalizeDimension__SWIG_1(swigCPtr, this, d, border);
  }

  public void toString(SWIGTYPE_p_std__string text) {
    jsgppJNI.DataMatrix_toString__SWIG_0(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(text));
  }

  public void toFile(String fileName) {
    jsgppJNI.DataMatrix_toFile(swigCPtr, this, fileName);
  }

  public String toString() {
    return jsgppJNI.DataMatrix_toString__SWIG_1(swigCPtr, this);
  }

}
