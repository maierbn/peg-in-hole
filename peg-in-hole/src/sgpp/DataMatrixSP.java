/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package sgpp;

public class DataMatrixSP {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected DataMatrixSP(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(DataMatrixSP obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        jsgppJNI.delete_DataMatrixSP(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public DataMatrixSP(long nrows, long ncols) {
    this(jsgppJNI.new_DataMatrixSP__SWIG_0(nrows, ncols), true);
  }

  public DataMatrixSP(long nrows, long ncols, float value) {
    this(jsgppJNI.new_DataMatrixSP__SWIG_1(nrows, ncols, value), true);
  }

  public DataMatrixSP(DataMatrixSP matr) {
    this(jsgppJNI.new_DataMatrixSP__SWIG_2(DataMatrixSP.getCPtr(matr), matr), true);
  }

  public DataMatrixSP(SWIGTYPE_p_float input, long nrows, long ncols) {
    this(jsgppJNI.new_DataMatrixSP__SWIG_3(SWIGTYPE_p_float.getCPtr(input), nrows, ncols), true);
  }

  public void resize(long nrows) {
    jsgppJNI.DataMatrixSP_resize__SWIG_0(swigCPtr, this, nrows);
  }

  public void resize(long nrows, long ncols) {
    jsgppJNI.DataMatrixSP_resize__SWIG_1(swigCPtr, this, nrows, ncols);
  }

  public void resizeZero(long nrows) {
    jsgppJNI.DataMatrixSP_resizeZero__SWIG_0(swigCPtr, this, nrows);
  }

  public void resizeZero(long nrows, long ncols) {
    jsgppJNI.DataMatrixSP_resizeZero__SWIG_1(swigCPtr, this, nrows, ncols);
  }

  public void addSize(long inc_nrows) {
    jsgppJNI.DataMatrixSP_addSize(swigCPtr, this, inc_nrows);
  }

  public long appendRow() {
    return jsgppJNI.DataMatrixSP_appendRow__SWIG_0(swigCPtr, this);
  }

  public long appendRow(DataVectorSP vec) {
    return jsgppJNI.DataMatrixSP_appendRow__SWIG_1(swigCPtr, this, DataVectorSP.getCPtr(vec), vec);
  }

  public void setAll(float value) {
    jsgppJNI.DataMatrixSP_setAll(swigCPtr, this, value);
  }

  public void copyFrom(DataMatrixSP matr) {
    jsgppJNI.DataMatrixSP_copyFrom(swigCPtr, this, DataMatrixSP.getCPtr(matr), matr);
  }

  public void transpose() {
    jsgppJNI.DataMatrixSP_transpose(swigCPtr, this);
  }

  public DataMatrixSP operatorAssignment(DataMatrixSP matr) {
    return new DataMatrixSP(jsgppJNI.DataMatrixSP_operatorAssignment(swigCPtr, this, DataMatrixSP.getCPtr(matr), matr), false);
  }

  public float get(long row, long col) {
    return jsgppJNI.DataMatrixSP_get(swigCPtr, this, row, col);
  }

  public void set(long row, long col, float value) {
    jsgppJNI.DataMatrixSP_set(swigCPtr, this, row, col, value);
  }

  public void getRow(long row, DataVectorSP vec) {
    jsgppJNI.DataMatrixSP_getRow__SWIG_0(swigCPtr, this, row, DataVectorSP.getCPtr(vec), vec);
  }

  public void getRow(long row, FloatVector vec) {
    jsgppJNI.DataMatrixSP_getRow__SWIG_1(swigCPtr, this, row, FloatVector.getCPtr(vec), vec);
  }

  public void setRow(long row, DataVectorSP vec) {
    jsgppJNI.DataMatrixSP_setRow(swigCPtr, this, row, DataVectorSP.getCPtr(vec), vec);
  }

  public void getColumn(long col, DataVectorSP vec) {
    jsgppJNI.DataMatrixSP_getColumn(swigCPtr, this, col, DataVectorSP.getCPtr(vec), vec);
  }

  public void setColumn(long col, DataVectorSP vec) {
    jsgppJNI.DataMatrixSP_setColumn(swigCPtr, this, col, DataVectorSP.getCPtr(vec), vec);
  }

  public void add(DataMatrixSP matr) {
    jsgppJNI.DataMatrixSP_add(swigCPtr, this, DataMatrixSP.getCPtr(matr), matr);
  }

  public void sub(DataMatrixSP matr) {
    jsgppJNI.DataMatrixSP_sub(swigCPtr, this, DataMatrixSP.getCPtr(matr), matr);
  }

  public void addReduce(DataVectorSP reduction) {
    jsgppJNI.DataMatrixSP_addReduce__SWIG_0(swigCPtr, this, DataVectorSP.getCPtr(reduction), reduction);
  }

  public void addReduce(DataVectorSP reduction, DataVectorSP beta, long start_beta) {
    jsgppJNI.DataMatrixSP_addReduce__SWIG_1(swigCPtr, this, DataVectorSP.getCPtr(reduction), reduction, DataVectorSP.getCPtr(beta), beta, start_beta);
  }

  public void expand(DataVectorSP expand) {
    jsgppJNI.DataMatrixSP_expand(swigCPtr, this, DataVectorSP.getCPtr(expand), expand);
  }

  public void componentwise_mult(DataMatrixSP matr) {
    jsgppJNI.DataMatrixSP_componentwise_mult(swigCPtr, this, DataMatrixSP.getCPtr(matr), matr);
  }

  public void componentwise_div(DataMatrixSP matr) {
    jsgppJNI.DataMatrixSP_componentwise_div(swigCPtr, this, DataMatrixSP.getCPtr(matr), matr);
  }

  public void mult(DataVectorSP x, DataVectorSP y) {
    jsgppJNI.DataMatrixSP_mult__SWIG_0(swigCPtr, this, DataVectorSP.getCPtr(x), x, DataVectorSP.getCPtr(y), y);
  }

  public void mult(float scalar) {
    jsgppJNI.DataMatrixSP_mult__SWIG_1(swigCPtr, this, scalar);
  }

  public void sqr() {
    jsgppJNI.DataMatrixSP_sqr(swigCPtr, this);
  }

  public void sqrt() {
    jsgppJNI.DataMatrixSP_sqrt(swigCPtr, this);
  }

  public void abs() {
    jsgppJNI.DataMatrixSP_abs(swigCPtr, this);
  }

  public float sum() {
    return jsgppJNI.DataMatrixSP_sum(swigCPtr, this);
  }

  public float min(long col) {
    return jsgppJNI.DataMatrixSP_min__SWIG_0(swigCPtr, this, col);
  }

  public float min() {
    return jsgppJNI.DataMatrixSP_min__SWIG_1(swigCPtr, this);
  }

  public float max(long col) {
    return jsgppJNI.DataMatrixSP_max__SWIG_0(swigCPtr, this, col);
  }

  public float max() {
    return jsgppJNI.DataMatrixSP_max__SWIG_1(swigCPtr, this);
  }

  public void minmax(long col, SWIGTYPE_p_float min, SWIGTYPE_p_float max) {
    jsgppJNI.DataMatrixSP_minmax__SWIG_0(swigCPtr, this, col, SWIGTYPE_p_float.getCPtr(min), SWIGTYPE_p_float.getCPtr(max));
  }

  public void minmax(SWIGTYPE_p_float min, SWIGTYPE_p_float max) {
    jsgppJNI.DataMatrixSP_minmax__SWIG_1(swigCPtr, this, SWIGTYPE_p_float.getCPtr(min), SWIGTYPE_p_float.getCPtr(max));
  }

  public long getSize() {
    return jsgppJNI.DataMatrixSP_getSize(swigCPtr, this);
  }

  public long getUnused() {
    return jsgppJNI.DataMatrixSP_getUnused(swigCPtr, this);
  }

  public long getNumberNonZero() {
    return jsgppJNI.DataMatrixSP_getNumberNonZero(swigCPtr, this);
  }

  public long getNrows() {
    return jsgppJNI.DataMatrixSP_getNrows(swigCPtr, this);
  }

  public long getNcols() {
    return jsgppJNI.DataMatrixSP_getNcols(swigCPtr, this);
  }

  public long getInc() {
    return jsgppJNI.DataMatrixSP_getInc(swigCPtr, this);
  }

  public void setInc(long inc_rows) {
    jsgppJNI.DataMatrixSP_setInc(swigCPtr, this, inc_rows);
  }

  public void normalizeDimension(long d) {
    jsgppJNI.DataMatrixSP_normalizeDimension__SWIG_0(swigCPtr, this, d);
  }

  public void normalizeDimension(long d, float border) {
    jsgppJNI.DataMatrixSP_normalizeDimension__SWIG_1(swigCPtr, this, d, border);
  }

  public void toString(SWIGTYPE_p_std__string text) {
    jsgppJNI.DataMatrixSP_toString__SWIG_0(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(text));
  }

  public String toString() {
    return jsgppJNI.DataMatrixSP_toString__SWIG_1(swigCPtr, this);
  }

}
