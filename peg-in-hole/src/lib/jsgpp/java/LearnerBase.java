/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package sgpp;

public class LearnerBase {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected LearnerBase(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(LearnerBase obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        jsgppJNI.delete_LearnerBase(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public LearnerTiming train(DataMatrix trainDataset, DataVector classes, RegularGridConfiguration GridConfig, SLESolverConfiguration SolverConfigRefine, SLESolverConfiguration SolverConfigFinal, AdpativityConfiguration AdaptConfig, boolean testAccDuringAdapt, double lambdaRegularization, DataMatrix testDataset, DataVector testClasses) {
    return new LearnerTiming(jsgppJNI.LearnerBase_train__SWIG_0(swigCPtr, this, DataMatrix.getCPtr(trainDataset), trainDataset, DataVector.getCPtr(classes), classes, RegularGridConfiguration.getCPtr(GridConfig), GridConfig, SLESolverConfiguration.getCPtr(SolverConfigRefine), SolverConfigRefine, SLESolverConfiguration.getCPtr(SolverConfigFinal), SolverConfigFinal, AdpativityConfiguration.getCPtr(AdaptConfig), AdaptConfig, testAccDuringAdapt, lambdaRegularization, DataMatrix.getCPtr(testDataset), testDataset, DataVector.getCPtr(testClasses), testClasses), true);
  }

  public LearnerTiming train(DataMatrix trainDataset, DataVector classes, RegularGridConfiguration GridConfig, SLESolverConfiguration SolverConfigRefine, SLESolverConfiguration SolverConfigFinal, AdpativityConfiguration AdaptConfig, boolean testAccDuringAdapt, double lambdaRegularization, DataMatrix testDataset) {
    return new LearnerTiming(jsgppJNI.LearnerBase_train__SWIG_1(swigCPtr, this, DataMatrix.getCPtr(trainDataset), trainDataset, DataVector.getCPtr(classes), classes, RegularGridConfiguration.getCPtr(GridConfig), GridConfig, SLESolverConfiguration.getCPtr(SolverConfigRefine), SolverConfigRefine, SLESolverConfiguration.getCPtr(SolverConfigFinal), SolverConfigFinal, AdpativityConfiguration.getCPtr(AdaptConfig), AdaptConfig, testAccDuringAdapt, lambdaRegularization, DataMatrix.getCPtr(testDataset), testDataset), true);
  }

  public LearnerTiming train(DataMatrix trainDataset, DataVector classes, RegularGridConfiguration GridConfig, SLESolverConfiguration SolverConfigRefine, SLESolverConfiguration SolverConfigFinal, AdpativityConfiguration AdaptConfig, boolean testAccDuringAdapt, double lambdaRegularization) {
    return new LearnerTiming(jsgppJNI.LearnerBase_train__SWIG_2(swigCPtr, this, DataMatrix.getCPtr(trainDataset), trainDataset, DataVector.getCPtr(classes), classes, RegularGridConfiguration.getCPtr(GridConfig), GridConfig, SLESolverConfiguration.getCPtr(SolverConfigRefine), SolverConfigRefine, SLESolverConfiguration.getCPtr(SolverConfigFinal), SolverConfigFinal, AdpativityConfiguration.getCPtr(AdaptConfig), AdaptConfig, testAccDuringAdapt, lambdaRegularization), true);
  }

  public LearnerTiming train(DataMatrix trainDataset, DataVector classes, RegularGridConfiguration GridConfig, SLESolverConfiguration SolverConfig, double lambdaRegularization) {
    return new LearnerTiming(jsgppJNI.LearnerBase_train__SWIG_3(swigCPtr, this, DataMatrix.getCPtr(trainDataset), trainDataset, DataVector.getCPtr(classes), classes, RegularGridConfiguration.getCPtr(GridConfig), GridConfig, SLESolverConfiguration.getCPtr(SolverConfig), SolverConfig, lambdaRegularization), true);
  }

  public void predict(DataMatrix testDataset, DataVector classesComputed) {
    jsgppJNI.LearnerBase_predict(swigCPtr, this, DataMatrix.getCPtr(testDataset), testDataset, DataVector.getCPtr(classesComputed), classesComputed);
  }

  public void multTranspose(DataMatrix dataset, DataVector multiplier, DataVector result) {
    jsgppJNI.LearnerBase_multTranspose(swigCPtr, this, DataMatrix.getCPtr(dataset), dataset, DataVector.getCPtr(multiplier), multiplier, DataVector.getCPtr(result), result);
  }

  public double getAccuracy(DataMatrix testDataset, DataVector classesReference, double threshold) {
    return jsgppJNI.LearnerBase_getAccuracy__SWIG_0(swigCPtr, this, DataMatrix.getCPtr(testDataset), testDataset, DataVector.getCPtr(classesReference), classesReference, threshold);
  }

  public double getAccuracy(DataMatrix testDataset, DataVector classesReference) {
    return jsgppJNI.LearnerBase_getAccuracy__SWIG_1(swigCPtr, this, DataMatrix.getCPtr(testDataset), testDataset, DataVector.getCPtr(classesReference), classesReference);
  }

  public double getAccuracy(DataVector classesComputed, DataVector classesReference, double threshold) {
    return jsgppJNI.LearnerBase_getAccuracy__SWIG_2(swigCPtr, this, DataVector.getCPtr(classesComputed), classesComputed, DataVector.getCPtr(classesReference), classesReference, threshold);
  }

  public double getAccuracy(DataVector classesComputed, DataVector classesReference) {
    return jsgppJNI.LearnerBase_getAccuracy__SWIG_3(swigCPtr, this, DataVector.getCPtr(classesComputed), classesComputed, DataVector.getCPtr(classesReference), classesReference);
  }

  public ClassificatorQuality getCassificatorQuality(DataMatrix testDataset, DataVector classesReference, double threshold) {
    return new ClassificatorQuality(jsgppJNI.LearnerBase_getCassificatorQuality__SWIG_0(swigCPtr, this, DataMatrix.getCPtr(testDataset), testDataset, DataVector.getCPtr(classesReference), classesReference, threshold), true);
  }

  public ClassificatorQuality getCassificatorQuality(DataMatrix testDataset, DataVector classesReference) {
    return new ClassificatorQuality(jsgppJNI.LearnerBase_getCassificatorQuality__SWIG_1(swigCPtr, this, DataMatrix.getCPtr(testDataset), testDataset, DataVector.getCPtr(classesReference), classesReference), true);
  }

  public ClassificatorQuality getCassificatorQuality(DataVector classesComputed, DataVector classesReference, double threshold) {
    return new ClassificatorQuality(jsgppJNI.LearnerBase_getCassificatorQuality__SWIG_2(swigCPtr, this, DataVector.getCPtr(classesComputed), classesComputed, DataVector.getCPtr(classesReference), classesReference, threshold), true);
  }

  public ClassificatorQuality getCassificatorQuality(DataVector classesComputed, DataVector classesReference) {
    return new ClassificatorQuality(jsgppJNI.LearnerBase_getCassificatorQuality__SWIG_3(swigCPtr, this, DataVector.getCPtr(classesComputed), classesComputed, DataVector.getCPtr(classesReference), classesReference), true);
  }

  public void store(String tGridFilename, String tAlphaFilename) {
    jsgppJNI.LearnerBase_store(swigCPtr, this, tGridFilename, tAlphaFilename);
  }

  public void dumpGrid(String tFilename) {
    jsgppJNI.LearnerBase_dumpGrid(swigCPtr, this, tFilename);
  }

  public void dumpFunction(String tFilename, long resolution) {
    jsgppJNI.LearnerBase_dumpFunction(swigCPtr, this, tFilename, resolution);
  }

  public boolean getIsRegression() {
    return jsgppJNI.LearnerBase_getIsRegression(swigCPtr, this);
  }

  public boolean getIsVerbose() {
    return jsgppJNI.LearnerBase_getIsVerbose(swigCPtr, this);
  }

  public void setIsVerbose(boolean isVerbose) {
    jsgppJNI.LearnerBase_setIsVerbose(swigCPtr, this, isVerbose);
  }

  public IndexValVector getRefinementExecTimes() {
    return new IndexValVector(jsgppJNI.LearnerBase_getRefinementExecTimes(swigCPtr, this), true);
  }

  public Grid getGrid() {
    return new Grid(jsgppJNI.LearnerBase_getGrid(swigCPtr, this), false);
  }

  public DataVector getAlpha() {
    return new DataVector(jsgppJNI.LearnerBase_getAlpha(swigCPtr, this), false);
  }

  public void setReuseCoefficients(boolean reuseCoefficients) {
    jsgppJNI.LearnerBase_setReuseCoefficients(swigCPtr, this, reuseCoefficients);
  }

  public void setSolverVerbose(boolean solverVerbose) {
    jsgppJNI.LearnerBase_setSolverVerbose(swigCPtr, this, solverVerbose);
  }

}
