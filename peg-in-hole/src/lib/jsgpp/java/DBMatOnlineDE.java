/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package sgpp;

public class DBMatOnlineDE extends DBMatOnline {
  private transient long swigCPtr;

  protected DBMatOnlineDE(long cPtr, boolean cMemoryOwn) {
    super(jsgppJNI.DBMatOnlineDE_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(DBMatOnlineDE obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        jsgppJNI.delete_DBMatOnlineDE(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public void computeDensityFunction(DataMatrix m, boolean save_b, boolean do_cv, SWIGTYPE_p_std__listT_size_t_t deletedPoints, long newPoints) {
    jsgppJNI.DBMatOnlineDE_computeDensityFunction__SWIG_0(swigCPtr, this, DataMatrix.getCPtr(m), m, save_b, do_cv, SWIGTYPE_p_std__listT_size_t_t.getCPtr(deletedPoints), newPoints);
  }

  public void computeDensityFunction(DataMatrix m, boolean save_b, boolean do_cv, SWIGTYPE_p_std__listT_size_t_t deletedPoints) {
    jsgppJNI.DBMatOnlineDE_computeDensityFunction__SWIG_1(swigCPtr, this, DataMatrix.getCPtr(m), m, save_b, do_cv, SWIGTYPE_p_std__listT_size_t_t.getCPtr(deletedPoints));
  }

  public void computeDensityFunction(DataMatrix m, boolean save_b, boolean do_cv) {
    jsgppJNI.DBMatOnlineDE_computeDensityFunction__SWIG_2(swigCPtr, this, DataMatrix.getCPtr(m), m, save_b, do_cv);
  }

  public void computeDensityFunction(DataMatrix m, boolean save_b) {
    jsgppJNI.DBMatOnlineDE_computeDensityFunction__SWIG_3(swigCPtr, this, DataMatrix.getCPtr(m), m, save_b);
  }

  public void computeDensityFunction(DataMatrix m) {
    jsgppJNI.DBMatOnlineDE_computeDensityFunction__SWIG_4(swigCPtr, this, DataMatrix.getCPtr(m), m);
  }

  public double eval(DataVector p, boolean force) {
    return jsgppJNI.DBMatOnlineDE_eval__SWIG_0(swigCPtr, this, DataVector.getCPtr(p), p, force);
  }

  public double eval(DataVector p) {
    return jsgppJNI.DBMatOnlineDE_eval__SWIG_1(swigCPtr, this, DataVector.getCPtr(p), p);
  }

  public void eval(DataMatrix values, DataVector results, boolean force) {
    jsgppJNI.DBMatOnlineDE_eval__SWIG_2(swigCPtr, this, DataMatrix.getCPtr(values), values, DataVector.getCPtr(results), results, force);
  }

  public void eval(DataMatrix values, DataVector results) {
    jsgppJNI.DBMatOnlineDE_eval__SWIG_3(swigCPtr, this, DataMatrix.getCPtr(values), values, DataVector.getCPtr(results), results);
  }

  public DataVector getAlpha() {
    return new DataVector(jsgppJNI.DBMatOnlineDE_getAlpha(swigCPtr, this), false);
  }

  public void updateAlpha(SWIGTYPE_p_std__listT_size_t_t deletedPoints, long newPoints) {
    jsgppJNI.DBMatOnlineDE_updateAlpha(swigCPtr, this, SWIGTYPE_p_std__listT_size_t_t.getCPtr(deletedPoints), newPoints);
  }

  public boolean isComputed() {
    return jsgppJNI.DBMatOnlineDE_isComputed(swigCPtr, this);
  }

  public void setCrossValidationParameters(int lambda_step, double lambda_start, double lambda_end, DataMatrix test, DataMatrix test_cc, boolean logscale) {
    jsgppJNI.DBMatOnlineDE_setCrossValidationParameters(swigCPtr, this, lambda_step, lambda_start, lambda_end, DataMatrix.getCPtr(test), test, DataMatrix.getCPtr(test_cc), test_cc, logscale);
  }

  public double getBestLambda() {
    return jsgppJNI.DBMatOnlineDE_getBestLambda(swigCPtr, this);
  }

  public void setBeta(double beta) {
    jsgppJNI.DBMatOnlineDE_setBeta(swigCPtr, this, beta);
  }

  public double getBeta() {
    return jsgppJNI.DBMatOnlineDE_getBeta(swigCPtr, this);
  }

  public double normalize(long samples) {
    return jsgppJNI.DBMatOnlineDE_normalize__SWIG_0(swigCPtr, this, samples);
  }

  public double normalize() {
    return jsgppJNI.DBMatOnlineDE_normalize__SWIG_1(swigCPtr, this);
  }

  public double normalizeQuadrature() {
    return jsgppJNI.DBMatOnlineDE_normalizeQuadrature(swigCPtr, this);
  }

}
