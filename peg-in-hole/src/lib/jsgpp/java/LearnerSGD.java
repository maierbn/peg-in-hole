/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package sgpp;

public class LearnerSGD {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected LearnerSGD(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(LearnerSGD obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        jsgppJNI.delete_LearnerSGD(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public LearnerSGD(RegularGridConfiguration gridConfig, AdpativityConfiguration adaptivityConfig, DataMatrix pTrainData, DataVector pTrainLabels, DataMatrix pTestData, DataVector pTestLabels, DataMatrix pValData, DataVector pValLabels, double lambda, double gamma, long batchSize, boolean useValidData) {
    this(jsgppJNI.new_LearnerSGD(RegularGridConfiguration.getCPtr(gridConfig), gridConfig, AdpativityConfiguration.getCPtr(adaptivityConfig), adaptivityConfig, DataMatrix.getCPtr(pTrainData), pTrainData, DataVector.getCPtr(pTrainLabels), pTrainLabels, DataMatrix.getCPtr(pTestData), pTestData, DataVector.getCPtr(pTestLabels), pTestLabels, DataMatrix.getCPtr(pValData), pValData, DataVector.getCPtr(pValLabels), pValLabels, lambda, gamma, batchSize, useValidData), true);
  }

  public void initialize() {
    jsgppJNI.LearnerSGD_initialize(swigCPtr, this);
  }

  public void train(long maxDataPasses, String refType, String refMonitor, long refPeriod, double errorDeclineThreshold, long errorDeclineBufferSize, long minRefInterval) {
    jsgppJNI.LearnerSGD_train(swigCPtr, this, maxDataPasses, refType, refMonitor, refPeriod, errorDeclineThreshold, errorDeclineBufferSize, minRefInterval);
  }

  public double getAccuracy(DataMatrix testData, DataVector testLabels, double threshold) {
    return jsgppJNI.LearnerSGD_getAccuracy(swigCPtr, this, DataMatrix.getCPtr(testData), testData, DataVector.getCPtr(testLabels), testLabels, threshold);
  }

  public void storeResults(DataMatrix testDataset) {
    jsgppJNI.LearnerSGD_storeResults(swigCPtr, this, DataMatrix.getCPtr(testDataset), testDataset);
  }

  public void setError(double value) {
    jsgppJNI.LearnerSGD_error_set(swigCPtr, this, value);
  }

  public double getError() {
    return jsgppJNI.LearnerSGD_error_get(swigCPtr, this);
  }

  public void setAvgErrors(DataVector value) {
    jsgppJNI.LearnerSGD_avgErrors_set(swigCPtr, this, DataVector.getCPtr(value), value);
  }

  public DataVector getAvgErrors() {
    long cPtr = jsgppJNI.LearnerSGD_avgErrors_get(swigCPtr, this);
    return (cPtr == 0) ? null : new DataVector(cPtr, false);
  }

}
