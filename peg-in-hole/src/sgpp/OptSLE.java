/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package sgpp;

public class OptSLE {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected OptSLE(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(OptSLE obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        jsgppJNI.delete_OptSLE(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  protected void swigDirectorDisconnect() {
    swigCMemOwn = false;
    delete();
  }

  public void swigReleaseOwnership() {
    swigCMemOwn = false;
    jsgppJNI.OptSLE_change_ownership(this, swigCPtr, false);
  }

  public void swigTakeOwnership() {
    swigCMemOwn = true;
    jsgppJNI.OptSLE_change_ownership(this, swigCPtr, true);
  }

  public OptSLE() {
    this(jsgppJNI.new_OptSLE(), true);
    jsgppJNI.OptSLE_director_connect(this, swigCPtr, swigCMemOwn, true);
  }

  public boolean isMatrixEntryNonZero(long i, long j) {
    return jsgppJNI.OptSLE_isMatrixEntryNonZero(swigCPtr, this, i, j);
  }

  public double getMatrixEntry(long i, long j) {
    return jsgppJNI.OptSLE_getMatrixEntry(swigCPtr, this, i, j);
  }

  public void matrixVectorMultiplication(DataVector x, DataVector y) {
    if (getClass() == OptSLE.class) jsgppJNI.OptSLE_matrixVectorMultiplication(swigCPtr, this, DataVector.getCPtr(x), x, DataVector.getCPtr(y), y); else jsgppJNI.OptSLE_matrixVectorMultiplicationSwigExplicitOptSLE(swigCPtr, this, DataVector.getCPtr(x), x, DataVector.getCPtr(y), y);
  }

  public long countNNZ() {
    return (getClass() == OptSLE.class) ? jsgppJNI.OptSLE_countNNZ(swigCPtr, this) : jsgppJNI.OptSLE_countNNZSwigExplicitOptSLE(swigCPtr, this);
  }

  public long getDimension() {
    return jsgppJNI.OptSLE_getDimension(swigCPtr, this);
  }

  public boolean isCloneable() {
    return (getClass() == OptSLE.class) ? jsgppJNI.OptSLE_isCloneable(swigCPtr, this) : jsgppJNI.OptSLE_isCloneableSwigExplicitOptSLE(swigCPtr, this);
  }

}
