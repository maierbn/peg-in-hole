/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package sgpp;

public class EllipticPDESolver extends PDESolver {
  private transient long swigCPtr;

  protected EllipticPDESolver(long cPtr, boolean cMemoryOwn) {
    super(jsgppJNI.EllipticPDESolver_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(EllipticPDESolver obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        jsgppJNI.delete_EllipticPDESolver(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public void solvePDE(DataVector alpha, DataVector rhs, long maxCGIterations, double epsilonCG, boolean verbose) {
    jsgppJNI.EllipticPDESolver_solvePDE__SWIG_0(swigCPtr, this, DataVector.getCPtr(alpha), alpha, DataVector.getCPtr(rhs), rhs, maxCGIterations, epsilonCG, verbose);
  }

  public void solvePDE(DataVector alpha, DataVector rhs, long maxCGIterations, double epsilonCG) {
    jsgppJNI.EllipticPDESolver_solvePDE__SWIG_1(swigCPtr, this, DataVector.getCPtr(alpha), alpha, DataVector.getCPtr(rhs), rhs, maxCGIterations, epsilonCG);
  }

}
