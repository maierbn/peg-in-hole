/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package sgpp;

public class OptTestScalarFunction extends OptScalarFunction {
  private transient long swigCPtr;

  protected OptTestScalarFunction(long cPtr, boolean cMemoryOwn) {
    super(jsgppJNI.OptTestScalarFunction_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(OptTestScalarFunction obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        jsgppJNI.delete_OptTestScalarFunction(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public double eval(DataVector x) {
    return jsgppJNI.OptTestScalarFunction_eval(swigCPtr, this, DataVector.getCPtr(x), x);
  }

  public double evalUndisplaced(DataVector x) {
    return jsgppJNI.OptTestScalarFunction_evalUndisplaced(swigCPtr, this, DataVector.getCPtr(x), x);
  }

  public DataVector getDisplacement() {
    return new DataVector(jsgppJNI.OptTestScalarFunction_getDisplacement(swigCPtr, this), false);
  }

  public void setDisplacement(DataVector displacement) {
    jsgppJNI.OptTestScalarFunction_setDisplacement(swigCPtr, this, DataVector.getCPtr(displacement), displacement);
  }

}
