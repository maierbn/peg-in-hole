/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package sgpp;

public final class GridType {
  public final static GridType Linear = new GridType("Linear");
  public final static GridType LinearStretched = new GridType("LinearStretched");
  public final static GridType LinearL0Boundary = new GridType("LinearL0Boundary");
  public final static GridType LinearBoundary = new GridType("LinearBoundary");
  public final static GridType LinearStretchedBoundary = new GridType("LinearStretchedBoundary");
  public final static GridType LinearTruncatedBoundary = new GridType("LinearTruncatedBoundary");
  public final static GridType ModLinear = new GridType("ModLinear");
  public final static GridType Poly = new GridType("Poly");
  public final static GridType PolyBoundary = new GridType("PolyBoundary");
  public final static GridType ModPoly = new GridType("ModPoly");
  public final static GridType ModWavelet = new GridType("ModWavelet");
  public final static GridType ModBspline = new GridType("ModBspline");
  public final static GridType Prewavelet = new GridType("Prewavelet");
  public final static GridType SquareRoot = new GridType("SquareRoot");
  public final static GridType Periodic = new GridType("Periodic");
  public final static GridType LinearClenshawCurtis = new GridType("LinearClenshawCurtis");
  public final static GridType Bspline = new GridType("Bspline");
  public final static GridType BsplineBoundary = new GridType("BsplineBoundary");
  public final static GridType BsplineClenshawCurtis = new GridType("BsplineClenshawCurtis");
  public final static GridType Wavelet = new GridType("Wavelet");
  public final static GridType WaveletBoundary = new GridType("WaveletBoundary");
  public final static GridType FundamentalSpline = new GridType("FundamentalSpline");
  public final static GridType ModFundamentalSpline = new GridType("ModFundamentalSpline");
  public final static GridType ModBsplineClenshawCurtis = new GridType("ModBsplineClenshawCurtis");
  public final static GridType LinearStencil = new GridType("LinearStencil");
  public final static GridType ModLinearStencil = new GridType("ModLinearStencil");

  public final int swigValue() {
    return swigValue;
  }

  public String toString() {
    return swigName;
  }

  public static GridType swigToEnum(int swigValue) {
    if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
      return swigValues[swigValue];
    for (int i = 0; i < swigValues.length; i++)
      if (swigValues[i].swigValue == swigValue)
        return swigValues[i];
    throw new IllegalArgumentException("No enum " + GridType.class + " with value " + swigValue);
  }

  private GridType(String swigName) {
    this.swigName = swigName;
    this.swigValue = swigNext++;
  }

  private GridType(String swigName, int swigValue) {
    this.swigName = swigName;
    this.swigValue = swigValue;
    swigNext = swigValue+1;
  }

  private GridType(String swigName, GridType swigEnum) {
    this.swigName = swigName;
    this.swigValue = swigEnum.swigValue;
    swigNext = this.swigValue+1;
  }

  private static GridType[] swigValues = { Linear, LinearStretched, LinearL0Boundary, LinearBoundary, LinearStretchedBoundary, LinearTruncatedBoundary, ModLinear, Poly, PolyBoundary, ModPoly, ModWavelet, ModBspline, Prewavelet, SquareRoot, Periodic, LinearClenshawCurtis, Bspline, BsplineBoundary, BsplineClenshawCurtis, Wavelet, WaveletBoundary, FundamentalSpline, ModFundamentalSpline, ModBsplineClenshawCurtis, LinearStencil, ModLinearStencil };
  private static int swigNext = 0;
  private final int swigValue;
  private final String swigName;
}

