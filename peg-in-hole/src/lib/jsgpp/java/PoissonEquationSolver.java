/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package sgpp;

public class PoissonEquationSolver extends EllipticPDESolver {
  private transient long swigCPtr;

  protected PoissonEquationSolver(long cPtr, boolean cMemoryOwn) {
    super(jsgppJNI.PoissonEquationSolver_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(PoissonEquationSolver obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        jsgppJNI.delete_PoissonEquationSolver(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public PoissonEquationSolver() {
    this(jsgppJNI.new_PoissonEquationSolver(), true);
  }

  public void constructGrid(BoundingBox myBoundingBox, long level) {
    jsgppJNI.PoissonEquationSolver_constructGrid(swigCPtr, this, BoundingBox.getCPtr(myBoundingBox), myBoundingBox, level);
  }

  public void solvePDE(DataVector alpha, DataVector rhs, long maxCGIterations, double epsilonCG, boolean verbose) {
    jsgppJNI.PoissonEquationSolver_solvePDE__SWIG_0(swigCPtr, this, DataVector.getCPtr(alpha), alpha, DataVector.getCPtr(rhs), rhs, maxCGIterations, epsilonCG, verbose);
  }

  public void solvePDE(DataVector alpha, DataVector rhs, long maxCGIterations, double epsilonCG) {
    jsgppJNI.PoissonEquationSolver_solvePDE__SWIG_1(swigCPtr, this, DataVector.getCPtr(alpha), alpha, DataVector.getCPtr(rhs), rhs, maxCGIterations, epsilonCG);
  }

  public void initGridWithSmoothHeat(DataVector alpha, double mu, double sigma, double factor) {
    jsgppJNI.PoissonEquationSolver_initGridWithSmoothHeat(swigCPtr, this, DataVector.getCPtr(alpha), alpha, mu, sigma, factor);
  }

  public void initGridWithSmoothHeatFullDomain(DataVector alpha, double mu, double sigma, double factor) {
    jsgppJNI.PoissonEquationSolver_initGridWithSmoothHeatFullDomain(swigCPtr, this, DataVector.getCPtr(alpha), alpha, mu, sigma, factor);
  }

  public void initGridWithExpHeat(DataVector alpha, double factor) {
    jsgppJNI.PoissonEquationSolver_initGridWithExpHeat__SWIG_0(swigCPtr, this, DataVector.getCPtr(alpha), alpha, factor);
  }

  public void initGridWithExpHeat(DataVector alpha) {
    jsgppJNI.PoissonEquationSolver_initGridWithExpHeat__SWIG_1(swigCPtr, this, DataVector.getCPtr(alpha), alpha);
  }

  public void initGridWithExpHeatFullDomain(DataVector alpha, double factor) {
    jsgppJNI.PoissonEquationSolver_initGridWithExpHeatFullDomain__SWIG_0(swigCPtr, this, DataVector.getCPtr(alpha), alpha, factor);
  }

  public void initGridWithExpHeatFullDomain(DataVector alpha) {
    jsgppJNI.PoissonEquationSolver_initGridWithExpHeatFullDomain__SWIG_1(swigCPtr, this, DataVector.getCPtr(alpha), alpha);
  }

  public void storeInnerRHS(DataVector alpha, String tFilename) {
    jsgppJNI.PoissonEquationSolver_storeInnerRHS(swigCPtr, this, DataVector.getCPtr(alpha), alpha, tFilename);
  }

  public void storeInnerSolution(DataVector alpha, long maxCGIterations, double epsilonCG, String tFilename) {
    jsgppJNI.PoissonEquationSolver_storeInnerSolution(swigCPtr, this, DataVector.getCPtr(alpha), alpha, maxCGIterations, epsilonCG, tFilename);
  }

  public void initScreen() {
    jsgppJNI.PoissonEquationSolver_initScreen(swigCPtr, this);
  }

}
