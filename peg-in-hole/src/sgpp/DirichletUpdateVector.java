/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package sgpp;

public class DirichletUpdateVector {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected DirichletUpdateVector(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(DirichletUpdateVector obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        jsgppJNI.delete_DirichletUpdateVector(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public DirichletUpdateVector(GridStorage storage) {
    this(jsgppJNI.new_DirichletUpdateVector(GridStorage.getCPtr(storage), storage), true);
  }

  public void applyDirichletConditions(DataVector updateVector, DataVector sourceVector) {
    jsgppJNI.DirichletUpdateVector_applyDirichletConditions(swigCPtr, this, DataVector.getCPtr(updateVector), updateVector, DataVector.getCPtr(sourceVector), sourceVector);
  }

  public void setBoundariesToZero(DataVector updateVector) {
    jsgppJNI.DirichletUpdateVector_setBoundariesToZero(swigCPtr, this, DataVector.getCPtr(updateVector), updateVector);
  }

  public void setInnerPointsToZero(DataVector updateVector) {
    jsgppJNI.DirichletUpdateVector_setInnerPointsToZero(swigCPtr, this, DataVector.getCPtr(updateVector), updateVector);
  }

  public void multiplyBoundaryVector(DataVector updateVector, DataVector factor) {
    jsgppJNI.DirichletUpdateVector_multiplyBoundaryVector(swigCPtr, this, DataVector.getCPtr(updateVector), updateVector, DataVector.getCPtr(factor), factor);
  }

  public void multiplyBoundary(DataVector updateVector, double value) {
    jsgppJNI.DirichletUpdateVector_multiplyBoundary(swigCPtr, this, DataVector.getCPtr(updateVector), updateVector, value);
  }

  public void multiply(DataVector updateVector, double value, SWIGTYPE_p_f_p_sgpp__base__HashGridPoint_r_sgpp__base__HashGridStorage__bool predicate) {
    jsgppJNI.DirichletUpdateVector_multiply(swigCPtr, this, DataVector.getCPtr(updateVector), updateVector, value, SWIGTYPE_p_f_p_sgpp__base__HashGridPoint_r_sgpp__base__HashGridStorage__bool.getCPtr(predicate));
  }

}
