/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package sgpp;

public class DataVector extends DoubleVector {
  private transient long swigCPtr;

  protected DataVector(long cPtr, boolean cMemoryOwn) {
    super(jsgppJNI.DataVector_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(DataVector obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        jsgppJNI.delete_DataVector(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public DataVector() {
    this(jsgppJNI.new_DataVector__SWIG_0(), true);
  }

  public DataVector(DataVector arg0) {
    this(jsgppJNI.new_DataVector__SWIG_1(DataVector.getCPtr(arg0), arg0), true);
  }

  public DataVector operatorAssignment(DataVector arg0) {
    return new DataVector(jsgppJNI.DataVector_operatorAssignment(swigCPtr, this, DataVector.getCPtr(arg0), arg0), false);
  }

  public DataVector(long size) {
    this(jsgppJNI.new_DataVector__SWIG_2(size), true);
  }

  public DataVector(long size, double value) {
    this(jsgppJNI.new_DataVector__SWIG_3(size, value), true);
  }

  public DataVector(SWIGTYPE_p_double input, long size) {
    this(jsgppJNI.new_DataVector__SWIG_4(SWIGTYPE_p_double.getCPtr(input), size), true);
  }

  public DataVector(DoubleVector input) {
    this(jsgppJNI.new_DataVector__SWIG_5(DoubleVector.getCPtr(input), input), true);
  }

  public DataVector(SWIGTYPE_p_std__vectorT_int_t input) {
    this(jsgppJNI.new_DataVector__SWIG_6(SWIGTYPE_p_std__vectorT_int_t.getCPtr(input)), true);
  }

  public static DataVector fromFile(String fileName) {
    return new DataVector(jsgppJNI.DataVector_fromFile(fileName), true);
  }

  public static DataVector fromString(String serializedVector) {
    return new DataVector(jsgppJNI.DataVector_fromString(serializedVector), true);
  }

  public void resizeZero(long nrows) {
    jsgppJNI.DataVector_resizeZero(swigCPtr, this, nrows);
  }

  public void restructure(SizeTVector remainingIndex) {
    jsgppJNI.DataVector_restructure(swigCPtr, this, SizeTVector.getCPtr(remainingIndex), remainingIndex);
  }

  public long append() {
    return jsgppJNI.DataVector_append__SWIG_0(swigCPtr, this);
  }

  public long append(double value) {
    return jsgppJNI.DataVector_append__SWIG_1(swigCPtr, this, value);
  }

  public void insert(long index, double value) {
    jsgppJNI.DataVector_insert(swigCPtr, this, index, value);
  }

  public void setAll(double value) {
    jsgppJNI.DataVector_setAll(swigCPtr, this, value);
  }

  public double get(long i) {
    return jsgppJNI.DataVector_get(swigCPtr, this, i);
  }

  public void set(long i, double value) {
    jsgppJNI.DataVector_set(swigCPtr, this, i, value);
  }

  public void copyFrom(DataVector vec) {
    jsgppJNI.DataVector_copyFrom(swigCPtr, this, DataVector.getCPtr(vec), vec);
  }

  public void add(DataVector vec) {
    jsgppJNI.DataVector_add(swigCPtr, this, DataVector.getCPtr(vec), vec);
  }

  public void accumulate(DataVector vec) {
    jsgppJNI.DataVector_accumulate(swigCPtr, this, DataVector.getCPtr(vec), vec);
  }

  public void sub(DataVector vec) {
    jsgppJNI.DataVector_sub(swigCPtr, this, DataVector.getCPtr(vec), vec);
  }

  public void componentwise_mult(DataVector vec) {
    jsgppJNI.DataVector_componentwise_mult(swigCPtr, this, DataVector.getCPtr(vec), vec);
  }

  public void componentwise_div(DataVector vec) {
    jsgppJNI.DataVector_componentwise_div(swigCPtr, this, DataVector.getCPtr(vec), vec);
  }

  public double dotProduct(DataVector vec) {
    return jsgppJNI.DataVector_dotProduct(swigCPtr, this, DataVector.getCPtr(vec), vec);
  }

  public void mult(double scalar) {
    jsgppJNI.DataVector_mult(swigCPtr, this, scalar);
  }

  public void sqr() {
    jsgppJNI.DataVector_sqr(swigCPtr, this);
  }

  public void sqrt() {
    jsgppJNI.DataVector_sqrt(swigCPtr, this);
  }

  public void abs() {
    jsgppJNI.DataVector_abs(swigCPtr, this);
  }

  public double sum() {
    return jsgppJNI.DataVector_sum(swigCPtr, this);
  }

  public double maxNorm() {
    return jsgppJNI.DataVector_maxNorm(swigCPtr, this);
  }

  public double RMSNorm() {
    return jsgppJNI.DataVector_RMSNorm(swigCPtr, this);
  }

  public double l2Norm() {
    return jsgppJNI.DataVector_l2Norm(swigCPtr, this);
  }

  public double min() {
    return jsgppJNI.DataVector_min(swigCPtr, this);
  }

  public double max() {
    return jsgppJNI.DataVector_max(swigCPtr, this);
  }

  public void minmax(SWIGTYPE_p_double min, SWIGTYPE_p_double max) {
    jsgppJNI.DataVector_minmax(swigCPtr, this, SWIGTYPE_p_double.getCPtr(min), SWIGTYPE_p_double.getCPtr(max));
  }

  public void axpy(double a, DataVector x) {
    jsgppJNI.DataVector_axpy(swigCPtr, this, a, DataVector.getCPtr(x), x);
  }

  public long getSize() {
    return jsgppJNI.DataVector_getSize(swigCPtr, this);
  }

  public long getNumberNonZero() {
    return jsgppJNI.DataVector_getNumberNonZero(swigCPtr, this);
  }

  public void partitionClasses(double threshold) {
    jsgppJNI.DataVector_partitionClasses(swigCPtr, this, threshold);
  }

  public void normalize() {
    jsgppJNI.DataVector_normalize__SWIG_0(swigCPtr, this);
  }

  public void normalize(double border) {
    jsgppJNI.DataVector_normalize__SWIG_1(swigCPtr, this, border);
  }

  public void toString(SWIGTYPE_p_std__string text) {
    jsgppJNI.DataVector_toString__SWIG_0(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(text));
  }

  public String toString() {
    return jsgppJNI.DataVector_toString__SWIG_1(swigCPtr, this);
  }

  public void toFile(String fileName) {
    jsgppJNI.DataVector_toFile(swigCPtr, this, fileName);
  }

}
