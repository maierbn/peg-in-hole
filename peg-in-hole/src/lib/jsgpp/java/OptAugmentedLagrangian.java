/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package sgpp;

public class OptAugmentedLagrangian extends OptConstrainedOptimizer {
  private transient long swigCPtr;

  protected OptAugmentedLagrangian(long cPtr, boolean cMemoryOwn) {
    super(jsgppJNI.OptAugmentedLagrangian_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(OptAugmentedLagrangian obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        jsgppJNI.delete_OptAugmentedLagrangian(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public OptAugmentedLagrangian(OptScalarFunction f, OptScalarFunctionGradient fGradient, OptVectorFunction g, OptVectorFunctionGradient gGradient, OptVectorFunction h, OptVectorFunctionGradient hGradient, long maxItCount, double xTolerance, double constraintTolerance, double penaltyStartValue, double penaltyIncreaseFactor) {
    this(jsgppJNI.new_OptAugmentedLagrangian__SWIG_0(OptScalarFunction.getCPtr(f), f, OptScalarFunctionGradient.getCPtr(fGradient), fGradient, OptVectorFunction.getCPtr(g), g, OptVectorFunctionGradient.getCPtr(gGradient), gGradient, OptVectorFunction.getCPtr(h), h, OptVectorFunctionGradient.getCPtr(hGradient), hGradient, maxItCount, xTolerance, constraintTolerance, penaltyStartValue, penaltyIncreaseFactor), true);
  }

  public OptAugmentedLagrangian(OptScalarFunction f, OptScalarFunctionGradient fGradient, OptVectorFunction g, OptVectorFunctionGradient gGradient, OptVectorFunction h, OptVectorFunctionGradient hGradient, long maxItCount, double xTolerance, double constraintTolerance, double penaltyStartValue) {
    this(jsgppJNI.new_OptAugmentedLagrangian__SWIG_1(OptScalarFunction.getCPtr(f), f, OptScalarFunctionGradient.getCPtr(fGradient), fGradient, OptVectorFunction.getCPtr(g), g, OptVectorFunctionGradient.getCPtr(gGradient), gGradient, OptVectorFunction.getCPtr(h), h, OptVectorFunctionGradient.getCPtr(hGradient), hGradient, maxItCount, xTolerance, constraintTolerance, penaltyStartValue), true);
  }

  public OptAugmentedLagrangian(OptScalarFunction f, OptScalarFunctionGradient fGradient, OptVectorFunction g, OptVectorFunctionGradient gGradient, OptVectorFunction h, OptVectorFunctionGradient hGradient, long maxItCount, double xTolerance, double constraintTolerance) {
    this(jsgppJNI.new_OptAugmentedLagrangian__SWIG_2(OptScalarFunction.getCPtr(f), f, OptScalarFunctionGradient.getCPtr(fGradient), fGradient, OptVectorFunction.getCPtr(g), g, OptVectorFunctionGradient.getCPtr(gGradient), gGradient, OptVectorFunction.getCPtr(h), h, OptVectorFunctionGradient.getCPtr(hGradient), hGradient, maxItCount, xTolerance, constraintTolerance), true);
  }

  public OptAugmentedLagrangian(OptScalarFunction f, OptScalarFunctionGradient fGradient, OptVectorFunction g, OptVectorFunctionGradient gGradient, OptVectorFunction h, OptVectorFunctionGradient hGradient, long maxItCount, double xTolerance) {
    this(jsgppJNI.new_OptAugmentedLagrangian__SWIG_3(OptScalarFunction.getCPtr(f), f, OptScalarFunctionGradient.getCPtr(fGradient), fGradient, OptVectorFunction.getCPtr(g), g, OptVectorFunctionGradient.getCPtr(gGradient), gGradient, OptVectorFunction.getCPtr(h), h, OptVectorFunctionGradient.getCPtr(hGradient), hGradient, maxItCount, xTolerance), true);
  }

  public OptAugmentedLagrangian(OptScalarFunction f, OptScalarFunctionGradient fGradient, OptVectorFunction g, OptVectorFunctionGradient gGradient, OptVectorFunction h, OptVectorFunctionGradient hGradient, long maxItCount) {
    this(jsgppJNI.new_OptAugmentedLagrangian__SWIG_4(OptScalarFunction.getCPtr(f), f, OptScalarFunctionGradient.getCPtr(fGradient), fGradient, OptVectorFunction.getCPtr(g), g, OptVectorFunctionGradient.getCPtr(gGradient), gGradient, OptVectorFunction.getCPtr(h), h, OptVectorFunctionGradient.getCPtr(hGradient), hGradient, maxItCount), true);
  }

  public OptAugmentedLagrangian(OptScalarFunction f, OptScalarFunctionGradient fGradient, OptVectorFunction g, OptVectorFunctionGradient gGradient, OptVectorFunction h, OptVectorFunctionGradient hGradient) {
    this(jsgppJNI.new_OptAugmentedLagrangian__SWIG_5(OptScalarFunction.getCPtr(f), f, OptScalarFunctionGradient.getCPtr(fGradient), fGradient, OptVectorFunction.getCPtr(g), g, OptVectorFunctionGradient.getCPtr(gGradient), gGradient, OptVectorFunction.getCPtr(h), h, OptVectorFunctionGradient.getCPtr(hGradient), hGradient), true);
  }

  public OptAugmentedLagrangian(OptAugmentedLagrangian other) {
    this(jsgppJNI.new_OptAugmentedLagrangian__SWIG_6(OptAugmentedLagrangian.getCPtr(other), other), true);
  }

  public void optimize() {
    jsgppJNI.OptAugmentedLagrangian_optimize(swigCPtr, this);
  }

  public DataVector findFeasiblePoint() {
    return new DataVector(jsgppJNI.OptAugmentedLagrangian_findFeasiblePoint(swigCPtr, this), true);
  }

  public OptScalarFunctionGradient getObjectiveGradient() {
    return new OptScalarFunctionGradient(jsgppJNI.OptAugmentedLagrangian_getObjectiveGradient(swigCPtr, this), false);
  }

  public OptVectorFunctionGradient getInequalityConstraintGradient() {
    return new OptVectorFunctionGradient(jsgppJNI.OptAugmentedLagrangian_getInequalityConstraintGradient(swigCPtr, this), false);
  }

  public OptVectorFunctionGradient getEqualityConstraintGradient() {
    return new OptVectorFunctionGradient(jsgppJNI.OptAugmentedLagrangian_getEqualityConstraintGradient(swigCPtr, this), false);
  }

  public double getXTolerance() {
    return jsgppJNI.OptAugmentedLagrangian_getXTolerance(swigCPtr, this);
  }

  public void setXTolerance(double xTolerance) {
    jsgppJNI.OptAugmentedLagrangian_setXTolerance(swigCPtr, this, xTolerance);
  }

  public double getConstraintTolerance() {
    return jsgppJNI.OptAugmentedLagrangian_getConstraintTolerance(swigCPtr, this);
  }

  public void setConstraintTolerance(double constraintTolerance) {
    jsgppJNI.OptAugmentedLagrangian_setConstraintTolerance(swigCPtr, this, constraintTolerance);
  }

  public double getPenaltyStartValue() {
    return jsgppJNI.OptAugmentedLagrangian_getPenaltyStartValue(swigCPtr, this);
  }

  public void setPenaltyStartValue(double penaltyStartValue) {
    jsgppJNI.OptAugmentedLagrangian_setPenaltyStartValue(swigCPtr, this, penaltyStartValue);
  }

  public double getPenaltyIncreaseFactor() {
    return jsgppJNI.OptAugmentedLagrangian_getPenaltyIncreaseFactor(swigCPtr, this);
  }

  public void setPenaltyIncreaseFactor(double penaltyIncreaseFactor) {
    jsgppJNI.OptAugmentedLagrangian_setPenaltyIncreaseFactor(swigCPtr, this, penaltyIncreaseFactor);
  }

  public DataMatrix getHistoryOfInnerIterationPoints() {
    return new DataMatrix(jsgppJNI.OptAugmentedLagrangian_getHistoryOfInnerIterationPoints(swigCPtr, this), false);
  }

  public SizeTVector getHistoryOfInnerIterationNumbers() {
    return new SizeTVector(jsgppJNI.OptAugmentedLagrangian_getHistoryOfInnerIterationNumbers(swigCPtr, this), false);
  }

  public void clone(SWIGTYPE_p_std__unique_ptrT_sgpp__optimization__optimizer__UnconstrainedOptimizer_t clone) {
    jsgppJNI.OptAugmentedLagrangian_clone(swigCPtr, this, SWIGTYPE_p_std__unique_ptrT_sgpp__optimization__optimizer__UnconstrainedOptimizer_t.getCPtr(clone));
  }

  public final static double DEFAULT_X_TOLERANCE = jsgppJNI.OptAugmentedLagrangian_DEFAULT_X_TOLERANCE_get();
  public final static double DEFAULT_CONSTRAINT_TOLERANCE = jsgppJNI.OptAugmentedLagrangian_DEFAULT_CONSTRAINT_TOLERANCE_get();
  public final static double DEFAULT_PENALTY_START_VALUE = jsgppJNI.OptAugmentedLagrangian_DEFAULT_PENALTY_START_VALUE_get();
  public final static double DEFAULT_PENALTY_INCREASE_FACTOR = jsgppJNI.OptAugmentedLagrangian_DEFAULT_PENALTY_INCREASE_FACTOR_get();
}
