/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif

#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Java proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED) || defined(DEBUG_DIRECTOR_EXCEPTION)
#include <iostream>
#endif

#include <exception>

namespace Swig {

  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(NULL), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = NULL;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global || !mem_own; // hold as weak global if explicitly requested or not owned
        if (jobj)
          jthis_ = weak_global_ ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, NULL) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = NULL;
      weak_global_ = true;
    }

    /* Only call peek if you know what you are doing wrt to weak/global references */
    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else {
	/* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

  /* Local JNI reference deleter */
  class LocalRefGuard {
    JNIEnv *jenv_;
    jobject jobj_;

    // non-copyable
    LocalRefGuard(const LocalRefGuard &);
    LocalRefGuard &operator=(const LocalRefGuard &);
  public:
    LocalRefGuard(JNIEnv *jenv, jobject jobj): jenv_(jenv), jobj_(jobj) {}
    ~LocalRefGuard() {
      if (jobj_)
        jenv_->DeleteLocalRef(jobj_);
    }
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
      int env_status;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(0), env_status(0) {
#if defined(__ANDROID__)
        JNIEnv **jenv = &jenv_;
#else
        void **jenv = (void **)&jenv_;
#endif
        env_status = director_->swig_jvm_->GetEnv((void **)&jenv_, JNI_VERSION_1_2);
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon(jenv, NULL);
#else
        director_->swig_jvm_->AttachCurrentThread(jenv, NULL);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        if (env_status == JNI_EDETACHED)
          director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.get(jenv);
      LocalRefGuard ref_deleter(jenv, jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) NULL), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };

  // Zero initialized bool array
  template<size_t N> class BoolArray {
    bool array_[N];
  public:
    BoolArray() {
      memset(array_, 0, sizeof(array_));
    }
    bool& operator[](size_t n) {
      return array_[n];
    }
    bool operator[](size_t n) const {
      return array_[n];
    }
  };

  // Utility classes and functions for exception handling.

  // Simple holder for a Java string during exception handling, providing access to a c-style string
  class JavaString {
  public:
    JavaString(JNIEnv *jenv, jstring jstr) : jenv_(jenv), jstr_(jstr), cstr_(0) {
      if (jenv_ && jstr_)
	cstr_ = (const char *) jenv_->GetStringUTFChars(jstr_, NULL);
    }

    ~JavaString() {
      if (jenv_ && jstr_ && cstr_)
	jenv_->ReleaseStringUTFChars(jstr_, cstr_);
    }

    const char *c_str(const char *null_string = "null JavaString") const {
      return cstr_ ? cstr_ : null_string;
    }

  private:
    // non-copyable
    JavaString(const JavaString &);
    JavaString &operator=(const JavaString &);

    JNIEnv *jenv_;
    jstring jstr_;
    const char *cstr_;
  };

  // Helper class to extract the exception message from a Java throwable
  class JavaExceptionMessage {
  public:
    JavaExceptionMessage(JNIEnv *jenv, jthrowable throwable) : message_(jenv, exceptionMessageFromThrowable(jenv, throwable)) {
    }

    const char *message() const {
      return message_.c_str("Could not get exception message in JavaExceptionMessage");
    }

  private:
    // non-copyable
    JavaExceptionMessage(const JavaExceptionMessage &);
    JavaExceptionMessage &operator=(const JavaExceptionMessage &);

    // Get exception message by calling Java method Throwable.getMessage()
    static jstring exceptionMessageFromThrowable(JNIEnv *jenv, jthrowable throwable) {
      jstring jmsg = NULL;
      if (jenv && throwable) {
	jenv->ExceptionClear(); // Cannot invoke methods with any pending exceptions
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  // All Throwable classes have a getMessage() method, so call it to extract the exception message
	  jmethodID getMessageMethodID = jenv->GetMethodID(throwclz, "getMessage", "()Ljava/lang/String;");
	  if (getMessageMethodID)
	    jmsg = (jstring)jenv->CallObjectMethod(throwable, getMessageMethodID);
	}
	if (jmsg == NULL && jenv->ExceptionCheck())
	  jenv->ExceptionClear();
      }
      return jmsg;
    }

    JavaString message_;
  };

  // C++ Exception class for handling Java exceptions thrown during a director method Java upcall
  class DirectorException : public std::exception {
  public:

    // Construct exception from a Java throwable
    DirectorException(JNIEnv *jenv, jthrowable throwable) : classname_(0), msg_(0) {

      // Call Java method Object.getClass().getName() to obtain the throwable's class name (delimited by '/')
      if (throwable) {
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  jclass clzclz = jenv->GetObjectClass(throwclz);
	  if (clzclz) {
	    jmethodID getNameMethodID = jenv->GetMethodID(clzclz, "getName", "()Ljava/lang/String;");
	    if (getNameMethodID) {
	      jstring jstr_classname = (jstring)(jenv->CallObjectMethod(throwclz, getNameMethodID));
              // Copy strings, since there is no guarantee that jenv will be active when handled
              if (jstr_classname) {
                JavaString jsclassname(jenv, jstr_classname);
                const char *classname = jsclassname.c_str(0);
                if (classname)
                  classname_ = copypath(classname);
              }
	    }
	  }
	}
      }

      JavaExceptionMessage exceptionmsg(jenv, throwable);
      msg_ = copystr(exceptionmsg.message());
    }

    // More general constructor for handling as a java.lang.RuntimeException
    DirectorException(const char *msg) : classname_(0), msg_(copystr(msg ? msg : "Unspecified DirectorException message")) {
    }

    ~DirectorException() throw() {
      delete[] classname_;
      delete[] msg_;
    }

    const char *what() const throw() {
      return msg_;
    }

    // Reconstruct and raise/throw the Java Exception that caused the DirectorException
    // Note that any error in the JNI exception handling results in a Java RuntimeException
    void raiseJavaException(JNIEnv *jenv) const {
      if (jenv) {
	jenv->ExceptionClear();

	jmethodID ctorMethodID = 0;
	jclass throwableclass = 0;
        if (classname_) {
          throwableclass = jenv->FindClass(classname_);
          if (throwableclass)
            ctorMethodID = jenv->GetMethodID(throwableclass, "<init>", "(Ljava/lang/String;)V");
	}

	if (ctorMethodID) {
	  jenv->ThrowNew(throwableclass, what());
	} else {
	  SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, what());
	}
      }
    }

  private:
    static char *copypath(const char *srcmsg) {
      char *target = copystr(srcmsg);
      for (char *c=target; *c; ++c) {
        if ('.' == *c)
          *c = '/';
      }
      return target;
    }

    static char *copystr(const char *srcmsg) {
      char *target = 0;
      if (srcmsg) {
	size_t msglen = strlen(srcmsg) + 1;
	target = new char[msglen];
	strncpy(target, srcmsg, msglen);
      }
      return target;
    }

    const char *classname_;
    const char *msg_;
  };

  // Helper method to determine if a Java throwable matches a particular Java class type
  SWIGINTERN bool ExceptionMatches(JNIEnv *jenv, jthrowable throwable, const char *classname) {
    bool matches = false;

    if (throwable && jenv && classname) {
      // Exceptions need to be cleared for correct behavior.
      // The caller of ExceptionMatches should restore pending exceptions if desired -
      // the caller already has the throwable.
      jenv->ExceptionClear();

      jclass clz = jenv->FindClass(classname);
      if (clz) {
	jclass classclz = jenv->GetObjectClass(clz);
	jmethodID isInstanceMethodID = jenv->GetMethodID(classclz, "isInstance", "(Ljava/lang/Object;)Z");
	if (isInstanceMethodID) {
	  matches = jenv->CallBooleanMethod(clz, isInstanceMethodID, throwable) != 0;
	}
      }

#if defined(DEBUG_DIRECTOR_EXCEPTION)
      if (jenv->ExceptionCheck()) {
        // Typically occurs when an invalid classname argument is passed resulting in a ClassNotFoundException
        JavaExceptionMessage exc(jenv, jenv->ExceptionOccurred());
        std::cout << "Error: ExceptionMatches: class '" << classname << "' : " << exc.message() << std::endl;
      }
#endif
    }
    return matches;
  }
}

namespace Swig {
  namespace {
    jclass jclass_jsgppJNI = NULL;
    jmethodID director_method_ids[29];
  }
}

#include <stdexcept>


#include <string>


#include <vector>
#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>


SWIGINTERN void SWIG_JavaException(JNIEnv *jenv, int code, const char *msg) {
  SWIG_JavaExceptionCodes exception_code = SWIG_JavaUnknownError;
  switch(code) {
  case SWIG_MemoryError:
    exception_code = SWIG_JavaOutOfMemoryError;
    break;
  case SWIG_IOError:
    exception_code = SWIG_JavaIOException;
    break;
  case SWIG_SystemError:
  case SWIG_RuntimeError:
    exception_code = SWIG_JavaRuntimeException;
    break;
  case SWIG_OverflowError:
  case SWIG_IndexError:
    exception_code = SWIG_JavaIndexOutOfBoundsException;
    break;
  case SWIG_DivisionByZero:
    exception_code = SWIG_JavaArithmeticException;
    break;
  case SWIG_SyntaxError:
  case SWIG_ValueError:
  case SWIG_TypeError:
    exception_code = SWIG_JavaIllegalArgumentException;
    break;
  case SWIG_UnknownError:
  default:
    exception_code = SWIG_JavaUnknownError;
    break;
  }
  SWIG_JavaThrowException(jenv, exception_code, msg);
}


#include <stdexcept>


#include <utility>


#include <stdint.h>		// Use the C99 official header


#include <omp.h>


#include "sgpp_base.hpp"
#ifdef SG_PDE
#include "sgpp_pde.hpp"
#endif
#ifdef SG_FINANCE
#include "sgpp_finance.hpp"
#endif
#ifdef SG_SOLVER
#include "sgpp_solver.hpp"
#endif
#ifdef SG_DATADRIVEN
#include "sgpp_datadriven.hpp"
#endif
#ifdef SG_PARALLEL
#include "sgpp_parallel.hpp"
#endif
#ifdef SG_COMBIGRID
#include "sgpp_combigrid.hpp"
#endif
#ifdef SG_QUADRATURE
#include "sgpp_quadrature.hpp"
#endif
#ifdef SG_OPTIMIZATION
#include "sgpp_optimization.hpp"
#endif
#ifdef SG_MISC
#include "sgpp_misc.hpp"
#endif

SWIGINTERN std::vector< double >::const_reference std_vector_Sl_double_Sg__get(std::vector< double > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_double_Sg__set(std::vector< double > *self,int i,std::vector< double >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< float >::const_reference std_vector_Sl_float_Sg__get(std::vector< float > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_float_Sg__set(std::vector< float > *self,int i,std::vector< float >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::pair< size_t,double > >::const_reference std_vector_Sl_std_pair_Sl_size_t_Sc_double_Sg__Sg__get(std::vector< std::pair< size_t,double > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_pair_Sl_size_t_Sc_double_Sg__Sg__set(std::vector< std::pair< size_t,double > > *self,int i,std::vector< std::pair< size_t,double > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< size_t >::const_reference std_vector_Sl_size_t_Sg__get(std::vector< size_t > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_size_t_Sg__set(std::vector< size_t > *self,int i,std::vector< size_t >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN sgpp::base::Grid *sgpp_base_Grid_createMemento(sgpp::base::Grid *self){
    return self;
  }
SWIGINTERN sgpp::base::Grid *sgpp_base_Grid_setMemento(std::string &istr){
    return sgpp::base::Grid::unserialize(istr);
  }
SWIGINTERN int sgpp_base_Grid_getDegree(sgpp::base::Grid *self){
        if (self->getType() == sgpp::base::GridType::Poly) {
            return ((sgpp::base::PolyGrid*) self)->getDegree();
        };
        if (self->getType() == sgpp::base::GridType::PolyBoundary) {
            return ((sgpp::base::PolyBoundaryGrid*) self)->getDegree();
        };
        if (self->getType() == sgpp::base::GridType::ModPoly) {
            return ((sgpp::base::ModPolyGrid*) self)->getDegree();
        };
        return 1;
    }
SWIGINTERN std::vector< sgpp::base::BoundingBox1D >::const_reference std_vector_Sl_sgpp_base_BoundingBox1D_Sg__get(std::vector< sgpp::base::BoundingBox1D > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_sgpp_base_BoundingBox1D_Sg__set(std::vector< sgpp::base::BoundingBox1D > *self,int i,std::vector< sgpp::base::BoundingBox1D >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< sgpp::base::Stretching1D >::const_reference std_vector_Sl_sgpp_base_Stretching1D_Sg__get(std::vector< sgpp::base::Stretching1D > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_sgpp_base_Stretching1D_Sg__set(std::vector< sgpp::base::Stretching1D > *self,int i,std::vector< sgpp::base::Stretching1D >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

#include <sgpp/solver/TypesSolver.hpp>


#ifdef USEARMADILLO
    const bool ARMADILLO_ENABLED = true;
#else
    const bool ARMADILLO_ENABLED = false;
#endif
    
#ifdef USEEIGEN
    const bool EIGEN_ENABLED = true;
#else
    const bool EIGEN_ENABLED = false;
#endif
    
#ifdef USEGMMPP
    const bool GMMPP_ENABLED = true;
#else
    const bool GMMPP_ENABLED = false;
#endif
    
#ifdef USEUMFPACK
    const bool UMFPACK_ENABLED = true;
#else
    const bool UMFPACK_ENABLED = false;
#endif



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "jsgpp_wrap.h"

SwigDirector_ConjugateGradients::SwigDirector_ConjugateGradients(JNIEnv *jenv, size_t imax, double epsilon) : sgpp::solver::ConjugateGradients(imax, epsilon), Swig::Director(jenv) {
}

SwigDirector_ConjugateGradients::~SwigDirector_ConjugateGradients() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_ConjugateGradients::solve(sgpp::base::OperationMatrix &SystemMatrix, sgpp::base::DataVector &alpha, sgpp::base::DataVector &b, bool reuse, bool verbose, double max_threshold) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jSystemMatrix = 0 ;
  jlong jalpha = 0 ;
  jlong jb = 0 ;
  jboolean jreuse  ;
  jboolean jverbose  ;
  jdouble jmax_threshold  ;
  
  if (!swig_override[0]) {
    sgpp::solver::ConjugateGradients::solve(SystemMatrix,alpha,b,reuse,verbose,max_threshold);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(sgpp::base::OperationMatrix **)&jSystemMatrix = (sgpp::base::OperationMatrix *) &SystemMatrix; 
    *(sgpp::base::DataVector **)&jalpha = (sgpp::base::DataVector *) &alpha; 
    *(sgpp::base::DataVector **)&jb = (sgpp::base::DataVector *) &b; 
    jreuse = (jboolean) reuse;
    jverbose = (jboolean) verbose;
    jmax_threshold = (jdouble) max_threshold;
    jenv->CallStaticVoidMethod(Swig::jclass_jsgppJNI, Swig::director_method_ids[0], swigjobj, jSystemMatrix, jalpha, jb, jreuse, jverbose, jmax_threshold);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in sgpp::solver::ConjugateGradients::solve ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ConjugateGradients::starting() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[4]) {
    sgpp::solver::ConjugateGradients::starting();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_jsgppJNI, Swig::director_method_ids[4], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in sgpp::solver::ConjugateGradients::starting ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ConjugateGradients::calcStarting() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[5]) {
    sgpp::solver::ConjugateGradients::calcStarting();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_jsgppJNI, Swig::director_method_ids[5], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in sgpp::solver::ConjugateGradients::calcStarting ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ConjugateGradients::iterationComplete() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[6]) {
    sgpp::solver::ConjugateGradients::iterationComplete();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_jsgppJNI, Swig::director_method_ids[6], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in sgpp::solver::ConjugateGradients::iterationComplete ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ConjugateGradients::complete() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[7]) {
    sgpp::solver::ConjugateGradients::complete();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_jsgppJNI, Swig::director_method_ids[7], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in sgpp::solver::ConjugateGradients::complete ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ConjugateGradients::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "solve", "(Lsgpp/OperationMatrix;Lsgpp/DataVector;Lsgpp/DataVector;ZZD)V", NULL 
    },
    {
      "solve", "(Lsgpp/OperationMatrix;Lsgpp/DataVector;Lsgpp/DataVector;ZZ)V", NULL 
    },
    {
      "solve", "(Lsgpp/OperationMatrix;Lsgpp/DataVector;Lsgpp/DataVector;Z)V", NULL 
    },
    {
      "solve", "(Lsgpp/OperationMatrix;Lsgpp/DataVector;Lsgpp/DataVector;)V", NULL 
    },
    {
      "starting", "()V", NULL 
    },
    {
      "calcStarting", "()V", NULL 
    },
    {
      "iterationComplete", "()V", NULL 
    },
    {
      "complete", "()V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("sgpp/ConjugateGradients");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 8; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_OptScalarFunction::SwigDirector_OptScalarFunction(JNIEnv *jenv, size_t d) : sgpp::optimization::ScalarFunction(d), Swig::Director(jenv) {
}

SwigDirector_OptScalarFunction::~SwigDirector_OptScalarFunction() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


double SwigDirector_OptScalarFunction::eval(sgpp::base::DataVector const &x) {
  double c_result = SwigValueInit< double >() ;
  jdouble jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jx = 0 ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method sgpp::optimization::ScalarFunction::eval.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(sgpp::base::DataVector **)&jx = (sgpp::base::DataVector *) &x; 
    jresult = (jdouble) jenv->CallStaticDoubleMethod(Swig::jclass_jsgppJNI, Swig::director_method_ids[8], swigjobj, jx);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (double)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in sgpp::optimization::ScalarFunction::eval ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_OptScalarFunction::clone(std::unique_ptr< sgpp::optimization::ScalarFunction > &clone) const {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jclone = 0 ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method sgpp::optimization::ScalarFunction::clone.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    {
      clone = std::unique_ptr<sgpp::optimization::ScalarFunction>(
        new SwigDirector_OptScalarFunction(*this));
      return;
    }
    jenv->CallStaticVoidMethod(Swig::jclass_jsgppJNI, Swig::director_method_ids[9], swigjobj, jclone);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in sgpp::optimization::ScalarFunction::clone ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_OptScalarFunction::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "eval", "(Lsgpp/DataVector;)D", NULL 
    },
    {
      "clone", "(Lsgpp/SWIGTYPE_p_std__unique_ptrT_sgpp__optimization__ScalarFunction_t;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("sgpp/OptScalarFunction");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 2; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_OptScalarFunctionGradient::SwigDirector_OptScalarFunctionGradient(JNIEnv *jenv, size_t d) : sgpp::optimization::ScalarFunctionGradient(d), Swig::Director(jenv) {
}

SwigDirector_OptScalarFunctionGradient::~SwigDirector_OptScalarFunctionGradient() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


double SwigDirector_OptScalarFunctionGradient::eval(sgpp::base::DataVector const &x, sgpp::base::DataVector &gradient) {
  double c_result = SwigValueInit< double >() ;
  jdouble jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jx = 0 ;
  jlong jgradient = 0 ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method sgpp::optimization::ScalarFunctionGradient::eval.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(sgpp::base::DataVector **)&jx = (sgpp::base::DataVector *) &x; 
    *(sgpp::base::DataVector **)&jgradient = (sgpp::base::DataVector *) &gradient; 
    jresult = (jdouble) jenv->CallStaticDoubleMethod(Swig::jclass_jsgppJNI, Swig::director_method_ids[10], swigjobj, jx, jgradient);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (double)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in sgpp::optimization::ScalarFunctionGradient::eval ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_OptScalarFunctionGradient::clone(std::unique_ptr< sgpp::optimization::ScalarFunctionGradient > &clone) const {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jclone = 0 ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method sgpp::optimization::ScalarFunctionGradient::clone.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    {
      clone = std::unique_ptr<sgpp::optimization::ScalarFunctionGradient>(
        new SwigDirector_OptScalarFunctionGradient(*this));
      return;
    }
    jenv->CallStaticVoidMethod(Swig::jclass_jsgppJNI, Swig::director_method_ids[11], swigjobj, jclone);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in sgpp::optimization::ScalarFunctionGradient::clone ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_OptScalarFunctionGradient::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "eval", "(Lsgpp/DataVector;Lsgpp/DataVector;)D", NULL 
    },
    {
      "clone", "(Lsgpp/SWIGTYPE_p_std__unique_ptrT_sgpp__optimization__ScalarFunctionGradient_t;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("sgpp/OptScalarFunctionGradient");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 2; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_OptScalarFunctionHessian::SwigDirector_OptScalarFunctionHessian(JNIEnv *jenv, size_t d) : sgpp::optimization::ScalarFunctionHessian(d), Swig::Director(jenv) {
}

SwigDirector_OptScalarFunctionHessian::~SwigDirector_OptScalarFunctionHessian() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


double SwigDirector_OptScalarFunctionHessian::eval(sgpp::base::DataVector const &x, sgpp::base::DataVector &gradient, sgpp::base::DataMatrix &hessian) {
  double c_result = SwigValueInit< double >() ;
  jdouble jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jx = 0 ;
  jlong jgradient = 0 ;
  jlong jhessian = 0 ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method sgpp::optimization::ScalarFunctionHessian::eval.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(sgpp::base::DataVector **)&jx = (sgpp::base::DataVector *) &x; 
    *(sgpp::base::DataVector **)&jgradient = (sgpp::base::DataVector *) &gradient; 
    *(sgpp::base::DataMatrix **)&jhessian = (sgpp::base::DataMatrix *) &hessian; 
    jresult = (jdouble) jenv->CallStaticDoubleMethod(Swig::jclass_jsgppJNI, Swig::director_method_ids[12], swigjobj, jx, jgradient, jhessian);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (double)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in sgpp::optimization::ScalarFunctionHessian::eval ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_OptScalarFunctionHessian::clone(std::unique_ptr< sgpp::optimization::ScalarFunctionHessian > &clone) const {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jclone = 0 ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method sgpp::optimization::ScalarFunctionHessian::clone.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    {
      clone = std::unique_ptr<sgpp::optimization::ScalarFunctionHessian>(
        new SwigDirector_OptScalarFunctionHessian(*this));
      return;
    }
    jenv->CallStaticVoidMethod(Swig::jclass_jsgppJNI, Swig::director_method_ids[13], swigjobj, jclone);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in sgpp::optimization::ScalarFunctionHessian::clone ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_OptScalarFunctionHessian::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "eval", "(Lsgpp/DataVector;Lsgpp/DataVector;Lsgpp/DataMatrix;)D", NULL 
    },
    {
      "clone", "(Lsgpp/SWIGTYPE_p_std__unique_ptrT_sgpp__optimization__ScalarFunctionHessian_t;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("sgpp/OptScalarFunctionHessian");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 2; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_OptVectorFunction::SwigDirector_OptVectorFunction(JNIEnv *jenv, size_t d, size_t m) : sgpp::optimization::VectorFunction(d, m), Swig::Director(jenv) {
}

SwigDirector_OptVectorFunction::~SwigDirector_OptVectorFunction() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_OptVectorFunction::eval(sgpp::base::DataVector const &x, sgpp::base::DataVector &value) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jx = 0 ;
  jlong jvalue = 0 ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method sgpp::optimization::VectorFunction::eval.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(sgpp::base::DataVector **)&jx = (sgpp::base::DataVector *) &x; 
    *(sgpp::base::DataVector **)&jvalue = (sgpp::base::DataVector *) &value; 
    jenv->CallStaticVoidMethod(Swig::jclass_jsgppJNI, Swig::director_method_ids[14], swigjobj, jx, jvalue);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in sgpp::optimization::VectorFunction::eval ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_OptVectorFunction::clone(std::unique_ptr< sgpp::optimization::VectorFunction > &clone) const {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jclone = 0 ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method sgpp::optimization::VectorFunction::clone.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    {
      clone = std::unique_ptr<sgpp::optimization::VectorFunction>(
        new SwigDirector_OptVectorFunction(*this));
      return;
    }
    jenv->CallStaticVoidMethod(Swig::jclass_jsgppJNI, Swig::director_method_ids[15], swigjobj, jclone);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in sgpp::optimization::VectorFunction::clone ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_OptVectorFunction::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "eval", "(Lsgpp/DataVector;Lsgpp/DataVector;)V", NULL 
    },
    {
      "clone", "(Lsgpp/SWIGTYPE_p_std__unique_ptrT_sgpp__optimization__VectorFunction_t;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("sgpp/OptVectorFunction");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 2; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_OptVectorFunctionGradient::SwigDirector_OptVectorFunctionGradient(JNIEnv *jenv, size_t d, size_t m) : sgpp::optimization::VectorFunctionGradient(d, m), Swig::Director(jenv) {
}

SwigDirector_OptVectorFunctionGradient::~SwigDirector_OptVectorFunctionGradient() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_OptVectorFunctionGradient::eval(sgpp::base::DataVector const &x, sgpp::base::DataVector &value, sgpp::base::DataMatrix &gradient) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jx = 0 ;
  jlong jvalue = 0 ;
  jlong jgradient = 0 ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method sgpp::optimization::VectorFunctionGradient::eval.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(sgpp::base::DataVector **)&jx = (sgpp::base::DataVector *) &x; 
    *(sgpp::base::DataVector **)&jvalue = (sgpp::base::DataVector *) &value; 
    *(sgpp::base::DataMatrix **)&jgradient = (sgpp::base::DataMatrix *) &gradient; 
    jenv->CallStaticVoidMethod(Swig::jclass_jsgppJNI, Swig::director_method_ids[16], swigjobj, jx, jvalue, jgradient);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in sgpp::optimization::VectorFunctionGradient::eval ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_OptVectorFunctionGradient::clone(std::unique_ptr< sgpp::optimization::VectorFunctionGradient > &clone) const {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jclone = 0 ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method sgpp::optimization::VectorFunctionGradient::clone.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    {
      clone = std::unique_ptr<sgpp::optimization::VectorFunctionGradient>(
        new SwigDirector_OptVectorFunctionGradient(*this));
      return;
    }
    jenv->CallStaticVoidMethod(Swig::jclass_jsgppJNI, Swig::director_method_ids[17], swigjobj, jclone);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in sgpp::optimization::VectorFunctionGradient::clone ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_OptVectorFunctionGradient::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "eval", "(Lsgpp/DataVector;Lsgpp/DataVector;Lsgpp/DataMatrix;)V", NULL 
    },
    {
      "clone", "(Lsgpp/SWIGTYPE_p_std__unique_ptrT_sgpp__optimization__VectorFunctionGradient_t;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("sgpp/OptVectorFunctionGradient");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 2; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_OptVectorFunctionHessian::SwigDirector_OptVectorFunctionHessian(JNIEnv *jenv, size_t d, size_t m) : sgpp::optimization::VectorFunctionHessian(d, m), Swig::Director(jenv) {
}

SwigDirector_OptVectorFunctionHessian::~SwigDirector_OptVectorFunctionHessian() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_OptVectorFunctionHessian::eval(sgpp::base::DataVector const &x, sgpp::base::DataVector &value, sgpp::base::DataMatrix &gradient, std::vector< sgpp::base::DataMatrix > &hessian) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jx = 0 ;
  jlong jvalue = 0 ;
  jlong jgradient = 0 ;
  jlong jhessian = 0 ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method sgpp::optimization::VectorFunctionHessian::eval.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(sgpp::base::DataVector **)&jx = (sgpp::base::DataVector *) &x; 
    *(sgpp::base::DataVector **)&jvalue = (sgpp::base::DataVector *) &value; 
    *(sgpp::base::DataMatrix **)&jgradient = (sgpp::base::DataMatrix *) &gradient; 
    *(std::vector< sgpp::base::DataMatrix > **)&jhessian = (std::vector< sgpp::base::DataMatrix > *) &hessian; 
    jenv->CallStaticVoidMethod(Swig::jclass_jsgppJNI, Swig::director_method_ids[18], swigjobj, jx, jvalue, jgradient, jhessian);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in sgpp::optimization::VectorFunctionHessian::eval ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_OptVectorFunctionHessian::clone(std::unique_ptr< sgpp::optimization::VectorFunctionHessian > &clone) const {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jclone = 0 ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method sgpp::optimization::VectorFunctionHessian::clone.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    {
      clone = std::unique_ptr<sgpp::optimization::VectorFunctionHessian>(
        new SwigDirector_OptVectorFunctionHessian(*this));
      return;
    }
    jenv->CallStaticVoidMethod(Swig::jclass_jsgppJNI, Swig::director_method_ids[19], swigjobj, jclone);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in sgpp::optimization::VectorFunctionHessian::clone ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_OptVectorFunctionHessian::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "eval", "(Lsgpp/DataVector;Lsgpp/DataVector;Lsgpp/DataMatrix;Lsgpp/SWIGTYPE_p_std__vectorT_sgpp__base__DataMatrix_t;)V", NULL 
    },
    {
      "clone", "(Lsgpp/SWIGTYPE_p_std__unique_ptrT_sgpp__optimization__VectorFunctionHessian_t;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("sgpp/OptVectorFunctionHessian");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 2; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_OptIterativeGridGenerator::SwigDirector_OptIterativeGridGenerator(JNIEnv *jenv, sgpp::optimization::ScalarFunction &f, sgpp::base::Grid &grid, size_t N) : sgpp::optimization::IterativeGridGenerator(f, grid, N), Swig::Director(jenv) {
}

SwigDirector_OptIterativeGridGenerator::~SwigDirector_OptIterativeGridGenerator() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


bool SwigDirector_OptIterativeGridGenerator::generate() {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method sgpp::optimization::IterativeGridGenerator::generate.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_jsgppJNI, Swig::director_method_ids[20], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in sgpp::optimization::IterativeGridGenerator::generate ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_OptIterativeGridGenerator::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "generate", "()Z", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("sgpp/OptIterativeGridGenerator");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_OptSLE::SwigDirector_OptSLE(JNIEnv *jenv) : sgpp::optimization::SLE(), Swig::Director(jenv) {
}

SwigDirector_OptSLE::~SwigDirector_OptSLE() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


bool SwigDirector_OptSLE::isMatrixEntryNonZero(size_t i, size_t j) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong ji  ;
  jlong jj  ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method sgpp::optimization::SLE::isMatrixEntryNonZero.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    ji = (jlong) i;
    jj = (jlong) j;
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_jsgppJNI, Swig::director_method_ids[21], swigjobj, ji, jj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in sgpp::optimization::SLE::isMatrixEntryNonZero ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

double SwigDirector_OptSLE::getMatrixEntry(size_t i, size_t j) {
  double c_result = SwigValueInit< double >() ;
  jdouble jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong ji  ;
  jlong jj  ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method sgpp::optimization::SLE::getMatrixEntry.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    ji = (jlong) i;
    jj = (jlong) j;
    jresult = (jdouble) jenv->CallStaticDoubleMethod(Swig::jclass_jsgppJNI, Swig::director_method_ids[22], swigjobj, ji, jj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (double)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in sgpp::optimization::SLE::getMatrixEntry ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_OptSLE::matrixVectorMultiplication(sgpp::base::DataVector const &x, sgpp::base::DataVector &y) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jx = 0 ;
  jlong jy = 0 ;
  
  if (!swig_override[2]) {
    sgpp::optimization::SLE::matrixVectorMultiplication(x,y);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(sgpp::base::DataVector **)&jx = (sgpp::base::DataVector *) &x; 
    *(sgpp::base::DataVector **)&jy = (sgpp::base::DataVector *) &y; 
    jenv->CallStaticVoidMethod(Swig::jclass_jsgppJNI, Swig::director_method_ids[23], swigjobj, jx, jy);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in sgpp::optimization::SLE::matrixVectorMultiplication ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

size_t SwigDirector_OptSLE::countNNZ() {
  size_t c_result = SwigValueInit< size_t >() ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[3]) {
    return sgpp::optimization::SLE::countNNZ();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_jsgppJNI, Swig::director_method_ids[24], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (size_t)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in sgpp::optimization::SLE::countNNZ ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

size_t SwigDirector_OptSLE::getDimension() const {
  size_t c_result = SwigValueInit< size_t >() ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[4]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method sgpp::optimization::SLE::getDimension.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_jsgppJNI, Swig::director_method_ids[25], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (size_t)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in sgpp::optimization::SLE::getDimension ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_OptSLE::isCloneable() const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[5]) {
    return sgpp::optimization::SLE::isCloneable();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_jsgppJNI, Swig::director_method_ids[26], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in sgpp::optimization::SLE::isCloneable ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_OptSLE::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "isMatrixEntryNonZero", "(JJ)Z", NULL 
    },
    {
      "getMatrixEntry", "(JJ)D", NULL 
    },
    {
      "matrixVectorMultiplication", "(Lsgpp/DataVector;Lsgpp/DataVector;)V", NULL 
    },
    {
      "countNNZ", "()J", NULL 
    },
    {
      "getDimension", "()J", NULL 
    },
    {
      "isCloneable", "()Z", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("sgpp/OptSLE");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 6; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_OptSLESolver::SwigDirector_OptSLESolver(JNIEnv *jenv) : sgpp::optimization::sle_solver::SLESolver(), Swig::Director(jenv) {
}

SwigDirector_OptSLESolver::~SwigDirector_OptSLESolver() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


bool SwigDirector_OptSLESolver::solve(sgpp::optimization::SLE &system, sgpp::base::DataVector &b, sgpp::base::DataVector &x) const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jsystem = 0 ;
  jlong jb = 0 ;
  jlong jx = 0 ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method sgpp::optimization::sle_solver::SLESolver::solve.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(sgpp::optimization::SLE **)&jsystem = (sgpp::optimization::SLE *) &system; 
    *(sgpp::base::DataVector **)&jb = (sgpp::base::DataVector *) &b; 
    *(sgpp::base::DataVector **)&jx = (sgpp::base::DataVector *) &x; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_jsgppJNI, Swig::director_method_ids[27], swigjobj, jsystem, jb, jx);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in sgpp::optimization::sle_solver::SLESolver::solve ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_OptSLESolver::solve(sgpp::optimization::SLE &system, sgpp::base::DataMatrix &B, sgpp::base::DataMatrix &X) const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jsystem = 0 ;
  jlong jB = 0 ;
  jlong jX = 0 ;
  
  if (!swig_override[1]) {
    return sgpp::optimization::sle_solver::SLESolver::solve(system,B,X);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(sgpp::optimization::SLE **)&jsystem = (sgpp::optimization::SLE *) &system; 
    *(sgpp::base::DataMatrix **)&jB = (sgpp::base::DataMatrix *) &B; 
    *(sgpp::base::DataMatrix **)&jX = (sgpp::base::DataMatrix *) &X; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_jsgppJNI, Swig::director_method_ids[28], swigjobj, jsystem, jB, jX);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in sgpp::optimization::sle_solver::SLESolver::solve ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_OptSLESolver::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "solve", "(Lsgpp/OptSLE;Lsgpp/DataVector;Lsgpp/DataVector;)Z", NULL 
    },
    {
      "solve", "(Lsgpp/OptSLE;Lsgpp/DataMatrix;Lsgpp/DataMatrix;)Z", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("sgpp/OptSLESolver");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 2; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_M_1E_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(2.7182818284590452354);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_M_1LOG2E_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(1.4426950408889634074);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_M_1LOG10E_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(0.43429448190325182765);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_M_1LN2_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(0.69314718055994530942);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_M_1LN10_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(2.30258509299404568402);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_M_1PI_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(3.14159265358979323846);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_M_1PI_12_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(1.57079632679489661923);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_M_1PI_14_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(0.78539816339744830962);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_M_11_1PI_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(0.31830988618379067154);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_M_12_1PI_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(0.63661977236758134308);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_M_12_1SQRTPI_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(1.12837916709551257390);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_M_1SQRT2_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(1.41421356237309504880);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_M_1SQRT1_12_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(0.70710678118654752440);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_M_11_1SQRT2PI_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(0.398942280401432702863218082712);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1DoubleVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< double > *)new std::vector< double >();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1DoubleVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< double >::size_type arg1 ;
  std::vector< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< double >::size_type)jarg1; 
  {
    try {
      result = (std::vector< double > *)new std::vector< double >(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DoubleVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  {
    try {
      result = ((std::vector< double > const *)arg1)->size();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DoubleVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  {
    try {
      result = ((std::vector< double > const *)arg1)->capacity();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DoubleVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  arg2 = (std::vector< double >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_sgpp_jsgppJNI_DoubleVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< double > const *)arg1)->empty();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DoubleVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DoubleVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::value_type *arg2 = 0 ;
  std::vector< double >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  temp2 = (std::vector< double >::value_type)jarg2; 
  arg2 = &temp2; 
  {
    try {
      (arg1)->push_back((std::vector< double >::value_type const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_DoubleVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  std::vector< double >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< double >::value_type *) &std_vector_Sl_double_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DoubleVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  std::vector< double >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< double >::value_type)jarg3; 
  arg3 = &temp3; 
  {
    try {
      try {
        std_vector_Sl_double_Sg__set(arg1,arg2,(double const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1DoubleVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< double > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1FloatVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< float > *)new std::vector< float >();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1FloatVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< float >::size_type arg1 ;
  std::vector< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< float >::size_type)jarg1; 
  {
    try {
      result = (std::vector< float > *)new std::vector< float >(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_FloatVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< float > **)&jarg1; 
  {
    try {
      result = ((std::vector< float > const *)arg1)->size();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_FloatVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< float > **)&jarg1; 
  {
    try {
      result = ((std::vector< float > const *)arg1)->capacity();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_FloatVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< float > **)&jarg1; 
  arg2 = (std::vector< float >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_sgpp_jsgppJNI_FloatVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< float > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< float > const *)arg1)->empty();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_FloatVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< float > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_FloatVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::value_type *arg2 = 0 ;
  std::vector< float >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< float > **)&jarg1; 
  temp2 = (std::vector< float >::value_type)jarg2; 
  arg2 = &temp2; 
  {
    try {
      (arg1)->push_back((std::vector< float >::value_type const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jfloat JNICALL Java_sgpp_jsgppJNI_FloatVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jfloat jresult = 0 ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  std::vector< float >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< float > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< float >::value_type *) &std_vector_Sl_float_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jfloat)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_FloatVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  std::vector< float >::value_type *arg3 = 0 ;
  std::vector< float >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< float > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< float >::value_type)jarg3; 
  arg3 = &temp3; 
  {
    try {
      try {
        std_vector_Sl_float_Sg__set(arg1,arg2,(float const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1FloatVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< float > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1IndexValPair_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::pair< size_t,double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::pair< size_t,double > *)new std::pair< size_t,double >();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(std::pair< size_t,double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1IndexValPair_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  size_t arg1 ;
  double arg2 ;
  std::pair< size_t,double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      result = (std::pair< size_t,double > *)new std::pair< size_t,double >(arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(std::pair< size_t,double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1IndexValPair_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< size_t,double > *arg1 = 0 ;
  std::pair< size_t,double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< size_t,double > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< size_t,double > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (std::pair< size_t,double > *)new std::pair< size_t,double >((std::pair< size_t,double > const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(std::pair< size_t,double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_IndexValPair_1first_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::pair< size_t,double > *arg1 = (std::pair< size_t,double > *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< size_t,double > **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->first = arg2;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_IndexValPair_1first_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< size_t,double > *arg1 = (std::pair< size_t,double > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< size_t,double > **)&jarg1; 
  result =  ((arg1)->first);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_IndexValPair_1second_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  std::pair< size_t,double > *arg1 = (std::pair< size_t,double > *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< size_t,double > **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->second = arg2;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_IndexValPair_1second_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  std::pair< size_t,double > *arg1 = (std::pair< size_t,double > *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< size_t,double > **)&jarg1; 
  result = (double) ((arg1)->second);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1IndexValPair(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::pair< size_t,double > *arg1 = (std::pair< size_t,double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::pair< size_t,double > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1IndexValVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::pair< size_t,double > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< std::pair< size_t,double > > *)new std::vector< std::pair< size_t,double > >();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< std::pair< size_t,double > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1IndexValVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::pair< size_t,double > >::size_type arg1 ;
  std::vector< std::pair< size_t,double > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::pair< size_t,double > >::size_type)jarg1; 
  {
    try {
      result = (std::vector< std::pair< size_t,double > > *)new std::vector< std::pair< size_t,double > >(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< std::pair< size_t,double > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_IndexValVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::pair< size_t,double > > *arg1 = (std::vector< std::pair< size_t,double > > *) 0 ;
  std::vector< std::pair< size_t,double > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< size_t,double > > **)&jarg1; 
  {
    try {
      result = ((std::vector< std::pair< size_t,double > > const *)arg1)->size();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_IndexValVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::pair< size_t,double > > *arg1 = (std::vector< std::pair< size_t,double > > *) 0 ;
  std::vector< std::pair< size_t,double > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< size_t,double > > **)&jarg1; 
  {
    try {
      result = ((std::vector< std::pair< size_t,double > > const *)arg1)->capacity();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_IndexValVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::pair< size_t,double > > *arg1 = (std::vector< std::pair< size_t,double > > *) 0 ;
  std::vector< std::pair< size_t,double > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< size_t,double > > **)&jarg1; 
  arg2 = (std::vector< std::pair< size_t,double > >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_sgpp_jsgppJNI_IndexValVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::pair< size_t,double > > *arg1 = (std::vector< std::pair< size_t,double > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< size_t,double > > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< std::pair< size_t,double > > const *)arg1)->empty();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_IndexValVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::pair< size_t,double > > *arg1 = (std::vector< std::pair< size_t,double > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< size_t,double > > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_IndexValVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::pair< size_t,double > > *arg1 = (std::vector< std::pair< size_t,double > > *) 0 ;
  std::vector< std::pair< size_t,double > >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::pair< size_t,double > > **)&jarg1; 
  arg2 = *(std::vector< std::pair< size_t,double > >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< size_t,double > >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< std::pair< size_t,double > >::value_type const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_IndexValVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::pair< size_t,double > > *arg1 = (std::vector< std::pair< size_t,double > > *) 0 ;
  int arg2 ;
  std::vector< std::pair< size_t,double > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< size_t,double > > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< std::pair< size_t,double > >::value_type *) &std_vector_Sl_std_pair_Sl_size_t_Sc_double_Sg__Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< std::pair< size_t,double > >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_IndexValVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::pair< size_t,double > > *arg1 = (std::vector< std::pair< size_t,double > > *) 0 ;
  int arg2 ;
  std::vector< std::pair< size_t,double > >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::pair< size_t,double > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< std::pair< size_t,double > >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< size_t,double > >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_std_pair_Sl_size_t_Sc_double_Sg__Sg__set(arg1,arg2,(std::pair< size_t,double > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1IndexValVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::pair< size_t,double > > *arg1 = (std::vector< std::pair< size_t,double > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::pair< size_t,double > > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1SizeTVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< size_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< size_t > *)new std::vector< size_t >();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< size_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1SizeTVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< size_t >::size_type arg1 ;
  std::vector< size_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< size_t >::size_type)jarg1; 
  {
    try {
      result = (std::vector< size_t > *)new std::vector< size_t >(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< size_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_SizeTVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  std::vector< size_t >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< size_t > **)&jarg1; 
  {
    try {
      result = ((std::vector< size_t > const *)arg1)->size();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_SizeTVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  std::vector< size_t >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< size_t > **)&jarg1; 
  {
    try {
      result = ((std::vector< size_t > const *)arg1)->capacity();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_SizeTVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  std::vector< size_t >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< size_t > **)&jarg1; 
  arg2 = (std::vector< size_t >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_sgpp_jsgppJNI_SizeTVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< size_t > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< size_t > const *)arg1)->empty();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_SizeTVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< size_t > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_SizeTVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  std::vector< size_t >::value_type *arg2 = 0 ;
  std::vector< size_t >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< size_t > **)&jarg1; 
  temp2 = (std::vector< size_t >::value_type)jarg2; 
  arg2 = &temp2; 
  {
    try {
      (arg1)->push_back((std::vector< size_t >::value_type const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_SizeTVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  int arg2 ;
  std::vector< size_t >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< size_t > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< size_t >::value_type *) &std_vector_Sl_size_t_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_SizeTVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  int arg2 ;
  std::vector< size_t >::value_type *arg3 = 0 ;
  std::vector< size_t >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< size_t > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< size_t >::value_type)jarg3; 
  arg3 = &temp3; 
  {
    try {
      try {
        std_vector_Sl_size_t_Sg__set(arg1,arg2,(size_t const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1SizeTVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< size_t > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_SBasis_1eval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jdouble jarg4) {
  jdouble jresult = 0 ;
  sgpp::base::Basis< unsigned int,unsigned int > *arg1 = (sgpp::base::Basis< unsigned int,unsigned int > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::Basis< unsigned int,unsigned int > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (double)(arg1)->eval(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1SBasis(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::Basis< unsigned int,unsigned int > *arg1 = (sgpp::base::Basis< unsigned int,unsigned int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::Basis< unsigned int,unsigned int > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_RegularGridConfiguration_1type_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  sgpp::base::RegularGridConfiguration *arg1 = (sgpp::base::RegularGridConfiguration *) 0 ;
  sgpp::base::GridType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::RegularGridConfiguration **)&jarg1; 
  arg2 = (sgpp::base::GridType)jarg2; 
  if (arg1) (arg1)->type_ = arg2;
}


SWIGEXPORT jint JNICALL Java_sgpp_jsgppJNI_RegularGridConfiguration_1type_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  sgpp::base::RegularGridConfiguration *arg1 = (sgpp::base::RegularGridConfiguration *) 0 ;
  sgpp::base::GridType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::RegularGridConfiguration **)&jarg1; 
  result = (sgpp::base::GridType) ((arg1)->type_);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_RegularGridConfiguration_1dim_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::base::RegularGridConfiguration *arg1 = (sgpp::base::RegularGridConfiguration *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::RegularGridConfiguration **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->dim_ = arg2;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_RegularGridConfiguration_1dim_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::RegularGridConfiguration *arg1 = (sgpp::base::RegularGridConfiguration *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::RegularGridConfiguration **)&jarg1; 
  result =  ((arg1)->dim_);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_RegularGridConfiguration_1level_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  sgpp::base::RegularGridConfiguration *arg1 = (sgpp::base::RegularGridConfiguration *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::RegularGridConfiguration **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->level_ = arg2;
}


SWIGEXPORT jint JNICALL Java_sgpp_jsgppJNI_RegularGridConfiguration_1level_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  sgpp::base::RegularGridConfiguration *arg1 = (sgpp::base::RegularGridConfiguration *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::RegularGridConfiguration **)&jarg1; 
  result = (int) ((arg1)->level_);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1RegularGridConfiguration(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::base::RegularGridConfiguration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::base::RegularGridConfiguration *)new sgpp::base::RegularGridConfiguration();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::RegularGridConfiguration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1RegularGridConfiguration(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::RegularGridConfiguration *arg1 = (sgpp::base::RegularGridConfiguration *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::RegularGridConfiguration **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_AdpativityConfiguration_1numRefinements_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::base::AdpativityConfiguration *arg1 = (sgpp::base::AdpativityConfiguration *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::AdpativityConfiguration **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->numRefinements_ = arg2;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_AdpativityConfiguration_1numRefinements_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::AdpativityConfiguration *arg1 = (sgpp::base::AdpativityConfiguration *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::AdpativityConfiguration **)&jarg1; 
  result =  ((arg1)->numRefinements_);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_AdpativityConfiguration_1threshold_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::base::AdpativityConfiguration *arg1 = (sgpp::base::AdpativityConfiguration *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::AdpativityConfiguration **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->threshold_ = arg2;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_AdpativityConfiguration_1threshold_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::base::AdpativityConfiguration *arg1 = (sgpp::base::AdpativityConfiguration *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::AdpativityConfiguration **)&jarg1; 
  result = (double) ((arg1)->threshold_);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_AdpativityConfiguration_1maxLevelType_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  sgpp::base::AdpativityConfiguration *arg1 = (sgpp::base::AdpativityConfiguration *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::AdpativityConfiguration **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->maxLevelType_ = arg2;
}


SWIGEXPORT jboolean JNICALL Java_sgpp_jsgppJNI_AdpativityConfiguration_1maxLevelType_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  sgpp::base::AdpativityConfiguration *arg1 = (sgpp::base::AdpativityConfiguration *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::AdpativityConfiguration **)&jarg1; 
  result = (bool) ((arg1)->maxLevelType_);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_AdpativityConfiguration_1noPoints_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::base::AdpativityConfiguration *arg1 = (sgpp::base::AdpativityConfiguration *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::AdpativityConfiguration **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->noPoints_ = arg2;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_AdpativityConfiguration_1noPoints_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::AdpativityConfiguration *arg1 = (sgpp::base::AdpativityConfiguration *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::AdpativityConfiguration **)&jarg1; 
  result =  ((arg1)->noPoints_);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_AdpativityConfiguration_1percent_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::base::AdpativityConfiguration *arg1 = (sgpp::base::AdpativityConfiguration *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::AdpativityConfiguration **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->percent_ = arg2;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_AdpativityConfiguration_1percent_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::base::AdpativityConfiguration *arg1 = (sgpp::base::AdpativityConfiguration *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::AdpativityConfiguration **)&jarg1; 
  result = (double) ((arg1)->percent_);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1AdpativityConfiguration(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::base::AdpativityConfiguration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::base::AdpativityConfiguration *)new sgpp::base::AdpativityConfiguration();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::AdpativityConfiguration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1AdpativityConfiguration(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::AdpativityConfiguration *arg1 = (sgpp::base::AdpativityConfiguration *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::AdpativityConfiguration **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_Grid_1createGrid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::RegularGridConfiguration arg1 ;
  sgpp::base::RegularGridConfiguration *argp1 ;
  sgpp::base::Grid *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(sgpp::base::RegularGridConfiguration **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null sgpp::base::RegularGridConfiguration");
    return 0;
  }
  arg1 = *argp1; 
  {
    try {
      result = (sgpp::base::Grid *)sgpp::base::Grid::createGrid(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::Grid **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_Grid_1createLinearGrid(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  sgpp::base::Grid *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (sgpp::base::Grid *)sgpp::base::Grid::createLinearGrid(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::Grid **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_Grid_1createLinearStretchedGrid(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  sgpp::base::Grid *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (sgpp::base::Grid *)sgpp::base::Grid::createLinearStretchedGrid(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::Grid **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_Grid_1createLinearBoundaryGrid_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  sgpp::base::Grid *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (sgpp::base::Grid *)sgpp::base::Grid::createLinearBoundaryGrid(arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::Grid **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_Grid_1createLinearClenshawCurtisGrid(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  sgpp::base::Grid *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (sgpp::base::Grid *)sgpp::base::Grid::createLinearClenshawCurtisGrid(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::Grid **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_Grid_1createLinearBoundaryGrid_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  sgpp::base::Grid *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (sgpp::base::Grid *)sgpp::base::Grid::createLinearBoundaryGrid(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::Grid **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_Grid_1createLinearStretchedBoundaryGrid(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  sgpp::base::Grid *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (sgpp::base::Grid *)sgpp::base::Grid::createLinearStretchedBoundaryGrid(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::Grid **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_Grid_1createModLinearGrid(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  sgpp::base::Grid *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (sgpp::base::Grid *)sgpp::base::Grid::createModLinearGrid(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::Grid **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_Grid_1createPolyGrid(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  sgpp::base::Grid *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (sgpp::base::Grid *)sgpp::base::Grid::createPolyGrid(arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::Grid **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_Grid_1createPolyBoundaryGrid(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  sgpp::base::Grid *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (sgpp::base::Grid *)sgpp::base::Grid::createPolyBoundaryGrid(arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::Grid **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_Grid_1createModPolyGrid(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  sgpp::base::Grid *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (sgpp::base::Grid *)sgpp::base::Grid::createModPolyGrid(arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::Grid **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_Grid_1createWaveletGrid(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  sgpp::base::Grid *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (sgpp::base::Grid *)sgpp::base::Grid::createWaveletGrid(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::Grid **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_Grid_1createWaveletBoundaryGrid(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  sgpp::base::Grid *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (sgpp::base::Grid *)sgpp::base::Grid::createWaveletBoundaryGrid(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::Grid **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_Grid_1createModWaveletGrid(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  sgpp::base::Grid *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (sgpp::base::Grid *)sgpp::base::Grid::createModWaveletGrid(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::Grid **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_Grid_1createBsplineGrid(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  sgpp::base::Grid *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (sgpp::base::Grid *)sgpp::base::Grid::createBsplineGrid(arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::Grid **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_Grid_1createBsplineBoundaryGrid(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  sgpp::base::Grid *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (sgpp::base::Grid *)sgpp::base::Grid::createBsplineBoundaryGrid(arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::Grid **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_Grid_1createBsplineClenshawCurtisGrid(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  sgpp::base::Grid *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (sgpp::base::Grid *)sgpp::base::Grid::createBsplineClenshawCurtisGrid(arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::Grid **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_Grid_1createModBsplineGrid(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  sgpp::base::Grid *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (sgpp::base::Grid *)sgpp::base::Grid::createModBsplineGrid(arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::Grid **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_Grid_1createModBsplineClenshawCurtisGrid(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  sgpp::base::Grid *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (sgpp::base::Grid *)sgpp::base::Grid::createModBsplineClenshawCurtisGrid(arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::Grid **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_Grid_1createFundamentalSplineGrid(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  sgpp::base::Grid *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (sgpp::base::Grid *)sgpp::base::Grid::createFundamentalSplineGrid(arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::Grid **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_Grid_1createModFundamentalSplineGrid(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  sgpp::base::Grid *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (sgpp::base::Grid *)sgpp::base::Grid::createModFundamentalSplineGrid(arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::Grid **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_Grid_1createSquareRootGrid(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  sgpp::base::Grid *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (sgpp::base::Grid *)sgpp::base::Grid::createSquareRootGrid(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::Grid **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_Grid_1createLinearTruncatedBoundaryGrid(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  sgpp::base::Grid *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (sgpp::base::Grid *)sgpp::base::Grid::createLinearTruncatedBoundaryGrid(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::Grid **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_Grid_1createPrewaveletGrid(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  sgpp::base::Grid *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (sgpp::base::Grid *)sgpp::base::Grid::createPrewaveletGrid(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::Grid **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_Grid_1createLinearGridStencil(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  sgpp::base::Grid *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (sgpp::base::Grid *)sgpp::base::Grid::createLinearGridStencil(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::Grid **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_Grid_1createModLinearGridStencil(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  sgpp::base::Grid *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (sgpp::base::Grid *)sgpp::base::Grid::createModLinearGridStencil(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::Grid **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_Grid_1createPeriodicGrid(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  sgpp::base::Grid *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (sgpp::base::Grid *)sgpp::base::Grid::createPeriodicGrid(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::Grid **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_Grid_1unserialize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  sgpp::base::Grid *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::string **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::base::Grid *)sgpp::base::Grid::unserialize(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::Grid **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1Grid(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::Grid *arg1 = (sgpp::base::Grid *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::Grid **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_Grid_1getStorage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::Grid *arg1 = (sgpp::base::Grid *) 0 ;
  sgpp::base::GridStorage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::Grid **)&jarg1; 
  {
    try {
      result = (sgpp::base::GridStorage *) &(arg1)->getStorage();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::GridStorage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_Grid_1getBoundingBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::Grid *arg1 = (sgpp::base::Grid *) 0 ;
  sgpp::base::BoundingBox *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::Grid **)&jarg1; 
  {
    try {
      result = (sgpp::base::BoundingBox *) &(arg1)->getBoundingBox();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::BoundingBox **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_Grid_1getStretching(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::Grid *arg1 = (sgpp::base::Grid *) 0 ;
  sgpp::base::Stretching *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::Grid **)&jarg1; 
  {
    try {
      result = (sgpp::base::Stretching *) &(arg1)->getStretching();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::Stretching **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_Grid_1getGenerator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::Grid *arg1 = (sgpp::base::Grid *) 0 ;
  sgpp::base::GridGenerator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::Grid **)&jarg1; 
  {
    try {
      result = (sgpp::base::GridGenerator *) &(arg1)->getGenerator();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::GridGenerator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_sgpp_jsgppJNI_Grid_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  sgpp::base::Grid *arg1 = (sgpp::base::Grid *) 0 ;
  sgpp::base::GridType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::Grid **)&jarg1; 
  {
    try {
      result = (sgpp::base::GridType)(arg1)->getType();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_Grid_1getBasis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::Grid *arg1 = (sgpp::base::Grid *) 0 ;
  sgpp::base::SBasis *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::Grid **)&jarg1; 
  {
    try {
      result = (sgpp::base::SBasis *) &(arg1)->getBasis();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::SBasis **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_Grid_1serialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::base::Grid *arg1 = (sgpp::base::Grid *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::Grid **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->serialize(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_Grid_1refine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  sgpp::base::Grid *arg1 = (sgpp::base::Grid *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::Grid **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg3 = (int)jarg3; 
  {
    try {
      (arg1)->refine(*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_Grid_1insertPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jboolean jarg5) {
  sgpp::base::Grid *arg1 = (sgpp::base::Grid *) 0 ;
  size_t arg2 ;
  unsigned int *arg3 ;
  unsigned int *arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::Grid **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(unsigned int **)&jarg3; 
  arg4 = *(unsigned int **)&jarg4; 
  arg5 = jarg5 ? true : false; 
  {
    try {
      (arg1)->insertPoint(arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
  
  
}


SWIGEXPORT jint JNICALL Java_sgpp_jsgppJNI_Grid_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  sgpp::base::Grid *arg1 = (sgpp::base::Grid *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::Grid **)&jarg1; 
  {
    try {
      result = (int)(arg1)->getSize();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_Grid_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::Grid *arg1 = (sgpp::base::Grid *) 0 ;
  sgpp::base::Grid *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::Grid **)&jarg1; 
  {
    try {
      result = (sgpp::base::Grid *)(arg1)->clone();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::Grid **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_Grid_1createMemento(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::Grid *arg1 = (sgpp::base::Grid *) 0 ;
  sgpp::base::Grid *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::Grid **)&jarg1; 
  {
    try {
      result = (sgpp::base::Grid *)sgpp_base_Grid_createMemento(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::Grid **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_Grid_1setMemento(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  sgpp::base::Grid *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::string **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::base::Grid *)sgpp_base_Grid_setMemento(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::Grid **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_sgpp_jsgppJNI_Grid_1getDegree(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  sgpp::base::Grid *arg1 = (sgpp::base::Grid *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::Grid **)&jarg1; 
  {
    try {
      result = (int)sgpp_base_Grid_getDegree(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_createOperationDiagonal_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  sgpp::base::Grid *arg1 = 0 ;
  double arg2 ;
  sgpp::base::OperationMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::Grid **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return 0;
  } 
  arg2 = (double)jarg2; 
  {
    try {
      result = (sgpp::base::OperationMatrix *)sgpp::op_factory::createOperationDiagonal(*arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::OperationMatrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_createOperationDiagonal_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::Grid *arg1 = 0 ;
  sgpp::base::OperationMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::Grid **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::base::OperationMatrix *)sgpp::op_factory::createOperationDiagonal(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::OperationMatrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_createOperationHierarchisation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::Grid *arg1 = 0 ;
  sgpp::base::OperationHierarchisation *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::Grid **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::base::OperationHierarchisation *)sgpp::op_factory::createOperationHierarchisation(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::OperationHierarchisation **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_createOperationQuadrature(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::Grid *arg1 = 0 ;
  sgpp::base::OperationQuadrature *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::Grid **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::base::OperationQuadrature *)sgpp::op_factory::createOperationQuadrature(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::OperationQuadrature **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_createOperationFirstMoment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::Grid *arg1 = 0 ;
  sgpp::base::OperationFirstMoment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::Grid **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::base::OperationFirstMoment *)sgpp::op_factory::createOperationFirstMoment(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::OperationFirstMoment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_createOperationSecondMoment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::Grid *arg1 = 0 ;
  sgpp::base::OperationSecondMoment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::Grid **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::base::OperationSecondMoment *)sgpp::op_factory::createOperationSecondMoment(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::OperationSecondMoment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_createOperationConvert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::Grid *arg1 = 0 ;
  sgpp::base::OperationConvert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::Grid **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::base::OperationConvert *)sgpp::op_factory::createOperationConvert(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::OperationConvert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_createOperationIdentity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::Grid *arg1 = 0 ;
  sgpp::base::OperationMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::Grid **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::base::OperationMatrix *)sgpp::op_factory::createOperationIdentity(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::OperationMatrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_createOperationEval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::Grid *arg1 = 0 ;
  sgpp::base::OperationEval *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::Grid **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::base::OperationEval *)sgpp::op_factory::createOperationEval(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::OperationEval **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_createOperationMultipleEval_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  sgpp::base::Grid *arg1 = 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  sgpp::base::OperationMultipleEval *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::Grid **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::base::OperationMultipleEval *)sgpp::op_factory::createOperationMultipleEval(*arg1,*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::OperationMultipleEval **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_createOperationMultipleEvalInter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  sgpp::base::Grid *arg1 = 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  SwigValueWrapper< std::vector< std::vector< size_t > > > arg3 ;
  std::vector< std::vector< size_t > > *argp3 ;
  sgpp::base::OperationMultipleEval *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::Grid **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return 0;
  } 
  argp3 = *(std::vector< std::vector< size_t > > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::vector< size_t > >");
    return 0;
  }
  arg3 = *argp3; 
  {
    try {
      result = (sgpp::base::OperationMultipleEval *)sgpp::op_factory::createOperationMultipleEvalInter(*arg1,*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::OperationMultipleEval **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_createOperationEvalNaive(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::Grid *arg1 = 0 ;
  sgpp::base::OperationEval *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::Grid **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::base::OperationEval *)sgpp::op_factory::createOperationEvalNaive(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::OperationEval **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_createOperationEvalGradientNaive(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::Grid *arg1 = 0 ;
  sgpp::base::OperationEvalGradient *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::Grid **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::base::OperationEvalGradient *)sgpp::op_factory::createOperationEvalGradientNaive(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::OperationEvalGradient **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_createOperationEvalHessianNaive(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::Grid *arg1 = 0 ;
  sgpp::base::OperationEvalHessian *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::Grid **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::base::OperationEvalHessian *)sgpp::op_factory::createOperationEvalHessianNaive(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::OperationEvalHessian **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_createOperationEvalPartialDerivativeNaive(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::Grid *arg1 = 0 ;
  sgpp::base::OperationEvalPartialDerivative *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::Grid **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::base::OperationEvalPartialDerivative *)sgpp::op_factory::createOperationEvalPartialDerivativeNaive(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::OperationEvalPartialDerivative **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1DataVectorSP_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  sgpp::base::DataVectorSP *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (sgpp::base::DataVectorSP *)new sgpp::base::DataVectorSP(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::DataVectorSP **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1DataVectorSP_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
  jlong jresult = 0 ;
  size_t arg1 ;
  float arg2 ;
  sgpp::base::DataVectorSP *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (float)jarg2; 
  {
    try {
      result = (sgpp::base::DataVectorSP *)new sgpp::base::DataVectorSP(arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::DataVectorSP **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1DataVectorSP_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::DataVectorSP *arg1 = 0 ;
  sgpp::base::DataVectorSP *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataVectorSP **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVectorSP const & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::base::DataVectorSP *)new sgpp::base::DataVectorSP((sgpp::base::DataVectorSP const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::DataVectorSP **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1DataVectorSP_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  float *arg1 = (float *) 0 ;
  size_t arg2 ;
  sgpp::base::DataVectorSP *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(float **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (sgpp::base::DataVectorSP *)new sgpp::base::DataVectorSP(arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::DataVectorSP **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1DataVectorSP_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< float > arg1 ;
  std::vector< float > *argp1 ;
  sgpp::base::DataVectorSP *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::vector< float > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< float >");
    return 0;
  }
  arg1 = *argp1; 
  {
    try {
      result = (sgpp::base::DataVectorSP *)new sgpp::base::DataVectorSP(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::DataVectorSP **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1DataVectorSP_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  SwigValueWrapper< std::vector< int > > arg1 ;
  std::vector< int > *argp1 ;
  sgpp::base::DataVectorSP *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(std::vector< int > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< int >");
    return 0;
  }
  arg1 = *argp1; 
  {
    try {
      result = (sgpp::base::DataVectorSP *)new sgpp::base::DataVectorSP(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::DataVectorSP **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataVectorSP_1resize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::base::DataVectorSP *arg1 = (sgpp::base::DataVectorSP *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataVectorSP **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      (arg1)->resize(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataVectorSP_1resizeZero(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::base::DataVectorSP *arg1 = (sgpp::base::DataVectorSP *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataVectorSP **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      (arg1)->resizeZero(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataVectorSP_1restructure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::base::DataVectorSP *arg1 = (sgpp::base::DataVectorSP *) 0 ;
  std::vector< size_t > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::DataVectorSP **)&jarg1; 
  arg2 = *(std::vector< size_t > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< size_t > & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->restructure(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataVectorSP_1addSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::base::DataVectorSP *arg1 = (sgpp::base::DataVectorSP *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataVectorSP **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      (arg1)->addSize(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DataVectorSP_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::DataVectorSP *arg1 = (sgpp::base::DataVectorSP *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataVectorSP **)&jarg1; 
  {
    try {
      result = (arg1)->append();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DataVectorSP_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jlong jresult = 0 ;
  sgpp::base::DataVectorSP *arg1 = (sgpp::base::DataVectorSP *) 0 ;
  float arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataVectorSP **)&jarg1; 
  arg2 = (float)jarg2; 
  {
    try {
      result = (arg1)->append(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataVectorSP_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jfloat jarg3) {
  sgpp::base::DataVectorSP *arg1 = (sgpp::base::DataVectorSP *) 0 ;
  size_t arg2 ;
  float arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataVectorSP **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (float)jarg3; 
  {
    try {
      (arg1)->insert(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataVectorSP_1setAll(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  sgpp::base::DataVectorSP *arg1 = (sgpp::base::DataVectorSP *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataVectorSP **)&jarg1; 
  arg2 = (float)jarg2; 
  {
    try {
      (arg1)->setAll(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataVectorSP_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::base::DataVectorSP *arg1 = (sgpp::base::DataVectorSP *) 0 ;
  sgpp::base::DataVectorSP *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::DataVectorSP **)&jarg1; 
  arg2 = *(sgpp::base::DataVectorSP **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVectorSP const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->copyFrom((sgpp::base::DataVectorSP const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DataVectorSP_1operatorAssignment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  sgpp::base::DataVectorSP *arg1 = (sgpp::base::DataVectorSP *) 0 ;
  sgpp::base::DataVectorSP *arg2 = 0 ;
  sgpp::base::DataVectorSP *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::DataVectorSP **)&jarg1; 
  arg2 = *(sgpp::base::DataVectorSP **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVectorSP const & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::base::DataVectorSP *) &(arg1)->operator =((sgpp::base::DataVectorSP const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::DataVectorSP **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_sgpp_jsgppJNI_DataVectorSP_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jfloat jresult = 0 ;
  sgpp::base::DataVectorSP *arg1 = (sgpp::base::DataVectorSP *) 0 ;
  size_t arg2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataVectorSP **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (float)((sgpp::base::DataVectorSP const *)arg1)->get(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataVectorSP_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jfloat jarg3) {
  sgpp::base::DataVectorSP *arg1 = (sgpp::base::DataVectorSP *) 0 ;
  size_t arg2 ;
  float arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataVectorSP **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (float)jarg3; 
  {
    try {
      (arg1)->set(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataVectorSP_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::base::DataVectorSP *arg1 = (sgpp::base::DataVectorSP *) 0 ;
  sgpp::base::DataVectorSP *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::DataVectorSP **)&jarg1; 
  arg2 = *(sgpp::base::DataVectorSP **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVectorSP const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->add((sgpp::base::DataVectorSP const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataVectorSP_1sub(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::base::DataVectorSP *arg1 = (sgpp::base::DataVectorSP *) 0 ;
  sgpp::base::DataVectorSP *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::DataVectorSP **)&jarg1; 
  arg2 = *(sgpp::base::DataVectorSP **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVectorSP const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->sub((sgpp::base::DataVectorSP const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataVectorSP_1componentwise_1mult(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::base::DataVectorSP *arg1 = (sgpp::base::DataVectorSP *) 0 ;
  sgpp::base::DataVectorSP *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::DataVectorSP **)&jarg1; 
  arg2 = *(sgpp::base::DataVectorSP **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVectorSP const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->componentwise_mult((sgpp::base::DataVectorSP const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataVectorSP_1componentwise_1div(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::base::DataVectorSP *arg1 = (sgpp::base::DataVectorSP *) 0 ;
  sgpp::base::DataVectorSP *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::DataVectorSP **)&jarg1; 
  arg2 = *(sgpp::base::DataVectorSP **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVectorSP const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->componentwise_div((sgpp::base::DataVectorSP const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataVectorSP_1mult(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  sgpp::base::DataVectorSP *arg1 = (sgpp::base::DataVectorSP *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataVectorSP **)&jarg1; 
  arg2 = (float)jarg2; 
  {
    try {
      (arg1)->mult(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataVectorSP_1sqr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::base::DataVectorSP *arg1 = (sgpp::base::DataVectorSP *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataVectorSP **)&jarg1; 
  {
    try {
      (arg1)->sqr();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataVectorSP_1sqrt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::base::DataVectorSP *arg1 = (sgpp::base::DataVectorSP *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataVectorSP **)&jarg1; 
  {
    try {
      (arg1)->sqrt();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataVectorSP_1abs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::base::DataVectorSP *arg1 = (sgpp::base::DataVectorSP *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataVectorSP **)&jarg1; 
  {
    try {
      (arg1)->abs();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jfloat JNICALL Java_sgpp_jsgppJNI_DataVectorSP_1sum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  sgpp::base::DataVectorSP *arg1 = (sgpp::base::DataVectorSP *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataVectorSP **)&jarg1; 
  {
    try {
      result = (float)((sgpp::base::DataVectorSP const *)arg1)->sum();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_sgpp_jsgppJNI_DataVectorSP_1maxNorm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  sgpp::base::DataVectorSP *arg1 = (sgpp::base::DataVectorSP *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataVectorSP **)&jarg1; 
  {
    try {
      result = (float)((sgpp::base::DataVectorSP const *)arg1)->maxNorm();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_sgpp_jsgppJNI_DataVectorSP_1RMSNorm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  sgpp::base::DataVectorSP *arg1 = (sgpp::base::DataVectorSP *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataVectorSP **)&jarg1; 
  {
    try {
      result = (float)((sgpp::base::DataVectorSP const *)arg1)->RMSNorm();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_sgpp_jsgppJNI_DataVectorSP_1l2Norm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  sgpp::base::DataVectorSP *arg1 = (sgpp::base::DataVectorSP *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataVectorSP **)&jarg1; 
  {
    try {
      result = (float)((sgpp::base::DataVectorSP const *)arg1)->l2Norm();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_sgpp_jsgppJNI_DataVectorSP_1min(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  sgpp::base::DataVectorSP *arg1 = (sgpp::base::DataVectorSP *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataVectorSP **)&jarg1; 
  {
    try {
      result = (float)((sgpp::base::DataVectorSP const *)arg1)->min();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_sgpp_jsgppJNI_DataVectorSP_1max(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  sgpp::base::DataVectorSP *arg1 = (sgpp::base::DataVectorSP *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataVectorSP **)&jarg1; 
  {
    try {
      result = (float)((sgpp::base::DataVectorSP const *)arg1)->max();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataVectorSP_1minmax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  sgpp::base::DataVectorSP *arg1 = (sgpp::base::DataVectorSP *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataVectorSP **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  arg3 = *(float **)&jarg3; 
  {
    try {
      ((sgpp::base::DataVectorSP const *)arg1)->minmax(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataVectorSP_1axpy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jlong jarg3, jobject jarg3_) {
  sgpp::base::DataVectorSP *arg1 = (sgpp::base::DataVectorSP *) 0 ;
  float arg2 ;
  sgpp::base::DataVectorSP *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(sgpp::base::DataVectorSP **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = *(sgpp::base::DataVectorSP **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVectorSP & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->axpy(arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jfloat JNICALL Java_sgpp_jsgppJNI_DataVectorSP_1dotProduct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jfloat jresult = 0 ;
  sgpp::base::DataVectorSP *arg1 = (sgpp::base::DataVectorSP *) 0 ;
  sgpp::base::DataVectorSP *arg2 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::DataVectorSP **)&jarg1; 
  arg2 = *(sgpp::base::DataVectorSP **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVectorSP const & reference is null");
    return 0;
  } 
  {
    try {
      result = (float)((sgpp::base::DataVectorSP const *)arg1)->dotProduct((sgpp::base::DataVectorSP const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DataVectorSP_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::DataVectorSP *arg1 = (sgpp::base::DataVectorSP *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataVectorSP **)&jarg1; 
  {
    try {
      result = ((sgpp::base::DataVectorSP const *)arg1)->getSize();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DataVectorSP_1getUnused(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::DataVectorSP *arg1 = (sgpp::base::DataVectorSP *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataVectorSP **)&jarg1; 
  {
    try {
      result = ((sgpp::base::DataVectorSP const *)arg1)->getUnused();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DataVectorSP_1getNumberNonZero(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::DataVectorSP *arg1 = (sgpp::base::DataVectorSP *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataVectorSP **)&jarg1; 
  {
    try {
      result = ((sgpp::base::DataVectorSP const *)arg1)->getNumberNonZero();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DataVectorSP_1getInc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::DataVectorSP *arg1 = (sgpp::base::DataVectorSP *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataVectorSP **)&jarg1; 
  {
    try {
      result = ((sgpp::base::DataVectorSP const *)arg1)->getInc();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataVectorSP_1setInc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::base::DataVectorSP *arg1 = (sgpp::base::DataVectorSP *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataVectorSP **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      (arg1)->setInc(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataVectorSP_1partitionClasses(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  sgpp::base::DataVectorSP *arg1 = (sgpp::base::DataVectorSP *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataVectorSP **)&jarg1; 
  arg2 = (float)jarg2; 
  {
    try {
      (arg1)->partitionClasses(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataVectorSP_1normalize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::base::DataVectorSP *arg1 = (sgpp::base::DataVectorSP *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataVectorSP **)&jarg1; 
  {
    try {
      (arg1)->normalize();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataVectorSP_1normalize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  sgpp::base::DataVectorSP *arg1 = (sgpp::base::DataVectorSP *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataVectorSP **)&jarg1; 
  arg2 = (float)jarg2; 
  {
    try {
      (arg1)->normalize(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataVectorSP_1toString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::base::DataVectorSP *arg1 = (sgpp::base::DataVectorSP *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataVectorSP **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::base::DataVectorSP const *)arg1)->toString(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_sgpp_jsgppJNI_DataVectorSP_1toString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  sgpp::base::DataVectorSP *arg1 = (sgpp::base::DataVectorSP *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataVectorSP **)&jarg1; 
  {
    try {
      result = ((sgpp::base::DataVectorSP const *)arg1)->toString();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1DataVectorSP(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::DataVectorSP *arg1 = (sgpp::base::DataVectorSP *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::DataVectorSP **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1DataMatrixSP_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  sgpp::base::DataMatrixSP *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (sgpp::base::DataMatrixSP *)new sgpp::base::DataMatrixSP(arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::DataMatrixSP **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1DataMatrixSP_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jfloat jarg3) {
  jlong jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  float arg3 ;
  sgpp::base::DataMatrixSP *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (float)jarg3; 
  {
    try {
      result = (sgpp::base::DataMatrixSP *)new sgpp::base::DataMatrixSP(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::DataMatrixSP **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1DataMatrixSP_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::DataMatrixSP *arg1 = 0 ;
  sgpp::base::DataMatrixSP *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataMatrixSP **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrixSP const & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::base::DataMatrixSP *)new sgpp::base::DataMatrixSP((sgpp::base::DataMatrixSP const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::DataMatrixSP **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1DataMatrixSP_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  float *arg1 = (float *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  sgpp::base::DataMatrixSP *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(float **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (sgpp::base::DataMatrixSP *)new sgpp::base::DataMatrixSP(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::DataMatrixSP **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataMatrixSP_1resize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::base::DataMatrixSP *arg1 = (sgpp::base::DataMatrixSP *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataMatrixSP **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      (arg1)->resize(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataMatrixSP_1resize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  sgpp::base::DataMatrixSP *arg1 = (sgpp::base::DataMatrixSP *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataMatrixSP **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  {
    try {
      (arg1)->resize(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataMatrixSP_1resizeZero_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::base::DataMatrixSP *arg1 = (sgpp::base::DataMatrixSP *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataMatrixSP **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      (arg1)->resizeZero(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataMatrixSP_1resizeZero_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  sgpp::base::DataMatrixSP *arg1 = (sgpp::base::DataMatrixSP *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataMatrixSP **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  {
    try {
      (arg1)->resizeZero(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataMatrixSP_1addSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::base::DataMatrixSP *arg1 = (sgpp::base::DataMatrixSP *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataMatrixSP **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      (arg1)->addSize(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DataMatrixSP_1appendRow_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::DataMatrixSP *arg1 = (sgpp::base::DataMatrixSP *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataMatrixSP **)&jarg1; 
  {
    try {
      result = (arg1)->appendRow();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DataMatrixSP_1appendRow_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  sgpp::base::DataMatrixSP *arg1 = (sgpp::base::DataMatrixSP *) 0 ;
  sgpp::base::DataVectorSP *arg2 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::DataMatrixSP **)&jarg1; 
  arg2 = *(sgpp::base::DataVectorSP **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVectorSP const & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->appendRow((sgpp::base::DataVectorSP const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataMatrixSP_1setAll(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  sgpp::base::DataMatrixSP *arg1 = (sgpp::base::DataMatrixSP *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataMatrixSP **)&jarg1; 
  arg2 = (float)jarg2; 
  {
    try {
      (arg1)->setAll(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataMatrixSP_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::base::DataMatrixSP *arg1 = (sgpp::base::DataMatrixSP *) 0 ;
  sgpp::base::DataMatrixSP *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::DataMatrixSP **)&jarg1; 
  arg2 = *(sgpp::base::DataMatrixSP **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrixSP const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->copyFrom((sgpp::base::DataMatrixSP const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataMatrixSP_1transpose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::base::DataMatrixSP *arg1 = (sgpp::base::DataMatrixSP *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataMatrixSP **)&jarg1; 
  {
    try {
      (arg1)->transpose();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DataMatrixSP_1operatorAssignment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  sgpp::base::DataMatrixSP *arg1 = (sgpp::base::DataMatrixSP *) 0 ;
  sgpp::base::DataMatrixSP *arg2 = 0 ;
  sgpp::base::DataMatrixSP *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::DataMatrixSP **)&jarg1; 
  arg2 = *(sgpp::base::DataMatrixSP **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrixSP const & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::base::DataMatrixSP *) &(arg1)->operator =((sgpp::base::DataMatrixSP const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::DataMatrixSP **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_sgpp_jsgppJNI_DataMatrixSP_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jfloat jresult = 0 ;
  sgpp::base::DataMatrixSP *arg1 = (sgpp::base::DataMatrixSP *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataMatrixSP **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (float)((sgpp::base::DataMatrixSP const *)arg1)->get(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataMatrixSP_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jfloat jarg4) {
  sgpp::base::DataMatrixSP *arg1 = (sgpp::base::DataMatrixSP *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  float arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataMatrixSP **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (float)jarg4; 
  {
    try {
      (arg1)->set(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataMatrixSP_1getRow_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  sgpp::base::DataMatrixSP *arg1 = (sgpp::base::DataMatrixSP *) 0 ;
  size_t arg2 ;
  sgpp::base::DataVectorSP *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(sgpp::base::DataMatrixSP **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(sgpp::base::DataVectorSP **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVectorSP & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::base::DataMatrixSP const *)arg1)->getRow(arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataMatrixSP_1getRow_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  sgpp::base::DataMatrixSP *arg1 = (sgpp::base::DataMatrixSP *) 0 ;
  size_t arg2 ;
  std::vector< float > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(sgpp::base::DataMatrixSP **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(std::vector< float > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< float > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::base::DataMatrixSP const *)arg1)->getRow(arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataMatrixSP_1setRow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  sgpp::base::DataMatrixSP *arg1 = (sgpp::base::DataMatrixSP *) 0 ;
  size_t arg2 ;
  sgpp::base::DataVectorSP *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(sgpp::base::DataMatrixSP **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(sgpp::base::DataVectorSP **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVectorSP const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setRow(arg2,(sgpp::base::DataVectorSP const &)*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataMatrixSP_1getColumn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  sgpp::base::DataMatrixSP *arg1 = (sgpp::base::DataMatrixSP *) 0 ;
  size_t arg2 ;
  sgpp::base::DataVectorSP *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(sgpp::base::DataMatrixSP **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(sgpp::base::DataVectorSP **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVectorSP & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::base::DataMatrixSP const *)arg1)->getColumn(arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataMatrixSP_1setColumn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  sgpp::base::DataMatrixSP *arg1 = (sgpp::base::DataMatrixSP *) 0 ;
  size_t arg2 ;
  sgpp::base::DataVectorSP *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(sgpp::base::DataMatrixSP **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(sgpp::base::DataVectorSP **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVectorSP const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setColumn(arg2,(sgpp::base::DataVectorSP const &)*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataMatrixSP_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::base::DataMatrixSP *arg1 = (sgpp::base::DataMatrixSP *) 0 ;
  sgpp::base::DataMatrixSP *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::DataMatrixSP **)&jarg1; 
  arg2 = *(sgpp::base::DataMatrixSP **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrixSP const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->add((sgpp::base::DataMatrixSP const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataMatrixSP_1sub(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::base::DataMatrixSP *arg1 = (sgpp::base::DataMatrixSP *) 0 ;
  sgpp::base::DataMatrixSP *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::DataMatrixSP **)&jarg1; 
  arg2 = *(sgpp::base::DataMatrixSP **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrixSP const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->sub((sgpp::base::DataMatrixSP const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataMatrixSP_1addReduce_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::base::DataMatrixSP *arg1 = (sgpp::base::DataMatrixSP *) 0 ;
  sgpp::base::DataVectorSP *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::DataMatrixSP **)&jarg1; 
  arg2 = *(sgpp::base::DataVectorSP **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVectorSP & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->addReduce(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataMatrixSP_1addReduce_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  sgpp::base::DataMatrixSP *arg1 = (sgpp::base::DataMatrixSP *) 0 ;
  sgpp::base::DataVectorSP *arg2 = 0 ;
  sgpp::base::DataVectorSP *arg3 = 0 ;
  size_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::base::DataMatrixSP **)&jarg1; 
  arg2 = *(sgpp::base::DataVectorSP **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVectorSP & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVectorSP **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVectorSP & reference is null");
    return ;
  } 
  arg4 = (size_t)jarg4; 
  {
    try {
      (arg1)->addReduce(*arg2,*arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataMatrixSP_1expand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::base::DataMatrixSP *arg1 = (sgpp::base::DataMatrixSP *) 0 ;
  sgpp::base::DataVectorSP *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::DataMatrixSP **)&jarg1; 
  arg2 = *(sgpp::base::DataVectorSP **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVectorSP const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->expand((sgpp::base::DataVectorSP const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataMatrixSP_1componentwise_1mult(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::base::DataMatrixSP *arg1 = (sgpp::base::DataMatrixSP *) 0 ;
  sgpp::base::DataMatrixSP *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::DataMatrixSP **)&jarg1; 
  arg2 = *(sgpp::base::DataMatrixSP **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrixSP const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->componentwise_mult((sgpp::base::DataMatrixSP const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataMatrixSP_1componentwise_1div(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::base::DataMatrixSP *arg1 = (sgpp::base::DataMatrixSP *) 0 ;
  sgpp::base::DataMatrixSP *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::DataMatrixSP **)&jarg1; 
  arg2 = *(sgpp::base::DataMatrixSP **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrixSP const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->componentwise_div((sgpp::base::DataMatrixSP const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataMatrixSP_1mult_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::base::DataMatrixSP *arg1 = (sgpp::base::DataMatrixSP *) 0 ;
  sgpp::base::DataVectorSP *arg2 = 0 ;
  sgpp::base::DataVectorSP *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::base::DataMatrixSP **)&jarg1; 
  arg2 = *(sgpp::base::DataVectorSP **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVectorSP const & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVectorSP **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVectorSP & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->mult((sgpp::base::DataVectorSP const &)*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataMatrixSP_1mult_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  sgpp::base::DataMatrixSP *arg1 = (sgpp::base::DataMatrixSP *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataMatrixSP **)&jarg1; 
  arg2 = (float)jarg2; 
  {
    try {
      (arg1)->mult(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataMatrixSP_1sqr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::base::DataMatrixSP *arg1 = (sgpp::base::DataMatrixSP *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataMatrixSP **)&jarg1; 
  {
    try {
      (arg1)->sqr();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataMatrixSP_1sqrt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::base::DataMatrixSP *arg1 = (sgpp::base::DataMatrixSP *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataMatrixSP **)&jarg1; 
  {
    try {
      (arg1)->sqrt();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataMatrixSP_1abs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::base::DataMatrixSP *arg1 = (sgpp::base::DataMatrixSP *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataMatrixSP **)&jarg1; 
  {
    try {
      (arg1)->abs();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jfloat JNICALL Java_sgpp_jsgppJNI_DataMatrixSP_1sum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  sgpp::base::DataMatrixSP *arg1 = (sgpp::base::DataMatrixSP *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataMatrixSP **)&jarg1; 
  {
    try {
      result = (float)((sgpp::base::DataMatrixSP const *)arg1)->sum();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_sgpp_jsgppJNI_DataMatrixSP_1min_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jfloat jresult = 0 ;
  sgpp::base::DataMatrixSP *arg1 = (sgpp::base::DataMatrixSP *) 0 ;
  size_t arg2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataMatrixSP **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (float)((sgpp::base::DataMatrixSP const *)arg1)->min(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_sgpp_jsgppJNI_DataMatrixSP_1min_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  sgpp::base::DataMatrixSP *arg1 = (sgpp::base::DataMatrixSP *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataMatrixSP **)&jarg1; 
  {
    try {
      result = (float)((sgpp::base::DataMatrixSP const *)arg1)->min();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_sgpp_jsgppJNI_DataMatrixSP_1max_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jfloat jresult = 0 ;
  sgpp::base::DataMatrixSP *arg1 = (sgpp::base::DataMatrixSP *) 0 ;
  size_t arg2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataMatrixSP **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (float)((sgpp::base::DataMatrixSP const *)arg1)->max(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_sgpp_jsgppJNI_DataMatrixSP_1max_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  sgpp::base::DataMatrixSP *arg1 = (sgpp::base::DataMatrixSP *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataMatrixSP **)&jarg1; 
  {
    try {
      result = (float)((sgpp::base::DataMatrixSP const *)arg1)->max();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataMatrixSP_1minmax_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  sgpp::base::DataMatrixSP *arg1 = (sgpp::base::DataMatrixSP *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataMatrixSP **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(float **)&jarg3; 
  arg4 = *(float **)&jarg4; 
  {
    try {
      ((sgpp::base::DataMatrixSP const *)arg1)->minmax(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataMatrixSP_1minmax_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  sgpp::base::DataMatrixSP *arg1 = (sgpp::base::DataMatrixSP *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataMatrixSP **)&jarg1; 
  arg2 = *(float **)&jarg2; 
  arg3 = *(float **)&jarg3; 
  {
    try {
      ((sgpp::base::DataMatrixSP const *)arg1)->minmax(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DataMatrixSP_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::DataMatrixSP *arg1 = (sgpp::base::DataMatrixSP *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataMatrixSP **)&jarg1; 
  {
    try {
      result = ((sgpp::base::DataMatrixSP const *)arg1)->getSize();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DataMatrixSP_1getUnused(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::DataMatrixSP *arg1 = (sgpp::base::DataMatrixSP *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataMatrixSP **)&jarg1; 
  {
    try {
      result = ((sgpp::base::DataMatrixSP const *)arg1)->getUnused();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DataMatrixSP_1getNumberNonZero(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::DataMatrixSP *arg1 = (sgpp::base::DataMatrixSP *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataMatrixSP **)&jarg1; 
  {
    try {
      result = ((sgpp::base::DataMatrixSP const *)arg1)->getNumberNonZero();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DataMatrixSP_1getNrows(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::DataMatrixSP *arg1 = (sgpp::base::DataMatrixSP *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataMatrixSP **)&jarg1; 
  {
    try {
      result = ((sgpp::base::DataMatrixSP const *)arg1)->getNrows();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DataMatrixSP_1getNcols(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::DataMatrixSP *arg1 = (sgpp::base::DataMatrixSP *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataMatrixSP **)&jarg1; 
  {
    try {
      result = ((sgpp::base::DataMatrixSP const *)arg1)->getNcols();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DataMatrixSP_1getInc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::DataMatrixSP *arg1 = (sgpp::base::DataMatrixSP *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataMatrixSP **)&jarg1; 
  {
    try {
      result = ((sgpp::base::DataMatrixSP const *)arg1)->getInc();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataMatrixSP_1setInc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::base::DataMatrixSP *arg1 = (sgpp::base::DataMatrixSP *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataMatrixSP **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      (arg1)->setInc(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataMatrixSP_1normalizeDimension_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::base::DataMatrixSP *arg1 = (sgpp::base::DataMatrixSP *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataMatrixSP **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      (arg1)->normalizeDimension(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataMatrixSP_1normalizeDimension_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jfloat jarg3) {
  sgpp::base::DataMatrixSP *arg1 = (sgpp::base::DataMatrixSP *) 0 ;
  size_t arg2 ;
  float arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataMatrixSP **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (float)jarg3; 
  {
    try {
      (arg1)->normalizeDimension(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataMatrixSP_1toString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::base::DataMatrixSP *arg1 = (sgpp::base::DataMatrixSP *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataMatrixSP **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::base::DataMatrixSP const *)arg1)->toString(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_sgpp_jsgppJNI_DataMatrixSP_1toString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  sgpp::base::DataMatrixSP *arg1 = (sgpp::base::DataMatrixSP *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataMatrixSP **)&jarg1; 
  {
    try {
      result = ((sgpp::base::DataMatrixSP const *)arg1)->toString();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1DataMatrixSP(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::DataMatrixSP *arg1 = (sgpp::base::DataMatrixSP *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::DataMatrixSP **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1DataVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::base::DataVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::base::DataVector *)new sgpp::base::DataVector();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::DataVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1DataVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::DataVector *arg1 = 0 ;
  sgpp::base::DataVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataVector **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::base::DataVector *)new sgpp::base::DataVector((sgpp::base::DataVector const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::DataVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DataVector_1operatorAssignment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  sgpp::base::DataVector *arg1 = (sgpp::base::DataVector *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::DataVector **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::base::DataVector *) &(arg1)->operator =((sgpp::base::DataVector const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::DataVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1DataVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::DataVector *arg1 = (sgpp::base::DataVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::DataVector **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1DataVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  sgpp::base::DataVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (sgpp::base::DataVector *)new sgpp::base::DataVector(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::DataVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1DataVector_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  size_t arg1 ;
  double arg2 ;
  sgpp::base::DataVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      result = (sgpp::base::DataVector *)new sgpp::base::DataVector(arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::DataVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1DataVector_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  double *arg1 = (double *) 0 ;
  size_t arg2 ;
  sgpp::base::DataVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(double **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (sgpp::base::DataVector *)new sgpp::base::DataVector(arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::DataVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1DataVector_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< double > arg1 ;
  std::vector< double > *argp1 ;
  sgpp::base::DataVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::vector< double > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< double >");
    return 0;
  }
  arg1 = *argp1; 
  {
    try {
      result = (sgpp::base::DataVector *)new sgpp::base::DataVector(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::DataVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1DataVector_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  SwigValueWrapper< std::vector< int > > arg1 ;
  std::vector< int > *argp1 ;
  sgpp::base::DataVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(std::vector< int > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< int >");
    return 0;
  }
  arg1 = *argp1; 
  {
    try {
      result = (sgpp::base::DataVector *)new sgpp::base::DataVector(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::DataVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DataVector_1fromFile(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  sgpp::base::DataVector result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = sgpp::base::DataVector::fromFile((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::DataVector **)&jresult = new sgpp::base::DataVector((const sgpp::base::DataVector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DataVector_1fromString(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  sgpp::base::DataVector result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = sgpp::base::DataVector::fromString((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::DataVector **)&jresult = new sgpp::base::DataVector((const sgpp::base::DataVector &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataVector_1resizeZero(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::base::DataVector *arg1 = (sgpp::base::DataVector *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataVector **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      (arg1)->resizeZero(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataVector_1restructure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::base::DataVector *arg1 = (sgpp::base::DataVector *) 0 ;
  std::vector< size_t > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::DataVector **)&jarg1; 
  arg2 = *(std::vector< size_t > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< size_t > & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->restructure(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DataVector_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::DataVector *arg1 = (sgpp::base::DataVector *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataVector **)&jarg1; 
  {
    try {
      result = (arg1)->append();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DataVector_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  sgpp::base::DataVector *arg1 = (sgpp::base::DataVector *) 0 ;
  double arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataVector **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      result = (arg1)->append(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataVector_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdouble jarg3) {
  sgpp::base::DataVector *arg1 = (sgpp::base::DataVector *) 0 ;
  size_t arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataVector **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->insert(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataVector_1setAll(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::base::DataVector *arg1 = (sgpp::base::DataVector *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataVector **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setAll(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_DataVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jdouble jresult = 0 ;
  sgpp::base::DataVector *arg1 = (sgpp::base::DataVector *) 0 ;
  size_t arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataVector **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (double)((sgpp::base::DataVector const *)arg1)->get(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdouble jarg3) {
  sgpp::base::DataVector *arg1 = (sgpp::base::DataVector *) 0 ;
  size_t arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataVector **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->set(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataVector_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::base::DataVector *arg1 = (sgpp::base::DataVector *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::DataVector **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->copyFrom((sgpp::base::DataVector const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::base::DataVector *arg1 = (sgpp::base::DataVector *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::DataVector **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->add((sgpp::base::DataVector const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataVector_1accumulate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::base::DataVector *arg1 = (sgpp::base::DataVector *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::DataVector **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->accumulate((sgpp::base::DataVector const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataVector_1sub(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::base::DataVector *arg1 = (sgpp::base::DataVector *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::DataVector **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->sub((sgpp::base::DataVector const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataVector_1componentwise_1mult(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::base::DataVector *arg1 = (sgpp::base::DataVector *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::DataVector **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->componentwise_mult((sgpp::base::DataVector const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataVector_1componentwise_1div(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::base::DataVector *arg1 = (sgpp::base::DataVector *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::DataVector **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->componentwise_div((sgpp::base::DataVector const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_DataVector_1dotProduct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::base::DataVector *arg1 = (sgpp::base::DataVector *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::DataVector **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)((sgpp::base::DataVector const *)arg1)->dotProduct((sgpp::base::DataVector const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataVector_1mult(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::base::DataVector *arg1 = (sgpp::base::DataVector *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataVector **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->mult(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataVector_1sqr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::base::DataVector *arg1 = (sgpp::base::DataVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataVector **)&jarg1; 
  {
    try {
      (arg1)->sqr();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataVector_1sqrt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::base::DataVector *arg1 = (sgpp::base::DataVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataVector **)&jarg1; 
  {
    try {
      (arg1)->sqrt();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataVector_1abs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::base::DataVector *arg1 = (sgpp::base::DataVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataVector **)&jarg1; 
  {
    try {
      (arg1)->abs();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_DataVector_1sum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::base::DataVector *arg1 = (sgpp::base::DataVector *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataVector **)&jarg1; 
  {
    try {
      result = (double)((sgpp::base::DataVector const *)arg1)->sum();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_DataVector_1maxNorm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::base::DataVector *arg1 = (sgpp::base::DataVector *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataVector **)&jarg1; 
  {
    try {
      result = (double)((sgpp::base::DataVector const *)arg1)->maxNorm();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_DataVector_1RMSNorm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::base::DataVector *arg1 = (sgpp::base::DataVector *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataVector **)&jarg1; 
  {
    try {
      result = (double)((sgpp::base::DataVector const *)arg1)->RMSNorm();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_DataVector_1l2Norm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::base::DataVector *arg1 = (sgpp::base::DataVector *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataVector **)&jarg1; 
  {
    try {
      result = (double)((sgpp::base::DataVector const *)arg1)->l2Norm();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_DataVector_1min(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::base::DataVector *arg1 = (sgpp::base::DataVector *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataVector **)&jarg1; 
  {
    try {
      result = (double)((sgpp::base::DataVector const *)arg1)->min();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_DataVector_1max(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::base::DataVector *arg1 = (sgpp::base::DataVector *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataVector **)&jarg1; 
  {
    try {
      result = (double)((sgpp::base::DataVector const *)arg1)->max();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataVector_1minmax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  sgpp::base::DataVector *arg1 = (sgpp::base::DataVector *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataVector **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  {
    try {
      ((sgpp::base::DataVector const *)arg1)->minmax(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataVector_1axpy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3, jobject jarg3_) {
  sgpp::base::DataVector *arg1 = (sgpp::base::DataVector *) 0 ;
  double arg2 ;
  sgpp::base::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(sgpp::base::DataVector **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->axpy(arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DataVector_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::DataVector *arg1 = (sgpp::base::DataVector *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataVector **)&jarg1; 
  {
    try {
      result = ((sgpp::base::DataVector const *)arg1)->getSize();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DataVector_1getNumberNonZero(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::DataVector *arg1 = (sgpp::base::DataVector *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataVector **)&jarg1; 
  {
    try {
      result = ((sgpp::base::DataVector const *)arg1)->getNumberNonZero();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataVector_1partitionClasses(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::base::DataVector *arg1 = (sgpp::base::DataVector *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataVector **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->partitionClasses(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataVector_1normalize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::base::DataVector *arg1 = (sgpp::base::DataVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataVector **)&jarg1; 
  {
    try {
      (arg1)->normalize();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataVector_1normalize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::base::DataVector *arg1 = (sgpp::base::DataVector *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataVector **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->normalize(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataVector_1toString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::base::DataVector *arg1 = (sgpp::base::DataVector *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataVector **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::base::DataVector const *)arg1)->toString(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_sgpp_jsgppJNI_DataVector_1toString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  sgpp::base::DataVector *arg1 = (sgpp::base::DataVector *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataVector **)&jarg1; 
  {
    try {
      result = ((sgpp::base::DataVector const *)arg1)->toString();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataVector_1toFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  sgpp::base::DataVector *arg1 = (sgpp::base::DataVector *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataVector **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      ((sgpp::base::DataVector const *)arg1)->toFile((std::string const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1DataMatrix_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::base::DataMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::base::DataMatrix *)new sgpp::base::DataMatrix();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::DataMatrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1DataMatrix_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::DataMatrix *arg1 = 0 ;
  sgpp::base::DataMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataMatrix **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix const & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::base::DataMatrix *)new sgpp::base::DataMatrix((sgpp::base::DataMatrix const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::DataMatrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DataMatrix_1operatorAssignment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  sgpp::base::DataMatrix *arg1 = (sgpp::base::DataMatrix *) 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  sgpp::base::DataMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::DataMatrix **)&jarg1; 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix const & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::base::DataMatrix *) &(arg1)->operator =((sgpp::base::DataMatrix const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::DataMatrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1DataMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::DataMatrix *arg1 = (sgpp::base::DataMatrix *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::DataMatrix **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1DataMatrix_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  sgpp::base::DataMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (sgpp::base::DataMatrix *)new sgpp::base::DataMatrix(arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::DataMatrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1DataMatrix_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  double arg3 ;
  sgpp::base::DataMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      result = (sgpp::base::DataMatrix *)new sgpp::base::DataMatrix(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::DataMatrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1DataMatrix_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  double *arg1 = (double *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  sgpp::base::DataMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(double **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (sgpp::base::DataMatrix *)new sgpp::base::DataMatrix((double const *)arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::DataMatrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DataMatrix_1fromFile(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  sgpp::base::DataMatrix result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = sgpp::base::DataMatrix::fromFile((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::DataMatrix **)&jresult = new sgpp::base::DataMatrix((const sgpp::base::DataMatrix &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DataMatrix_1fromString(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  sgpp::base::DataMatrix result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = sgpp::base::DataMatrix::fromString((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::DataMatrix **)&jresult = new sgpp::base::DataMatrix((const sgpp::base::DataMatrix &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataMatrix_1resize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::base::DataMatrix *arg1 = (sgpp::base::DataMatrix *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataMatrix **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      (arg1)->resize(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataMatrix_1resizeRows(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::base::DataMatrix *arg1 = (sgpp::base::DataMatrix *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataMatrix **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      (arg1)->resizeRows(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataMatrix_1resize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  sgpp::base::DataMatrix *arg1 = (sgpp::base::DataMatrix *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataMatrix **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  {
    try {
      (arg1)->resize(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataMatrix_1resizeRowsCols(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  sgpp::base::DataMatrix *arg1 = (sgpp::base::DataMatrix *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataMatrix **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  {
    try {
      (arg1)->resizeRowsCols(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataMatrix_1resizeQuadratic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::base::DataMatrix *arg1 = (sgpp::base::DataMatrix *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataMatrix **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      (arg1)->resizeQuadratic(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataMatrix_1resizeZero_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::base::DataMatrix *arg1 = (sgpp::base::DataMatrix *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataMatrix **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      (arg1)->resizeZero(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataMatrix_1resizeZero_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  sgpp::base::DataMatrix *arg1 = (sgpp::base::DataMatrix *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataMatrix **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  {
    try {
      (arg1)->resizeZero(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataMatrix_1resizeToSubMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  sgpp::base::DataMatrix *arg1 = (sgpp::base::DataMatrix *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  size_t arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataMatrix **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (size_t)jarg5; 
  {
    try {
      (arg1)->resizeToSubMatrix(arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataMatrix_1reserveAdditionalRows(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::base::DataMatrix *arg1 = (sgpp::base::DataMatrix *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataMatrix **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      (arg1)->reserveAdditionalRows(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DataMatrix_1appendRow_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::DataMatrix *arg1 = (sgpp::base::DataMatrix *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataMatrix **)&jarg1; 
  {
    try {
      result = (arg1)->appendRow();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DataMatrix_1appendRow_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  sgpp::base::DataMatrix *arg1 = (sgpp::base::DataMatrix *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::DataMatrix **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->appendRow((sgpp::base::DataVector const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DataMatrix_1appendCol(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  sgpp::base::DataMatrix *arg1 = (sgpp::base::DataMatrix *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::DataMatrix **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->appendCol((sgpp::base::DataVector const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataMatrix_1setAll(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::base::DataMatrix *arg1 = (sgpp::base::DataMatrix *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataMatrix **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setAll(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataMatrix_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::base::DataMatrix *arg1 = (sgpp::base::DataMatrix *) 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::DataMatrix **)&jarg1; 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->copyFrom((sgpp::base::DataMatrix const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataMatrix_1transpose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::base::DataMatrix *arg1 = (sgpp::base::DataMatrix *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataMatrix **)&jarg1; 
  {
    try {
      (arg1)->transpose();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_DataMatrix_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jdouble jresult = 0 ;
  sgpp::base::DataMatrix *arg1 = (sgpp::base::DataMatrix *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataMatrix **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (double)((sgpp::base::DataMatrix const *)arg1)->get(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataMatrix_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jdouble jarg4) {
  sgpp::base::DataMatrix *arg1 = (sgpp::base::DataMatrix *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataMatrix **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->set(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataMatrix_1getRow_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  sgpp::base::DataMatrix *arg1 = (sgpp::base::DataMatrix *) 0 ;
  size_t arg2 ;
  sgpp::base::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(sgpp::base::DataMatrix **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::base::DataMatrix const *)arg1)->getRow(arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataMatrix_1getRow_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  sgpp::base::DataMatrix *arg1 = (sgpp::base::DataMatrix *) 0 ;
  size_t arg2 ;
  std::vector< double > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(sgpp::base::DataMatrix **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(std::vector< double > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::base::DataMatrix const *)arg1)->getRow(arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataMatrix_1setRow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  sgpp::base::DataMatrix *arg1 = (sgpp::base::DataMatrix *) 0 ;
  size_t arg2 ;
  sgpp::base::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(sgpp::base::DataMatrix **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setRow(arg2,(sgpp::base::DataVector const &)*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataMatrix_1getColumn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  sgpp::base::DataMatrix *arg1 = (sgpp::base::DataMatrix *) 0 ;
  size_t arg2 ;
  sgpp::base::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(sgpp::base::DataMatrix **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::base::DataMatrix const *)arg1)->getColumn(arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataMatrix_1setColumn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  sgpp::base::DataMatrix *arg1 = (sgpp::base::DataMatrix *) 0 ;
  size_t arg2 ;
  sgpp::base::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(sgpp::base::DataMatrix **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setColumn(arg2,(sgpp::base::DataVector const &)*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataMatrix_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::base::DataMatrix *arg1 = (sgpp::base::DataMatrix *) 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::DataMatrix **)&jarg1; 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->add((sgpp::base::DataMatrix const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataMatrix_1sub(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::base::DataMatrix *arg1 = (sgpp::base::DataMatrix *) 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::DataMatrix **)&jarg1; 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->sub((sgpp::base::DataMatrix const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataMatrix_1addReduce_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::base::DataMatrix *arg1 = (sgpp::base::DataMatrix *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::DataMatrix **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->addReduce(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataMatrix_1addReduce_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  sgpp::base::DataMatrix *arg1 = (sgpp::base::DataMatrix *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  size_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::base::DataMatrix **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg4 = (size_t)jarg4; 
  {
    try {
      (arg1)->addReduce(*arg2,*arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataMatrix_1expand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::base::DataMatrix *arg1 = (sgpp::base::DataMatrix *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::DataMatrix **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->expand((sgpp::base::DataVector const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataMatrix_1componentwise_1mult(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::base::DataMatrix *arg1 = (sgpp::base::DataMatrix *) 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::DataMatrix **)&jarg1; 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->componentwise_mult((sgpp::base::DataMatrix const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataMatrix_1componentwise_1div(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::base::DataMatrix *arg1 = (sgpp::base::DataMatrix *) 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::DataMatrix **)&jarg1; 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->componentwise_div((sgpp::base::DataMatrix const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataMatrix_1mult_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::base::DataMatrix *arg1 = (sgpp::base::DataMatrix *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataMatrix **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->mult(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataMatrix_1mult_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::base::DataMatrix *arg1 = (sgpp::base::DataMatrix *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::base::DataMatrix **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->mult((sgpp::base::DataVector const &)*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataMatrix_1sqr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::base::DataMatrix *arg1 = (sgpp::base::DataMatrix *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataMatrix **)&jarg1; 
  {
    try {
      (arg1)->sqr();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataMatrix_1sqrt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::base::DataMatrix *arg1 = (sgpp::base::DataMatrix *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataMatrix **)&jarg1; 
  {
    try {
      (arg1)->sqrt();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataMatrix_1abs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::base::DataMatrix *arg1 = (sgpp::base::DataMatrix *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataMatrix **)&jarg1; 
  {
    try {
      (arg1)->abs();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_DataMatrix_1sum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::base::DataMatrix *arg1 = (sgpp::base::DataMatrix *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataMatrix **)&jarg1; 
  {
    try {
      result = (double)((sgpp::base::DataMatrix const *)arg1)->sum();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_DataMatrix_1min_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jdouble jresult = 0 ;
  sgpp::base::DataMatrix *arg1 = (sgpp::base::DataMatrix *) 0 ;
  size_t arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataMatrix **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (double)((sgpp::base::DataMatrix const *)arg1)->min(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_DataMatrix_1min_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::base::DataMatrix *arg1 = (sgpp::base::DataMatrix *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataMatrix **)&jarg1; 
  {
    try {
      result = (double)((sgpp::base::DataMatrix const *)arg1)->min();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_DataMatrix_1max_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jdouble jresult = 0 ;
  sgpp::base::DataMatrix *arg1 = (sgpp::base::DataMatrix *) 0 ;
  size_t arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataMatrix **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (double)((sgpp::base::DataMatrix const *)arg1)->max(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_DataMatrix_1max_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::base::DataMatrix *arg1 = (sgpp::base::DataMatrix *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataMatrix **)&jarg1; 
  {
    try {
      result = (double)((sgpp::base::DataMatrix const *)arg1)->max();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataMatrix_1minmax_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  sgpp::base::DataMatrix *arg1 = (sgpp::base::DataMatrix *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataMatrix **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(double **)&jarg4; 
  {
    try {
      ((sgpp::base::DataMatrix const *)arg1)->minmax(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataMatrix_1minmax_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  sgpp::base::DataMatrix *arg1 = (sgpp::base::DataMatrix *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataMatrix **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  {
    try {
      ((sgpp::base::DataMatrix const *)arg1)->minmax(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DataMatrix_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::DataMatrix *arg1 = (sgpp::base::DataMatrix *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataMatrix **)&jarg1; 
  {
    try {
      result = ((sgpp::base::DataMatrix const *)arg1)->getSize();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DataMatrix_1getAdditionallyReservedRows(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::DataMatrix *arg1 = (sgpp::base::DataMatrix *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataMatrix **)&jarg1; 
  {
    try {
      result = ((sgpp::base::DataMatrix const *)arg1)->getAdditionallyReservedRows();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DataMatrix_1getNumberNonZero(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::DataMatrix *arg1 = (sgpp::base::DataMatrix *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataMatrix **)&jarg1; 
  {
    try {
      result = ((sgpp::base::DataMatrix const *)arg1)->getNumberNonZero();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DataMatrix_1getNrows(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::DataMatrix *arg1 = (sgpp::base::DataMatrix *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataMatrix **)&jarg1; 
  {
    try {
      result = ((sgpp::base::DataMatrix const *)arg1)->getNrows();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DataMatrix_1getNcols(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::DataMatrix *arg1 = (sgpp::base::DataMatrix *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataMatrix **)&jarg1; 
  {
    try {
      result = ((sgpp::base::DataMatrix const *)arg1)->getNcols();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataMatrix_1normalizeDimension_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::base::DataMatrix *arg1 = (sgpp::base::DataMatrix *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataMatrix **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      (arg1)->normalizeDimension(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataMatrix_1normalizeDimension_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdouble jarg3) {
  sgpp::base::DataMatrix *arg1 = (sgpp::base::DataMatrix *) 0 ;
  size_t arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataMatrix **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->normalizeDimension(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataMatrix_1toString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::base::DataMatrix *arg1 = (sgpp::base::DataMatrix *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataMatrix **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::base::DataMatrix const *)arg1)->toString(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataMatrix_1toFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  sgpp::base::DataMatrix *arg1 = (sgpp::base::DataMatrix *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataMatrix **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      ((sgpp::base::DataMatrix const *)arg1)->toFile((std::string const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_sgpp_jsgppJNI_DataMatrix_1toString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  sgpp::base::DataMatrix *arg1 = (sgpp::base::DataMatrix *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataMatrix **)&jarg1; 
  {
    try {
      result = ((sgpp::base::DataMatrix const *)arg1)->toString();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_BoundingBox1D_1leftBoundary_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::base::BoundingBox1D *arg1 = (sgpp::base::BoundingBox1D *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BoundingBox1D **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->leftBoundary = arg2;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_BoundingBox1D_1leftBoundary_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::base::BoundingBox1D *arg1 = (sgpp::base::BoundingBox1D *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BoundingBox1D **)&jarg1; 
  result = (double) ((arg1)->leftBoundary);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_BoundingBox1D_1rightBoundary_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::base::BoundingBox1D *arg1 = (sgpp::base::BoundingBox1D *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BoundingBox1D **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->rightBoundary = arg2;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_BoundingBox1D_1rightBoundary_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::base::BoundingBox1D *arg1 = (sgpp::base::BoundingBox1D *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BoundingBox1D **)&jarg1; 
  result = (double) ((arg1)->rightBoundary);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_BoundingBox1D_1bDirichletLeft_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  sgpp::base::BoundingBox1D *arg1 = (sgpp::base::BoundingBox1D *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BoundingBox1D **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bDirichletLeft = arg2;
}


SWIGEXPORT jboolean JNICALL Java_sgpp_jsgppJNI_BoundingBox1D_1bDirichletLeft_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  sgpp::base::BoundingBox1D *arg1 = (sgpp::base::BoundingBox1D *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BoundingBox1D **)&jarg1; 
  result = (bool) ((arg1)->bDirichletLeft);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_BoundingBox1D_1bDirichletRight_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  sgpp::base::BoundingBox1D *arg1 = (sgpp::base::BoundingBox1D *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BoundingBox1D **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bDirichletRight = arg2;
}


SWIGEXPORT jboolean JNICALL Java_sgpp_jsgppJNI_BoundingBox1D_1bDirichletRight_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  sgpp::base::BoundingBox1D *arg1 = (sgpp::base::BoundingBox1D *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BoundingBox1D **)&jarg1; 
  result = (bool) ((arg1)->bDirichletRight);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1BoundingBox1D_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::base::BoundingBox1D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::base::BoundingBox1D *)new sgpp::base::BoundingBox1D();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::BoundingBox1D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1BoundingBox1D_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  sgpp::base::BoundingBox1D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      result = (sgpp::base::BoundingBox1D *)new sgpp::base::BoundingBox1D(arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::BoundingBox1D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1BoundingBox1D_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jboolean jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  bool arg3 ;
  bool arg4 ;
  sgpp::base::BoundingBox1D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  {
    try {
      result = (sgpp::base::BoundingBox1D *)new sgpp::base::BoundingBox1D(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::BoundingBox1D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1BoundingBox1D(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::BoundingBox1D *arg1 = (sgpp::base::BoundingBox1D *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::BoundingBox1D **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1BoundingBox_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  sgpp::base::BoundingBox *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (sgpp::base::BoundingBox *)new sgpp::base::BoundingBox(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::BoundingBox **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1BoundingBox_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< sgpp::base::BoundingBox1D > *arg1 = 0 ;
  sgpp::base::BoundingBox *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< sgpp::base::BoundingBox1D > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< sgpp::base::BoundingBox1D > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::base::BoundingBox *)new sgpp::base::BoundingBox((std::vector< sgpp::base::BoundingBox1D > const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::BoundingBox **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1BoundingBox(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::BoundingBox *arg1 = (sgpp::base::BoundingBox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::BoundingBox **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_BoundingBox_1setBoundary(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  sgpp::base::BoundingBox *arg1 = (sgpp::base::BoundingBox *) 0 ;
  size_t arg2 ;
  sgpp::base::BoundingBox1D *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(sgpp::base::BoundingBox **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(sgpp::base::BoundingBox1D **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::BoundingBox1D const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setBoundary(arg2,(sgpp::base::BoundingBox1D const &)*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_BoundingBox_1getBoundary(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  sgpp::base::BoundingBox *arg1 = (sgpp::base::BoundingBox *) 0 ;
  size_t arg2 ;
  sgpp::base::BoundingBox1D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BoundingBox **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (sgpp::base::BoundingBox1D *) &((sgpp::base::BoundingBox const *)arg1)->getBoundary(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::BoundingBox1D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_BoundingBox_1getDimension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::BoundingBox *arg1 = (sgpp::base::BoundingBox *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BoundingBox **)&jarg1; 
  {
    try {
      result = ((sgpp::base::BoundingBox const *)arg1)->getDimension();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_BoundingBox_1getIntervalWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jdouble jresult = 0 ;
  sgpp::base::BoundingBox *arg1 = (sgpp::base::BoundingBox *) 0 ;
  size_t arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BoundingBox **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (double)((sgpp::base::BoundingBox const *)arg1)->getIntervalWidth(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_BoundingBox_1getIntervalOffset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jdouble jresult = 0 ;
  sgpp::base::BoundingBox *arg1 = (sgpp::base::BoundingBox *) 0 ;
  size_t arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BoundingBox **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (double)((sgpp::base::BoundingBox const *)arg1)->getIntervalOffset(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_sgpp_jsgppJNI_BoundingBox_1isUnitCube(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  sgpp::base::BoundingBox *arg1 = (sgpp::base::BoundingBox *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BoundingBox **)&jarg1; 
  {
    try {
      result = (bool)((sgpp::base::BoundingBox const *)arg1)->isUnitCube();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_BoundingBox_1transformPointToBoundingBox_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::base::BoundingBox *arg1 = (sgpp::base::BoundingBox *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::BoundingBox **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::base::BoundingBox const *)arg1)->transformPointToBoundingBox(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_BoundingBox_1transformPointToBoundingBox_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdouble jarg3) {
  jdouble jresult = 0 ;
  sgpp::base::BoundingBox *arg1 = (sgpp::base::BoundingBox *) 0 ;
  size_t arg2 ;
  double arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BoundingBox **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      result = (double)((sgpp::base::BoundingBox const *)arg1)->transformPointToBoundingBox(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_BoundingBox_1transformPointToUnitCube_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::base::BoundingBox *arg1 = (sgpp::base::BoundingBox *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::BoundingBox **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::base::BoundingBox const *)arg1)->transformPointToUnitCube(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_BoundingBox_1transformPointToUnitCube_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdouble jarg3) {
  jdouble jresult = 0 ;
  sgpp::base::BoundingBox *arg1 = (sgpp::base::BoundingBox *) 0 ;
  size_t arg2 ;
  double arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BoundingBox **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      result = (double)((sgpp::base::BoundingBox const *)arg1)->transformPointToUnitCube(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_sgpp_jsgppJNI_BoundingBox_1isContainingPoint_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  sgpp::base::BoundingBox *arg1 = (sgpp::base::BoundingBox *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::BoundingBox **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((sgpp::base::BoundingBox const *)arg1)->isContainingPoint(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_sgpp_jsgppJNI_BoundingBox_1isContainingPoint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdouble jarg3) {
  jboolean jresult = 0 ;
  sgpp::base::BoundingBox *arg1 = (sgpp::base::BoundingBox *) 0 ;
  size_t arg2 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BoundingBox **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      result = (bool)((sgpp::base::BoundingBox const *)arg1)->isContainingPoint(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_sgpp_jsgppJNI_BoundingBox_1hasDirichletBoundaryLeft(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  sgpp::base::BoundingBox *arg1 = (sgpp::base::BoundingBox *) 0 ;
  size_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BoundingBox **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (bool)((sgpp::base::BoundingBox const *)arg1)->hasDirichletBoundaryLeft(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_sgpp_jsgppJNI_BoundingBox_1hasDirichletBoundaryRight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  sgpp::base::BoundingBox *arg1 = (sgpp::base::BoundingBox *) 0 ;
  size_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BoundingBox **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (bool)((sgpp::base::BoundingBox const *)arg1)->hasDirichletBoundaryRight(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_sgpp_jsgppJNI_BoundingBox_1serialize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  sgpp::base::BoundingBox *arg1 = (sgpp::base::BoundingBox *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BoundingBox **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = ((sgpp::base::BoundingBox const *)arg1)->serialize(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_sgpp_jsgppJNI_BoundingBox_1serialize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  sgpp::base::BoundingBox *arg1 = (sgpp::base::BoundingBox *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BoundingBox **)&jarg1; 
  {
    try {
      result = ((sgpp::base::BoundingBox const *)arg1)->serialize();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_BoundingBox_1serialize_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  sgpp::base::BoundingBox *arg1 = (sgpp::base::BoundingBox *) 0 ;
  std::ostream *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BoundingBox **)&jarg1; 
  arg2 = *(std::ostream **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ostream & reference is null");
    return ;
  } 
  arg3 = (int)jarg3; 
  {
    try {
      ((sgpp::base::BoundingBox const *)arg1)->serialize(*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_BoundingBox_1serialize_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::base::BoundingBox *arg1 = (sgpp::base::BoundingBox *) 0 ;
  std::ostream *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BoundingBox **)&jarg1; 
  arg2 = *(std::ostream **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ostream & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::base::BoundingBox const *)arg1)->serialize(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_BoundingBox_1unserialize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  sgpp::base::BoundingBox *arg1 = (sgpp::base::BoundingBox *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BoundingBox **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  {
    try {
      (arg1)->unserialize((std::string const &)*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_BoundingBox_1unserialize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  sgpp::base::BoundingBox *arg1 = (sgpp::base::BoundingBox *) 0 ;
  std::istream *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BoundingBox **)&jarg1; 
  arg2 = *(std::istream **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::istream & reference is null");
    return ;
  } 
  arg3 = (int)jarg3; 
  {
    try {
      (arg1)->unserialize(*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_BoundingBox_1toString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::base::BoundingBox *arg1 = (sgpp::base::BoundingBox *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BoundingBox **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::base::BoundingBox const *)arg1)->toString(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_sgpp_jsgppJNI_BoundingBox_1toString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  sgpp::base::BoundingBox *arg1 = (sgpp::base::BoundingBox *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BoundingBox **)&jarg1; 
  {
    try {
      result = ((sgpp::base::BoundingBox const *)arg1)->toString();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_sgpp_jsgppJNI_LOOKUPSIZE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(2047);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_sgpp_jsgppJNI_LOOKUPMAX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(11);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_Stretching1D_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  sgpp::base::Stretching1D *arg1 = (sgpp::base::Stretching1D *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::Stretching1D **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->type = *arg2;
}


SWIGEXPORT jstring JNICALL Java_sgpp_jsgppJNI_Stretching1D_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  sgpp::base::Stretching1D *arg1 = (sgpp::base::Stretching1D *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::Stretching1D **)&jarg1; 
  result = (std::string *) & ((arg1)->type);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_Stretching1D_1x_10_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::base::Stretching1D *arg1 = (sgpp::base::Stretching1D *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::Stretching1D **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->x_0 = arg2;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_Stretching1D_1x_10_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::base::Stretching1D *arg1 = (sgpp::base::Stretching1D *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::Stretching1D **)&jarg1; 
  result = (double) ((arg1)->x_0);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_Stretching1D_1xsi_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::base::Stretching1D *arg1 = (sgpp::base::Stretching1D *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::Stretching1D **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->xsi = arg2;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_Stretching1D_1xsi_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::base::Stretching1D *arg1 = (sgpp::base::Stretching1D *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::Stretching1D **)&jarg1; 
  result = (double) ((arg1)->xsi);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_Stretching1D_1lookup_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::base::Stretching1D *arg1 = (sgpp::base::Stretching1D *) 0 ;
  double (*arg2)[3] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::Stretching1D **)&jarg1; 
  arg2 = *(double (**)[3])&jarg2; 
  {
    double (*inp)[3] = (double (*)[3])(arg2);
    double (*dest)[3] = (double (*)[3])(arg1->lookup);
    size_t ii = 0;
    for (; ii < 2047; ++ii) {
      double *ip = inp[ii];
      double *dp = dest[ii];
      size_t jj = 0;
      for (; jj < 3; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_Stretching1D_1lookup_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::Stretching1D *arg1 = (sgpp::base::Stretching1D *) 0 ;
  double (*result)[3] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::Stretching1D **)&jarg1; 
  result = (double (*)[3])(double (*)[3]) ((arg1)->lookup);
  *(double (**)[3])&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1Stretching1D_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::base::Stretching1D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::base::Stretching1D *)new sgpp::base::Stretching1D();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::Stretching1D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1Stretching1D_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  sgpp::base::Stretching1D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (sgpp::base::Stretching1D *)new sgpp::base::Stretching1D((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::Stretching1D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1Stretching1D(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::Stretching1D *arg1 = (sgpp::base::Stretching1D *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::Stretching1D **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1Stretching_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  sgpp::base::Stretching *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (sgpp::base::Stretching *)new sgpp::base::Stretching(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::Stretching **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1Stretching_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  std::vector< sgpp::base::BoundingBox1D > *arg1 = 0 ;
  std::vector< sgpp::base::Stretching1D > *arg2 = 0 ;
  sgpp::base::Stretching *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< sgpp::base::BoundingBox1D > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< sgpp::base::BoundingBox1D > const & reference is null");
    return 0;
  } 
  arg2 = *(std::vector< sgpp::base::Stretching1D > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< sgpp::base::Stretching1D > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::base::Stretching *)new sgpp::base::Stretching((std::vector< sgpp::base::BoundingBox1D > const &)*arg1,(std::vector< sgpp::base::Stretching1D > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::Stretching **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1Stretching_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  size_t arg1 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  sgpp::base::Stretching *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (size_t)jarg1; 
  arg2 = *(std::vector< double > **)&jarg2; 
  {
    try {
      result = (sgpp::base::Stretching *)new sgpp::base::Stretching(arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::Stretching **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1Stretching(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::Stretching *arg1 = (sgpp::base::Stretching *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::Stretching **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_Stretching_1getCoordinate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jdouble jresult = 0 ;
  sgpp::base::Stretching *arg1 = (sgpp::base::Stretching *) 0 ;
  sgpp::base::level_t arg2 ;
  sgpp::base::index_t arg3 ;
  size_t arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::Stretching **)&jarg1; 
  arg2 = (sgpp::base::level_t)jarg2; 
  arg3 = (sgpp::base::index_t)jarg3; 
  arg4 = (size_t)jarg4; 
  {
    try {
      result = (double)((sgpp::base::Stretching const *)arg1)->getCoordinate(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_Stretching_1getStretching1D(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  sgpp::base::Stretching *arg1 = (sgpp::base::Stretching *) 0 ;
  size_t arg2 ;
  sgpp::base::Stretching1D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::Stretching **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (sgpp::base::Stretching1D *) &((sgpp::base::Stretching const *)arg1)->getStretching1D(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::Stretching1D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_Stretching_1printLookupTable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::base::Stretching *arg1 = (sgpp::base::Stretching *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::Stretching **)&jarg1; 
  {
    try {
      ((sgpp::base::Stretching const *)arg1)->printLookupTable();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_Stretching_1getAdjacentPositions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  sgpp::base::Stretching *arg1 = (sgpp::base::Stretching *) 0 ;
  sgpp::base::level_t arg2 ;
  sgpp::base::index_t arg3 ;
  size_t arg4 ;
  double *arg5 = 0 ;
  double *arg6 = 0 ;
  double *arg7 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::Stretching **)&jarg1; 
  arg2 = (sgpp::base::level_t)jarg2; 
  arg3 = (sgpp::base::index_t)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = *(double **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return ;
  } 
  arg6 = *(double **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return ;
  } 
  arg7 = *(double **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::base::Stretching const *)arg1)->getAdjacentPositions(arg2,arg3,arg4,*arg5,*arg6,*arg7);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_sgpp_jsgppJNI_Stretching_1getStretchingMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  sgpp::base::Stretching *arg1 = (sgpp::base::Stretching *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::Stretching **)&jarg1; 
  {
    try {
      result = ((sgpp::base::Stretching const *)arg1)->getStretchingMode();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_Stretching_1getDiscreteVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  sgpp::base::Stretching *arg1 = (sgpp::base::Stretching *) 0 ;
  bool arg2 ;
  std::vector< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::Stretching **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      result = (std::vector< double > *)((sgpp::base::Stretching const *)arg1)->getDiscreteVector(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_Stretching_1getDiscreteVectorLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::Stretching *arg1 = (sgpp::base::Stretching *) 0 ;
  SwigValueWrapper< std::vector< unsigned int > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::Stretching **)&jarg1; 
  {
    try {
      result = ((sgpp::base::Stretching const *)arg1)->getDiscreteVectorLevel();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< sgpp::base::level_t > **)&jresult = new std::vector< sgpp::base::level_t >((const std::vector< sgpp::base::level_t > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_Stretching_1calculateNeighborLookup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::base::Stretching *arg1 = (sgpp::base::Stretching *) 0 ;
  sgpp::base::level_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::Stretching **)&jarg1; 
  arg2 = (sgpp::base::level_t)jarg2; 
  {
    try {
      ((sgpp::base::Stretching const *)arg1)->calculateNeighborLookup(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_sgpp_jsgppJNI_Stretching_1serialize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  sgpp::base::Stretching *arg1 = (sgpp::base::Stretching *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::Stretching **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = ((sgpp::base::Stretching const *)arg1)->serialize(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_sgpp_jsgppJNI_Stretching_1serialize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  sgpp::base::Stretching *arg1 = (sgpp::base::Stretching *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::Stretching **)&jarg1; 
  {
    try {
      result = ((sgpp::base::Stretching const *)arg1)->serialize();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_Stretching_1serialize_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  sgpp::base::Stretching *arg1 = (sgpp::base::Stretching *) 0 ;
  std::ostream *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::Stretching **)&jarg1; 
  arg2 = *(std::ostream **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ostream & reference is null");
    return ;
  } 
  arg3 = (int)jarg3; 
  {
    try {
      ((sgpp::base::Stretching const *)arg1)->serialize(*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_Stretching_1serialize_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::base::Stretching *arg1 = (sgpp::base::Stretching *) 0 ;
  std::ostream *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::Stretching **)&jarg1; 
  arg2 = *(std::ostream **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ostream & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::base::Stretching const *)arg1)->serialize(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_Stretching_1unserialize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4) {
  sgpp::base::Stretching *arg1 = (sgpp::base::Stretching *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::Stretching **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (int)jarg4; 
  {
    try {
      (arg1)->unserialize((std::string const &)*arg2,(std::string const &)*arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_Stretching_1unserialize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jint jarg4) {
  sgpp::base::Stretching *arg1 = (sgpp::base::Stretching *) 0 ;
  std::istream *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::Stretching **)&jarg1; 
  arg2 = *(std::istream **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::istream & reference is null");
    return ;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (int)jarg4; 
  {
    try {
      (arg1)->unserialize(*arg2,(std::string const &)*arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_sgpp_jsgppJNI_SERIALIZATION_1VERSION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(9);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1GridPoint_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  sgpp::base::HashGridPoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (sgpp::base::HashGridPoint *)new sgpp::base::HashGridPoint(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::HashGridPoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1GridPoint_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::base::HashGridPoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::base::HashGridPoint *)new sgpp::base::HashGridPoint();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::HashGridPoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1GridPoint_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::HashGridPoint *arg1 = 0 ;
  sgpp::base::HashGridPoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::HashGridPoint **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::HashGridPoint const & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::base::HashGridPoint *)new sgpp::base::HashGridPoint((sgpp::base::HashGridPoint const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::HashGridPoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1GridPoint_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  std::istream *arg1 = 0 ;
  int arg2 ;
  sgpp::base::HashGridPoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::istream **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::istream & reference is null");
    return 0;
  } 
  arg2 = (int)jarg2; 
  {
    try {
      result = (sgpp::base::HashGridPoint *)new sgpp::base::HashGridPoint(*arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::HashGridPoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1GridPoint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::HashGridPoint *arg1 = (sgpp::base::HashGridPoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::HashGridPoint **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_GridPoint_1serialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  sgpp::base::HashGridPoint *arg1 = (sgpp::base::HashGridPoint *) 0 ;
  std::ostream *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::HashGridPoint **)&jarg1; 
  arg2 = *(std::ostream **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ostream & reference is null");
    return ;
  } 
  arg3 = (int)jarg3; 
  {
    try {
      (arg1)->serialize(*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_GridPoint_1getDimension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::HashGridPoint *arg1 = (sgpp::base::HashGridPoint *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::HashGridPoint **)&jarg1; 
  {
    try {
      result = ((sgpp::base::HashGridPoint const *)arg1)->getDimension();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_GridPoint_1set_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  sgpp::base::HashGridPoint *arg1 = (sgpp::base::HashGridPoint *) 0 ;
  size_t arg2 ;
  sgpp::base::HashGridPoint::level_type arg3 ;
  sgpp::base::HashGridPoint::index_type arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::HashGridPoint **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (sgpp::base::HashGridPoint::level_type)jarg3; 
  arg4 = (sgpp::base::HashGridPoint::index_type)jarg4; 
  {
    try {
      (arg1)->set(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_GridPoint_1set_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jboolean jarg5) {
  sgpp::base::HashGridPoint *arg1 = (sgpp::base::HashGridPoint *) 0 ;
  size_t arg2 ;
  sgpp::base::HashGridPoint::level_type arg3 ;
  sgpp::base::HashGridPoint::index_type arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::HashGridPoint **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (sgpp::base::HashGridPoint::level_type)jarg3; 
  arg4 = (sgpp::base::HashGridPoint::index_type)jarg4; 
  arg5 = jarg5 ? true : false; 
  {
    try {
      (arg1)->set(arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_GridPoint_1push_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  sgpp::base::HashGridPoint *arg1 = (sgpp::base::HashGridPoint *) 0 ;
  size_t arg2 ;
  sgpp::base::HashGridPoint::level_type arg3 ;
  sgpp::base::HashGridPoint::index_type arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::HashGridPoint **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (sgpp::base::HashGridPoint::level_type)jarg3; 
  arg4 = (sgpp::base::HashGridPoint::index_type)jarg4; 
  {
    try {
      (arg1)->push(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_GridPoint_1push_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jboolean jarg5) {
  sgpp::base::HashGridPoint *arg1 = (sgpp::base::HashGridPoint *) 0 ;
  size_t arg2 ;
  sgpp::base::HashGridPoint::level_type arg3 ;
  sgpp::base::HashGridPoint::index_type arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::HashGridPoint **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (sgpp::base::HashGridPoint::level_type)jarg3; 
  arg4 = (sgpp::base::HashGridPoint::index_type)jarg4; 
  arg5 = jarg5 ? true : false; 
  {
    try {
      (arg1)->push(arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_GridPoint_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  sgpp::base::HashGridPoint *arg1 = (sgpp::base::HashGridPoint *) 0 ;
  size_t arg2 ;
  sgpp::base::HashGridPoint::level_type *arg3 = 0 ;
  sgpp::base::HashGridPoint::index_type *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::HashGridPoint **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(sgpp::base::HashGridPoint::level_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::HashGridPoint::level_type & reference is null");
    return ;
  } 
  arg4 = *(sgpp::base::HashGridPoint::index_type **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::HashGridPoint::index_type & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::base::HashGridPoint const *)arg1)->get(arg2,*arg3,*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_GridPoint_1getLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  sgpp::base::HashGridPoint *arg1 = (sgpp::base::HashGridPoint *) 0 ;
  size_t arg2 ;
  sgpp::base::HashGridPoint::level_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::HashGridPoint **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (sgpp::base::HashGridPoint::level_type)((sgpp::base::HashGridPoint const *)arg1)->getLevel(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_GridPoint_1getIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  sgpp::base::HashGridPoint *arg1 = (sgpp::base::HashGridPoint *) 0 ;
  size_t arg2 ;
  sgpp::base::HashGridPoint::index_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::HashGridPoint **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (sgpp::base::HashGridPoint::index_type)((sgpp::base::HashGridPoint const *)arg1)->getIndex(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_GridPoint_1setLeaf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  sgpp::base::HashGridPoint *arg1 = (sgpp::base::HashGridPoint *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::HashGridPoint **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setLeaf(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_sgpp_jsgppJNI_GridPoint_1isLeaf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  sgpp::base::HashGridPoint *arg1 = (sgpp::base::HashGridPoint *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::HashGridPoint **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->isLeaf();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_GridPoint_1getStandardCoordinate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jdouble jresult = 0 ;
  sgpp::base::HashGridPoint *arg1 = (sgpp::base::HashGridPoint *) 0 ;
  size_t arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::HashGridPoint **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (double)((sgpp::base::HashGridPoint const *)arg1)->getStandardCoordinate(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_GridPoint_1getStandardCoordinates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::base::HashGridPoint *arg1 = (sgpp::base::HashGridPoint *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::HashGridPoint **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::base::HashGridPoint const *)arg1)->getStandardCoordinates(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_sgpp_jsgppJNI_GridPoint_1isInnerPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  sgpp::base::HashGridPoint *arg1 = (sgpp::base::HashGridPoint *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::HashGridPoint **)&jarg1; 
  {
    try {
      result = (bool)((sgpp::base::HashGridPoint const *)arg1)->isInnerPoint();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_GridPoint_1rehash(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::base::HashGridPoint *arg1 = (sgpp::base::HashGridPoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::HashGridPoint **)&jarg1; 
  {
    try {
      (arg1)->rehash();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_GridPoint_1getHash(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::HashGridPoint *arg1 = (sgpp::base::HashGridPoint *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::HashGridPoint **)&jarg1; 
  {
    try {
      result = ((sgpp::base::HashGridPoint const *)arg1)->getHash();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_sgpp_jsgppJNI_GridPoint_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  sgpp::base::HashGridPoint *arg1 = (sgpp::base::HashGridPoint *) 0 ;
  sgpp::base::HashGridPoint *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::HashGridPoint **)&jarg1; 
  arg2 = *(sgpp::base::HashGridPoint **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::HashGridPoint const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((sgpp::base::HashGridPoint const *)arg1)->equals((sgpp::base::HashGridPoint const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_GridPoint_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  sgpp::base::HashGridPoint *arg1 = (sgpp::base::HashGridPoint *) 0 ;
  sgpp::base::HashGridPoint *arg2 = 0 ;
  sgpp::base::HashGridPoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::HashGridPoint **)&jarg1; 
  arg2 = *(sgpp::base::HashGridPoint **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::HashGridPoint const & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::base::HashGridPoint *) &(arg1)->assign((sgpp::base::HashGridPoint const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::HashGridPoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_GridPoint_1operatorAssignment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  sgpp::base::HashGridPoint *arg1 = (sgpp::base::HashGridPoint *) 0 ;
  sgpp::base::HashGridPoint *arg2 = 0 ;
  sgpp::base::HashGridPoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::HashGridPoint **)&jarg1; 
  arg2 = *(sgpp::base::HashGridPoint **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::HashGridPoint const & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::base::HashGridPoint *) &(arg1)->operator =((sgpp::base::HashGridPoint const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::HashGridPoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_sgpp_jsgppJNI_GridPoint_1toString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  sgpp::base::HashGridPoint *arg1 = (sgpp::base::HashGridPoint *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::HashGridPoint **)&jarg1; 
  {
    try {
      result = ((sgpp::base::HashGridPoint const *)arg1)->toString();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_GridPoint_1toString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::base::HashGridPoint *arg1 = (sgpp::base::HashGridPoint *) 0 ;
  std::ostream *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::HashGridPoint **)&jarg1; 
  arg2 = *(std::ostream **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ostream & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::base::HashGridPoint const *)arg1)->toString(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_GridPoint_1getLevelSum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::HashGridPoint *arg1 = (sgpp::base::HashGridPoint *) 0 ;
  sgpp::base::HashGridPoint::level_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::HashGridPoint **)&jarg1; 
  {
    try {
      result = (sgpp::base::HashGridPoint::level_type)((sgpp::base::HashGridPoint const *)arg1)->getLevelSum();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_GridPoint_1getLevelMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::HashGridPoint *arg1 = (sgpp::base::HashGridPoint *) 0 ;
  sgpp::base::HashGridPoint::level_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::HashGridPoint **)&jarg1; 
  {
    try {
      result = (sgpp::base::HashGridPoint::level_type)((sgpp::base::HashGridPoint const *)arg1)->getLevelMax();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_GridPoint_1getLevelMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::HashGridPoint *arg1 = (sgpp::base::HashGridPoint *) 0 ;
  sgpp::base::HashGridPoint::level_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::HashGridPoint **)&jarg1; 
  {
    try {
      result = (sgpp::base::HashGridPoint::level_type)((sgpp::base::HashGridPoint const *)arg1)->getLevelMin();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_GridPoint_1getLeftLevelZero(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::base::HashGridPoint *arg1 = (sgpp::base::HashGridPoint *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::HashGridPoint **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      (arg1)->getLeftLevelZero(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_GridPoint_1getRightLevelZero(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::base::HashGridPoint *arg1 = (sgpp::base::HashGridPoint *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::HashGridPoint **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      (arg1)->getRightLevelZero(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_GridPoint_1getLeftChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::base::HashGridPoint *arg1 = (sgpp::base::HashGridPoint *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::HashGridPoint **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      (arg1)->getLeftChild(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_GridPoint_1getRightChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::base::HashGridPoint *arg1 = (sgpp::base::HashGridPoint *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::HashGridPoint **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      (arg1)->getRightChild(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_GridPoint_1getRoot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::base::HashGridPoint *arg1 = (sgpp::base::HashGridPoint *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::HashGridPoint **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      (arg1)->getRoot(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_HashGridPointPointerHashFunctor_1operatorParentheses(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  sgpp::base::HashGridPointPointerHashFunctor *arg1 = (sgpp::base::HashGridPointPointerHashFunctor *) 0 ;
  sgpp::base::HashGridPoint *arg2 = (sgpp::base::HashGridPoint *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::HashGridPointPointerHashFunctor **)&jarg1; 
  arg2 = *(sgpp::base::HashGridPoint **)&jarg2; 
  {
    try {
      result = ((sgpp::base::HashGridPointPointerHashFunctor const *)arg1)->operator ()((sgpp::base::HashGridPoint const *)arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1HashGridPointPointerHashFunctor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::base::HashGridPointPointerHashFunctor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::base::HashGridPointPointerHashFunctor *)new sgpp::base::HashGridPointPointerHashFunctor();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::HashGridPointPointerHashFunctor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1HashGridPointPointerHashFunctor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::HashGridPointPointerHashFunctor *arg1 = (sgpp::base::HashGridPointPointerHashFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::HashGridPointPointerHashFunctor **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_HashGridPointPointerEqualityFunctor_1operatorParentheses(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  sgpp::base::HashGridPointPointerEqualityFunctor *arg1 = (sgpp::base::HashGridPointPointerEqualityFunctor *) 0 ;
  sgpp::base::HashGridPoint *arg2 = (sgpp::base::HashGridPoint *) 0 ;
  sgpp::base::HashGridPoint *arg3 = (sgpp::base::HashGridPoint *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::base::HashGridPointPointerEqualityFunctor **)&jarg1; 
  arg2 = *(sgpp::base::HashGridPoint **)&jarg2; 
  arg3 = *(sgpp::base::HashGridPoint **)&jarg3; 
  {
    try {
      result = ((sgpp::base::HashGridPointPointerEqualityFunctor const *)arg1)->operator ()((sgpp::base::HashGridPoint const *)arg2,(sgpp::base::HashGridPoint const *)arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1HashGridPointPointerEqualityFunctor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::base::HashGridPointPointerEqualityFunctor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::base::HashGridPointPointerEqualityFunctor *)new sgpp::base::HashGridPointPointerEqualityFunctor();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::HashGridPointPointerEqualityFunctor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1HashGridPointPointerEqualityFunctor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::HashGridPointPointerEqualityFunctor *arg1 = (sgpp::base::HashGridPointPointerEqualityFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::HashGridPointPointerEqualityFunctor **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_HashGridPointHashFunctor_1operatorParentheses(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  sgpp::base::HashGridPointHashFunctor *arg1 = (sgpp::base::HashGridPointHashFunctor *) 0 ;
  sgpp::base::HashGridPoint *arg2 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::HashGridPointHashFunctor **)&jarg1; 
  arg2 = *(sgpp::base::HashGridPoint **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::HashGridPoint const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((sgpp::base::HashGridPointHashFunctor const *)arg1)->operator ()((sgpp::base::HashGridPoint const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1HashGridPointHashFunctor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::base::HashGridPointHashFunctor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::base::HashGridPointHashFunctor *)new sgpp::base::HashGridPointHashFunctor();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::HashGridPointHashFunctor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1HashGridPointHashFunctor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::HashGridPointHashFunctor *arg1 = (sgpp::base::HashGridPointHashFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::HashGridPointHashFunctor **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_HashGridPointEqualityFunctor_1operatorParentheses(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  sgpp::base::HashGridPointEqualityFunctor *arg1 = (sgpp::base::HashGridPointEqualityFunctor *) 0 ;
  sgpp::base::HashGridPoint *arg2 = 0 ;
  sgpp::base::HashGridPoint *arg3 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::base::HashGridPointEqualityFunctor **)&jarg1; 
  arg2 = *(sgpp::base::HashGridPoint **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::HashGridPoint const & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::base::HashGridPoint **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::HashGridPoint const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((sgpp::base::HashGridPointEqualityFunctor const *)arg1)->operator ()((sgpp::base::HashGridPoint const &)*arg2,(sgpp::base::HashGridPoint const &)*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1HashGridPointEqualityFunctor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::base::HashGridPointEqualityFunctor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::base::HashGridPointEqualityFunctor *)new sgpp::base::HashGridPointEqualityFunctor();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::HashGridPointEqualityFunctor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1HashGridPointEqualityFunctor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::HashGridPointEqualityFunctor *arg1 = (sgpp::base::HashGridPointEqualityFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::HashGridPointEqualityFunctor **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1GridStorage_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  sgpp::base::HashGridStorage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (sgpp::base::HashGridStorage *)new sgpp::base::HashGridStorage(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::HashGridStorage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1GridStorage_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::BoundingBox *arg1 = 0 ;
  sgpp::base::HashGridStorage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BoundingBox **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::BoundingBox & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::base::HashGridStorage *)new sgpp::base::HashGridStorage(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::HashGridStorage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1GridStorage_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::Stretching *arg1 = 0 ;
  sgpp::base::HashGridStorage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::Stretching **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Stretching & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::base::HashGridStorage *)new sgpp::base::HashGridStorage(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::HashGridStorage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1GridStorage_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  sgpp::base::HashGridStorage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::string **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::base::HashGridStorage *)new sgpp::base::HashGridStorage(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::HashGridStorage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1GridStorage_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::istream *arg1 = 0 ;
  sgpp::base::HashGridStorage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::istream **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::istream & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::base::HashGridStorage *)new sgpp::base::HashGridStorage(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::HashGridStorage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1GridStorage_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::HashGridStorage *arg1 = 0 ;
  sgpp::base::HashGridStorage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::HashGridStorage **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::HashGridStorage & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::base::HashGridStorage *)new sgpp::base::HashGridStorage(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::HashGridStorage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_GridStorage_1operatorAssignment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::base::HashGridStorage *arg1 = (sgpp::base::HashGridStorage *) 0 ;
  sgpp::base::HashGridStorage *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::HashGridStorage **)&jarg1; 
  arg2 = *(sgpp::base::HashGridStorage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::HashGridStorage const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->operator =((sgpp::base::HashGridStorage const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1GridStorage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::HashGridStorage *arg1 = (sgpp::base::HashGridStorage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::HashGridStorage **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_GridStorage_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::base::HashGridStorage *arg1 = (sgpp::base::HashGridStorage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::HashGridStorage **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_GridStorage_1deletePoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  sgpp::base::HashGridStorage *arg1 = (sgpp::base::HashGridStorage *) 0 ;
  std::list< size_t > *arg2 = 0 ;
  std::vector< size_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::HashGridStorage **)&jarg1; 
  arg2 = *(std::list< size_t > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< size_t > & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->deletePoints(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< size_t > **)&jresult = new std::vector< size_t >((const std::vector< size_t > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_GridStorage_1unserializeNoAlgoDims(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::base::HashGridStorage *arg1 = (sgpp::base::HashGridStorage *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::HashGridStorage **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->unserializeNoAlgoDims(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_sgpp_jsgppJNI_GridStorage_1serialize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  sgpp::base::HashGridStorage *arg1 = (sgpp::base::HashGridStorage *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::HashGridStorage **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = ((sgpp::base::HashGridStorage const *)arg1)->serialize(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_sgpp_jsgppJNI_GridStorage_1serialize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  sgpp::base::HashGridStorage *arg1 = (sgpp::base::HashGridStorage *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::HashGridStorage **)&jarg1; 
  {
    try {
      result = ((sgpp::base::HashGridStorage const *)arg1)->serialize();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_GridStorage_1serialize_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  sgpp::base::HashGridStorage *arg1 = (sgpp::base::HashGridStorage *) 0 ;
  std::ostream *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::HashGridStorage **)&jarg1; 
  arg2 = *(std::ostream **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ostream & reference is null");
    return ;
  } 
  arg3 = (int)jarg3; 
  {
    try {
      ((sgpp::base::HashGridStorage const *)arg1)->serialize(*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_GridStorage_1serialize_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::base::HashGridStorage *arg1 = (sgpp::base::HashGridStorage *) 0 ;
  std::ostream *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::HashGridStorage **)&jarg1; 
  arg2 = *(std::ostream **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ostream & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::base::HashGridStorage const *)arg1)->serialize(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_sgpp_jsgppJNI_GridStorage_1toString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  sgpp::base::HashGridStorage *arg1 = (sgpp::base::HashGridStorage *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::HashGridStorage **)&jarg1; 
  {
    try {
      result = ((sgpp::base::HashGridStorage const *)arg1)->toString();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_GridStorage_1toString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::base::HashGridStorage *arg1 = (sgpp::base::HashGridStorage *) 0 ;
  std::ostream *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::HashGridStorage **)&jarg1; 
  arg2 = *(std::ostream **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ostream & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::base::HashGridStorage const *)arg1)->toString(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_GridStorage_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::HashGridStorage *arg1 = (sgpp::base::HashGridStorage *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::HashGridStorage **)&jarg1; 
  {
    try {
      result = ((sgpp::base::HashGridStorage const *)arg1)->getSize();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_GridStorage_1getNumberOfInnerPoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::HashGridStorage *arg1 = (sgpp::base::HashGridStorage *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::HashGridStorage **)&jarg1; 
  {
    try {
      result = ((sgpp::base::HashGridStorage const *)arg1)->getNumberOfInnerPoints();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_GridStorage_1getDimension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::HashGridStorage *arg1 = (sgpp::base::HashGridStorage *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::HashGridStorage **)&jarg1; 
  {
    try {
      result = ((sgpp::base::HashGridStorage const *)arg1)->getDimension();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_GridStorage_1getPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  sgpp::base::HashGridStorage *arg1 = (sgpp::base::HashGridStorage *) 0 ;
  size_t arg2 ;
  sgpp::base::HashGridPoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::HashGridStorage **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (sgpp::base::HashGridPoint *) &((sgpp::base::HashGridStorage const *)arg1)->getPoint(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::HashGridPoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_GridStorage_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  sgpp::base::HashGridStorage *arg1 = (sgpp::base::HashGridStorage *) 0 ;
  sgpp::base::HashGridStorage::point_type *arg2 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::HashGridStorage **)&jarg1; 
  arg2 = *(sgpp::base::HashGridStorage::point_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::HashGridStorage::point_type const & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->insert((sgpp::base::HashGridStorage::point_type const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_GridStorage_1update(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  sgpp::base::HashGridStorage *arg1 = (sgpp::base::HashGridStorage *) 0 ;
  sgpp::base::HashGridStorage::point_type *arg2 = 0 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::HashGridStorage **)&jarg1; 
  arg2 = *(sgpp::base::HashGridStorage::point_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::HashGridStorage::point_type & reference is null");
    return ;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      (arg1)->update(*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_GridStorage_1deleteLast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::base::HashGridStorage *arg1 = (sgpp::base::HashGridStorage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::HashGridStorage **)&jarg1; 
  {
    try {
      (arg1)->deleteLast();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_GridStorage_1create(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  sgpp::base::HashGridStorage *arg1 = (sgpp::base::HashGridStorage *) 0 ;
  sgpp::base::HashGridStorage::point_type *arg2 = 0 ;
  sgpp::base::HashGridStorage::point_pointer result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::HashGridStorage **)&jarg1; 
  arg2 = *(sgpp::base::HashGridStorage::point_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::HashGridStorage::point_type & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::base::HashGridStorage::point_pointer)(arg1)->create(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::HashGridStorage::point_pointer *)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_GridStorage_1destroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::base::HashGridStorage *arg1 = (sgpp::base::HashGridStorage *) 0 ;
  sgpp::base::HashGridStorage::point_pointer arg2 = (sgpp::base::HashGridStorage::point_pointer) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::HashGridStorage **)&jarg1; 
  arg2 = *(sgpp::base::HashGridStorage::point_pointer *)&jarg2; 
  {
    try {
      (arg1)->destroy(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_GridStorage_1store(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  sgpp::base::HashGridStorage *arg1 = (sgpp::base::HashGridStorage *) 0 ;
  sgpp::base::HashGridStorage::point_pointer arg2 = (sgpp::base::HashGridStorage::point_pointer) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::HashGridStorage **)&jarg1; 
  arg2 = *(sgpp::base::HashGridStorage::point_pointer *)&jarg2; 
  {
    try {
      result = (unsigned int)(arg1)->store(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_GridStorage_1find(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  sgpp::base::HashGridStorage *arg1 = (sgpp::base::HashGridStorage *) 0 ;
  sgpp::base::HashGridStorage::point_pointer arg2 = (sgpp::base::HashGridStorage::point_pointer) 0 ;
  SwigValueWrapper< std::unordered_map< sgpp::base::HashGridPoint *,size_t,sgpp::base::HashGridPointPointerHashFunctor,sgpp::base::HashGridPointPointerEqualityFunctor >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::HashGridStorage **)&jarg1; 
  arg2 = *(sgpp::base::HashGridStorage::point_pointer *)&jarg2; 
  {
    try {
      result = (arg1)->find(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::HashGridStorage::grid_map_iterator **)&jresult = new sgpp::base::HashGridStorage::grid_map_iterator((const sgpp::base::HashGridStorage::grid_map_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_GridStorage_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::HashGridStorage *arg1 = (sgpp::base::HashGridStorage *) 0 ;
  SwigValueWrapper< std::unordered_map< sgpp::base::HashGridPoint *,size_t,sgpp::base::HashGridPointPointerHashFunctor,sgpp::base::HashGridPointPointerEqualityFunctor >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::HashGridStorage **)&jarg1; 
  {
    try {
      result = (arg1)->begin();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::HashGridStorage::grid_map_iterator **)&jresult = new sgpp::base::HashGridStorage::grid_map_iterator((const sgpp::base::HashGridStorage::grid_map_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_GridStorage_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::HashGridStorage *arg1 = (sgpp::base::HashGridStorage *) 0 ;
  SwigValueWrapper< std::unordered_map< sgpp::base::HashGridPoint *,size_t,sgpp::base::HashGridPointPointerHashFunctor,sgpp::base::HashGridPointPointerEqualityFunctor >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::HashGridStorage **)&jarg1; 
  {
    try {
      result = (arg1)->end();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::HashGridStorage::grid_map_iterator **)&jresult = new sgpp::base::HashGridStorage::grid_map_iterator((const sgpp::base::HashGridStorage::grid_map_iterator &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_sgpp_jsgppJNI_GridStorage_1isContaining(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  sgpp::base::HashGridStorage *arg1 = (sgpp::base::HashGridStorage *) 0 ;
  sgpp::base::HashGridPoint *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::HashGridStorage **)&jarg1; 
  arg2 = *(sgpp::base::HashGridPoint **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::HashGridPoint & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((sgpp::base::HashGridStorage const *)arg1)->isContaining(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_GridStorage_1getSequenceNumber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  sgpp::base::HashGridStorage *arg1 = (sgpp::base::HashGridStorage *) 0 ;
  sgpp::base::HashGridPoint *arg2 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::HashGridStorage **)&jarg1; 
  arg2 = *(sgpp::base::HashGridPoint **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::HashGridPoint & reference is null");
    return 0;
  } 
  {
    try {
      result = ((sgpp::base::HashGridStorage const *)arg1)->getSequenceNumber(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_sgpp_jsgppJNI_GridStorage_1isInvalidSequenceNumber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  sgpp::base::HashGridStorage *arg1 = (sgpp::base::HashGridStorage *) 0 ;
  size_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::HashGridStorage **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (bool)(arg1)->isInvalidSequenceNumber(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_GridStorage_1getAlgorithmicDimensions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::HashGridStorage *arg1 = (sgpp::base::HashGridStorage *) 0 ;
  std::vector< size_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::HashGridStorage **)&jarg1; 
  {
    try {
      result = (arg1)->getAlgorithmicDimensions();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< size_t > **)&jresult = new std::vector< size_t >((const std::vector< size_t > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_GridStorage_1setAlgorithmicDimensions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::base::HashGridStorage *arg1 = (sgpp::base::HashGridStorage *) 0 ;
  std::vector< size_t > arg2 ;
  std::vector< size_t > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::HashGridStorage **)&jarg1; 
  argp2 = *(std::vector< size_t > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< size_t >");
    return ;
  }
  arg2 = *argp2; 
  {
    try {
      (arg1)->setAlgorithmicDimensions(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_GridStorage_1recalcLeafProperty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::base::HashGridStorage *arg1 = (sgpp::base::HashGridStorage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::HashGridStorage **)&jarg1; 
  {
    try {
      (arg1)->recalcLeafProperty();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_GridStorage_1getBoundingBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::HashGridStorage *arg1 = (sgpp::base::HashGridStorage *) 0 ;
  sgpp::base::BoundingBox *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::HashGridStorage **)&jarg1; 
  {
    try {
      result = (sgpp::base::BoundingBox *)(arg1)->getBoundingBox();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::BoundingBox **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_GridStorage_1getStretching(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::HashGridStorage *arg1 = (sgpp::base::HashGridStorage *) 0 ;
  sgpp::base::Stretching *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::HashGridStorage **)&jarg1; 
  {
    try {
      result = (sgpp::base::Stretching *)(arg1)->getStretching();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::Stretching **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_GridStorage_1setBoundingBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::base::HashGridStorage *arg1 = (sgpp::base::HashGridStorage *) 0 ;
  sgpp::base::BoundingBox *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::HashGridStorage **)&jarg1; 
  arg2 = *(sgpp::base::BoundingBox **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::BoundingBox & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setBoundingBox(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_GridStorage_1setStretching(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::base::HashGridStorage *arg1 = (sgpp::base::HashGridStorage *) 0 ;
  sgpp::base::Stretching *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::HashGridStorage **)&jarg1; 
  arg2 = *(sgpp::base::Stretching **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Stretching & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setStretching(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_GridStorage_1getLevelIndexArraysForEval_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::base::HashGridStorage *arg1 = (sgpp::base::HashGridStorage *) 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  sgpp::base::DataMatrix *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::base::HashGridStorage **)&jarg1; 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataMatrix **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->getLevelIndexArraysForEval(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_GridStorage_1getLevelIndexArraysForEval_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::base::HashGridStorage *arg1 = (sgpp::base::HashGridStorage *) 0 ;
  sgpp::base::DataMatrixSP *arg2 = 0 ;
  sgpp::base::DataMatrixSP *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::base::HashGridStorage **)&jarg1; 
  arg2 = *(sgpp::base::DataMatrixSP **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrixSP & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataMatrixSP **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrixSP & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->getLevelIndexArraysForEval(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_GridStorage_1getLevelForIntegral(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::base::HashGridStorage *arg1 = (sgpp::base::HashGridStorage *) 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::HashGridStorage **)&jarg1; 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->getLevelForIntegral(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_GridStorage_1getMaxLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::HashGridStorage *arg1 = (sgpp::base::HashGridStorage *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::HashGridStorage **)&jarg1; 
  {
    try {
      result = ((sgpp::base::HashGridStorage const *)arg1)->getMaxLevel();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_GridStorage_1getLevelIndexMaskArraysForModEval_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  sgpp::base::HashGridStorage *arg1 = (sgpp::base::HashGridStorage *) 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  sgpp::base::DataMatrix *arg3 = 0 ;
  sgpp::base::DataMatrix *arg4 = 0 ;
  sgpp::base::DataMatrix *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(sgpp::base::HashGridStorage **)&jarg1; 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataMatrix **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return ;
  } 
  arg4 = *(sgpp::base::DataMatrix **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return ;
  } 
  arg5 = *(sgpp::base::DataMatrix **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->getLevelIndexMaskArraysForModEval(*arg2,*arg3,*arg4,*arg5);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_GridStorage_1getLevelIndexMaskArraysForModEval_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  sgpp::base::HashGridStorage *arg1 = (sgpp::base::HashGridStorage *) 0 ;
  sgpp::base::DataMatrixSP *arg2 = 0 ;
  sgpp::base::DataMatrixSP *arg3 = 0 ;
  sgpp::base::DataMatrixSP *arg4 = 0 ;
  sgpp::base::DataMatrixSP *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(sgpp::base::HashGridStorage **)&jarg1; 
  arg2 = *(sgpp::base::DataMatrixSP **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrixSP & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataMatrixSP **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrixSP & reference is null");
    return ;
  } 
  arg4 = *(sgpp::base::DataMatrixSP **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrixSP & reference is null");
    return ;
  } 
  arg5 = *(sgpp::base::DataMatrixSP **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrixSP & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->getLevelIndexMaskArraysForModEval(*arg2,*arg3,*arg4,*arg5);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_GridStorage_1getCoordinate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jdouble jresult = 0 ;
  sgpp::base::HashGridStorage *arg1 = (sgpp::base::HashGridStorage *) 0 ;
  sgpp::base::HashGridPoint arg2 ;
  size_t arg3 ;
  sgpp::base::HashGridPoint *argp2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::HashGridStorage **)&jarg1; 
  argp2 = *(sgpp::base::HashGridPoint **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null sgpp::base::HashGridPoint");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (double)((sgpp::base::HashGridStorage const *)arg1)->getCoordinate(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_GridStorage_1getUnitCoordinate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jdouble jresult = 0 ;
  sgpp::base::HashGridStorage *arg1 = (sgpp::base::HashGridStorage *) 0 ;
  sgpp::base::HashGridPoint arg2 ;
  size_t arg3 ;
  sgpp::base::HashGridPoint *argp2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::HashGridStorage **)&jarg1; 
  argp2 = *(sgpp::base::HashGridPoint **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null sgpp::base::HashGridPoint");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (double)((sgpp::base::HashGridStorage const *)arg1)->getUnitCoordinate(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_GridStorage_1getCoordinates_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::base::HashGridStorage *arg1 = (sgpp::base::HashGridStorage *) 0 ;
  sgpp::base::HashGridPoint arg2 ;
  sgpp::base::DataVector *arg3 = 0 ;
  sgpp::base::HashGridPoint *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::base::HashGridStorage **)&jarg1; 
  argp2 = *(sgpp::base::HashGridPoint **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null sgpp::base::HashGridPoint");
    return ;
  }
  arg2 = *argp2; 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::base::HashGridStorage const *)arg1)->getCoordinates(arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_GridStorage_1getCoordinates_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  sgpp::base::HashGridStorage *arg1 = (sgpp::base::HashGridStorage *) 0 ;
  sgpp::base::HashGridPoint arg2 ;
  sgpp::base::HashGridPoint *argp2 ;
  sgpp::base::DataVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::HashGridStorage **)&jarg1; 
  argp2 = *(sgpp::base::HashGridPoint **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null sgpp::base::HashGridPoint");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = ((sgpp::base::HashGridStorage const *)arg1)->getCoordinates(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::DataVector **)&jresult = new sgpp::base::DataVector((const sgpp::base::DataVector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1HashGridIterator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::HashGridStorage *arg1 = 0 ;
  sgpp::base::HashGridIterator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::HashGridStorage **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::HashGridStorage & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::base::HashGridIterator *)new sgpp::base::HashGridIterator(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::HashGridIterator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1HashGridIterator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::HashGridIterator *arg1 = 0 ;
  sgpp::base::HashGridIterator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::HashGridIterator **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::HashGridIterator & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::base::HashGridIterator *)new sgpp::base::HashGridIterator(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::HashGridIterator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1HashGridIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::HashGridIterator *arg1 = (sgpp::base::HashGridIterator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::HashGridIterator **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_HashGridIterator_1resetToLevelZero(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::base::HashGridIterator *arg1 = (sgpp::base::HashGridIterator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::HashGridIterator **)&jarg1; 
  {
    try {
      (arg1)->resetToLevelZero();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_HashGridIterator_1resetToLeftLevelZero(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::base::HashGridIterator *arg1 = (sgpp::base::HashGridIterator *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::HashGridIterator **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      (arg1)->resetToLeftLevelZero(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_HashGridIterator_1resetToRightLevelZero(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::base::HashGridIterator *arg1 = (sgpp::base::HashGridIterator *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::HashGridIterator **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      (arg1)->resetToRightLevelZero(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_HashGridIterator_1resetToLevelOne(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::base::HashGridIterator *arg1 = (sgpp::base::HashGridIterator *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::HashGridIterator **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      (arg1)->resetToLevelOne(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_HashGridIterator_1leftChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::base::HashGridIterator *arg1 = (sgpp::base::HashGridIterator *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::HashGridIterator **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      (arg1)->leftChild(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_HashGridIterator_1rightChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::base::HashGridIterator *arg1 = (sgpp::base::HashGridIterator *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::HashGridIterator **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      (arg1)->rightChild(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_HashGridIterator_1up(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::base::HashGridIterator *arg1 = (sgpp::base::HashGridIterator *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::HashGridIterator **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      (arg1)->up(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_HashGridIterator_1stepLeft(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::base::HashGridIterator *arg1 = (sgpp::base::HashGridIterator *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::HashGridIterator **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      (arg1)->stepLeft(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_HashGridIterator_1stepRight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::base::HashGridIterator *arg1 = (sgpp::base::HashGridIterator *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::HashGridIterator **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      (arg1)->stepRight(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_sgpp_jsgppJNI_HashGridIterator_1isInnerPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  sgpp::base::HashGridIterator *arg1 = (sgpp::base::HashGridIterator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::HashGridIterator **)&jarg1; 
  {
    try {
      result = (bool)((sgpp::base::HashGridIterator const *)arg1)->isInnerPoint();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_sgpp_jsgppJNI_HashGridIterator_1hint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  sgpp::base::HashGridIterator *arg1 = (sgpp::base::HashGridIterator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::HashGridIterator **)&jarg1; 
  {
    try {
      result = (bool)((sgpp::base::HashGridIterator const *)arg1)->hint();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_sgpp_jsgppJNI_HashGridIterator_1hintLeft(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  sgpp::base::HashGridIterator *arg1 = (sgpp::base::HashGridIterator *) 0 ;
  size_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::HashGridIterator **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (bool)(arg1)->hintLeft(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_sgpp_jsgppJNI_HashGridIterator_1hintRight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  sgpp::base::HashGridIterator *arg1 = (sgpp::base::HashGridIterator *) 0 ;
  size_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::HashGridIterator **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (bool)(arg1)->hintRight(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_HashGridIterator_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  sgpp::base::HashGridIterator *arg1 = (sgpp::base::HashGridIterator *) 0 ;
  size_t arg2 ;
  sgpp::base::HashGridIterator::index_type::level_type *arg3 = 0 ;
  sgpp::base::HashGridIterator::index_type::index_type *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::HashGridIterator **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(sgpp::base::HashGridIterator::index_type::level_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::HashGridIterator::index_type::level_type & reference is null");
    return ;
  } 
  arg4 = *(sgpp::base::HashGridIterator::index_type::index_type **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::HashGridIterator::index_type::index_type & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::base::HashGridIterator const *)arg1)->get(arg2,*arg3,*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_HashGridIterator_1set_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  sgpp::base::HashGridIterator *arg1 = (sgpp::base::HashGridIterator *) 0 ;
  size_t arg2 ;
  sgpp::base::HashGridIterator::index_type::level_type arg3 ;
  sgpp::base::HashGridIterator::index_type::index_type arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::HashGridIterator **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (sgpp::base::HashGridIterator::index_type::level_type)jarg3; 
  arg4 = (sgpp::base::HashGridIterator::index_type::index_type)jarg4; 
  {
    try {
      (arg1)->set(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_HashGridIterator_1set_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::base::HashGridIterator *arg1 = (sgpp::base::HashGridIterator *) 0 ;
  sgpp::base::HashGridIterator::index_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::HashGridIterator **)&jarg1; 
  arg2 = *(sgpp::base::HashGridIterator::index_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::HashGridIterator::index_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->set((sgpp::base::HashGridIterator::index_type const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_HashGridIterator_1push(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  sgpp::base::HashGridIterator *arg1 = (sgpp::base::HashGridIterator *) 0 ;
  size_t arg2 ;
  sgpp::base::HashGridIterator::index_type::level_type arg3 ;
  sgpp::base::HashGridIterator::index_type::index_type arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::HashGridIterator **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (sgpp::base::HashGridIterator::index_type::level_type)jarg3; 
  arg4 = (sgpp::base::HashGridIterator::index_type::index_type)jarg4; 
  {
    try {
      (arg1)->push(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_HashGridIterator_1seq(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::HashGridIterator *arg1 = (sgpp::base::HashGridIterator *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::HashGridIterator **)&jarg1; 
  {
    try {
      result = ((sgpp::base::HashGridIterator const *)arg1)->seq();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_HashGridIterator_1getGridDepth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  sgpp::base::HashGridIterator *arg1 = (sgpp::base::HashGridIterator *) 0 ;
  size_t arg2 ;
  sgpp::base::HashGridIterator::level_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::HashGridIterator **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (sgpp::base::HashGridIterator::level_t)(arg1)->getGridDepth(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_sgpp_jsgppJNI_HashGridIterator_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  sgpp::base::HashGridIterator *arg1 = (sgpp::base::HashGridIterator *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::HashGridIterator **)&jarg1; 
  {
    try {
      result = (arg1)->toString();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1RefinementFunctor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::RefinementFunctor *arg1 = (sgpp::base::RefinementFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::RefinementFunctor **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_RefinementFunctor_1operatorParentheses(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jdouble jresult = 0 ;
  sgpp::base::RefinementFunctor *arg1 = (sgpp::base::RefinementFunctor *) 0 ;
  sgpp::base::GridStorage *arg2 = 0 ;
  size_t arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::RefinementFunctor **)&jarg1; 
  arg2 = *(sgpp::base::GridStorage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (double)((sgpp::base::RefinementFunctor const *)arg1)->operator ()(*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_RefinementFunctor_1start(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::base::RefinementFunctor *arg1 = (sgpp::base::RefinementFunctor *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::RefinementFunctor **)&jarg1; 
  {
    try {
      result = (double)((sgpp::base::RefinementFunctor const *)arg1)->start();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_RefinementFunctor_1getRefinementsNum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::RefinementFunctor *arg1 = (sgpp::base::RefinementFunctor *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::RefinementFunctor **)&jarg1; 
  {
    try {
      result = ((sgpp::base::RefinementFunctor const *)arg1)->getRefinementsNum();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_RefinementFunctor_1getRefinementThreshold(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::base::RefinementFunctor *arg1 = (sgpp::base::RefinementFunctor *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::RefinementFunctor **)&jarg1; 
  {
    try {
      result = (double)((sgpp::base::RefinementFunctor const *)arg1)->getRefinementThreshold();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_RefinementFunctor_1getTotalRefinementValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::base::RefinementFunctor *arg1 = (sgpp::base::RefinementFunctor *) 0 ;
  sgpp::base::GridStorage *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::RefinementFunctor **)&jarg1; 
  arg2 = *(sgpp::base::GridStorage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)((sgpp::base::RefinementFunctor const *)arg1)->getTotalRefinementValue(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1SurplusRefinementFunctor_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  sgpp::base::DataVector *arg1 = 0 ;
  size_t arg2 ;
  double arg3 ;
  sgpp::base::SurplusRefinementFunctor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataVector **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  arg2 = (size_t)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      result = (sgpp::base::SurplusRefinementFunctor *)new sgpp::base::SurplusRefinementFunctor(*arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::SurplusRefinementFunctor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1SurplusRefinementFunctor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  sgpp::base::DataVector *arg1 = 0 ;
  size_t arg2 ;
  sgpp::base::SurplusRefinementFunctor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataVector **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (sgpp::base::SurplusRefinementFunctor *)new sgpp::base::SurplusRefinementFunctor(*arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::SurplusRefinementFunctor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1SurplusRefinementFunctor_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::DataVector *arg1 = 0 ;
  sgpp::base::SurplusRefinementFunctor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataVector **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::base::SurplusRefinementFunctor *)new sgpp::base::SurplusRefinementFunctor(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::SurplusRefinementFunctor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1SurplusRefinementFunctor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::SurplusRefinementFunctor *arg1 = (sgpp::base::SurplusRefinementFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::SurplusRefinementFunctor **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_SurplusRefinementFunctor_1operatorParentheses(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jdouble jresult = 0 ;
  sgpp::base::SurplusRefinementFunctor *arg1 = (sgpp::base::SurplusRefinementFunctor *) 0 ;
  sgpp::base::GridStorage *arg2 = 0 ;
  size_t arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::SurplusRefinementFunctor **)&jarg1; 
  arg2 = *(sgpp::base::GridStorage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (double)((sgpp::base::SurplusRefinementFunctor const *)arg1)->operator ()(*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_SurplusRefinementFunctor_1start(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::base::SurplusRefinementFunctor *arg1 = (sgpp::base::SurplusRefinementFunctor *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::SurplusRefinementFunctor **)&jarg1; 
  {
    try {
      result = (double)((sgpp::base::SurplusRefinementFunctor const *)arg1)->start();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_SurplusRefinementFunctor_1getRefinementsNum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::SurplusRefinementFunctor *arg1 = (sgpp::base::SurplusRefinementFunctor *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::SurplusRefinementFunctor **)&jarg1; 
  {
    try {
      result = ((sgpp::base::SurplusRefinementFunctor const *)arg1)->getRefinementsNum();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_SurplusRefinementFunctor_1getRefinementThreshold(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::base::SurplusRefinementFunctor *arg1 = (sgpp::base::SurplusRefinementFunctor *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::SurplusRefinementFunctor **)&jarg1; 
  {
    try {
      result = (double)((sgpp::base::SurplusRefinementFunctor const *)arg1)->getRefinementThreshold();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1CoarseningFunctor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::CoarseningFunctor *arg1 = (sgpp::base::CoarseningFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::CoarseningFunctor **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_CoarseningFunctor_1operatorParentheses(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jdouble jresult = 0 ;
  sgpp::base::CoarseningFunctor *arg1 = (sgpp::base::CoarseningFunctor *) 0 ;
  sgpp::base::GridStorage *arg2 = 0 ;
  size_t arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::CoarseningFunctor **)&jarg1; 
  arg2 = *(sgpp::base::GridStorage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (double)(arg1)->operator ()(*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_CoarseningFunctor_1start(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::base::CoarseningFunctor *arg1 = (sgpp::base::CoarseningFunctor *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::CoarseningFunctor **)&jarg1; 
  {
    try {
      result = (double)((sgpp::base::CoarseningFunctor const *)arg1)->start();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_CoarseningFunctor_1getRemovementsNum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::CoarseningFunctor *arg1 = (sgpp::base::CoarseningFunctor *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::CoarseningFunctor **)&jarg1; 
  {
    try {
      result = ((sgpp::base::CoarseningFunctor const *)arg1)->getRemovementsNum();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_CoarseningFunctor_1getCoarseningThreshold(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::base::CoarseningFunctor *arg1 = (sgpp::base::CoarseningFunctor *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::CoarseningFunctor **)&jarg1; 
  {
    try {
      result = (double)((sgpp::base::CoarseningFunctor const *)arg1)->getCoarseningThreshold();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1GridGenerator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::GridGenerator *arg1 = (sgpp::base::GridGenerator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::GridGenerator **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_GridGenerator_1regular_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::base::GridGenerator *arg1 = (sgpp::base::GridGenerator *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::GridGenerator **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      (arg1)->regular(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_GridGenerator_1regular_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdouble jarg3) {
  sgpp::base::GridGenerator *arg1 = (sgpp::base::GridGenerator *) 0 ;
  size_t arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::GridGenerator **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->regular(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_GridGenerator_1regularInter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jdouble jarg4) {
  sgpp::base::GridGenerator *arg1 = (sgpp::base::GridGenerator *) 0 ;
  size_t arg2 ;
  std::vector< std::vector< size_t > > *arg3 = 0 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::GridGenerator **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(std::vector< std::vector< size_t > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< size_t > > const & reference is null");
    return ;
  } 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->regularInter(arg2,(std::vector< std::vector< size_t > > const &)*arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_GridGenerator_1cliques_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  sgpp::base::GridGenerator *arg1 = (sgpp::base::GridGenerator *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::GridGenerator **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  {
    try {
      (arg1)->cliques(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_GridGenerator_1cliques_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jdouble jarg4) {
  sgpp::base::GridGenerator *arg1 = (sgpp::base::GridGenerator *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::GridGenerator **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->cliques(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_GridGenerator_1full(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::base::GridGenerator *arg1 = (sgpp::base::GridGenerator *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::GridGenerator **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      (arg1)->full(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_GridGenerator_1truncated(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  sgpp::base::GridGenerator *arg1 = (sgpp::base::GridGenerator *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::GridGenerator **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  {
    try {
      (arg1)->truncated(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_GridGenerator_1refine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::base::GridGenerator *arg1 = (sgpp::base::GridGenerator *) 0 ;
  sgpp::base::RefinementFunctor *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::GridGenerator **)&jarg1; 
  arg2 = *(sgpp::base::RefinementFunctor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::RefinementFunctor & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->refine(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_GridGenerator_1refineInter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  sgpp::base::GridGenerator *arg1 = (sgpp::base::GridGenerator *) 0 ;
  sgpp::base::RefinementFunctor *arg2 = 0 ;
  std::vector< std::vector< size_t > > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::GridGenerator **)&jarg1; 
  arg2 = *(sgpp::base::RefinementFunctor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::RefinementFunctor & reference is null");
    return ;
  } 
  arg3 = *(std::vector< std::vector< size_t > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< size_t > > const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->refineInter(*arg2,(std::vector< std::vector< size_t > > const &)*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_GridGenerator_1coarsen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::base::GridGenerator *arg1 = (sgpp::base::GridGenerator *) 0 ;
  sgpp::base::CoarseningFunctor *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::base::GridGenerator **)&jarg1; 
  arg2 = *(sgpp::base::CoarseningFunctor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::CoarseningFunctor & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->coarsen(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_GridGenerator_1coarsenNFirstOnly(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  sgpp::base::GridGenerator *arg1 = (sgpp::base::GridGenerator *) 0 ;
  sgpp::base::CoarseningFunctor *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  size_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::base::GridGenerator **)&jarg1; 
  arg2 = *(sgpp::base::CoarseningFunctor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::CoarseningFunctor & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg4 = (size_t)jarg4; 
  {
    try {
      (arg1)->coarsenNFirstOnly(*arg2,*arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_GridGenerator_1getNumberOfRefinablePoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::GridGenerator *arg1 = (sgpp::base::GridGenerator *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::GridGenerator **)&jarg1; 
  {
    try {
      result = (arg1)->getNumberOfRefinablePoints();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_GridGenerator_1getNumberOfRemovablePoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::GridGenerator *arg1 = (sgpp::base::GridGenerator *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::GridGenerator **)&jarg1; 
  {
    try {
      result = (arg1)->getNumberOfRemovablePoints();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_GridGenerator_1refineMaxLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  sgpp::base::GridGenerator *arg1 = (sgpp::base::GridGenerator *) 0 ;
  sgpp::base::RefinementFunctor *arg2 = 0 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::GridGenerator **)&jarg1; 
  arg2 = *(sgpp::base::RefinementFunctor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::RefinementFunctor & reference is null");
    return ;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      (arg1)->refineMaxLevel(*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_GridGenerator_1getNumberOfRefinablePointsToMaxLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  sgpp::base::GridGenerator *arg1 = (sgpp::base::GridGenerator *) 0 ;
  size_t arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::GridGenerator **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (arg1)->getNumberOfRefinablePointsToMaxLevel(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OperationMultipleEval(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::OperationMultipleEval *arg1 = (sgpp::base::OperationMultipleEval *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::OperationMultipleEval **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OperationMultipleEval_1mult_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::base::OperationMultipleEval *arg1 = (sgpp::base::OperationMultipleEval *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::base::OperationMultipleEval **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->mult(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OperationMultipleEval_1mult_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5) {
  sgpp::base::OperationMultipleEval *arg1 = (sgpp::base::OperationMultipleEval *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  size_t arg4 ;
  size_t arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::base::OperationMultipleEval **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg4 = (size_t)jarg4; 
  arg5 = (size_t)jarg5; 
  {
    try {
      (arg1)->mult(*arg2,*arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OperationMultipleEval_1multTranspose_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::base::OperationMultipleEval *arg1 = (sgpp::base::OperationMultipleEval *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::base::OperationMultipleEval **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->multTranspose(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OperationMultipleEval_1multTranspose_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5) {
  sgpp::base::OperationMultipleEval *arg1 = (sgpp::base::OperationMultipleEval *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  size_t arg4 ;
  size_t arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::base::OperationMultipleEval **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg4 = (size_t)jarg4; 
  arg5 = (size_t)jarg5; 
  {
    try {
      (arg1)->multTranspose(*arg2,*arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OperationMultipleEval_1eval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::base::OperationMultipleEval *arg1 = (sgpp::base::OperationMultipleEval *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::base::OperationMultipleEval **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->eval(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OperationMultipleEval_1prepare(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::base::OperationMultipleEval *arg1 = (sgpp::base::OperationMultipleEval *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::OperationMultipleEval **)&jarg1; 
  {
    try {
      (arg1)->prepare();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OperationMultipleEval_1getDuration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::base::OperationMultipleEval *arg1 = (sgpp::base::OperationMultipleEval *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::OperationMultipleEval **)&jarg1; 
  {
    try {
      result = (double)(arg1)->getDuration();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_sgpp_jsgppJNI_OperationMultipleEval_1getImplementationName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  sgpp::base::OperationMultipleEval *arg1 = (sgpp::base::OperationMultipleEval *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::OperationMultipleEval **)&jarg1; 
  {
    try {
      result = (arg1)->getImplementationName();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OperationMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::OperationMatrix *arg1 = (sgpp::base::OperationMatrix *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::OperationMatrix **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OperationMatrix_1mult(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::base::OperationMatrix *arg1 = (sgpp::base::OperationMatrix *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::base::OperationMatrix **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->mult(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OperationConvert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::OperationConvert *arg1 = (sgpp::base::OperationConvert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::OperationConvert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OperationConvert_1doConvertToLinear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::base::OperationConvert *arg1 = (sgpp::base::OperationConvert *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::OperationConvert **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->doConvertToLinear(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OperationConvert_1doConvertFromLinear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::base::OperationConvert *arg1 = (sgpp::base::OperationConvert *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::OperationConvert **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->doConvertFromLinear(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OperationEval(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::OperationEval *arg1 = (sgpp::base::OperationEval *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::OperationEval **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OperationEval_1eval_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jdouble jresult = 0 ;
  sgpp::base::OperationEval *arg1 = (sgpp::base::OperationEval *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::base::OperationEval **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->eval((sgpp::base::DataVector const &)*arg2,(sgpp::base::DataVector const &)*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OperationEval_1eval_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  sgpp::base::OperationEval *arg1 = (sgpp::base::OperationEval *) 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  sgpp::base::DataVector *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(sgpp::base::OperationEval **)&jarg1; 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix const & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return ;
  } 
  arg4 = *(sgpp::base::DataVector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->eval((sgpp::base::DataMatrix const &)*arg2,(sgpp::base::DataVector const &)*arg3,*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OperationEvalGradient(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::OperationEvalGradient *arg1 = (sgpp::base::OperationEvalGradient *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::OperationEvalGradient **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OperationEvalGradient_1evalGradient_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jdouble jresult = 0 ;
  sgpp::base::OperationEvalGradient *arg1 = (sgpp::base::OperationEvalGradient *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  sgpp::base::DataVector *arg4 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(sgpp::base::OperationEvalGradient **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  arg4 = *(sgpp::base::DataVector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->evalGradient((sgpp::base::DataVector const &)*arg2,(sgpp::base::DataVector const &)*arg3,*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OperationEvalGradient_1evalGradient_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  sgpp::base::OperationEvalGradient *arg1 = (sgpp::base::OperationEvalGradient *) 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  sgpp::base::DataVector *arg4 = 0 ;
  sgpp::base::DataMatrix *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(sgpp::base::OperationEvalGradient **)&jarg1; 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix const & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return ;
  } 
  arg4 = *(sgpp::base::DataVector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg5 = *(sgpp::base::DataMatrix **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->evalGradient((sgpp::base::DataMatrix const &)*arg2,(sgpp::base::DataVector const &)*arg3,*arg4,*arg5);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OperationEvalGradient_1pointInUnitCube_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::base::OperationEvalGradient *arg1 = (sgpp::base::OperationEvalGradient *) 0 ;
  sgpp::base::DataVector *arg2 = (sgpp::base::DataVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::OperationEvalGradient **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2; 
  if (arg1) (arg1)->pointInUnitCube = *arg2;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OperationEvalGradient_1pointInUnitCube_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::OperationEvalGradient *arg1 = (sgpp::base::OperationEvalGradient *) 0 ;
  sgpp::base::DataVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::OperationEvalGradient **)&jarg1; 
  result = (sgpp::base::DataVector *)& ((arg1)->pointInUnitCube);
  *(sgpp::base::DataVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OperationEvalHessian(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::OperationEvalHessian *arg1 = (sgpp::base::OperationEvalHessian *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::OperationEvalHessian **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OperationEvalHessian_1evalHessian_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jdouble jresult = 0 ;
  sgpp::base::OperationEvalHessian *arg1 = (sgpp::base::OperationEvalHessian *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  sgpp::base::DataVector *arg4 = 0 ;
  sgpp::base::DataMatrix *arg5 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(sgpp::base::OperationEvalHessian **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  arg4 = *(sgpp::base::DataVector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  arg5 = *(sgpp::base::DataMatrix **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->evalHessian((sgpp::base::DataVector const &)*arg2,(sgpp::base::DataVector const &)*arg3,*arg4,*arg5);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OperationEvalHessian_1evalHessian_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6) {
  sgpp::base::OperationEvalHessian *arg1 = (sgpp::base::OperationEvalHessian *) 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  sgpp::base::DataVector *arg4 = 0 ;
  sgpp::base::DataMatrix *arg5 = 0 ;
  std::vector< sgpp::base::DataMatrix > *arg6 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(sgpp::base::OperationEvalHessian **)&jarg1; 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix const & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return ;
  } 
  arg4 = *(sgpp::base::DataVector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg5 = *(sgpp::base::DataMatrix **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return ;
  } 
  arg6 = *(std::vector< sgpp::base::DataMatrix > **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< sgpp::base::DataMatrix > & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->evalHessian((sgpp::base::DataMatrix const &)*arg2,(sgpp::base::DataVector const &)*arg3,*arg4,*arg5,*arg6);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OperationEvalHessian_1pointInUnitCube_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::base::OperationEvalHessian *arg1 = (sgpp::base::OperationEvalHessian *) 0 ;
  sgpp::base::DataVector *arg2 = (sgpp::base::DataVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::OperationEvalHessian **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2; 
  if (arg1) (arg1)->pointInUnitCube = *arg2;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OperationEvalHessian_1pointInUnitCube_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::OperationEvalHessian *arg1 = (sgpp::base::OperationEvalHessian *) 0 ;
  sgpp::base::DataVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::OperationEvalHessian **)&jarg1; 
  result = (sgpp::base::DataVector *)& ((arg1)->pointInUnitCube);
  *(sgpp::base::DataVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OperationEvalPartialDerivative(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::OperationEvalPartialDerivative *arg1 = (sgpp::base::OperationEvalPartialDerivative *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::OperationEvalPartialDerivative **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OperationEvalPartialDerivative_1evalPartialDerivative_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5) {
  jdouble jresult = 0 ;
  sgpp::base::OperationEvalPartialDerivative *arg1 = (sgpp::base::OperationEvalPartialDerivative *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  size_t arg4 ;
  double *arg5 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::base::OperationEvalPartialDerivative **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  arg4 = (size_t)jarg4; 
  arg5 = *(double **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->evalPartialDerivative((sgpp::base::DataVector const &)*arg2,(sgpp::base::DataVector const &)*arg3,arg4,*arg5);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OperationEvalPartialDerivative_1evalPartialDerivative_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_) {
  sgpp::base::OperationEvalPartialDerivative *arg1 = (sgpp::base::OperationEvalPartialDerivative *) 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  size_t arg4 ;
  sgpp::base::DataVector *arg5 = 0 ;
  sgpp::base::DataVector *arg6 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(sgpp::base::OperationEvalPartialDerivative **)&jarg1; 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix const & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return ;
  } 
  arg4 = (size_t)jarg4; 
  arg5 = *(sgpp::base::DataVector **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg6 = *(sgpp::base::DataVector **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->evalPartialDerivative((sgpp::base::DataMatrix const &)*arg2,(sgpp::base::DataVector const &)*arg3,arg4,*arg5,*arg6);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OperationEvalPartialDerivative_1pointInUnitCube_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::base::OperationEvalPartialDerivative *arg1 = (sgpp::base::OperationEvalPartialDerivative *) 0 ;
  sgpp::base::DataVector *arg2 = (sgpp::base::DataVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::OperationEvalPartialDerivative **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2; 
  if (arg1) (arg1)->pointInUnitCube = *arg2;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OperationEvalPartialDerivative_1pointInUnitCube_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::OperationEvalPartialDerivative *arg1 = (sgpp::base::OperationEvalPartialDerivative *) 0 ;
  sgpp::base::DataVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::OperationEvalPartialDerivative **)&jarg1; 
  result = (sgpp::base::DataVector *)& ((arg1)->pointInUnitCube);
  *(sgpp::base::DataVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OperationHierarchisation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::OperationHierarchisation *arg1 = (sgpp::base::OperationHierarchisation *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::OperationHierarchisation **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OperationHierarchisation_1doHierarchisation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::base::OperationHierarchisation *arg1 = (sgpp::base::OperationHierarchisation *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::OperationHierarchisation **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->doHierarchisation(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OperationHierarchisation_1doDehierarchisation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::base::OperationHierarchisation *arg1 = (sgpp::base::OperationHierarchisation *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::OperationHierarchisation **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->doDehierarchisation(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OperationQuadrature(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::OperationQuadrature *arg1 = (sgpp::base::OperationQuadrature *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::OperationQuadrature **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OperationQuadrature_1doQuadrature(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::base::OperationQuadrature *arg1 = (sgpp::base::OperationQuadrature *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::OperationQuadrature **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->doQuadrature(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OperationQuadratureMC(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  sgpp::base::Grid *arg1 = 0 ;
  int arg2 ;
  sgpp::base::OperationQuadratureMC *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::Grid **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return 0;
  } 
  arg2 = (int)jarg2; 
  {
    try {
      result = (sgpp::base::OperationQuadratureMC *)new sgpp::base::OperationQuadratureMC(*arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::OperationQuadratureMC **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OperationQuadratureMC(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::OperationQuadratureMC *arg1 = (sgpp::base::OperationQuadratureMC *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::OperationQuadratureMC **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OperationQuadratureMC_1doQuadrature(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::base::OperationQuadratureMC *arg1 = (sgpp::base::OperationQuadratureMC *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::OperationQuadratureMC **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->doQuadrature(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OperationQuadratureMC_1doQuadratureFunc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jdouble jresult = 0 ;
  sgpp::base::OperationQuadratureMC *arg1 = (sgpp::base::OperationQuadratureMC *) 0 ;
  sgpp::base::FUNC arg2 = (sgpp::base::FUNC) 0 ;
  void *arg3 = (void *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::OperationQuadratureMC **)&jarg1; 
  arg2 = *(sgpp::base::FUNC *)&jarg2; 
  arg3 = *(void **)&jarg3; 
  {
    try {
      result = (double)(arg1)->doQuadratureFunc(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OperationQuadratureMC_1doQuadratureL2Error(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jdouble jresult = 0 ;
  sgpp::base::OperationQuadratureMC *arg1 = (sgpp::base::OperationQuadratureMC *) 0 ;
  sgpp::base::FUNC arg2 = (sgpp::base::FUNC) 0 ;
  void *arg3 = (void *) 0 ;
  sgpp::base::DataVector *arg4 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(sgpp::base::OperationQuadratureMC **)&jarg1; 
  arg2 = *(sgpp::base::FUNC *)&jarg2; 
  arg3 = *(void **)&jarg3; 
  arg4 = *(sgpp::base::DataVector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->doQuadratureL2Error(arg2,arg3,*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1DirichletUpdateVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::GridStorage *arg1 = 0 ;
  sgpp::base::DirichletUpdateVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::GridStorage **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::base::DirichletUpdateVector *)new sgpp::base::DirichletUpdateVector(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::DirichletUpdateVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1DirichletUpdateVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::DirichletUpdateVector *arg1 = (sgpp::base::DirichletUpdateVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::DirichletUpdateVector **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DirichletUpdateVector_1applyDirichletConditions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::base::DirichletUpdateVector *arg1 = (sgpp::base::DirichletUpdateVector *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::base::DirichletUpdateVector **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->applyDirichletConditions(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DirichletUpdateVector_1setBoundariesToZero(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::base::DirichletUpdateVector *arg1 = (sgpp::base::DirichletUpdateVector *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::DirichletUpdateVector **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setBoundariesToZero(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DirichletUpdateVector_1setInnerPointsToZero(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::base::DirichletUpdateVector *arg1 = (sgpp::base::DirichletUpdateVector *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::DirichletUpdateVector **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setInnerPointsToZero(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DirichletUpdateVector_1multiplyBoundaryVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::base::DirichletUpdateVector *arg1 = (sgpp::base::DirichletUpdateVector *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::base::DirichletUpdateVector **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->multiplyBoundaryVector(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DirichletUpdateVector_1multiplyBoundary(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  sgpp::base::DirichletUpdateVector *arg1 = (sgpp::base::DirichletUpdateVector *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::DirichletUpdateVector **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->multiplyBoundary(*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DirichletUpdateVector_1multiply(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3, jlong jarg4) {
  sgpp::base::DirichletUpdateVector *arg1 = (sgpp::base::DirichletUpdateVector *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double arg3 ;
  bool (*arg4)(sgpp::base::GridPoint *,sgpp::base::GridStorage &) = (bool (*)(sgpp::base::GridPoint *,sgpp::base::GridStorage &)) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::DirichletUpdateVector **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg3 = (double)jarg3; 
  arg4 = *(bool (**)(sgpp::base::GridPoint *,sgpp::base::GridStorage &))&jarg4; 
  {
    try {
      (arg1)->multiply(*arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_HashGenerator_1regular_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jdouble jarg4) {
  sgpp::base::HashGenerator *arg1 = (sgpp::base::HashGenerator *) 0 ;
  sgpp::base::GridStorage *arg2 = 0 ;
  sgpp::base::level_t arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::HashGenerator **)&jarg1; 
  arg2 = *(sgpp::base::GridStorage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage & reference is null");
    return ;
  } 
  arg3 = (sgpp::base::level_t)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->regular(*arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_HashGenerator_1regular_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  sgpp::base::HashGenerator *arg1 = (sgpp::base::HashGenerator *) 0 ;
  sgpp::base::GridStorage *arg2 = 0 ;
  sgpp::base::level_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::HashGenerator **)&jarg1; 
  arg2 = *(sgpp::base::GridStorage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage & reference is null");
    return ;
  } 
  arg3 = (sgpp::base::level_t)jarg3; 
  {
    try {
      (arg1)->regular(*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_HashGenerator_1regularInter_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jdouble jarg5) {
  sgpp::base::HashGenerator *arg1 = (sgpp::base::HashGenerator *) 0 ;
  sgpp::base::GridStorage *arg2 = 0 ;
  sgpp::base::level_t arg3 ;
  std::vector< std::vector< size_t > > *arg4 = 0 ;
  double arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::HashGenerator **)&jarg1; 
  arg2 = *(sgpp::base::GridStorage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage & reference is null");
    return ;
  } 
  arg3 = (sgpp::base::level_t)jarg3; 
  arg4 = *(std::vector< std::vector< size_t > > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< size_t > > const & reference is null");
    return ;
  } 
  arg5 = (double)jarg5; 
  {
    try {
      (arg1)->regularInter(*arg2,arg3,(std::vector< std::vector< size_t > > const &)*arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_HashGenerator_1regularInter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  sgpp::base::HashGenerator *arg1 = (sgpp::base::HashGenerator *) 0 ;
  sgpp::base::GridStorage *arg2 = 0 ;
  sgpp::base::level_t arg3 ;
  std::vector< std::vector< size_t > > *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::HashGenerator **)&jarg1; 
  arg2 = *(sgpp::base::GridStorage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage & reference is null");
    return ;
  } 
  arg3 = (sgpp::base::level_t)jarg3; 
  arg4 = *(std::vector< std::vector< size_t > > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< size_t > > const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->regularInter(*arg2,arg3,(std::vector< std::vector< size_t > > const &)*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_HashGenerator_1regular_1inter_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jdouble jarg5) {
  sgpp::base::HashGenerator *arg1 = (sgpp::base::HashGenerator *) 0 ;
  sgpp::base::GridStorage *arg2 = 0 ;
  sgpp::base::level_t arg3 ;
  std::unordered_set< std::vector< bool > > *arg4 = 0 ;
  double arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::HashGenerator **)&jarg1; 
  arg2 = *(sgpp::base::GridStorage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage & reference is null");
    return ;
  } 
  arg3 = (sgpp::base::level_t)jarg3; 
  arg4 = *(std::unordered_set< std::vector< bool > > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unordered_set< std::vector< bool > > const & reference is null");
    return ;
  } 
  arg5 = (double)jarg5; 
  {
    try {
      (arg1)->regular_inter(*arg2,arg3,(std::unordered_set< std::vector< bool > > const &)*arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_HashGenerator_1regular_1inter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  sgpp::base::HashGenerator *arg1 = (sgpp::base::HashGenerator *) 0 ;
  sgpp::base::GridStorage *arg2 = 0 ;
  sgpp::base::level_t arg3 ;
  std::unordered_set< std::vector< bool > > *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::HashGenerator **)&jarg1; 
  arg2 = *(sgpp::base::GridStorage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage & reference is null");
    return ;
  } 
  arg3 = (sgpp::base::level_t)jarg3; 
  arg4 = *(std::unordered_set< std::vector< bool > > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unordered_set< std::vector< bool > > const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->regular_inter(*arg2,arg3,(std::unordered_set< std::vector< bool > > const &)*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_HashGenerator_1cliques_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jdouble jarg5) {
  sgpp::base::HashGenerator *arg1 = (sgpp::base::HashGenerator *) 0 ;
  sgpp::base::GridStorage *arg2 = 0 ;
  sgpp::base::level_t arg3 ;
  size_t arg4 ;
  double arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::HashGenerator **)&jarg1; 
  arg2 = *(sgpp::base::GridStorage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage & reference is null");
    return ;
  } 
  arg3 = (sgpp::base::level_t)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (double)jarg5; 
  {
    try {
      (arg1)->cliques(*arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_HashGenerator_1cliques_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  sgpp::base::HashGenerator *arg1 = (sgpp::base::HashGenerator *) 0 ;
  sgpp::base::GridStorage *arg2 = 0 ;
  sgpp::base::level_t arg3 ;
  size_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::HashGenerator **)&jarg1; 
  arg2 = *(sgpp::base::GridStorage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage & reference is null");
    return ;
  } 
  arg3 = (sgpp::base::level_t)jarg3; 
  arg4 = (size_t)jarg4; 
  {
    try {
      (arg1)->cliques(*arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_HashGenerator_1full(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  sgpp::base::HashGenerator *arg1 = (sgpp::base::HashGenerator *) 0 ;
  sgpp::base::GridStorage *arg2 = 0 ;
  sgpp::base::level_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::HashGenerator **)&jarg1; 
  arg2 = *(sgpp::base::GridStorage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage & reference is null");
    return ;
  } 
  arg3 = (sgpp::base::level_t)jarg3; 
  {
    try {
      (arg1)->full(*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_HashGenerator_1fullWithBoundary(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  sgpp::base::HashGenerator *arg1 = (sgpp::base::HashGenerator *) 0 ;
  sgpp::base::GridStorage *arg2 = 0 ;
  sgpp::base::level_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::HashGenerator **)&jarg1; 
  arg2 = *(sgpp::base::GridStorage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage & reference is null");
    return ;
  } 
  arg3 = (sgpp::base::level_t)jarg3; 
  {
    try {
      (arg1)->fullWithBoundary(*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_HashGenerator_1regularWithBoundaries_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  sgpp::base::HashGenerator *arg1 = (sgpp::base::HashGenerator *) 0 ;
  sgpp::base::GridStorage *arg2 = 0 ;
  sgpp::base::level_t arg3 ;
  sgpp::base::level_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::HashGenerator **)&jarg1; 
  arg2 = *(sgpp::base::GridStorage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage & reference is null");
    return ;
  } 
  arg3 = (sgpp::base::level_t)jarg3; 
  arg4 = (sgpp::base::level_t)jarg4; 
  {
    try {
      (arg1)->regularWithBoundaries(*arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_HashGenerator_1regularWithBoundaries_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  sgpp::base::HashGenerator *arg1 = (sgpp::base::HashGenerator *) 0 ;
  sgpp::base::GridStorage *arg2 = 0 ;
  sgpp::base::level_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::HashGenerator **)&jarg1; 
  arg2 = *(sgpp::base::GridStorage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage & reference is null");
    return ;
  } 
  arg3 = (sgpp::base::level_t)jarg3; 
  {
    try {
      (arg1)->regularWithBoundaries(*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_HashGenerator_1regularWithPeriodicBoundaries_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jdouble jarg4) {
  sgpp::base::HashGenerator *arg1 = (sgpp::base::HashGenerator *) 0 ;
  sgpp::base::GridStorage *arg2 = 0 ;
  sgpp::base::level_t arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::HashGenerator **)&jarg1; 
  arg2 = *(sgpp::base::GridStorage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage & reference is null");
    return ;
  } 
  arg3 = (sgpp::base::level_t)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->regularWithPeriodicBoundaries(*arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_HashGenerator_1regularWithPeriodicBoundaries_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  sgpp::base::HashGenerator *arg1 = (sgpp::base::HashGenerator *) 0 ;
  sgpp::base::GridStorage *arg2 = 0 ;
  sgpp::base::level_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::HashGenerator **)&jarg1; 
  arg2 = *(sgpp::base::GridStorage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage & reference is null");
    return ;
  } 
  arg3 = (sgpp::base::level_t)jarg3; 
  {
    try {
      (arg1)->regularWithPeriodicBoundaries(*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_HashGenerator_1squareRoot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  sgpp::base::HashGenerator *arg1 = (sgpp::base::HashGenerator *) 0 ;
  sgpp::base::GridStorage *arg2 = 0 ;
  sgpp::base::level_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::HashGenerator **)&jarg1; 
  arg2 = *(sgpp::base::GridStorage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage & reference is null");
    return ;
  } 
  arg3 = (sgpp::base::level_t)jarg3; 
  {
    try {
      (arg1)->squareRoot(*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_HashGenerator_1truncated(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  sgpp::base::HashGenerator *arg1 = (sgpp::base::HashGenerator *) 0 ;
  sgpp::base::GridStorage *arg2 = 0 ;
  sgpp::base::level_t arg3 ;
  sgpp::base::level_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::HashGenerator **)&jarg1; 
  arg2 = *(sgpp::base::GridStorage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage & reference is null");
    return ;
  } 
  arg3 = (sgpp::base::level_t)jarg3; 
  arg4 = (sgpp::base::level_t)jarg4; 
  {
    try {
      (arg1)->truncated(*arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1HashGenerator(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::base::HashGenerator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::base::HashGenerator *)new sgpp::base::HashGenerator();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::HashGenerator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1HashGenerator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::HashGenerator *arg1 = (sgpp::base::HashGenerator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::HashGenerator **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1AbstractRefinement_1refinement_1key(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  sgpp::base::GridPoint *arg1 = 0 ;
  size_t arg2 ;
  sgpp::base::AbstractRefinement_refinement_key *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::GridPoint **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridPoint const & reference is null");
    return 0;
  } 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (sgpp::base::AbstractRefinement_refinement_key *)new sgpp::base::AbstractRefinement_refinement_key((sgpp::base::GridPoint const &)*arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::AbstractRefinement_refinement_key **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1AbstractRefinement_1refinement_1key(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::AbstractRefinement_refinement_key *arg1 = (sgpp::base::AbstractRefinement_refinement_key *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::AbstractRefinement_refinement_key **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_AbstractRefinement_1refinement_1key_1getLevelVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::AbstractRefinement_refinement_key *arg1 = (sgpp::base::AbstractRefinement_refinement_key *) 0 ;
  SwigValueWrapper< std::vector< unsigned int > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::AbstractRefinement_refinement_key **)&jarg1; 
  {
    try {
      result = (arg1)->getLevelVector();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< sgpp::base::level_t > **)&jresult = new std::vector< sgpp::base::level_t >((const std::vector< sgpp::base::level_t > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_AbstractRefinement_1refinement_1key_1getPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::AbstractRefinement_refinement_key *arg1 = (sgpp::base::AbstractRefinement_refinement_key *) 0 ;
  sgpp::base::GridPoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::AbstractRefinement_refinement_key **)&jarg1; 
  {
    try {
      result = (sgpp::base::GridPoint *) &(arg1)->getPoint();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::GridPoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_AbstractRefinement_1refinement_1key_1getSeq(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::AbstractRefinement_refinement_key *arg1 = (sgpp::base::AbstractRefinement_refinement_key *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::AbstractRefinement_refinement_key **)&jarg1; 
  {
    try {
      result = ((sgpp::base::AbstractRefinement_refinement_key const *)arg1)->getSeq();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_sgpp_jsgppJNI_AbstractRefinement_1compare_1pairs(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  sgpp::base::AbstractRefinement::refinement_pair_type *arg1 = 0 ;
  sgpp::base::AbstractRefinement::refinement_pair_type *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::AbstractRefinement::refinement_pair_type **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::AbstractRefinement::refinement_pair_type const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::base::AbstractRefinement::refinement_pair_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::AbstractRefinement::refinement_pair_type const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)sgpp::base::AbstractRefinement::compare_pairs((std::pair< std::shared_ptr< sgpp::base::AbstractRefinement_refinement_key >,double > const &)*arg1,(std::pair< std::shared_ptr< sgpp::base::AbstractRefinement_refinement_key >,double > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_AbstractRefinement_1free_1refine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::base::AbstractRefinement *arg1 = (sgpp::base::AbstractRefinement *) 0 ;
  sgpp::base::GridStorage *arg2 = 0 ;
  sgpp::base::RefinementFunctor *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::base::AbstractRefinement **)&jarg1; 
  arg2 = *(sgpp::base::GridStorage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::RefinementFunctor **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::RefinementFunctor & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->free_refine(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_AbstractRefinement_1getNumberOfRefinablePoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  sgpp::base::AbstractRefinement *arg1 = (sgpp::base::AbstractRefinement *) 0 ;
  sgpp::base::GridStorage *arg2 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::AbstractRefinement **)&jarg1; 
  arg2 = *(sgpp::base::GridStorage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->getNumberOfRefinablePoints(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_AbstractRefinement_1refineGridpoint1D_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  sgpp::base::AbstractRefinement *arg1 = (sgpp::base::AbstractRefinement *) 0 ;
  sgpp::base::GridStorage *arg2 = 0 ;
  sgpp::base::GridPoint *arg3 = 0 ;
  size_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::base::AbstractRefinement **)&jarg1; 
  arg2 = *(sgpp::base::GridStorage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::GridPoint **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridPoint & reference is null");
    return ;
  } 
  arg4 = (size_t)jarg4; 
  {
    try {
      (arg1)->refineGridpoint1D(*arg2,*arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_AbstractRefinement_1refineGridpoint1D_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  sgpp::base::AbstractRefinement *arg1 = (sgpp::base::AbstractRefinement *) 0 ;
  sgpp::base::GridStorage *arg2 = 0 ;
  size_t arg3 ;
  size_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::AbstractRefinement **)&jarg1; 
  arg2 = *(sgpp::base::GridStorage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage & reference is null");
    return ;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  {
    try {
      (arg1)->refineGridpoint1D(*arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_sgpp_jsgppJNI_AbstractRefinement_1isRefinable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  sgpp::base::AbstractRefinement *arg1 = (sgpp::base::AbstractRefinement *) 0 ;
  sgpp::base::GridStorage *arg2 = 0 ;
  sgpp::base::GridPoint *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::base::AbstractRefinement **)&jarg1; 
  arg2 = *(sgpp::base::GridStorage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::base::GridPoint **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridPoint & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->isRefinable(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1AbstractRefinement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::AbstractRefinement *arg1 = (sgpp::base::AbstractRefinement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::AbstractRefinement **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_AbstractRefinement_1getIndexOfMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  sgpp::base::AbstractRefinement *arg1 = (sgpp::base::AbstractRefinement *) 0 ;
  sgpp::base::RefinementFunctor::value_type *arg2 = (sgpp::base::RefinementFunctor::value_type *) 0 ;
  size_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::AbstractRefinement **)&jarg1; 
  arg2 = *(sgpp::base::RefinementFunctor::value_type **)&jarg2; 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (arg1)->getIndexOfMin(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1RefinementDecorator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::AbstractRefinement *arg1 = (sgpp::base::AbstractRefinement *) 0 ;
  sgpp::base::RefinementDecorator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::AbstractRefinement **)&jarg1; 
  {
    try {
      result = (sgpp::base::RefinementDecorator *)new sgpp::base::RefinementDecorator(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::RefinementDecorator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1RefinementDecorator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::RefinementDecorator *arg1 = (sgpp::base::RefinementDecorator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::RefinementDecorator **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_RefinementDecorator_1free_1refine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::base::RefinementDecorator *arg1 = (sgpp::base::RefinementDecorator *) 0 ;
  sgpp::base::GridStorage *arg2 = 0 ;
  sgpp::base::RefinementFunctor *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::base::RefinementDecorator **)&jarg1; 
  arg2 = *(sgpp::base::GridStorage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::RefinementFunctor **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::RefinementFunctor & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->free_refine(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_RefinementDecorator_1getNumberOfRefinablePoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  sgpp::base::RefinementDecorator *arg1 = (sgpp::base::RefinementDecorator *) 0 ;
  sgpp::base::GridStorage *arg2 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::RefinementDecorator **)&jarg1; 
  arg2 = *(sgpp::base::GridStorage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->getNumberOfRefinablePoints(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_RefinementDecorator_1refineGridpoint1D(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  sgpp::base::RefinementDecorator *arg1 = (sgpp::base::RefinementDecorator *) 0 ;
  sgpp::base::GridStorage *arg2 = 0 ;
  sgpp::base::GridPoint *arg3 = 0 ;
  size_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::base::RefinementDecorator **)&jarg1; 
  arg2 = *(sgpp::base::GridStorage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::GridPoint **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridPoint & reference is null");
    return ;
  } 
  arg4 = (size_t)jarg4; 
  {
    try {
      (arg1)->refineGridpoint1D(*arg2,*arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_sgpp_jsgppJNI_RefinementDecorator_1checkAdmissibility(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  sgpp::base::RefinementDecorator *arg1 = (sgpp::base::RefinementDecorator *) 0 ;
  sgpp::base::GridStorage *arg2 = 0 ;
  sgpp::base::GridPoint *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::base::RefinementDecorator **)&jarg1; 
  arg2 = *(sgpp::base::GridStorage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::base::GridPoint **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridPoint & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->checkAdmissibility(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_HashRefinement_1free_1refine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::base::HashRefinement *arg1 = (sgpp::base::HashRefinement *) 0 ;
  sgpp::base::GridStorage *arg2 = 0 ;
  sgpp::base::RefinementFunctor *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::base::HashRefinement **)&jarg1; 
  arg2 = *(sgpp::base::GridStorage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::RefinementFunctor **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::RefinementFunctor & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->free_refine(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_HashRefinement_1getNumberOfRefinablePoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  sgpp::base::HashRefinement *arg1 = (sgpp::base::HashRefinement *) 0 ;
  sgpp::base::GridStorage *arg2 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::HashRefinement **)&jarg1; 
  arg2 = *(sgpp::base::GridStorage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->getNumberOfRefinablePoints(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_HashRefinement_1refineGridpoint1D_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  sgpp::base::HashRefinement *arg1 = (sgpp::base::HashRefinement *) 0 ;
  sgpp::base::GridStorage *arg2 = 0 ;
  sgpp::base::GridPoint *arg3 = 0 ;
  size_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::base::HashRefinement **)&jarg1; 
  arg2 = *(sgpp::base::GridStorage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::GridPoint **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridPoint & reference is null");
    return ;
  } 
  arg4 = (size_t)jarg4; 
  {
    try {
      (arg1)->refineGridpoint1D(*arg2,*arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_HashRefinement_1refineGridpoint1D_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  sgpp::base::HashRefinement *arg1 = (sgpp::base::HashRefinement *) 0 ;
  sgpp::base::GridStorage *arg2 = 0 ;
  size_t arg3 ;
  size_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::HashRefinement **)&jarg1; 
  arg2 = *(sgpp::base::GridStorage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage & reference is null");
    return ;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  {
    try {
      (arg1)->refineGridpoint1D(*arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1HashRefinement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::HashRefinement *arg1 = (sgpp::base::HashRefinement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::HashRefinement **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1HashRefinement(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::base::HashRefinement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::base::HashRefinement *)new sgpp::base::HashRefinement();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::HashRefinement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_HashCoarsening_1free_1coarsen_1NFirstOnly_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jlong jarg6) {
  sgpp::base::HashCoarsening *arg1 = (sgpp::base::HashCoarsening *) 0 ;
  sgpp::base::GridStorage *arg2 = 0 ;
  sgpp::base::CoarseningFunctor *arg3 = 0 ;
  sgpp::base::DataVector *arg4 = 0 ;
  size_t arg5 ;
  size_t arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(sgpp::base::HashCoarsening **)&jarg1; 
  arg2 = *(sgpp::base::GridStorage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::CoarseningFunctor **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::CoarseningFunctor & reference is null");
    return ;
  } 
  arg4 = *(sgpp::base::DataVector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg5 = (size_t)jarg5; 
  arg6 = (size_t)jarg6; 
  {
    try {
      (arg1)->free_coarsen_NFirstOnly(*arg2,*arg3,*arg4,arg5,arg6);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_HashCoarsening_1free_1coarsen_1NFirstOnly_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5) {
  sgpp::base::HashCoarsening *arg1 = (sgpp::base::HashCoarsening *) 0 ;
  sgpp::base::GridStorage *arg2 = 0 ;
  sgpp::base::CoarseningFunctor *arg3 = 0 ;
  sgpp::base::DataVector *arg4 = 0 ;
  size_t arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(sgpp::base::HashCoarsening **)&jarg1; 
  arg2 = *(sgpp::base::GridStorage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::CoarseningFunctor **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::CoarseningFunctor & reference is null");
    return ;
  } 
  arg4 = *(sgpp::base::DataVector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg5 = (size_t)jarg5; 
  {
    try {
      (arg1)->free_coarsen_NFirstOnly(*arg2,*arg3,*arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_HashCoarsening_1free_1coarsen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  sgpp::base::HashCoarsening *arg1 = (sgpp::base::HashCoarsening *) 0 ;
  sgpp::base::GridStorage *arg2 = 0 ;
  sgpp::base::CoarseningFunctor *arg3 = 0 ;
  sgpp::base::DataVector *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(sgpp::base::HashCoarsening **)&jarg1; 
  arg2 = *(sgpp::base::GridStorage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::CoarseningFunctor **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::CoarseningFunctor & reference is null");
    return ;
  } 
  arg4 = *(sgpp::base::DataVector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->free_coarsen(*arg2,*arg3,*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_HashCoarsening_1getNumberOfRemovablePoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  sgpp::base::HashCoarsening *arg1 = (sgpp::base::HashCoarsening *) 0 ;
  sgpp::base::GridStorage *arg2 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::HashCoarsening **)&jarg1; 
  arg2 = *(sgpp::base::GridStorage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->getNumberOfRemovablePoints(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_HashCoarsening_1getDeletedPoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::HashCoarsening *arg1 = (sgpp::base::HashCoarsening *) 0 ;
  std::list< size_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::HashCoarsening **)&jarg1; 
  {
    try {
      result = (arg1)->getDeletedPoints();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(std::list< size_t > **)&jresult = new std::list< size_t >((const std::list< size_t > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1HashCoarsening(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::base::HashCoarsening *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::base::HashCoarsening *)new sgpp::base::HashCoarsening();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::HashCoarsening **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1HashCoarsening(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::HashCoarsening *arg1 = (sgpp::base::HashCoarsening *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::HashCoarsening **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_HashRefinementBoundaries_1free_1refine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::base::HashRefinementBoundaries *arg1 = (sgpp::base::HashRefinementBoundaries *) 0 ;
  sgpp::base::GridStorage *arg2 = 0 ;
  sgpp::base::RefinementFunctor *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::base::HashRefinementBoundaries **)&jarg1; 
  arg2 = *(sgpp::base::GridStorage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::RefinementFunctor **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::RefinementFunctor & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->free_refine(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_HashRefinementBoundaries_1getNumberOfRefinablePoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  sgpp::base::HashRefinementBoundaries *arg1 = (sgpp::base::HashRefinementBoundaries *) 0 ;
  sgpp::base::GridStorage *arg2 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::HashRefinementBoundaries **)&jarg1; 
  arg2 = *(sgpp::base::GridStorage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->getNumberOfRefinablePoints(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_HashRefinementBoundaries_1refineGridpoint1D(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  sgpp::base::HashRefinementBoundaries *arg1 = (sgpp::base::HashRefinementBoundaries *) 0 ;
  sgpp::base::GridStorage *arg2 = 0 ;
  sgpp::base::GridPoint *arg3 = 0 ;
  size_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::base::HashRefinementBoundaries **)&jarg1; 
  arg2 = *(sgpp::base::GridStorage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::GridPoint **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridPoint & reference is null");
    return ;
  } 
  arg4 = (size_t)jarg4; 
  {
    try {
      (arg1)->refineGridpoint1D(*arg2,*arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1HashRefinementBoundaries(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::base::HashRefinementBoundaries *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::base::HashRefinementBoundaries *)new sgpp::base::HashRefinementBoundaries();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::HashRefinementBoundaries **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1HashRefinementBoundaries(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::HashRefinementBoundaries *arg1 = (sgpp::base::HashRefinementBoundaries *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::HashRefinementBoundaries **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1PredictiveRefinementIndicator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jdouble jarg5, jobject jarg6) {
  jlong jresult = 0 ;
  sgpp::base::Grid *arg1 = 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  size_t arg4 ;
  double arg5 ;
  uint64_t arg6 ;
  sgpp::base::PredictiveRefinementIndicator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::base::Grid **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  arg4 = (size_t)jarg4; 
  arg5 = (double)jarg5; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg6) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg6);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg6, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg6 = 0;
    for(i=0; i<sz; i++) {
      arg6 = (arg6 << 8) | (uint64_t)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    try {
      result = (sgpp::base::PredictiveRefinementIndicator *)new sgpp::base::PredictiveRefinementIndicator(*arg1,*arg2,*arg3,arg4,arg5,arg6);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::PredictiveRefinementIndicator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1PredictiveRefinementIndicator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jdouble jarg5) {
  jlong jresult = 0 ;
  sgpp::base::Grid *arg1 = 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  size_t arg4 ;
  double arg5 ;
  sgpp::base::PredictiveRefinementIndicator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::base::Grid **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  arg4 = (size_t)jarg4; 
  arg5 = (double)jarg5; 
  {
    try {
      result = (sgpp::base::PredictiveRefinementIndicator *)new sgpp::base::PredictiveRefinementIndicator(*arg1,*arg2,*arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::PredictiveRefinementIndicator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1PredictiveRefinementIndicator_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  jlong jresult = 0 ;
  sgpp::base::Grid *arg1 = 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  size_t arg4 ;
  sgpp::base::PredictiveRefinementIndicator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::base::Grid **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  arg4 = (size_t)jarg4; 
  {
    try {
      result = (sgpp::base::PredictiveRefinementIndicator *)new sgpp::base::PredictiveRefinementIndicator(*arg1,*arg2,*arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::PredictiveRefinementIndicator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1PredictiveRefinementIndicator_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  sgpp::base::Grid *arg1 = 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  sgpp::base::PredictiveRefinementIndicator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::base::Grid **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::base::PredictiveRefinementIndicator *)new sgpp::base::PredictiveRefinementIndicator(*arg1,*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::PredictiveRefinementIndicator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1PredictiveRefinementIndicator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::PredictiveRefinementIndicator *arg1 = (sgpp::base::PredictiveRefinementIndicator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::PredictiveRefinementIndicator **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_PredictiveRefinementIndicator_1operatorParentheses_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::base::PredictiveRefinementIndicator *arg1 = (sgpp::base::PredictiveRefinementIndicator *) 0 ;
  sgpp::base::GridPoint *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::PredictiveRefinementIndicator **)&jarg1; 
  arg2 = *(sgpp::base::GridPoint **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridPoint & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)((sgpp::base::PredictiveRefinementIndicator const *)arg1)->operator ()(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_PredictiveRefinementIndicator_1runOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jdouble jresult = 0 ;
  sgpp::base::PredictiveRefinementIndicator *arg1 = (sgpp::base::PredictiveRefinementIndicator *) 0 ;
  sgpp::base::GridStorage *arg2 = 0 ;
  size_t arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::PredictiveRefinementIndicator **)&jarg1; 
  arg2 = *(sgpp::base::GridStorage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (double)(arg1)->runOperator(*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_PredictiveRefinementIndicator_1getRefinementsNum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::PredictiveRefinementIndicator *arg1 = (sgpp::base::PredictiveRefinementIndicator *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::PredictiveRefinementIndicator **)&jarg1; 
  {
    try {
      result = ((sgpp::base::PredictiveRefinementIndicator const *)arg1)->getRefinementsNum();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_PredictiveRefinementIndicator_1getRefinementThreshold(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::base::PredictiveRefinementIndicator *arg1 = (sgpp::base::PredictiveRefinementIndicator *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::PredictiveRefinementIndicator **)&jarg1; 
  {
    try {
      result = (double)((sgpp::base::PredictiveRefinementIndicator const *)arg1)->getRefinementThreshold();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_PredictiveRefinementIndicator_1start(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::base::PredictiveRefinementIndicator *arg1 = (sgpp::base::PredictiveRefinementIndicator *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::PredictiveRefinementIndicator **)&jarg1; 
  {
    try {
      result = (double)((sgpp::base::PredictiveRefinementIndicator const *)arg1)->start();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_sgpp_jsgppJNI_PredictiveRefinementIndicator_1getMinSupportPoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  sgpp::base::PredictiveRefinementIndicator *arg1 = (sgpp::base::PredictiveRefinementIndicator *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::PredictiveRefinementIndicator **)&jarg1; 
  {
    try {
      result = (uint64_t)((sgpp::base::PredictiveRefinementIndicator const *)arg1)->getMinSupportPoints();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_PredictiveRefinementIndicator_1setMinSupportPoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  sgpp::base::PredictiveRefinementIndicator *arg1 = (sgpp::base::PredictiveRefinementIndicator *) 0 ;
  uint64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::PredictiveRefinementIndicator **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    for(i=0; i<sz; i++) {
      arg2 = (arg2 << 8) | (uint64_t)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    try {
      (arg1)->setMinSupportPoints(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_PredictiveRefinementIndicator_1operatorParentheses_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jdouble jresult = 0 ;
  sgpp::base::PredictiveRefinementIndicator *arg1 = (sgpp::base::PredictiveRefinementIndicator *) 0 ;
  sgpp::base::GridStorage *arg2 = 0 ;
  size_t arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::PredictiveRefinementIndicator **)&jarg1; 
  arg2 = *(sgpp::base::GridStorage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (double)((sgpp::base::PredictiveRefinementIndicator const *)arg1)->operator ()(*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1PredictiveRefinement_1refinement_1key(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  sgpp::base::GridPoint *arg1 = 0 ;
  size_t arg2 ;
  size_t arg3 ;
  sgpp::base::PredictiveRefinement_refinement_key *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::GridPoint **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridPoint const & reference is null");
    return 0;
  } 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (sgpp::base::PredictiveRefinement_refinement_key *)new sgpp::base::PredictiveRefinement_refinement_key((sgpp::base::GridPoint const &)*arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::PredictiveRefinement_refinement_key **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_PredictiveRefinement_1refinement_1key_1getDim(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::PredictiveRefinement_refinement_key *arg1 = (sgpp::base::PredictiveRefinement_refinement_key *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::PredictiveRefinement_refinement_key **)&jarg1; 
  {
    try {
      result = (arg1)->getDim();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1PredictiveRefinement_1refinement_1key(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::PredictiveRefinement_refinement_key *arg1 = (sgpp::base::PredictiveRefinement_refinement_key *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::PredictiveRefinement_refinement_key **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_PredictiveRefinement_1free_1refine_1_1SWIG_10_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::base::PredictiveRefinement *arg1 = (sgpp::base::PredictiveRefinement *) 0 ;
  sgpp::base::GridStorage *arg2 = 0 ;
  sgpp::base::RefinementFunctor *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::base::PredictiveRefinement **)&jarg1; 
  arg2 = *(sgpp::base::GridStorage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::RefinementFunctor **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::RefinementFunctor & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->free_refine(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1PredictiveRefinement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::AbstractRefinement *arg1 = (sgpp::base::AbstractRefinement *) 0 ;
  sgpp::base::PredictiveRefinement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::AbstractRefinement **)&jarg1; 
  {
    try {
      result = (sgpp::base::PredictiveRefinement *)new sgpp::base::PredictiveRefinement(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::PredictiveRefinement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_PredictiveRefinement_1free_1refine_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::base::PredictiveRefinement *arg1 = (sgpp::base::PredictiveRefinement *) 0 ;
  sgpp::base::GridStorage *arg2 = 0 ;
  sgpp::base::PredictiveRefinementIndicator *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::base::PredictiveRefinement **)&jarg1; 
  arg2 = *(sgpp::base::GridStorage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::PredictiveRefinementIndicator **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::PredictiveRefinementIndicator & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->free_refine(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_PredictiveRefinement_1setAlpha(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::base::PredictiveRefinement *arg1 = (sgpp::base::PredictiveRefinement *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::PredictiveRefinement **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setAlpha(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1PredictiveRefinement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::PredictiveRefinement *arg1 = (sgpp::base::PredictiveRefinement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::PredictiveRefinement **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1ForwardSelectorRefinementIndicator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jdouble jarg6, jdouble jarg7, jlong jarg8, jboolean jarg9) {
  jlong jresult = 0 ;
  sgpp::base::Grid *arg1 = 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  sgpp::base::DataVector *arg4 = 0 ;
  sgpp::base::DataVector *arg5 = 0 ;
  double arg6 ;
  double arg7 ;
  size_t arg8 ;
  bool arg9 ;
  sgpp::base::ForwardSelectorRefinementIndicator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(sgpp::base::Grid **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  arg4 = *(sgpp::base::DataVector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  arg5 = *(sgpp::base::DataVector **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (size_t)jarg8; 
  arg9 = jarg9 ? true : false; 
  {
    try {
      result = (sgpp::base::ForwardSelectorRefinementIndicator *)new sgpp::base::ForwardSelectorRefinementIndicator(*arg1,*arg2,*arg3,*arg4,*arg5,arg6,arg7,arg8,arg9);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::ForwardSelectorRefinementIndicator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1ForwardSelectorRefinementIndicator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jdouble jarg6, jdouble jarg7, jlong jarg8) {
  jlong jresult = 0 ;
  sgpp::base::Grid *arg1 = 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  sgpp::base::DataVector *arg4 = 0 ;
  sgpp::base::DataVector *arg5 = 0 ;
  double arg6 ;
  double arg7 ;
  size_t arg8 ;
  sgpp::base::ForwardSelectorRefinementIndicator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(sgpp::base::Grid **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  arg4 = *(sgpp::base::DataVector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  arg5 = *(sgpp::base::DataVector **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (size_t)jarg8; 
  {
    try {
      result = (sgpp::base::ForwardSelectorRefinementIndicator *)new sgpp::base::ForwardSelectorRefinementIndicator(*arg1,*arg2,*arg3,*arg4,*arg5,arg6,arg7,arg8);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::ForwardSelectorRefinementIndicator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1ForwardSelectorRefinementIndicator_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jdouble jarg6, jdouble jarg7) {
  jlong jresult = 0 ;
  sgpp::base::Grid *arg1 = 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  sgpp::base::DataVector *arg4 = 0 ;
  sgpp::base::DataVector *arg5 = 0 ;
  double arg6 ;
  double arg7 ;
  sgpp::base::ForwardSelectorRefinementIndicator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(sgpp::base::Grid **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  arg4 = *(sgpp::base::DataVector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  arg5 = *(sgpp::base::DataVector **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  {
    try {
      result = (sgpp::base::ForwardSelectorRefinementIndicator *)new sgpp::base::ForwardSelectorRefinementIndicator(*arg1,*arg2,*arg3,*arg4,*arg5,arg6,arg7);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::ForwardSelectorRefinementIndicator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1ForwardSelectorRefinementIndicator_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jdouble jarg6) {
  jlong jresult = 0 ;
  sgpp::base::Grid *arg1 = 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  sgpp::base::DataVector *arg4 = 0 ;
  sgpp::base::DataVector *arg5 = 0 ;
  double arg6 ;
  sgpp::base::ForwardSelectorRefinementIndicator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(sgpp::base::Grid **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  arg4 = *(sgpp::base::DataVector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  arg5 = *(sgpp::base::DataVector **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  arg6 = (double)jarg6; 
  {
    try {
      result = (sgpp::base::ForwardSelectorRefinementIndicator *)new sgpp::base::ForwardSelectorRefinementIndicator(*arg1,*arg2,*arg3,*arg4,*arg5,arg6);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::ForwardSelectorRefinementIndicator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_ForwardSelectorRefinementIndicator_1operatorParentheses_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jdouble jresult = 0 ;
  sgpp::base::ForwardSelectorRefinementIndicator *arg1 = (sgpp::base::ForwardSelectorRefinementIndicator *) 0 ;
  sgpp::base::GridStorage *arg2 = 0 ;
  size_t arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::ForwardSelectorRefinementIndicator **)&jarg1; 
  arg2 = *(sgpp::base::GridStorage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (double)((sgpp::base::ForwardSelectorRefinementIndicator const *)arg1)->operator ()(*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_ForwardSelectorRefinementIndicator_1runOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jdouble jresult = 0 ;
  sgpp::base::ForwardSelectorRefinementIndicator *arg1 = (sgpp::base::ForwardSelectorRefinementIndicator *) 0 ;
  sgpp::base::GridStorage *arg2 = 0 ;
  size_t arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::ForwardSelectorRefinementIndicator **)&jarg1; 
  arg2 = *(sgpp::base::GridStorage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (double)(arg1)->runOperator(*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_ForwardSelectorRefinementIndicator_1getRefinementsNum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::ForwardSelectorRefinementIndicator *arg1 = (sgpp::base::ForwardSelectorRefinementIndicator *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::ForwardSelectorRefinementIndicator **)&jarg1; 
  {
    try {
      result = ((sgpp::base::ForwardSelectorRefinementIndicator const *)arg1)->getRefinementsNum();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_ForwardSelectorRefinementIndicator_1getRefinementThreshold(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::base::ForwardSelectorRefinementIndicator *arg1 = (sgpp::base::ForwardSelectorRefinementIndicator *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::ForwardSelectorRefinementIndicator **)&jarg1; 
  {
    try {
      result = (double)((sgpp::base::ForwardSelectorRefinementIndicator const *)arg1)->getRefinementThreshold();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_ForwardSelectorRefinementIndicator_1start(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::base::ForwardSelectorRefinementIndicator *arg1 = (sgpp::base::ForwardSelectorRefinementIndicator *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::ForwardSelectorRefinementIndicator **)&jarg1; 
  {
    try {
      result = (double)((sgpp::base::ForwardSelectorRefinementIndicator const *)arg1)->start();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_ForwardSelectorRefinementIndicator_1operatorParentheses_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::base::ForwardSelectorRefinementIndicator *arg1 = (sgpp::base::ForwardSelectorRefinementIndicator *) 0 ;
  sgpp::base::GridPoint *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::ForwardSelectorRefinementIndicator **)&jarg1; 
  arg2 = *(sgpp::base::GridPoint **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridPoint & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)((sgpp::base::ForwardSelectorRefinementIndicator const *)arg1)->operator ()(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_ForwardSelectorRefinementIndicator_1update(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::base::ForwardSelectorRefinementIndicator *arg1 = (sgpp::base::ForwardSelectorRefinementIndicator *) 0 ;
  sgpp::base::GridPoint *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::ForwardSelectorRefinementIndicator **)&jarg1; 
  arg2 = *(sgpp::base::GridPoint **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridPoint & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->update(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1ForwardSelectorRefinementIndicator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::ForwardSelectorRefinementIndicator *arg1 = (sgpp::base::ForwardSelectorRefinementIndicator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::ForwardSelectorRefinementIndicator **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1ForwardSelectorRefinement_1refinement_1key(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  sgpp::base::GridPoint *arg1 = 0 ;
  size_t arg2 ;
  size_t arg3 ;
  sgpp::base::ForwardSelectorRefinement_refinement_key *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::GridPoint **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridPoint const & reference is null");
    return 0;
  } 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (sgpp::base::ForwardSelectorRefinement_refinement_key *)new sgpp::base::ForwardSelectorRefinement_refinement_key((sgpp::base::GridPoint const &)*arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::ForwardSelectorRefinement_refinement_key **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_ForwardSelectorRefinement_1refinement_1key_1getDim(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::ForwardSelectorRefinement_refinement_key *arg1 = (sgpp::base::ForwardSelectorRefinement_refinement_key *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::ForwardSelectorRefinement_refinement_key **)&jarg1; 
  {
    try {
      result = (arg1)->getDim();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1ForwardSelectorRefinement_1refinement_1key(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::ForwardSelectorRefinement_refinement_key *arg1 = (sgpp::base::ForwardSelectorRefinement_refinement_key *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::ForwardSelectorRefinement_refinement_key **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_ForwardSelectorRefinement_1free_1refine_1_1SWIG_10_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::base::ForwardSelectorRefinement *arg1 = (sgpp::base::ForwardSelectorRefinement *) 0 ;
  sgpp::base::GridStorage *arg2 = 0 ;
  sgpp::base::RefinementFunctor *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::base::ForwardSelectorRefinement **)&jarg1; 
  arg2 = *(sgpp::base::GridStorage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::RefinementFunctor **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::RefinementFunctor & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->free_refine(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1ForwardSelectorRefinement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::AbstractRefinement *arg1 = (sgpp::base::AbstractRefinement *) 0 ;
  sgpp::base::ForwardSelectorRefinement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::AbstractRefinement **)&jarg1; 
  {
    try {
      result = (sgpp::base::ForwardSelectorRefinement *)new sgpp::base::ForwardSelectorRefinement(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::ForwardSelectorRefinement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_ForwardSelectorRefinement_1free_1refine_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::base::ForwardSelectorRefinement *arg1 = (sgpp::base::ForwardSelectorRefinement *) 0 ;
  sgpp::base::GridStorage *arg2 = 0 ;
  sgpp::base::ForwardSelectorRefinementIndicator *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::base::ForwardSelectorRefinement **)&jarg1; 
  arg2 = *(sgpp::base::GridStorage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::ForwardSelectorRefinementIndicator **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::ForwardSelectorRefinementIndicator & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->free_refine(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1ForwardSelectorRefinement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::ForwardSelectorRefinement *arg1 = (sgpp::base::ForwardSelectorRefinement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::ForwardSelectorRefinement **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1ImpurityRefinementIndicator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jdouble jarg7, jlong jarg8) {
  jlong jresult = 0 ;
  sgpp::base::Grid *arg1 = 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = (sgpp::base::DataVector *) 0 ;
  sgpp::base::DataVector *arg4 = (sgpp::base::DataVector *) 0 ;
  sgpp::base::DataVector *arg5 = (sgpp::base::DataVector *) 0 ;
  sgpp::base::DataVector *arg6 = 0 ;
  double arg7 ;
  size_t arg8 ;
  sgpp::base::ImpurityRefinementIndicator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(sgpp::base::Grid **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3; 
  arg4 = *(sgpp::base::DataVector **)&jarg4; 
  arg5 = *(sgpp::base::DataVector **)&jarg5; 
  arg6 = *(sgpp::base::DataVector **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  arg7 = (double)jarg7; 
  arg8 = (size_t)jarg8; 
  {
    try {
      result = (sgpp::base::ImpurityRefinementIndicator *)new sgpp::base::ImpurityRefinementIndicator(*arg1,*arg2,arg3,arg4,arg5,*arg6,arg7,arg8);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::ImpurityRefinementIndicator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1ImpurityRefinementIndicator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jdouble jarg7) {
  jlong jresult = 0 ;
  sgpp::base::Grid *arg1 = 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = (sgpp::base::DataVector *) 0 ;
  sgpp::base::DataVector *arg4 = (sgpp::base::DataVector *) 0 ;
  sgpp::base::DataVector *arg5 = (sgpp::base::DataVector *) 0 ;
  sgpp::base::DataVector *arg6 = 0 ;
  double arg7 ;
  sgpp::base::ImpurityRefinementIndicator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(sgpp::base::Grid **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3; 
  arg4 = *(sgpp::base::DataVector **)&jarg4; 
  arg5 = *(sgpp::base::DataVector **)&jarg5; 
  arg6 = *(sgpp::base::DataVector **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  arg7 = (double)jarg7; 
  {
    try {
      result = (sgpp::base::ImpurityRefinementIndicator *)new sgpp::base::ImpurityRefinementIndicator(*arg1,*arg2,arg3,arg4,arg5,*arg6,arg7);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::ImpurityRefinementIndicator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1ImpurityRefinementIndicator_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_) {
  jlong jresult = 0 ;
  sgpp::base::Grid *arg1 = 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = (sgpp::base::DataVector *) 0 ;
  sgpp::base::DataVector *arg4 = (sgpp::base::DataVector *) 0 ;
  sgpp::base::DataVector *arg5 = (sgpp::base::DataVector *) 0 ;
  sgpp::base::DataVector *arg6 = 0 ;
  sgpp::base::ImpurityRefinementIndicator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(sgpp::base::Grid **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3; 
  arg4 = *(sgpp::base::DataVector **)&jarg4; 
  arg5 = *(sgpp::base::DataVector **)&jarg5; 
  arg6 = *(sgpp::base::DataVector **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::base::ImpurityRefinementIndicator *)new sgpp::base::ImpurityRefinementIndicator(*arg1,*arg2,arg3,arg4,arg5,*arg6);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::ImpurityRefinementIndicator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_ImpurityRefinementIndicator_1operatorParentheses_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::base::ImpurityRefinementIndicator *arg1 = (sgpp::base::ImpurityRefinementIndicator *) 0 ;
  sgpp::base::GridPoint *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::ImpurityRefinementIndicator **)&jarg1; 
  arg2 = *(sgpp::base::GridPoint **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridPoint & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)((sgpp::base::ImpurityRefinementIndicator const *)arg1)->operator ()(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_ImpurityRefinementIndicator_1getRefinementsNum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::ImpurityRefinementIndicator *arg1 = (sgpp::base::ImpurityRefinementIndicator *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::ImpurityRefinementIndicator **)&jarg1; 
  {
    try {
      result = ((sgpp::base::ImpurityRefinementIndicator const *)arg1)->getRefinementsNum();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_ImpurityRefinementIndicator_1getRefinementThreshold(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::base::ImpurityRefinementIndicator *arg1 = (sgpp::base::ImpurityRefinementIndicator *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::ImpurityRefinementIndicator **)&jarg1; 
  {
    try {
      result = (double)((sgpp::base::ImpurityRefinementIndicator const *)arg1)->getRefinementThreshold();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_ImpurityRefinementIndicator_1start(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::base::ImpurityRefinementIndicator *arg1 = (sgpp::base::ImpurityRefinementIndicator *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::ImpurityRefinementIndicator **)&jarg1; 
  {
    try {
      result = (double)((sgpp::base::ImpurityRefinementIndicator const *)arg1)->start();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_ImpurityRefinementIndicator_1operatorParentheses_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jdouble jresult = 0 ;
  sgpp::base::ImpurityRefinementIndicator *arg1 = (sgpp::base::ImpurityRefinementIndicator *) 0 ;
  sgpp::base::GridStorage *arg2 = 0 ;
  size_t arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::ImpurityRefinementIndicator **)&jarg1; 
  arg2 = *(sgpp::base::GridStorage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (double)((sgpp::base::ImpurityRefinementIndicator const *)arg1)->operator ()(*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_ImpurityRefinementIndicator_1update(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::base::ImpurityRefinementIndicator *arg1 = (sgpp::base::ImpurityRefinementIndicator *) 0 ;
  sgpp::base::GridPoint *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::ImpurityRefinementIndicator **)&jarg1; 
  arg2 = *(sgpp::base::GridPoint **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridPoint & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->update(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_ImpurityRefinementIndicator_1alphas_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::base::ImpurityRefinementIndicator *arg1 = (sgpp::base::ImpurityRefinementIndicator *) 0 ;
  sgpp::base::DataVector *arg2 = (sgpp::base::DataVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::ImpurityRefinementIndicator **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2; 
  if (arg1) (arg1)->alphas = arg2;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_ImpurityRefinementIndicator_1alphas_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::ImpurityRefinementIndicator *arg1 = (sgpp::base::ImpurityRefinementIndicator *) 0 ;
  sgpp::base::DataVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::ImpurityRefinementIndicator **)&jarg1; 
  result = (sgpp::base::DataVector *) ((arg1)->alphas);
  *(sgpp::base::DataVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_ImpurityRefinementIndicator_1w1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::base::ImpurityRefinementIndicator *arg1 = (sgpp::base::ImpurityRefinementIndicator *) 0 ;
  sgpp::base::DataVector *arg2 = (sgpp::base::DataVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::ImpurityRefinementIndicator **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2; 
  if (arg1) (arg1)->w1 = arg2;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_ImpurityRefinementIndicator_1w1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::ImpurityRefinementIndicator *arg1 = (sgpp::base::ImpurityRefinementIndicator *) 0 ;
  sgpp::base::DataVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::ImpurityRefinementIndicator **)&jarg1; 
  result = (sgpp::base::DataVector *) ((arg1)->w1);
  *(sgpp::base::DataVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_ImpurityRefinementIndicator_1w2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::base::ImpurityRefinementIndicator *arg1 = (sgpp::base::ImpurityRefinementIndicator *) 0 ;
  sgpp::base::DataVector *arg2 = (sgpp::base::DataVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::ImpurityRefinementIndicator **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2; 
  if (arg1) (arg1)->w2 = arg2;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_ImpurityRefinementIndicator_1w2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::ImpurityRefinementIndicator *arg1 = (sgpp::base::ImpurityRefinementIndicator *) 0 ;
  sgpp::base::DataVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::ImpurityRefinementIndicator **)&jarg1; 
  result = (sgpp::base::DataVector *) ((arg1)->w2);
  *(sgpp::base::DataVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1ImpurityRefinementIndicator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::ImpurityRefinementIndicator *arg1 = (sgpp::base::ImpurityRefinementIndicator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::ImpurityRefinementIndicator **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1ImpurityRefinement_1refinement_1key(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  sgpp::base::GridPoint *arg1 = 0 ;
  size_t arg2 ;
  size_t arg3 ;
  sgpp::base::ImpurityRefinement_refinement_key *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::GridPoint **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridPoint const & reference is null");
    return 0;
  } 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (sgpp::base::ImpurityRefinement_refinement_key *)new sgpp::base::ImpurityRefinement_refinement_key((sgpp::base::GridPoint const &)*arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::ImpurityRefinement_refinement_key **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_ImpurityRefinement_1refinement_1key_1getDim(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::ImpurityRefinement_refinement_key *arg1 = (sgpp::base::ImpurityRefinement_refinement_key *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::ImpurityRefinement_refinement_key **)&jarg1; 
  {
    try {
      result = (arg1)->getDim();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1ImpurityRefinement_1refinement_1key(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::ImpurityRefinement_refinement_key *arg1 = (sgpp::base::ImpurityRefinement_refinement_key *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::ImpurityRefinement_refinement_key **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_ImpurityRefinement_1free_1refine_1_1SWIG_10_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::base::ImpurityRefinement *arg1 = (sgpp::base::ImpurityRefinement *) 0 ;
  sgpp::base::GridStorage *arg2 = 0 ;
  sgpp::base::RefinementFunctor *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::base::ImpurityRefinement **)&jarg1; 
  arg2 = *(sgpp::base::GridStorage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::RefinementFunctor **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::RefinementFunctor & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->free_refine(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1ImpurityRefinement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::AbstractRefinement *arg1 = (sgpp::base::AbstractRefinement *) 0 ;
  sgpp::base::ImpurityRefinement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::AbstractRefinement **)&jarg1; 
  {
    try {
      result = (sgpp::base::ImpurityRefinement *)new sgpp::base::ImpurityRefinement(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::ImpurityRefinement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_ImpurityRefinement_1free_1refine_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::base::ImpurityRefinement *arg1 = (sgpp::base::ImpurityRefinement *) 0 ;
  sgpp::base::GridStorage *arg2 = 0 ;
  sgpp::base::ImpurityRefinementIndicator *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::base::ImpurityRefinement **)&jarg1; 
  arg2 = *(sgpp::base::GridStorage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::ImpurityRefinementIndicator **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::ImpurityRefinementIndicator & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->free_refine(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1ImpurityRefinement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::ImpurityRefinement *arg1 = (sgpp::base::ImpurityRefinement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::ImpurityRefinement **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1StandardGridGenerator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::GridStorage *arg1 = 0 ;
  sgpp::base::StandardGridGenerator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::GridStorage **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::base::StandardGridGenerator *)new sgpp::base::StandardGridGenerator(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::StandardGridGenerator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1StandardGridGenerator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::StandardGridGenerator *arg1 = (sgpp::base::StandardGridGenerator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::StandardGridGenerator **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_StandardGridGenerator_1regular_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::base::StandardGridGenerator *arg1 = (sgpp::base::StandardGridGenerator *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::StandardGridGenerator **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      (arg1)->regular(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_StandardGridGenerator_1regular_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdouble jarg3) {
  sgpp::base::StandardGridGenerator *arg1 = (sgpp::base::StandardGridGenerator *) 0 ;
  size_t arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::StandardGridGenerator **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->regular(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_StandardGridGenerator_1regularInter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jdouble jarg4) {
  sgpp::base::StandardGridGenerator *arg1 = (sgpp::base::StandardGridGenerator *) 0 ;
  size_t arg2 ;
  std::vector< std::vector< size_t > > *arg3 = 0 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::StandardGridGenerator **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(std::vector< std::vector< size_t > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< size_t > > const & reference is null");
    return ;
  } 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->regularInter(arg2,(std::vector< std::vector< size_t > > const &)*arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_StandardGridGenerator_1cliques_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  sgpp::base::StandardGridGenerator *arg1 = (sgpp::base::StandardGridGenerator *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::StandardGridGenerator **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  {
    try {
      (arg1)->cliques(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_StandardGridGenerator_1cliques_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jdouble jarg4) {
  sgpp::base::StandardGridGenerator *arg1 = (sgpp::base::StandardGridGenerator *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::StandardGridGenerator **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->cliques(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_StandardGridGenerator_1full(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::base::StandardGridGenerator *arg1 = (sgpp::base::StandardGridGenerator *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::StandardGridGenerator **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      (arg1)->full(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_StandardGridGenerator_1refine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::base::StandardGridGenerator *arg1 = (sgpp::base::StandardGridGenerator *) 0 ;
  sgpp::base::RefinementFunctor *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::StandardGridGenerator **)&jarg1; 
  arg2 = *(sgpp::base::RefinementFunctor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::RefinementFunctor & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->refine(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_StandardGridGenerator_1refineInter_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  sgpp::base::StandardGridGenerator *arg1 = (sgpp::base::StandardGridGenerator *) 0 ;
  sgpp::base::RefinementFunctor *arg2 = 0 ;
  std::unordered_set< std::vector< bool > > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::StandardGridGenerator **)&jarg1; 
  arg2 = *(sgpp::base::RefinementFunctor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::RefinementFunctor & reference is null");
    return ;
  } 
  arg3 = *(std::unordered_set< std::vector< bool > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unordered_set< std::vector< bool > > const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->refineInter(*arg2,(std::unordered_set< std::vector< bool > > const &)*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_StandardGridGenerator_1refineInter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  sgpp::base::StandardGridGenerator *arg1 = (sgpp::base::StandardGridGenerator *) 0 ;
  sgpp::base::RefinementFunctor *arg2 = 0 ;
  std::vector< std::vector< size_t > > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::StandardGridGenerator **)&jarg1; 
  arg2 = *(sgpp::base::RefinementFunctor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::RefinementFunctor & reference is null");
    return ;
  } 
  arg3 = *(std::vector< std::vector< size_t > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< size_t > > const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->refineInter(*arg2,(std::vector< std::vector< size_t > > const &)*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_StandardGridGenerator_1getNumberOfRefinablePoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::StandardGridGenerator *arg1 = (sgpp::base::StandardGridGenerator *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::StandardGridGenerator **)&jarg1; 
  {
    try {
      result = (arg1)->getNumberOfRefinablePoints();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_StandardGridGenerator_1coarsen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::base::StandardGridGenerator *arg1 = (sgpp::base::StandardGridGenerator *) 0 ;
  sgpp::base::CoarseningFunctor *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::base::StandardGridGenerator **)&jarg1; 
  arg2 = *(sgpp::base::CoarseningFunctor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::CoarseningFunctor & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->coarsen(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_StandardGridGenerator_1coarsenNFirstOnly(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  sgpp::base::StandardGridGenerator *arg1 = (sgpp::base::StandardGridGenerator *) 0 ;
  sgpp::base::CoarseningFunctor *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  size_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::base::StandardGridGenerator **)&jarg1; 
  arg2 = *(sgpp::base::CoarseningFunctor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::CoarseningFunctor & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg4 = (size_t)jarg4; 
  {
    try {
      (arg1)->coarsenNFirstOnly(*arg2,*arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_StandardGridGenerator_1getNumberOfRemovablePoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::StandardGridGenerator *arg1 = (sgpp::base::StandardGridGenerator *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::StandardGridGenerator **)&jarg1; 
  {
    try {
      result = (arg1)->getNumberOfRemovablePoints();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_StandardGridGenerator_1refineMaxLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  sgpp::base::StandardGridGenerator *arg1 = (sgpp::base::StandardGridGenerator *) 0 ;
  sgpp::base::RefinementFunctor *arg2 = 0 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::StandardGridGenerator **)&jarg1; 
  arg2 = *(sgpp::base::RefinementFunctor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::RefinementFunctor & reference is null");
    return ;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      (arg1)->refineMaxLevel(*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_StandardGridGenerator_1getNumberOfRefinablePointsToMaxLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  sgpp::base::StandardGridGenerator *arg1 = (sgpp::base::StandardGridGenerator *) 0 ;
  size_t arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::StandardGridGenerator **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (arg1)->getNumberOfRefinablePointsToMaxLevel(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1L0BoundaryGridGenerator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::GridStorage *arg1 = 0 ;
  sgpp::base::L0BoundaryGridGenerator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::GridStorage **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::base::L0BoundaryGridGenerator *)new sgpp::base::L0BoundaryGridGenerator(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::L0BoundaryGridGenerator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1L0BoundaryGridGenerator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::L0BoundaryGridGenerator *arg1 = (sgpp::base::L0BoundaryGridGenerator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::L0BoundaryGridGenerator **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_L0BoundaryGridGenerator_1regular(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::base::L0BoundaryGridGenerator *arg1 = (sgpp::base::L0BoundaryGridGenerator *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::L0BoundaryGridGenerator **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      (arg1)->regular(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_L0BoundaryGridGenerator_1cliques(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  sgpp::base::L0BoundaryGridGenerator *arg1 = (sgpp::base::L0BoundaryGridGenerator *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::L0BoundaryGridGenerator **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  {
    try {
      (arg1)->cliques(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_L0BoundaryGridGenerator_1full(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::base::L0BoundaryGridGenerator *arg1 = (sgpp::base::L0BoundaryGridGenerator *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::L0BoundaryGridGenerator **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      (arg1)->full(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_L0BoundaryGridGenerator_1refine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::base::L0BoundaryGridGenerator *arg1 = (sgpp::base::L0BoundaryGridGenerator *) 0 ;
  sgpp::base::RefinementFunctor *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::L0BoundaryGridGenerator **)&jarg1; 
  arg2 = *(sgpp::base::RefinementFunctor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::RefinementFunctor & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->refine(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_L0BoundaryGridGenerator_1getNumberOfRefinablePoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::L0BoundaryGridGenerator *arg1 = (sgpp::base::L0BoundaryGridGenerator *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::L0BoundaryGridGenerator **)&jarg1; 
  {
    try {
      result = (arg1)->getNumberOfRefinablePoints();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_L0BoundaryGridGenerator_1coarsen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::base::L0BoundaryGridGenerator *arg1 = (sgpp::base::L0BoundaryGridGenerator *) 0 ;
  sgpp::base::CoarseningFunctor *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::base::L0BoundaryGridGenerator **)&jarg1; 
  arg2 = *(sgpp::base::CoarseningFunctor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::CoarseningFunctor & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->coarsen(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_L0BoundaryGridGenerator_1coarsenNFirstOnly(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  sgpp::base::L0BoundaryGridGenerator *arg1 = (sgpp::base::L0BoundaryGridGenerator *) 0 ;
  sgpp::base::CoarseningFunctor *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  size_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::base::L0BoundaryGridGenerator **)&jarg1; 
  arg2 = *(sgpp::base::CoarseningFunctor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::CoarseningFunctor & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg4 = (size_t)jarg4; 
  {
    try {
      (arg1)->coarsenNFirstOnly(*arg2,*arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_L0BoundaryGridGenerator_1getNumberOfRemovablePoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::L0BoundaryGridGenerator *arg1 = (sgpp::base::L0BoundaryGridGenerator *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::L0BoundaryGridGenerator **)&jarg1; 
  {
    try {
      result = (arg1)->getNumberOfRemovablePoints();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_L0BoundaryGridGenerator_1refineMaxLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  sgpp::base::L0BoundaryGridGenerator *arg1 = (sgpp::base::L0BoundaryGridGenerator *) 0 ;
  sgpp::base::RefinementFunctor *arg2 = 0 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::L0BoundaryGridGenerator **)&jarg1; 
  arg2 = *(sgpp::base::RefinementFunctor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::RefinementFunctor & reference is null");
    return ;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      (arg1)->refineMaxLevel(*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_L0BoundaryGridGenerator_1getNumberOfRefinablePointsToMaxLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  sgpp::base::L0BoundaryGridGenerator *arg1 = (sgpp::base::L0BoundaryGridGenerator *) 0 ;
  size_t arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::L0BoundaryGridGenerator **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (arg1)->getNumberOfRefinablePointsToMaxLevel(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1PrewaveletGridGenerator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  sgpp::base::GridStorage *arg1 = 0 ;
  sgpp::base::GridStorage *arg2 = 0 ;
  sgpp::base::PrewaveletGridGenerator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::GridStorage **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::base::GridStorage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::base::PrewaveletGridGenerator *)new sgpp::base::PrewaveletGridGenerator(*arg1,*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::PrewaveletGridGenerator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1PrewaveletGridGenerator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::PrewaveletGridGenerator *arg1 = (sgpp::base::PrewaveletGridGenerator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::PrewaveletGridGenerator **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_PrewaveletGridGenerator_1regular_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::base::PrewaveletGridGenerator *arg1 = (sgpp::base::PrewaveletGridGenerator *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::PrewaveletGridGenerator **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      (arg1)->regular(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_PrewaveletGridGenerator_1cliques_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  sgpp::base::PrewaveletGridGenerator *arg1 = (sgpp::base::PrewaveletGridGenerator *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::PrewaveletGridGenerator **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  {
    try {
      (arg1)->cliques(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_PrewaveletGridGenerator_1regular_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdouble jarg3) {
  sgpp::base::PrewaveletGridGenerator *arg1 = (sgpp::base::PrewaveletGridGenerator *) 0 ;
  size_t arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::PrewaveletGridGenerator **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->regular(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_PrewaveletGridGenerator_1cliques_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jdouble jarg4) {
  sgpp::base::PrewaveletGridGenerator *arg1 = (sgpp::base::PrewaveletGridGenerator *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::PrewaveletGridGenerator **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->cliques(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_PrewaveletGridGenerator_1full(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::base::PrewaveletGridGenerator *arg1 = (sgpp::base::PrewaveletGridGenerator *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::PrewaveletGridGenerator **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      (arg1)->full(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_PrewaveletGridGenerator_1refine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::base::PrewaveletGridGenerator *arg1 = (sgpp::base::PrewaveletGridGenerator *) 0 ;
  sgpp::base::RefinementFunctor *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::PrewaveletGridGenerator **)&jarg1; 
  arg2 = *(sgpp::base::RefinementFunctor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::RefinementFunctor & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->refine(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_PrewaveletGridGenerator_1getNumberOfRefinablePoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::PrewaveletGridGenerator *arg1 = (sgpp::base::PrewaveletGridGenerator *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::PrewaveletGridGenerator **)&jarg1; 
  {
    try {
      result = (arg1)->getNumberOfRefinablePoints();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_PrewaveletGridGenerator_1coarsen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::base::PrewaveletGridGenerator *arg1 = (sgpp::base::PrewaveletGridGenerator *) 0 ;
  sgpp::base::CoarseningFunctor *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::base::PrewaveletGridGenerator **)&jarg1; 
  arg2 = *(sgpp::base::CoarseningFunctor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::CoarseningFunctor & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->coarsen(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_PrewaveletGridGenerator_1coarsenNFirstOnly(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  sgpp::base::PrewaveletGridGenerator *arg1 = (sgpp::base::PrewaveletGridGenerator *) 0 ;
  sgpp::base::CoarseningFunctor *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  size_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::base::PrewaveletGridGenerator **)&jarg1; 
  arg2 = *(sgpp::base::CoarseningFunctor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::CoarseningFunctor & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg4 = (size_t)jarg4; 
  {
    try {
      (arg1)->coarsenNFirstOnly(*arg2,*arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_PrewaveletGridGenerator_1getNumberOfRemovablePoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::PrewaveletGridGenerator *arg1 = (sgpp::base::PrewaveletGridGenerator *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::PrewaveletGridGenerator **)&jarg1; 
  {
    try {
      result = (arg1)->getNumberOfRemovablePoints();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_PrewaveletGridGenerator_1refineMaxLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  sgpp::base::PrewaveletGridGenerator *arg1 = (sgpp::base::PrewaveletGridGenerator *) 0 ;
  sgpp::base::RefinementFunctor *arg2 = 0 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::PrewaveletGridGenerator **)&jarg1; 
  arg2 = *(sgpp::base::RefinementFunctor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::RefinementFunctor & reference is null");
    return ;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      (arg1)->refineMaxLevel(*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_PrewaveletGridGenerator_1getNumberOfRefinablePointsToMaxLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  sgpp::base::PrewaveletGridGenerator *arg1 = (sgpp::base::PrewaveletGridGenerator *) 0 ;
  size_t arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::PrewaveletGridGenerator **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (arg1)->getNumberOfRefinablePointsToMaxLevel(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1PeriodicGridGenerator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::GridStorage *arg1 = 0 ;
  sgpp::base::PeriodicGridGenerator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::GridStorage **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::base::PeriodicGridGenerator *)new sgpp::base::PeriodicGridGenerator(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::PeriodicGridGenerator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1PeriodicGridGenerator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::PeriodicGridGenerator *arg1 = (sgpp::base::PeriodicGridGenerator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::PeriodicGridGenerator **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_PeriodicGridGenerator_1regular_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::base::PeriodicGridGenerator *arg1 = (sgpp::base::PeriodicGridGenerator *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::PeriodicGridGenerator **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      (arg1)->regular(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_PeriodicGridGenerator_1regular_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdouble jarg3) {
  sgpp::base::PeriodicGridGenerator *arg1 = (sgpp::base::PeriodicGridGenerator *) 0 ;
  size_t arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::PeriodicGridGenerator **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->regular(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_PeriodicGridGenerator_1full(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::base::PeriodicGridGenerator *arg1 = (sgpp::base::PeriodicGridGenerator *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::PeriodicGridGenerator **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      (arg1)->full(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_PeriodicGridGenerator_1refine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::base::PeriodicGridGenerator *arg1 = (sgpp::base::PeriodicGridGenerator *) 0 ;
  sgpp::base::RefinementFunctor *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::PeriodicGridGenerator **)&jarg1; 
  arg2 = *(sgpp::base::RefinementFunctor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::RefinementFunctor & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->refine(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_PeriodicGridGenerator_1cliques_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  sgpp::base::PeriodicGridGenerator *arg1 = (sgpp::base::PeriodicGridGenerator *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::PeriodicGridGenerator **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  {
    try {
      (arg1)->cliques(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_PeriodicGridGenerator_1cliques_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jdouble jarg4) {
  sgpp::base::PeriodicGridGenerator *arg1 = (sgpp::base::PeriodicGridGenerator *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::PeriodicGridGenerator **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->cliques(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_PeriodicGridGenerator_1getNumberOfRefinablePoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::PeriodicGridGenerator *arg1 = (sgpp::base::PeriodicGridGenerator *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::PeriodicGridGenerator **)&jarg1; 
  {
    try {
      result = (arg1)->getNumberOfRefinablePoints();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_PeriodicGridGenerator_1coarsen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::base::PeriodicGridGenerator *arg1 = (sgpp::base::PeriodicGridGenerator *) 0 ;
  sgpp::base::CoarseningFunctor *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::base::PeriodicGridGenerator **)&jarg1; 
  arg2 = *(sgpp::base::CoarseningFunctor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::CoarseningFunctor & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->coarsen(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_PeriodicGridGenerator_1coarsenNFirstOnly(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  sgpp::base::PeriodicGridGenerator *arg1 = (sgpp::base::PeriodicGridGenerator *) 0 ;
  sgpp::base::CoarseningFunctor *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  size_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::base::PeriodicGridGenerator **)&jarg1; 
  arg2 = *(sgpp::base::CoarseningFunctor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::CoarseningFunctor & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg4 = (size_t)jarg4; 
  {
    try {
      (arg1)->coarsenNFirstOnly(*arg2,*arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_PeriodicGridGenerator_1getNumberOfRemovablePoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::PeriodicGridGenerator *arg1 = (sgpp::base::PeriodicGridGenerator *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::PeriodicGridGenerator **)&jarg1; 
  {
    try {
      result = (arg1)->getNumberOfRemovablePoints();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_PeriodicGridGenerator_1refineMaxLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  sgpp::base::PeriodicGridGenerator *arg1 = (sgpp::base::PeriodicGridGenerator *) 0 ;
  sgpp::base::RefinementFunctor *arg2 = 0 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::PeriodicGridGenerator **)&jarg1; 
  arg2 = *(sgpp::base::RefinementFunctor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::RefinementFunctor & reference is null");
    return ;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      (arg1)->refineMaxLevel(*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_PeriodicGridGenerator_1getNumberOfRefinablePointsToMaxLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  sgpp::base::PeriodicGridGenerator *arg1 = (sgpp::base::PeriodicGridGenerator *) 0 ;
  size_t arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::PeriodicGridGenerator **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (arg1)->getNumberOfRefinablePointsToMaxLevel(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1StretchedBoundaryGridGenerator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::GridStorage *arg1 = 0 ;
  sgpp::base::StretchedBoundaryGridGenerator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::GridStorage **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::base::StretchedBoundaryGridGenerator *)new sgpp::base::StretchedBoundaryGridGenerator(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::StretchedBoundaryGridGenerator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1StretchedBoundaryGridGenerator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::StretchedBoundaryGridGenerator *arg1 = (sgpp::base::StretchedBoundaryGridGenerator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::StretchedBoundaryGridGenerator **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_StretchedBoundaryGridGenerator_1regular(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::base::StretchedBoundaryGridGenerator *arg1 = (sgpp::base::StretchedBoundaryGridGenerator *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::StretchedBoundaryGridGenerator **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      (arg1)->regular(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_StretchedBoundaryGridGenerator_1cliques(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  sgpp::base::StretchedBoundaryGridGenerator *arg1 = (sgpp::base::StretchedBoundaryGridGenerator *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::StretchedBoundaryGridGenerator **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  {
    try {
      (arg1)->cliques(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_StretchedBoundaryGridGenerator_1full(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::base::StretchedBoundaryGridGenerator *arg1 = (sgpp::base::StretchedBoundaryGridGenerator *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::StretchedBoundaryGridGenerator **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      (arg1)->full(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_StretchedBoundaryGridGenerator_1refine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::base::StretchedBoundaryGridGenerator *arg1 = (sgpp::base::StretchedBoundaryGridGenerator *) 0 ;
  sgpp::base::RefinementFunctor *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::StretchedBoundaryGridGenerator **)&jarg1; 
  arg2 = *(sgpp::base::RefinementFunctor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::RefinementFunctor & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->refine(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_StretchedBoundaryGridGenerator_1getNumberOfRefinablePoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::StretchedBoundaryGridGenerator *arg1 = (sgpp::base::StretchedBoundaryGridGenerator *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::StretchedBoundaryGridGenerator **)&jarg1; 
  {
    try {
      result = (arg1)->getNumberOfRefinablePoints();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_StretchedBoundaryGridGenerator_1coarsen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::base::StretchedBoundaryGridGenerator *arg1 = (sgpp::base::StretchedBoundaryGridGenerator *) 0 ;
  sgpp::base::CoarseningFunctor *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::base::StretchedBoundaryGridGenerator **)&jarg1; 
  arg2 = *(sgpp::base::CoarseningFunctor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::CoarseningFunctor & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->coarsen(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_StretchedBoundaryGridGenerator_1coarsenNFirstOnly(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  sgpp::base::StretchedBoundaryGridGenerator *arg1 = (sgpp::base::StretchedBoundaryGridGenerator *) 0 ;
  sgpp::base::CoarseningFunctor *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  size_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::base::StretchedBoundaryGridGenerator **)&jarg1; 
  arg2 = *(sgpp::base::CoarseningFunctor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::CoarseningFunctor & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg4 = (size_t)jarg4; 
  {
    try {
      (arg1)->coarsenNFirstOnly(*arg2,*arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_StretchedBoundaryGridGenerator_1getNumberOfRemovablePoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::StretchedBoundaryGridGenerator *arg1 = (sgpp::base::StretchedBoundaryGridGenerator *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::StretchedBoundaryGridGenerator **)&jarg1; 
  {
    try {
      result = (arg1)->getNumberOfRemovablePoints();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_StretchedBoundaryGridGenerator_1refineMaxLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  sgpp::base::StretchedBoundaryGridGenerator *arg1 = (sgpp::base::StretchedBoundaryGridGenerator *) 0 ;
  sgpp::base::RefinementFunctor *arg2 = 0 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::StretchedBoundaryGridGenerator **)&jarg1; 
  arg2 = *(sgpp::base::RefinementFunctor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::RefinementFunctor & reference is null");
    return ;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      (arg1)->refineMaxLevel(*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_StretchedBoundaryGridGenerator_1getNumberOfRefinablePointsToMaxLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  sgpp::base::StretchedBoundaryGridGenerator *arg1 = (sgpp::base::StretchedBoundaryGridGenerator *) 0 ;
  size_t arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::StretchedBoundaryGridGenerator **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (arg1)->getNumberOfRefinablePointsToMaxLevel(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1BoundaryGridGenerator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  sgpp::base::GridStorage *arg1 = 0 ;
  sgpp::base::level_t arg2 ;
  sgpp::base::BoundaryGridGenerator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::GridStorage **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage & reference is null");
    return 0;
  } 
  arg2 = (sgpp::base::level_t)jarg2; 
  {
    try {
      result = (sgpp::base::BoundaryGridGenerator *)new sgpp::base::BoundaryGridGenerator(*arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::BoundaryGridGenerator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1BoundaryGridGenerator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::GridStorage *arg1 = 0 ;
  sgpp::base::BoundaryGridGenerator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::GridStorage **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::base::BoundaryGridGenerator *)new sgpp::base::BoundaryGridGenerator(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::BoundaryGridGenerator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1BoundaryGridGenerator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::BoundaryGridGenerator *arg1 = (sgpp::base::BoundaryGridGenerator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::BoundaryGridGenerator **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_BoundaryGridGenerator_1getBoundaryLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::BoundaryGridGenerator *arg1 = (sgpp::base::BoundaryGridGenerator *) 0 ;
  sgpp::base::level_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BoundaryGridGenerator **)&jarg1; 
  {
    try {
      result = (sgpp::base::level_t)((sgpp::base::BoundaryGridGenerator const *)arg1)->getBoundaryLevel();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_BoundaryGridGenerator_1setBoundaryLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::base::BoundaryGridGenerator *arg1 = (sgpp::base::BoundaryGridGenerator *) 0 ;
  sgpp::base::level_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BoundaryGridGenerator **)&jarg1; 
  arg2 = (sgpp::base::level_t)jarg2; 
  {
    try {
      (arg1)->setBoundaryLevel(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_BoundaryGridGenerator_1regular(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::base::BoundaryGridGenerator *arg1 = (sgpp::base::BoundaryGridGenerator *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BoundaryGridGenerator **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      (arg1)->regular(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_BoundaryGridGenerator_1cliques(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  sgpp::base::BoundaryGridGenerator *arg1 = (sgpp::base::BoundaryGridGenerator *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BoundaryGridGenerator **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  {
    try {
      (arg1)->cliques(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_BoundaryGridGenerator_1full(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::base::BoundaryGridGenerator *arg1 = (sgpp::base::BoundaryGridGenerator *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BoundaryGridGenerator **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      (arg1)->full(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_BoundaryGridGenerator_1refine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::base::BoundaryGridGenerator *arg1 = (sgpp::base::BoundaryGridGenerator *) 0 ;
  sgpp::base::RefinementFunctor *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::BoundaryGridGenerator **)&jarg1; 
  arg2 = *(sgpp::base::RefinementFunctor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::RefinementFunctor & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->refine(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_BoundaryGridGenerator_1getNumberOfRefinablePoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::BoundaryGridGenerator *arg1 = (sgpp::base::BoundaryGridGenerator *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BoundaryGridGenerator **)&jarg1; 
  {
    try {
      result = (arg1)->getNumberOfRefinablePoints();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_BoundaryGridGenerator_1coarsen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::base::BoundaryGridGenerator *arg1 = (sgpp::base::BoundaryGridGenerator *) 0 ;
  sgpp::base::CoarseningFunctor *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::base::BoundaryGridGenerator **)&jarg1; 
  arg2 = *(sgpp::base::CoarseningFunctor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::CoarseningFunctor & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->coarsen(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_BoundaryGridGenerator_1coarsenNFirstOnly(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  sgpp::base::BoundaryGridGenerator *arg1 = (sgpp::base::BoundaryGridGenerator *) 0 ;
  sgpp::base::CoarseningFunctor *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  size_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::base::BoundaryGridGenerator **)&jarg1; 
  arg2 = *(sgpp::base::CoarseningFunctor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::CoarseningFunctor & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg4 = (size_t)jarg4; 
  {
    try {
      (arg1)->coarsenNFirstOnly(*arg2,*arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_BoundaryGridGenerator_1getNumberOfRemovablePoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::BoundaryGridGenerator *arg1 = (sgpp::base::BoundaryGridGenerator *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BoundaryGridGenerator **)&jarg1; 
  {
    try {
      result = (arg1)->getNumberOfRemovablePoints();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_BoundaryGridGenerator_1refineMaxLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  sgpp::base::BoundaryGridGenerator *arg1 = (sgpp::base::BoundaryGridGenerator *) 0 ;
  sgpp::base::RefinementFunctor *arg2 = 0 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::BoundaryGridGenerator **)&jarg1; 
  arg2 = *(sgpp::base::RefinementFunctor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::RefinementFunctor & reference is null");
    return ;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      (arg1)->refineMaxLevel(*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_BoundaryGridGenerator_1getNumberOfRefinablePointsToMaxLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  sgpp::base::BoundaryGridGenerator *arg1 = (sgpp::base::BoundaryGridGenerator *) 0 ;
  size_t arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BoundaryGridGenerator **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (arg1)->getNumberOfRefinablePointsToMaxLevel(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1SquareRootGridGenerator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::GridStorage *arg1 = 0 ;
  sgpp::base::SquareRootGridGenerator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::GridStorage **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::base::SquareRootGridGenerator *)new sgpp::base::SquareRootGridGenerator(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::SquareRootGridGenerator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1SquareRootGridGenerator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::SquareRootGridGenerator *arg1 = (sgpp::base::SquareRootGridGenerator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::SquareRootGridGenerator **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_SquareRootGridGenerator_1regular(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::base::SquareRootGridGenerator *arg1 = (sgpp::base::SquareRootGridGenerator *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::SquareRootGridGenerator **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      (arg1)->regular(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_SquareRootGridGenerator_1cliques(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  sgpp::base::SquareRootGridGenerator *arg1 = (sgpp::base::SquareRootGridGenerator *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::SquareRootGridGenerator **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  {
    try {
      (arg1)->cliques(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_SquareRootGridGenerator_1full(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::base::SquareRootGridGenerator *arg1 = (sgpp::base::SquareRootGridGenerator *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::SquareRootGridGenerator **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      (arg1)->full(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_SquareRootGridGenerator_1refine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::base::SquareRootGridGenerator *arg1 = (sgpp::base::SquareRootGridGenerator *) 0 ;
  sgpp::base::RefinementFunctor *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::SquareRootGridGenerator **)&jarg1; 
  arg2 = *(sgpp::base::RefinementFunctor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::RefinementFunctor & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->refine(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_SquareRootGridGenerator_1getNumberOfRefinablePoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::SquareRootGridGenerator *arg1 = (sgpp::base::SquareRootGridGenerator *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::SquareRootGridGenerator **)&jarg1; 
  {
    try {
      result = (arg1)->getNumberOfRefinablePoints();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_SquareRootGridGenerator_1coarsen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::base::SquareRootGridGenerator *arg1 = (sgpp::base::SquareRootGridGenerator *) 0 ;
  sgpp::base::CoarseningFunctor *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::base::SquareRootGridGenerator **)&jarg1; 
  arg2 = *(sgpp::base::CoarseningFunctor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::CoarseningFunctor & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->coarsen(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_SquareRootGridGenerator_1coarsenNFirstOnly(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  sgpp::base::SquareRootGridGenerator *arg1 = (sgpp::base::SquareRootGridGenerator *) 0 ;
  sgpp::base::CoarseningFunctor *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  size_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::base::SquareRootGridGenerator **)&jarg1; 
  arg2 = *(sgpp::base::CoarseningFunctor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::CoarseningFunctor & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg4 = (size_t)jarg4; 
  {
    try {
      (arg1)->coarsenNFirstOnly(*arg2,*arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_SquareRootGridGenerator_1getNumberOfRemovablePoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::SquareRootGridGenerator *arg1 = (sgpp::base::SquareRootGridGenerator *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::SquareRootGridGenerator **)&jarg1; 
  {
    try {
      result = (arg1)->getNumberOfRemovablePoints();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_SquareRootGridGenerator_1refineMaxLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  sgpp::base::SquareRootGridGenerator *arg1 = (sgpp::base::SquareRootGridGenerator *) 0 ;
  sgpp::base::RefinementFunctor *arg2 = 0 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::SquareRootGridGenerator **)&jarg1; 
  arg2 = *(sgpp::base::RefinementFunctor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::RefinementFunctor & reference is null");
    return ;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      (arg1)->refineMaxLevel(*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_SquareRootGridGenerator_1getNumberOfRefinablePointsToMaxLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  sgpp::base::SquareRootGridGenerator *arg1 = (sgpp::base::SquareRootGridGenerator *) 0 ;
  size_t arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::SquareRootGridGenerator **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (arg1)->getNumberOfRefinablePointsToMaxLevel(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1SurplusVolumeRefinementFunctor_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  sgpp::base::DataVector *arg1 = 0 ;
  size_t arg2 ;
  double arg3 ;
  sgpp::base::SurplusVolumeRefinementFunctor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataVector **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  arg2 = (size_t)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      result = (sgpp::base::SurplusVolumeRefinementFunctor *)new sgpp::base::SurplusVolumeRefinementFunctor(*arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::SurplusVolumeRefinementFunctor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1SurplusVolumeRefinementFunctor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  sgpp::base::DataVector *arg1 = 0 ;
  size_t arg2 ;
  sgpp::base::SurplusVolumeRefinementFunctor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataVector **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (sgpp::base::SurplusVolumeRefinementFunctor *)new sgpp::base::SurplusVolumeRefinementFunctor(*arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::SurplusVolumeRefinementFunctor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1SurplusVolumeRefinementFunctor_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::DataVector *arg1 = 0 ;
  sgpp::base::SurplusVolumeRefinementFunctor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataVector **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::base::SurplusVolumeRefinementFunctor *)new sgpp::base::SurplusVolumeRefinementFunctor(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::SurplusVolumeRefinementFunctor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1SurplusVolumeRefinementFunctor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::SurplusVolumeRefinementFunctor *arg1 = (sgpp::base::SurplusVolumeRefinementFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::SurplusVolumeRefinementFunctor **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_SurplusVolumeRefinementFunctor_1operatorParentheses(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jdouble jresult = 0 ;
  sgpp::base::SurplusVolumeRefinementFunctor *arg1 = (sgpp::base::SurplusVolumeRefinementFunctor *) 0 ;
  sgpp::base::GridStorage *arg2 = 0 ;
  size_t arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::SurplusVolumeRefinementFunctor **)&jarg1; 
  arg2 = *(sgpp::base::GridStorage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (double)((sgpp::base::SurplusVolumeRefinementFunctor const *)arg1)->operator ()(*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_SurplusVolumeRefinementFunctor_1start(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::base::SurplusVolumeRefinementFunctor *arg1 = (sgpp::base::SurplusVolumeRefinementFunctor *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::SurplusVolumeRefinementFunctor **)&jarg1; 
  {
    try {
      result = (double)((sgpp::base::SurplusVolumeRefinementFunctor const *)arg1)->start();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_SurplusVolumeRefinementFunctor_1getRefinementsNum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::SurplusVolumeRefinementFunctor *arg1 = (sgpp::base::SurplusVolumeRefinementFunctor *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::SurplusVolumeRefinementFunctor **)&jarg1; 
  {
    try {
      result = ((sgpp::base::SurplusVolumeRefinementFunctor const *)arg1)->getRefinementsNum();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_SurplusVolumeRefinementFunctor_1getRefinementThreshold(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::base::SurplusVolumeRefinementFunctor *arg1 = (sgpp::base::SurplusVolumeRefinementFunctor *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::SurplusVolumeRefinementFunctor **)&jarg1; 
  {
    try {
      result = (double)((sgpp::base::SurplusVolumeRefinementFunctor const *)arg1)->getRefinementThreshold();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1SurplusCoarseningFunctor_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  sgpp::base::DataVector *arg1 = 0 ;
  size_t arg2 ;
  double arg3 ;
  sgpp::base::SurplusCoarseningFunctor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataVector **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  arg2 = (size_t)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      result = (sgpp::base::SurplusCoarseningFunctor *)new sgpp::base::SurplusCoarseningFunctor(*arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::SurplusCoarseningFunctor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1SurplusCoarseningFunctor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  sgpp::base::DataVector *arg1 = 0 ;
  size_t arg2 ;
  sgpp::base::SurplusCoarseningFunctor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataVector **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (sgpp::base::SurplusCoarseningFunctor *)new sgpp::base::SurplusCoarseningFunctor(*arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::SurplusCoarseningFunctor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1SurplusCoarseningFunctor_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::DataVector *arg1 = 0 ;
  sgpp::base::SurplusCoarseningFunctor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataVector **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::base::SurplusCoarseningFunctor *)new sgpp::base::SurplusCoarseningFunctor(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::SurplusCoarseningFunctor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1SurplusCoarseningFunctor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::SurplusCoarseningFunctor *arg1 = (sgpp::base::SurplusCoarseningFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::SurplusCoarseningFunctor **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_SurplusCoarseningFunctor_1operatorParentheses(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jdouble jresult = 0 ;
  sgpp::base::SurplusCoarseningFunctor *arg1 = (sgpp::base::SurplusCoarseningFunctor *) 0 ;
  sgpp::base::GridStorage *arg2 = 0 ;
  size_t arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::SurplusCoarseningFunctor **)&jarg1; 
  arg2 = *(sgpp::base::GridStorage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (double)(arg1)->operator ()(*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_SurplusCoarseningFunctor_1start(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::base::SurplusCoarseningFunctor *arg1 = (sgpp::base::SurplusCoarseningFunctor *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::SurplusCoarseningFunctor **)&jarg1; 
  {
    try {
      result = (double)((sgpp::base::SurplusCoarseningFunctor const *)arg1)->start();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_SurplusCoarseningFunctor_1getRemovementsNum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::SurplusCoarseningFunctor *arg1 = (sgpp::base::SurplusCoarseningFunctor *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::SurplusCoarseningFunctor **)&jarg1; 
  {
    try {
      result = ((sgpp::base::SurplusCoarseningFunctor const *)arg1)->getRemovementsNum();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_SurplusCoarseningFunctor_1getCoarseningThreshold(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::base::SurplusCoarseningFunctor *arg1 = (sgpp::base::SurplusCoarseningFunctor *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::SurplusCoarseningFunctor **)&jarg1; 
  {
    try {
      result = (double)((sgpp::base::SurplusCoarseningFunctor const *)arg1)->getCoarseningThreshold();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1GridPrinter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::Grid *arg1 = 0 ;
  sgpp::base::GridPrinter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::Grid **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::base::GridPrinter *)new sgpp::base::GridPrinter(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::GridPrinter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1GridPrinter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::GridPrinter *arg1 = (sgpp::base::GridPrinter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::GridPrinter **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_GridPrinter_1printLevelIndexGrid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  sgpp::base::GridPrinter *arg1 = (sgpp::base::GridPrinter *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::GridPrinter **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->printLevelIndexGrid(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_GridPrinter_1printGrid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4) {
  sgpp::base::GridPrinter *arg1 = (sgpp::base::GridPrinter *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  std::string arg3 ;
  size_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::GridPrinter **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (size_t)jarg4; 
  {
    try {
      (arg1)->printGrid(*arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_GridPrinter_1printGridDomain(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jobject jarg4_, jlong jarg5) {
  sgpp::base::GridPrinter *arg1 = (sgpp::base::GridPrinter *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  std::string arg3 ;
  sgpp::base::BoundingBox *arg4 = 0 ;
  size_t arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(sgpp::base::GridPrinter **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = *(sgpp::base::BoundingBox **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::BoundingBox & reference is null");
    return ;
  } 
  arg5 = (size_t)jarg5; 
  {
    try {
      (arg1)->printGridDomain(*arg2,arg3,*arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_GridPrinter_1printSparseGrid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jboolean jarg4) {
  sgpp::base::GridPrinter *arg1 = (sgpp::base::GridPrinter *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  std::string arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::GridPrinter **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false; 
  {
    try {
      (arg1)->printSparseGrid(*arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_GridPrinter_1printSparseGridExpTransform(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jboolean jarg4) {
  sgpp::base::GridPrinter *arg1 = (sgpp::base::GridPrinter *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  std::string arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::GridPrinter **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false; 
  {
    try {
      (arg1)->printSparseGridExpTransform(*arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1GridPrinterForStretching(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::Grid *arg1 = 0 ;
  sgpp::base::GridPrinterForStretching *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::Grid **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::base::GridPrinterForStretching *)new sgpp::base::GridPrinterForStretching(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::GridPrinterForStretching **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1GridPrinterForStretching(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::GridPrinterForStretching *arg1 = (sgpp::base::GridPrinterForStretching *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::GridPrinterForStretching **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_GridPrinterForStretching_1printGrid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4) {
  sgpp::base::GridPrinterForStretching *arg1 = (sgpp::base::GridPrinterForStretching *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  std::string arg3 ;
  size_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::GridPrinterForStretching **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (size_t)jarg4; 
  {
    try {
      (arg1)->printGrid(*arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_GridPrinterForStretching_1printGridDomain(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jobject jarg4_, jlong jarg5) {
  sgpp::base::GridPrinterForStretching *arg1 = (sgpp::base::GridPrinterForStretching *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  std::string arg3 ;
  sgpp::base::BoundingBox *arg4 = 0 ;
  size_t arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(sgpp::base::GridPrinterForStretching **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = *(sgpp::base::BoundingBox **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::BoundingBox & reference is null");
    return ;
  } 
  arg5 = (size_t)jarg5; 
  {
    try {
      (arg1)->printGridDomain(*arg2,arg3,*arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_GridPrinterForStretching_1printGridDomainStretching(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jobject jarg4_, jlong jarg5) {
  sgpp::base::GridPrinterForStretching *arg1 = (sgpp::base::GridPrinterForStretching *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  std::string arg3 ;
  sgpp::base::Stretching *arg4 = 0 ;
  size_t arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(sgpp::base::GridPrinterForStretching **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = *(sgpp::base::Stretching **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Stretching & reference is null");
    return ;
  } 
  arg5 = (size_t)jarg5; 
  {
    try {
      (arg1)->printGridDomainStretching(*arg2,arg3,*arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_GridPrinterForStretching_1printSparseGrid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jboolean jarg4) {
  sgpp::base::GridPrinterForStretching *arg1 = (sgpp::base::GridPrinterForStretching *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  std::string arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::GridPrinterForStretching **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false; 
  {
    try {
      (arg1)->printSparseGrid(*arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_GridPrinterForStretching_1printSparseGridExpTransform(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jboolean jarg4) {
  sgpp::base::GridPrinterForStretching *arg1 = (sgpp::base::GridPrinterForStretching *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  std::string arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::GridPrinterForStretching **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false; 
  {
    try {
      (arg1)->printSparseGridExpTransform(*arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1StdNormalDistribution(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::base::StdNormalDistribution *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::base::StdNormalDistribution *)new sgpp::base::StdNormalDistribution();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::StdNormalDistribution **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1StdNormalDistribution(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::StdNormalDistribution *arg1 = (sgpp::base::StdNormalDistribution *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::StdNormalDistribution **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_StdNormalDistribution_1getCumulativeDensity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jdouble jresult = 0 ;
  sgpp::base::StdNormalDistribution *arg1 = (sgpp::base::StdNormalDistribution *) 0 ;
  double arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::StdNormalDistribution **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      result = (double)(arg1)->getCumulativeDensity(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_StdNormalDistribution_1getDensity_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jdouble jresult = 0 ;
  sgpp::base::StdNormalDistribution *arg1 = (sgpp::base::StdNormalDistribution *) 0 ;
  double arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::StdNormalDistribution **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      result = (double)(arg1)->getDensity(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_StdNormalDistribution_1getDensity_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  jdouble jresult = 0 ;
  sgpp::base::StdNormalDistribution *arg1 = (sgpp::base::StdNormalDistribution *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::StdNormalDistribution **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (double)(arg1)->getDensity(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_StdNormalDistribution_1getNormedDensity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  jdouble jresult = 0 ;
  sgpp::base::StdNormalDistribution *arg1 = (sgpp::base::StdNormalDistribution *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::StdNormalDistribution **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (double)(arg1)->getNormedDensity(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1QuadRule1D(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::base::QuadRule1D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::base::QuadRule1D *)new sgpp::base::QuadRule1D();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::QuadRule1D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1QuadRule1D(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::QuadRule1D *arg1 = (sgpp::base::QuadRule1D *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::QuadRule1D **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_QuadRule1D_1getMaxSupportedLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::QuadRule1D *arg1 = (sgpp::base::QuadRule1D *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::QuadRule1D **)&jarg1; 
  {
    try {
      result = ((sgpp::base::QuadRule1D const *)arg1)->getMaxSupportedLevel();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_QuadRule1D_1getLevelPointsAndWeights(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  sgpp::base::QuadRule1D *arg1 = (sgpp::base::QuadRule1D *) 0 ;
  size_t arg2 ;
  sgpp::base::DataVector *arg3 = 0 ;
  sgpp::base::DataVector *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(sgpp::base::QuadRule1D **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg4 = *(sgpp::base::DataVector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->getLevelPointsAndWeights(arg2,*arg3,*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1GaussLegendreQuadRule1D(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::base::GaussLegendreQuadRule1D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::base::GaussLegendreQuadRule1D *)new sgpp::base::GaussLegendreQuadRule1D();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::GaussLegendreQuadRule1D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1GaussLegendreQuadRule1D(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::GaussLegendreQuadRule1D *arg1 = (sgpp::base::GaussLegendreQuadRule1D *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::GaussLegendreQuadRule1D **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_GaussLegendreQuadRule1D_1getLevelPointsAndWeightsNormalized(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  sgpp::base::GaussLegendreQuadRule1D *arg1 = (sgpp::base::GaussLegendreQuadRule1D *) 0 ;
  size_t arg2 ;
  sgpp::base::DataVector *arg3 = 0 ;
  sgpp::base::DataVector *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(sgpp::base::GaussLegendreQuadRule1D **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg4 = *(sgpp::base::DataVector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->getLevelPointsAndWeightsNormalized(arg2,*arg3,*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_GaussLegendreQuadRule1D_1getInstance(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::base::GaussLegendreQuadRule1D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::base::GaussLegendreQuadRule1D *) &sgpp::base::GaussLegendreQuadRule1D::getInstance();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::GaussLegendreQuadRule1D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1GaussHermiteQuadRule1D(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::base::GaussHermiteQuadRule1D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::base::GaussHermiteQuadRule1D *)new sgpp::base::GaussHermiteQuadRule1D();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::GaussHermiteQuadRule1D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1GaussHermiteQuadRule1D(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::GaussHermiteQuadRule1D *arg1 = (sgpp::base::GaussHermiteQuadRule1D *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::GaussHermiteQuadRule1D **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_GaussHermiteQuadRule1D_1getLevelPointsAndWeightsNormalized_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jdouble jarg5, jdouble jarg6) {
  sgpp::base::GaussHermiteQuadRule1D *arg1 = (sgpp::base::GaussHermiteQuadRule1D *) 0 ;
  size_t arg2 ;
  sgpp::base::DataVector *arg3 = 0 ;
  sgpp::base::DataVector *arg4 = 0 ;
  double arg5 ;
  double arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(sgpp::base::GaussHermiteQuadRule1D **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg4 = *(sgpp::base::DataVector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  {
    try {
      (arg1)->getLevelPointsAndWeightsNormalized(arg2,*arg3,*arg4,arg5,arg6);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_GaussHermiteQuadRule1D_1getLevelPointsAndWeightsNormalized_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jdouble jarg5) {
  sgpp::base::GaussHermiteQuadRule1D *arg1 = (sgpp::base::GaussHermiteQuadRule1D *) 0 ;
  size_t arg2 ;
  sgpp::base::DataVector *arg3 = 0 ;
  sgpp::base::DataVector *arg4 = 0 ;
  double arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(sgpp::base::GaussHermiteQuadRule1D **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg4 = *(sgpp::base::DataVector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg5 = (double)jarg5; 
  {
    try {
      (arg1)->getLevelPointsAndWeightsNormalized(arg2,*arg3,*arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_GaussHermiteQuadRule1D_1getLevelPointsAndWeightsNormalized_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  sgpp::base::GaussHermiteQuadRule1D *arg1 = (sgpp::base::GaussHermiteQuadRule1D *) 0 ;
  size_t arg2 ;
  sgpp::base::DataVector *arg3 = 0 ;
  sgpp::base::DataVector *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(sgpp::base::GaussHermiteQuadRule1D **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg4 = *(sgpp::base::DataVector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->getLevelPointsAndWeightsNormalized(arg2,*arg3,*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_GaussHermiteQuadRule1D_1getInstance(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::base::GaussHermiteQuadRule1D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::base::GaussHermiteQuadRule1D *) &sgpp::base::GaussHermiteQuadRule1D::getInstance();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::GaussHermiteQuadRule1D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OperationFirstMoment(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::OperationFirstMoment *arg1 = (sgpp::base::OperationFirstMoment *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::OperationFirstMoment **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OperationFirstMoment_1doQuadrature(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::base::OperationFirstMoment *arg1 = (sgpp::base::OperationFirstMoment *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::OperationFirstMoment **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->doQuadrature((sgpp::base::DataVector const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OperationSecondMoment(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::OperationSecondMoment *arg1 = (sgpp::base::OperationSecondMoment *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::OperationSecondMoment **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OperationSecondMoment_1doQuadrature(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::base::OperationSecondMoment *arg1 = (sgpp::base::OperationSecondMoment *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::OperationSecondMoment **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->doQuadrature(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jchar JNICALL Java_sgpp_jsgppJNI_GridDataBase_1ascii_1get(JNIEnv *jenv, jclass jcls) {
  jchar jresult = 0 ;
  char result;
  
  (void)jenv;
  (void)jcls;
  result = (char)sgpp::base::GridDataBase::ascii;
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT jchar JNICALL Java_sgpp_jsgppJNI_GridDataBase_1binary_1get(JNIEnv *jenv, jclass jcls) {
  jchar jresult = 0 ;
  char result;
  
  (void)jenv;
  (void)jcls;
  result = (char)sgpp::base::GridDataBase::binary;
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1GridDataBase_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  sgpp::base::GridDataBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (sgpp::base::GridDataBase *)new sgpp::base::GridDataBase(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::GridDataBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1GridDataBase_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  sgpp::base::Grid *arg1 = (sgpp::base::Grid *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::GridDataBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::Grid **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::base::GridDataBase *)new sgpp::base::GridDataBase(arg1,*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::GridDataBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1GridDataBase_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  sgpp::base::GridDataBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (sgpp::base::GridDataBase *)new sgpp::base::GridDataBase((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::GridDataBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1GridDataBase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::GridDataBase *arg1 = (sgpp::base::GridDataBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::GridDataBase **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_GridDataBase_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::base::GridDataBase *arg1 = (sgpp::base::GridDataBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::GridDataBase **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_sgpp_jsgppJNI_GridDataBase_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  sgpp::base::GridDataBase *arg1 = (sgpp::base::GridDataBase *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::GridDataBase **)&jarg1; 
  {
    try {
      result = (arg1)->toString();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_sgpp_jsgppJNI_GridDataBase_1hasKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  sgpp::base::GridDataBase *arg1 = (sgpp::base::GridDataBase *) 0 ;
  sgpp::base::GridPoint *arg2 = (sgpp::base::GridPoint *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::GridDataBase **)&jarg1; 
  arg2 = *(sgpp::base::GridPoint **)&jarg2; 
  {
    try {
      result = (bool)(arg1)->hasKey(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_GridDataBase_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  sgpp::base::GridDataBase *arg1 = (sgpp::base::GridDataBase *) 0 ;
  sgpp::base::GridPoint *arg2 = (sgpp::base::GridPoint *) 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::GridDataBase **)&jarg1; 
  arg2 = *(sgpp::base::GridPoint **)&jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->set(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_GridDataBase_1setValuesFor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::base::GridDataBase *arg1 = (sgpp::base::GridDataBase *) 0 ;
  sgpp::base::Grid *arg2 = (sgpp::base::Grid *) 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::base::GridDataBase **)&jarg1; 
  arg2 = *(sgpp::base::Grid **)&jarg2; 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setValuesFor(arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_GridDataBase_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::GridDataBase *arg1 = (sgpp::base::GridDataBase *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::GridDataBase **)&jarg1; 
  {
    try {
      result = ((sgpp::base::GridDataBase const *)arg1)->size();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_GridDataBase_1dim(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::GridDataBase *arg1 = (sgpp::base::GridDataBase *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::GridDataBase **)&jarg1; 
  {
    try {
      result = ((sgpp::base::GridDataBase const *)arg1)->dim();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_GridDataBase_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::base::GridDataBase *arg1 = (sgpp::base::GridDataBase *) 0 ;
  sgpp::base::GridPoint *arg2 = (sgpp::base::GridPoint *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::GridDataBase **)&jarg1; 
  arg2 = *(sgpp::base::GridPoint **)&jarg2; 
  {
    try {
      result = (double)(arg1)->get(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_GridDataBase_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::base::GridDataBase *arg1 = (sgpp::base::GridDataBase *) 0 ;
  sgpp::base::GridPoint *arg2 = (sgpp::base::GridPoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::GridDataBase **)&jarg1; 
  arg2 = *(sgpp::base::GridPoint **)&jarg2; 
  {
    try {
      (arg1)->remove(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_GridDataBase_1save_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jchar jarg3) {
  sgpp::base::GridDataBase *arg1 = (sgpp::base::GridDataBase *) 0 ;
  std::string arg2 ;
  char arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::GridDataBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (char)jarg3; 
  {
    try {
      (arg1)->save(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_GridDataBase_1save_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  sgpp::base::GridDataBase *arg1 = (sgpp::base::GridDataBase *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::GridDataBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->save(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_GridDataBase_1load(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  sgpp::base::GridDataBase *arg1 = (sgpp::base::GridDataBase *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::GridDataBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->load(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_GridDataBase_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::GridDataBase *arg1 = (sgpp::base::GridDataBase *) 0 ;
  SwigValueWrapper< std::unordered_map< sgpp::base::HashGridPoint *,double,sgpp::base::HashGridPointPointerHashFunctor,sgpp::base::HashGridPointPointerEqualityFunctor >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::GridDataBase **)&jarg1; 
  {
    try {
      result = (arg1)->begin();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::GridDataBase::grid_map_iterator **)&jresult = new sgpp::base::GridDataBase::grid_map_iterator((const sgpp::base::GridDataBase::grid_map_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_GridDataBase_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::GridDataBase *arg1 = (sgpp::base::GridDataBase *) 0 ;
  SwigValueWrapper< std::unordered_map< sgpp::base::HashGridPoint *,double,sgpp::base::HashGridPointPointerHashFunctor,sgpp::base::HashGridPointPointerEqualityFunctor >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::GridDataBase **)&jarg1; 
  {
    try {
      result = (arg1)->end();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::GridDataBase::grid_map_iterator **)&jresult = new sgpp::base::GridDataBase::grid_map_iterator((const sgpp::base::GridDataBase::grid_map_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1ScreenOutput(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::base::ScreenOutput *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::base::ScreenOutput *)new sgpp::base::ScreenOutput();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::ScreenOutput **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1ScreenOutput(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::ScreenOutput *arg1 = (sgpp::base::ScreenOutput *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::ScreenOutput **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_ScreenOutput_1update(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  sgpp::base::ScreenOutput *arg1 = (sgpp::base::ScreenOutput *) 0 ;
  size_t arg2 ;
  std::string arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::ScreenOutput **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      (arg1)->update(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_ScreenOutput_1writeTitle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  sgpp::base::ScreenOutput *arg1 = (sgpp::base::ScreenOutput *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::ScreenOutput **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      (arg1)->writeTitle(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_ScreenOutput_1writeHelp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  sgpp::base::ScreenOutput *arg1 = (sgpp::base::ScreenOutput *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::ScreenOutput **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->writeHelp(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_ScreenOutput_1writeStartSolve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  sgpp::base::ScreenOutput *arg1 = (sgpp::base::ScreenOutput *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::ScreenOutput **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->writeStartSolve(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_ScreenOutput_1writeEmptyLines(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::base::ScreenOutput *arg1 = (sgpp::base::ScreenOutput *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::ScreenOutput **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      (arg1)->writeEmptyLines(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OperationEvalPeriodic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::GridStorage *arg1 = 0 ;
  sgpp::base::OperationEvalPeriodic *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::GridStorage **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::base::OperationEvalPeriodic *)new sgpp::base::OperationEvalPeriodic(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::OperationEvalPeriodic **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OperationEvalPeriodic(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::OperationEvalPeriodic *arg1 = (sgpp::base::OperationEvalPeriodic *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::OperationEvalPeriodic **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OperationEvalPeriodic_1eval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jdouble jresult = 0 ;
  sgpp::base::OperationEvalPeriodic *arg1 = (sgpp::base::OperationEvalPeriodic *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::base::OperationEvalPeriodic **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->eval((sgpp::base::DataVector const &)*arg2,(sgpp::base::DataVector const &)*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OperationMultipleEvalPeriodic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  sgpp::base::Grid *arg1 = 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  sgpp::base::OperationMultipleEvalPeriodic *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::Grid **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::base::OperationMultipleEvalPeriodic *)new sgpp::base::OperationMultipleEvalPeriodic(*arg1,*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::OperationMultipleEvalPeriodic **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OperationMultipleEvalPeriodic(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::OperationMultipleEvalPeriodic *arg1 = (sgpp::base::OperationMultipleEvalPeriodic *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::OperationMultipleEvalPeriodic **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OperationMultipleEvalPeriodic_1mult(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::base::OperationMultipleEvalPeriodic *arg1 = (sgpp::base::OperationMultipleEvalPeriodic *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::base::OperationMultipleEvalPeriodic **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->mult(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OperationMultipleEvalPeriodic_1multTranspose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::base::OperationMultipleEvalPeriodic *arg1 = (sgpp::base::OperationMultipleEvalPeriodic *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::base::OperationMultipleEvalPeriodic **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->multTranspose(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OperationMultipleEvalPeriodic_1getDuration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::base::OperationMultipleEvalPeriodic *arg1 = (sgpp::base::OperationMultipleEvalPeriodic *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::OperationMultipleEvalPeriodic **)&jarg1; 
  {
    try {
      result = (double)(arg1)->getDuration();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1SLinearBase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::LinearBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::LinearBasis< unsigned int,unsigned int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::LinearBasis< unsigned int,unsigned int > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_SLinearBase_1eval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jdouble jarg4) {
  jdouble jresult = 0 ;
  sgpp::base::LinearBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::LinearBasis< unsigned int,unsigned int > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::LinearBasis< unsigned int,unsigned int > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (double)(arg1)->eval(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1SLinearBase(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::base::LinearBasis< unsigned int,unsigned int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::base::LinearBasis< unsigned int,unsigned int > *)new sgpp::base::LinearBasis< unsigned int,unsigned int >();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::LinearBasis< unsigned int,unsigned int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1SLinearBoundaryBase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::LinearBoundaryBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::LinearBoundaryBasis< unsigned int,unsigned int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::LinearBoundaryBasis< unsigned int,unsigned int > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_SLinearBoundaryBase_1eval_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jdouble jarg4) {
  jdouble jresult = 0 ;
  sgpp::base::LinearBoundaryBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::LinearBoundaryBasis< unsigned int,unsigned int > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::LinearBoundaryBasis< unsigned int,unsigned int > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (double)(arg1)->eval(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_SLinearBoundaryBase_1eval_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  jdouble jresult = 0 ;
  sgpp::base::LinearBoundaryBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::LinearBoundaryBasis< unsigned int,unsigned int > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::LinearBoundaryBasis< unsigned int,unsigned int > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  {
    try {
      result = (double)(arg1)->eval(arg2,arg3,arg4,arg5,arg6);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1SLinearBoundaryBase(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::base::LinearBoundaryBasis< unsigned int,unsigned int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::base::LinearBoundaryBasis< unsigned int,unsigned int > *)new sgpp::base::LinearBoundaryBasis< unsigned int,unsigned int >();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::LinearBoundaryBasis< unsigned int,unsigned int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1SLinearClenshawCurtisBase(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::base::LinearClenshawCurtisBasis< unsigned int,unsigned int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::base::LinearClenshawCurtisBasis< unsigned int,unsigned int > *)new sgpp::base::LinearClenshawCurtisBasis< unsigned int,unsigned int >();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::LinearClenshawCurtisBasis< unsigned int,unsigned int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1SLinearClenshawCurtisBase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::LinearClenshawCurtisBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::LinearClenshawCurtisBasis< unsigned int,unsigned int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::LinearClenshawCurtisBasis< unsigned int,unsigned int > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_SLinearClenshawCurtisBase_1eval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jdouble jarg4) {
  jdouble jresult = 0 ;
  sgpp::base::LinearClenshawCurtisBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::LinearClenshawCurtisBasis< unsigned int,unsigned int > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::LinearClenshawCurtisBasis< unsigned int,unsigned int > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (double)(arg1)->eval(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1SLinearStretchedBase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::LinearStretchedBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::LinearStretchedBasis< unsigned int,unsigned int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::LinearStretchedBasis< unsigned int,unsigned int > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_SLinearStretchedBase_1stretchedEval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  jdouble jresult = 0 ;
  sgpp::base::LinearStretchedBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::LinearStretchedBasis< unsigned int,unsigned int > *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::LinearStretchedBasis< unsigned int,unsigned int > **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (double)(arg1)->stretchedEval(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1SLinearStretchedBase(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::base::LinearStretchedBasis< unsigned int,unsigned int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::base::LinearStretchedBasis< unsigned int,unsigned int > *)new sgpp::base::LinearStretchedBasis< unsigned int,unsigned int >();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::LinearStretchedBasis< unsigned int,unsigned int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1SLinearStretchedBoundaryBase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::LinearStretchedBoundaryBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::LinearStretchedBoundaryBasis< unsigned int,unsigned int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::LinearStretchedBoundaryBasis< unsigned int,unsigned int > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_SLinearStretchedBoundaryBase_1stretchedEval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  jdouble jresult = 0 ;
  sgpp::base::LinearStretchedBoundaryBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::LinearStretchedBoundaryBasis< unsigned int,unsigned int > *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::LinearStretchedBoundaryBasis< unsigned int,unsigned int > **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (double)(arg1)->stretchedEval(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_SLinearStretchedBoundaryBase_1eval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  jdouble jresult = 0 ;
  sgpp::base::LinearStretchedBoundaryBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::LinearStretchedBoundaryBasis< unsigned int,unsigned int > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::LinearStretchedBoundaryBasis< unsigned int,unsigned int > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  {
    try {
      result = (double)(arg1)->eval(arg2,arg3,arg4,arg5,arg6);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1SLinearStretchedBoundaryBase(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::base::LinearStretchedBoundaryBasis< unsigned int,unsigned int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::base::LinearStretchedBoundaryBasis< unsigned int,unsigned int > *)new sgpp::base::LinearStretchedBoundaryBasis< unsigned int,unsigned int >();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::LinearStretchedBoundaryBasis< unsigned int,unsigned int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1SLinearModifiedBase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::LinearModifiedBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::LinearModifiedBasis< unsigned int,unsigned int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::LinearModifiedBasis< unsigned int,unsigned int > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_SLinearModifiedBase_1eval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jdouble jarg4) {
  jdouble jresult = 0 ;
  sgpp::base::LinearModifiedBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::LinearModifiedBasis< unsigned int,unsigned int > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::LinearModifiedBasis< unsigned int,unsigned int > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (double)(arg1)->eval(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1SLinearModifiedBase(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::base::LinearModifiedBasis< unsigned int,unsigned int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::base::LinearModifiedBasis< unsigned int,unsigned int > *)new sgpp::base::LinearModifiedBasis< unsigned int,unsigned int >();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::LinearModifiedBasis< unsigned int,unsigned int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1SPolyBase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  sgpp::base::PolyBasis< unsigned int,unsigned int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (sgpp::base::PolyBasis< unsigned int,unsigned int > *)new sgpp::base::PolyBasis< unsigned int,unsigned int >(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::PolyBasis< unsigned int,unsigned int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1SPolyBase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::PolyBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::PolyBasis< unsigned int,unsigned int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::PolyBasis< unsigned int,unsigned int > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_SPolyBase_1evalHierToTop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_, jdouble jarg5) {
  jdouble jresult = 0 ;
  sgpp::base::PolyBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::PolyBasis< unsigned int,unsigned int > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  sgpp::base::DataVector *arg4 = 0 ;
  double arg5 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(sgpp::base::PolyBasis< unsigned int,unsigned int > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = *(sgpp::base::DataVector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  arg5 = (double)jarg5; 
  {
    try {
      result = (double)(arg1)->evalHierToTop(arg2,arg3,*arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_SPolyBase_1getDegree(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::PolyBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::PolyBasis< unsigned int,unsigned int > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::PolyBasis< unsigned int,unsigned int > **)&jarg1; 
  {
    try {
      result = (arg1)->getDegree();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_SPolyBase_1eval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jdouble jarg4) {
  jdouble jresult = 0 ;
  sgpp::base::PolyBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::PolyBasis< unsigned int,unsigned int > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::PolyBasis< unsigned int,unsigned int > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (double)(arg1)->eval(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_SPolyBase_1getIntegral(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jdouble jresult = 0 ;
  sgpp::base::PolyBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::PolyBasis< unsigned int,unsigned int > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::PolyBasis< unsigned int,unsigned int > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  {
    try {
      result = (double)(arg1)->getIntegral(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1SWaveletBase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::WaveletBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::WaveletBasis< unsigned int,unsigned int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::WaveletBasis< unsigned int,unsigned int > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_SWaveletBase_1eval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jdouble jarg4) {
  jdouble jresult = 0 ;
  sgpp::base::WaveletBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::WaveletBasis< unsigned int,unsigned int > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::WaveletBasis< unsigned int,unsigned int > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (double)(arg1)->eval(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_SWaveletBase_1evalDx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jdouble jarg4) {
  jdouble jresult = 0 ;
  sgpp::base::WaveletBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::WaveletBasis< unsigned int,unsigned int > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::WaveletBasis< unsigned int,unsigned int > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (double)(arg1)->evalDx(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_SWaveletBase_1evalDxDx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jdouble jarg4) {
  jdouble jresult = 0 ;
  sgpp::base::WaveletBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::WaveletBasis< unsigned int,unsigned int > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::WaveletBasis< unsigned int,unsigned int > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (double)(arg1)->evalDxDx(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1SWaveletBase(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::base::WaveletBasis< unsigned int,unsigned int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::base::WaveletBasis< unsigned int,unsigned int > *)new sgpp::base::WaveletBasis< unsigned int,unsigned int >();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::WaveletBasis< unsigned int,unsigned int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1SWaveletBoundaryBase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::WaveletBoundaryBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::WaveletBoundaryBasis< unsigned int,unsigned int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::WaveletBoundaryBasis< unsigned int,unsigned int > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_SWaveletBoundaryBase_1eval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jdouble jarg4) {
  jdouble jresult = 0 ;
  sgpp::base::WaveletBoundaryBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::WaveletBoundaryBasis< unsigned int,unsigned int > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::WaveletBoundaryBasis< unsigned int,unsigned int > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (double)(arg1)->eval(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_SWaveletBoundaryBase_1evalDx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jdouble jarg4) {
  jdouble jresult = 0 ;
  sgpp::base::WaveletBoundaryBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::WaveletBoundaryBasis< unsigned int,unsigned int > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::WaveletBoundaryBasis< unsigned int,unsigned int > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (double)(arg1)->evalDx(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_SWaveletBoundaryBase_1evalDxDx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jdouble jarg4) {
  jdouble jresult = 0 ;
  sgpp::base::WaveletBoundaryBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::WaveletBoundaryBasis< unsigned int,unsigned int > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::WaveletBoundaryBasis< unsigned int,unsigned int > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (double)(arg1)->evalDxDx(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1SWaveletBoundaryBase(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::base::WaveletBoundaryBasis< unsigned int,unsigned int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::base::WaveletBoundaryBasis< unsigned int,unsigned int > *)new sgpp::base::WaveletBoundaryBasis< unsigned int,unsigned int >();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::WaveletBoundaryBasis< unsigned int,unsigned int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1SWaveletModifiedBase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::WaveletModifiedBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::WaveletModifiedBasis< unsigned int,unsigned int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::WaveletModifiedBasis< unsigned int,unsigned int > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_SWaveletModifiedBase_1eval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jdouble jarg4) {
  jdouble jresult = 0 ;
  sgpp::base::WaveletModifiedBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::WaveletModifiedBasis< unsigned int,unsigned int > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::WaveletModifiedBasis< unsigned int,unsigned int > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (double)(arg1)->eval(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_SWaveletModifiedBase_1evalDx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jdouble jarg4) {
  jdouble jresult = 0 ;
  sgpp::base::WaveletModifiedBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::WaveletModifiedBasis< unsigned int,unsigned int > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::WaveletModifiedBasis< unsigned int,unsigned int > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (double)(arg1)->evalDx(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_SWaveletModifiedBase_1evalDxDx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jdouble jarg4) {
  jdouble jresult = 0 ;
  sgpp::base::WaveletModifiedBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::WaveletModifiedBasis< unsigned int,unsigned int > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::WaveletModifiedBasis< unsigned int,unsigned int > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (double)(arg1)->evalDxDx(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1SWaveletModifiedBase(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::base::WaveletModifiedBasis< unsigned int,unsigned int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::base::WaveletModifiedBasis< unsigned int,unsigned int > *)new sgpp::base::WaveletModifiedBasis< unsigned int,unsigned int >();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::WaveletModifiedBasis< unsigned int,unsigned int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1SBsplineBase_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::base::BsplineBasis< unsigned int,unsigned int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::base::BsplineBasis< unsigned int,unsigned int > *)new sgpp::base::BsplineBasis< unsigned int,unsigned int >();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::BsplineBasis< unsigned int,unsigned int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1SBsplineBase_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  sgpp::base::BsplineBasis< unsigned int,unsigned int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (sgpp::base::BsplineBasis< unsigned int,unsigned int > *)new sgpp::base::BsplineBasis< unsigned int,unsigned int >(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::BsplineBasis< unsigned int,unsigned int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1SBsplineBase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::BsplineBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::BsplineBasis< unsigned int,unsigned int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::BsplineBasis< unsigned int,unsigned int > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_SBsplineBase_1uniformBSpline(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3) {
  jdouble jresult = 0 ;
  sgpp::base::BsplineBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::BsplineBasis< unsigned int,unsigned int > *) 0 ;
  double arg2 ;
  size_t arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BsplineBasis< unsigned int,unsigned int > **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (double)((sgpp::base::BsplineBasis< unsigned int,unsigned int > const *)arg1)->uniformBSpline(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_SBsplineBase_1uniformBSplineDx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3) {
  jdouble jresult = 0 ;
  sgpp::base::BsplineBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::BsplineBasis< unsigned int,unsigned int > *) 0 ;
  double arg2 ;
  size_t arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BsplineBasis< unsigned int,unsigned int > **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (double)((sgpp::base::BsplineBasis< unsigned int,unsigned int > const *)arg1)->uniformBSplineDx(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_SBsplineBase_1uniformBSplineDxDx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3) {
  jdouble jresult = 0 ;
  sgpp::base::BsplineBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::BsplineBasis< unsigned int,unsigned int > *) 0 ;
  double arg2 ;
  size_t arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BsplineBasis< unsigned int,unsigned int > **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (double)((sgpp::base::BsplineBasis< unsigned int,unsigned int > const *)arg1)->uniformBSplineDxDx(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_SBsplineBase_1eval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jdouble jarg4) {
  jdouble jresult = 0 ;
  sgpp::base::BsplineBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::BsplineBasis< unsigned int,unsigned int > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BsplineBasis< unsigned int,unsigned int > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (double)(arg1)->eval(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_SBsplineBase_1evalDx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jdouble jarg4) {
  jdouble jresult = 0 ;
  sgpp::base::BsplineBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::BsplineBasis< unsigned int,unsigned int > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BsplineBasis< unsigned int,unsigned int > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (double)(arg1)->evalDx(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_SBsplineBase_1evalDxDx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jdouble jarg4) {
  jdouble jresult = 0 ;
  sgpp::base::BsplineBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::BsplineBasis< unsigned int,unsigned int > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BsplineBasis< unsigned int,unsigned int > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (double)(arg1)->evalDxDx(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_SBsplineBase_1getDegree(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::BsplineBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::BsplineBasis< unsigned int,unsigned int > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BsplineBasis< unsigned int,unsigned int > **)&jarg1; 
  {
    try {
      result = ((sgpp::base::BsplineBasis< unsigned int,unsigned int > const *)arg1)->getDegree();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1SBsplineBoundaryBase_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::base::BsplineBoundaryBasis< unsigned int,unsigned int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::base::BsplineBoundaryBasis< unsigned int,unsigned int > *)new sgpp::base::BsplineBoundaryBasis< unsigned int,unsigned int >();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::BsplineBoundaryBasis< unsigned int,unsigned int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1SBsplineBoundaryBase_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  sgpp::base::BsplineBoundaryBasis< unsigned int,unsigned int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (sgpp::base::BsplineBoundaryBasis< unsigned int,unsigned int > *)new sgpp::base::BsplineBoundaryBasis< unsigned int,unsigned int >(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::BsplineBoundaryBasis< unsigned int,unsigned int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1SBsplineBoundaryBase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::BsplineBoundaryBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::BsplineBoundaryBasis< unsigned int,unsigned int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::BsplineBoundaryBasis< unsigned int,unsigned int > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_SBsplineBoundaryBase_1eval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jdouble jarg4) {
  jdouble jresult = 0 ;
  sgpp::base::BsplineBoundaryBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::BsplineBoundaryBasis< unsigned int,unsigned int > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BsplineBoundaryBasis< unsigned int,unsigned int > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (double)(arg1)->eval(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_SBsplineBoundaryBase_1evalDx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jdouble jarg4) {
  jdouble jresult = 0 ;
  sgpp::base::BsplineBoundaryBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::BsplineBoundaryBasis< unsigned int,unsigned int > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BsplineBoundaryBasis< unsigned int,unsigned int > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (double)(arg1)->evalDx(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_SBsplineBoundaryBase_1evalDxDx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jdouble jarg4) {
  jdouble jresult = 0 ;
  sgpp::base::BsplineBoundaryBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::BsplineBoundaryBasis< unsigned int,unsigned int > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BsplineBoundaryBasis< unsigned int,unsigned int > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (double)(arg1)->evalDxDx(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_SBsplineBoundaryBase_1getDegree(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::BsplineBoundaryBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::BsplineBoundaryBasis< unsigned int,unsigned int > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BsplineBoundaryBasis< unsigned int,unsigned int > **)&jarg1; 
  {
    try {
      result = ((sgpp::base::BsplineBoundaryBasis< unsigned int,unsigned int > const *)arg1)->getDegree();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1SBsplineClenshawCurtisBase_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::base::BsplineClenshawCurtisBasis< unsigned int,unsigned int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::base::BsplineClenshawCurtisBasis< unsigned int,unsigned int > *)new sgpp::base::BsplineClenshawCurtisBasis< unsigned int,unsigned int >();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::BsplineClenshawCurtisBasis< unsigned int,unsigned int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1SBsplineClenshawCurtisBase_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  sgpp::base::BsplineClenshawCurtisBasis< unsigned int,unsigned int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (sgpp::base::BsplineClenshawCurtisBasis< unsigned int,unsigned int > *)new sgpp::base::BsplineClenshawCurtisBasis< unsigned int,unsigned int >(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::BsplineClenshawCurtisBasis< unsigned int,unsigned int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1SBsplineClenshawCurtisBase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::BsplineClenshawCurtisBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::BsplineClenshawCurtisBasis< unsigned int,unsigned int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::BsplineClenshawCurtisBasis< unsigned int,unsigned int > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_SBsplineClenshawCurtisBase_1nonUniformBSpline(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3, jlong jarg4) {
  jdouble jresult = 0 ;
  sgpp::base::BsplineClenshawCurtisBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::BsplineClenshawCurtisBasis< unsigned int,unsigned int > *) 0 ;
  double arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BsplineClenshawCurtisBasis< unsigned int,unsigned int > **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  {
    try {
      result = (double)((sgpp::base::BsplineClenshawCurtisBasis< unsigned int,unsigned int > const *)arg1)->nonUniformBSpline(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_SBsplineClenshawCurtisBase_1nonUniformBSplineDx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3, jlong jarg4) {
  jdouble jresult = 0 ;
  sgpp::base::BsplineClenshawCurtisBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::BsplineClenshawCurtisBasis< unsigned int,unsigned int > *) 0 ;
  double arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BsplineClenshawCurtisBasis< unsigned int,unsigned int > **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  {
    try {
      result = (double)((sgpp::base::BsplineClenshawCurtisBasis< unsigned int,unsigned int > const *)arg1)->nonUniformBSplineDx(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_SBsplineClenshawCurtisBase_1nonUniformBSplineDxDx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3, jlong jarg4) {
  jdouble jresult = 0 ;
  sgpp::base::BsplineClenshawCurtisBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::BsplineClenshawCurtisBasis< unsigned int,unsigned int > *) 0 ;
  double arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BsplineClenshawCurtisBasis< unsigned int,unsigned int > **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  {
    try {
      result = (double)((sgpp::base::BsplineClenshawCurtisBasis< unsigned int,unsigned int > const *)arg1)->nonUniformBSplineDxDx(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_SBsplineClenshawCurtisBase_1clenshawCurtisPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jdouble jresult = 0 ;
  sgpp::base::BsplineClenshawCurtisBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::BsplineClenshawCurtisBasis< unsigned int,unsigned int > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BsplineClenshawCurtisBasis< unsigned int,unsigned int > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  {
    try {
      result = (double)((sgpp::base::BsplineClenshawCurtisBasis< unsigned int,unsigned int > const *)arg1)->clenshawCurtisPoint(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_SBsplineClenshawCurtisBase_1constructKnots(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  sgpp::base::BsplineClenshawCurtisBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::BsplineClenshawCurtisBasis< unsigned int,unsigned int > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BsplineClenshawCurtisBasis< unsigned int,unsigned int > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  {
    try {
      (arg1)->constructKnots(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_SBsplineClenshawCurtisBase_1eval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jdouble jarg4) {
  jdouble jresult = 0 ;
  sgpp::base::BsplineClenshawCurtisBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::BsplineClenshawCurtisBasis< unsigned int,unsigned int > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BsplineClenshawCurtisBasis< unsigned int,unsigned int > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (double)(arg1)->eval(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_SBsplineClenshawCurtisBase_1evalDx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jdouble jarg4) {
  jdouble jresult = 0 ;
  sgpp::base::BsplineClenshawCurtisBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::BsplineClenshawCurtisBasis< unsigned int,unsigned int > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BsplineClenshawCurtisBasis< unsigned int,unsigned int > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (double)(arg1)->evalDx(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_SBsplineClenshawCurtisBase_1evalDxDx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jdouble jarg4) {
  jdouble jresult = 0 ;
  sgpp::base::BsplineClenshawCurtisBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::BsplineClenshawCurtisBasis< unsigned int,unsigned int > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BsplineClenshawCurtisBasis< unsigned int,unsigned int > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (double)(arg1)->evalDxDx(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_SBsplineClenshawCurtisBase_1getDegree(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::BsplineClenshawCurtisBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::BsplineClenshawCurtisBasis< unsigned int,unsigned int > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BsplineClenshawCurtisBasis< unsigned int,unsigned int > **)&jarg1; 
  {
    try {
      result = ((sgpp::base::BsplineClenshawCurtisBasis< unsigned int,unsigned int > const *)arg1)->getDegree();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1SBsplineModifiedBase_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::base::BsplineModifiedBasis< unsigned int,unsigned int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::base::BsplineModifiedBasis< unsigned int,unsigned int > *)new sgpp::base::BsplineModifiedBasis< unsigned int,unsigned int >();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::BsplineModifiedBasis< unsigned int,unsigned int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1SBsplineModifiedBase_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  sgpp::base::BsplineModifiedBasis< unsigned int,unsigned int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (sgpp::base::BsplineModifiedBasis< unsigned int,unsigned int > *)new sgpp::base::BsplineModifiedBasis< unsigned int,unsigned int >(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::BsplineModifiedBasis< unsigned int,unsigned int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1SBsplineModifiedBase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::BsplineModifiedBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::BsplineModifiedBasis< unsigned int,unsigned int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::BsplineModifiedBasis< unsigned int,unsigned int > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_SBsplineModifiedBase_1modifiedBSpline(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3) {
  jdouble jresult = 0 ;
  sgpp::base::BsplineModifiedBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::BsplineModifiedBasis< unsigned int,unsigned int > *) 0 ;
  double arg2 ;
  size_t arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BsplineModifiedBasis< unsigned int,unsigned int > **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (double)((sgpp::base::BsplineModifiedBasis< unsigned int,unsigned int > const *)arg1)->modifiedBSpline(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_SBsplineModifiedBase_1modifiedBSplineDx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3) {
  jdouble jresult = 0 ;
  sgpp::base::BsplineModifiedBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::BsplineModifiedBasis< unsigned int,unsigned int > *) 0 ;
  double arg2 ;
  size_t arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BsplineModifiedBasis< unsigned int,unsigned int > **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (double)((sgpp::base::BsplineModifiedBasis< unsigned int,unsigned int > const *)arg1)->modifiedBSplineDx(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_SBsplineModifiedBase_1modifiedBSplineDxDx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3) {
  jdouble jresult = 0 ;
  sgpp::base::BsplineModifiedBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::BsplineModifiedBasis< unsigned int,unsigned int > *) 0 ;
  double arg2 ;
  size_t arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BsplineModifiedBasis< unsigned int,unsigned int > **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (double)((sgpp::base::BsplineModifiedBasis< unsigned int,unsigned int > const *)arg1)->modifiedBSplineDxDx(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_SBsplineModifiedBase_1eval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jdouble jarg4) {
  jdouble jresult = 0 ;
  sgpp::base::BsplineModifiedBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::BsplineModifiedBasis< unsigned int,unsigned int > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BsplineModifiedBasis< unsigned int,unsigned int > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (double)(arg1)->eval(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_SBsplineModifiedBase_1evalDx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jdouble jarg4) {
  jdouble jresult = 0 ;
  sgpp::base::BsplineModifiedBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::BsplineModifiedBasis< unsigned int,unsigned int > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BsplineModifiedBasis< unsigned int,unsigned int > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (double)(arg1)->evalDx(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_SBsplineModifiedBase_1evalDxDx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jdouble jarg4) {
  jdouble jresult = 0 ;
  sgpp::base::BsplineModifiedBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::BsplineModifiedBasis< unsigned int,unsigned int > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BsplineModifiedBasis< unsigned int,unsigned int > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (double)(arg1)->evalDxDx(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_SBsplineModifiedBase_1getDegree(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::BsplineModifiedBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::BsplineModifiedBasis< unsigned int,unsigned int > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BsplineModifiedBasis< unsigned int,unsigned int > **)&jarg1; 
  {
    try {
      result = ((sgpp::base::BsplineModifiedBasis< unsigned int,unsigned int > const *)arg1)->getDegree();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1SBsplineModifiedClenshawCurtisBase_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::base::BsplineModifiedClenshawCurtisBasis< unsigned int,unsigned int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::base::BsplineModifiedClenshawCurtisBasis< unsigned int,unsigned int > *)new sgpp::base::BsplineModifiedClenshawCurtisBasis< unsigned int,unsigned int >();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::BsplineModifiedClenshawCurtisBasis< unsigned int,unsigned int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1SBsplineModifiedClenshawCurtisBase_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  sgpp::base::BsplineModifiedClenshawCurtisBasis< unsigned int,unsigned int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (sgpp::base::BsplineModifiedClenshawCurtisBasis< unsigned int,unsigned int > *)new sgpp::base::BsplineModifiedClenshawCurtisBasis< unsigned int,unsigned int >(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::BsplineModifiedClenshawCurtisBasis< unsigned int,unsigned int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1SBsplineModifiedClenshawCurtisBase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::BsplineModifiedClenshawCurtisBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::BsplineModifiedClenshawCurtisBasis< unsigned int,unsigned int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::BsplineModifiedClenshawCurtisBasis< unsigned int,unsigned int > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_SBsplineModifiedClenshawCurtisBase_1clenshawCurtisPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jdouble jresult = 0 ;
  sgpp::base::BsplineModifiedClenshawCurtisBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::BsplineModifiedClenshawCurtisBasis< unsigned int,unsigned int > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BsplineModifiedClenshawCurtisBasis< unsigned int,unsigned int > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  {
    try {
      result = (double)((sgpp::base::BsplineModifiedClenshawCurtisBasis< unsigned int,unsigned int > const *)arg1)->clenshawCurtisPoint(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_SBsplineModifiedClenshawCurtisBase_1clenshawCurtisPointNegativeIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jdouble jresult = 0 ;
  sgpp::base::BsplineModifiedClenshawCurtisBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::BsplineModifiedClenshawCurtisBasis< unsigned int,unsigned int > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BsplineModifiedClenshawCurtisBasis< unsigned int,unsigned int > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  {
    try {
      result = (double)((sgpp::base::BsplineModifiedClenshawCurtisBasis< unsigned int,unsigned int > const *)arg1)->clenshawCurtisPointNegativeIndex(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_SBsplineModifiedClenshawCurtisBase_1eval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jdouble jarg4) {
  jdouble jresult = 0 ;
  sgpp::base::BsplineModifiedClenshawCurtisBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::BsplineModifiedClenshawCurtisBasis< unsigned int,unsigned int > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BsplineModifiedClenshawCurtisBasis< unsigned int,unsigned int > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (double)(arg1)->eval(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_SBsplineModifiedClenshawCurtisBase_1evalDx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jdouble jarg4) {
  jdouble jresult = 0 ;
  sgpp::base::BsplineModifiedClenshawCurtisBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::BsplineModifiedClenshawCurtisBasis< unsigned int,unsigned int > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BsplineModifiedClenshawCurtisBasis< unsigned int,unsigned int > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (double)(arg1)->evalDx(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_SBsplineModifiedClenshawCurtisBase_1evalDxDx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jdouble jarg4) {
  jdouble jresult = 0 ;
  sgpp::base::BsplineModifiedClenshawCurtisBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::BsplineModifiedClenshawCurtisBasis< unsigned int,unsigned int > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BsplineModifiedClenshawCurtisBasis< unsigned int,unsigned int > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (double)(arg1)->evalDxDx(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_SBsplineModifiedClenshawCurtisBase_1getDegree(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::BsplineModifiedClenshawCurtisBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::BsplineModifiedClenshawCurtisBasis< unsigned int,unsigned int > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BsplineModifiedClenshawCurtisBasis< unsigned int,unsigned int > **)&jarg1; 
  {
    try {
      result = ((sgpp::base::BsplineModifiedClenshawCurtisBasis< unsigned int,unsigned int > const *)arg1)->getDegree();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1SFundamentalSplineBase_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::base::FundamentalSplineBasis< unsigned int,unsigned int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::base::FundamentalSplineBasis< unsigned int,unsigned int > *)new sgpp::base::FundamentalSplineBasis< unsigned int,unsigned int >();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::FundamentalSplineBasis< unsigned int,unsigned int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1SFundamentalSplineBase_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  sgpp::base::FundamentalSplineBasis< unsigned int,unsigned int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (sgpp::base::FundamentalSplineBasis< unsigned int,unsigned int > *)new sgpp::base::FundamentalSplineBasis< unsigned int,unsigned int >(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::FundamentalSplineBasis< unsigned int,unsigned int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1SFundamentalSplineBase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::FundamentalSplineBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::FundamentalSplineBasis< unsigned int,unsigned int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::FundamentalSplineBasis< unsigned int,unsigned int > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_SFundamentalSplineBase_1eval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jdouble jarg4) {
  jdouble jresult = 0 ;
  sgpp::base::FundamentalSplineBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::FundamentalSplineBasis< unsigned int,unsigned int > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::FundamentalSplineBasis< unsigned int,unsigned int > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (double)(arg1)->eval(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_SFundamentalSplineBase_1evalDx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jdouble jarg4) {
  jdouble jresult = 0 ;
  sgpp::base::FundamentalSplineBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::FundamentalSplineBasis< unsigned int,unsigned int > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::FundamentalSplineBasis< unsigned int,unsigned int > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (double)(arg1)->evalDx(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_SFundamentalSplineBase_1evalDxDx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jdouble jarg4) {
  jdouble jresult = 0 ;
  sgpp::base::FundamentalSplineBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::FundamentalSplineBasis< unsigned int,unsigned int > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::FundamentalSplineBasis< unsigned int,unsigned int > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (double)(arg1)->evalDxDx(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_SFundamentalSplineBase_1getDegree(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::FundamentalSplineBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::FundamentalSplineBasis< unsigned int,unsigned int > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::FundamentalSplineBasis< unsigned int,unsigned int > **)&jarg1; 
  {
    try {
      result = ((sgpp::base::FundamentalSplineBasis< unsigned int,unsigned int > const *)arg1)->getDegree();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1SFundamentalSplineModifiedBase_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::base::FundamentalSplineModifiedBasis< unsigned int,unsigned int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::base::FundamentalSplineModifiedBasis< unsigned int,unsigned int > *)new sgpp::base::FundamentalSplineModifiedBasis< unsigned int,unsigned int >();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::FundamentalSplineModifiedBasis< unsigned int,unsigned int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1SFundamentalSplineModifiedBase_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  sgpp::base::FundamentalSplineModifiedBasis< unsigned int,unsigned int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (sgpp::base::FundamentalSplineModifiedBasis< unsigned int,unsigned int > *)new sgpp::base::FundamentalSplineModifiedBasis< unsigned int,unsigned int >(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::FundamentalSplineModifiedBasis< unsigned int,unsigned int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1SFundamentalSplineModifiedBase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::FundamentalSplineModifiedBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::FundamentalSplineModifiedBasis< unsigned int,unsigned int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::FundamentalSplineModifiedBasis< unsigned int,unsigned int > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_SFundamentalSplineModifiedBase_1eval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jdouble jarg4) {
  jdouble jresult = 0 ;
  sgpp::base::FundamentalSplineModifiedBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::FundamentalSplineModifiedBasis< unsigned int,unsigned int > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::FundamentalSplineModifiedBasis< unsigned int,unsigned int > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (double)(arg1)->eval(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_SFundamentalSplineModifiedBase_1evalDx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jdouble jarg4) {
  jdouble jresult = 0 ;
  sgpp::base::FundamentalSplineModifiedBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::FundamentalSplineModifiedBasis< unsigned int,unsigned int > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::FundamentalSplineModifiedBasis< unsigned int,unsigned int > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (double)(arg1)->evalDx(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_SFundamentalSplineModifiedBase_1evalDxDx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jdouble jarg4) {
  jdouble jresult = 0 ;
  sgpp::base::FundamentalSplineModifiedBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::FundamentalSplineModifiedBasis< unsigned int,unsigned int > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::FundamentalSplineModifiedBasis< unsigned int,unsigned int > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (double)(arg1)->evalDxDx(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_SFundamentalSplineModifiedBase_1getDegree(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::FundamentalSplineModifiedBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::FundamentalSplineModifiedBasis< unsigned int,unsigned int > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::FundamentalSplineModifiedBasis< unsigned int,unsigned int > **)&jarg1; 
  {
    try {
      result = ((sgpp::base::FundamentalSplineModifiedBasis< unsigned int,unsigned int > const *)arg1)->getDegree();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1SPrewaveletBase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::PrewaveletBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::PrewaveletBasis< unsigned int,unsigned int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::PrewaveletBasis< unsigned int,unsigned int > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_SPrewaveletBase_1eval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jdouble jarg4) {
  jdouble jresult = 0 ;
  sgpp::base::PrewaveletBasis< unsigned int,unsigned int > *arg1 = (sgpp::base::PrewaveletBasis< unsigned int,unsigned int > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::PrewaveletBasis< unsigned int,unsigned int > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (double)(arg1)->eval(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1SPrewaveletBase(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::base::PrewaveletBasis< unsigned int,unsigned int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::base::PrewaveletBasis< unsigned int,unsigned int > *)new sgpp::base::PrewaveletBasis< unsigned int,unsigned int >();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::PrewaveletBasis< unsigned int,unsigned int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1SGetAffectedBasisFunctions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::GridStorage *arg1 = 0 ;
  sgpp::base::GetAffectedBasisFunctions< sgpp::base::SLinearBase > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::GridStorage **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::base::GetAffectedBasisFunctions< sgpp::base::SLinearBase > *)new sgpp::base::GetAffectedBasisFunctions< sgpp::base::SLinearBase >(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::GetAffectedBasisFunctions< sgpp::base::SLinearBase > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1SGetAffectedBasisFunctions(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::GetAffectedBasisFunctions< sgpp::base::SLinearBase > *arg1 = (sgpp::base::GetAffectedBasisFunctions< sgpp::base::SLinearBase > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::GetAffectedBasisFunctions< sgpp::base::SLinearBase > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_SGetAffectedBasisFunctions_1operatorParentheses(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  sgpp::base::GetAffectedBasisFunctions< sgpp::base::SLinearBase > *arg1 = (sgpp::base::GetAffectedBasisFunctions< sgpp::base::SLinearBase > *) 0 ;
  sgpp::base::LinearBasis< unsigned int,unsigned int > *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  std::vector< std::pair< size_t,double > > *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(sgpp::base::GetAffectedBasisFunctions< sgpp::base::SLinearBase > **)&jarg1; 
  arg2 = *(sgpp::base::LinearBasis< unsigned int,unsigned int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::LinearBasis< unsigned int,unsigned int > & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return ;
  } 
  arg4 = *(std::vector< std::pair< size_t,double > > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< size_t,double > > & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->operator ()(*arg2,(sgpp::base::DataVector const &)*arg3,*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1SAlgorithmEvaluation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::GridStorage *arg1 = 0 ;
  sgpp::base::AlgorithmEvaluation< sgpp::base::SLinearBase > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::GridStorage **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::base::AlgorithmEvaluation< sgpp::base::SLinearBase > *)new sgpp::base::AlgorithmEvaluation< sgpp::base::SLinearBase >(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::AlgorithmEvaluation< sgpp::base::SLinearBase > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1SAlgorithmEvaluation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::AlgorithmEvaluation< sgpp::base::SLinearBase > *arg1 = (sgpp::base::AlgorithmEvaluation< sgpp::base::SLinearBase > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::AlgorithmEvaluation< sgpp::base::SLinearBase > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_SAlgorithmEvaluation_1operatorParentheses(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jdouble jresult = 0 ;
  sgpp::base::AlgorithmEvaluation< sgpp::base::SLinearBase > *arg1 = (sgpp::base::AlgorithmEvaluation< sgpp::base::SLinearBase > *) 0 ;
  sgpp::base::LinearBasis< unsigned int,unsigned int > *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  sgpp::base::DataVector *arg4 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(sgpp::base::AlgorithmEvaluation< sgpp::base::SLinearBase > **)&jarg1; 
  arg2 = *(sgpp::base::LinearBasis< unsigned int,unsigned int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::LinearBasis< unsigned int,unsigned int > & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  arg4 = *(sgpp::base::DataVector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->operator ()(*arg2,(sgpp::base::DataVector const &)*arg3,(sgpp::base::DataVector const &)*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1SGetAffectedBasisFunctionsBoundaries(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::GridStorage *arg1 = 0 ;
  sgpp::base::GetAffectedBasisFunctions< sgpp::base::SLinearBoundaryBase > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::GridStorage **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::base::GetAffectedBasisFunctions< sgpp::base::SLinearBoundaryBase > *)new sgpp::base::GetAffectedBasisFunctions< sgpp::base::SLinearBoundaryBase >(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::GetAffectedBasisFunctions< sgpp::base::SLinearBoundaryBase > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1SGetAffectedBasisFunctionsBoundaries(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::GetAffectedBasisFunctions< sgpp::base::SLinearBoundaryBase > *arg1 = (sgpp::base::GetAffectedBasisFunctions< sgpp::base::SLinearBoundaryBase > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::GetAffectedBasisFunctions< sgpp::base::SLinearBoundaryBase > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_SGetAffectedBasisFunctionsBoundaries_1operatorParentheses(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  sgpp::base::GetAffectedBasisFunctions< sgpp::base::SLinearBoundaryBase > *arg1 = (sgpp::base::GetAffectedBasisFunctions< sgpp::base::SLinearBoundaryBase > *) 0 ;
  sgpp::base::LinearBoundaryBasis< unsigned int,unsigned int > *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  std::vector< std::pair< size_t,double > > *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(sgpp::base::GetAffectedBasisFunctions< sgpp::base::SLinearBoundaryBase > **)&jarg1; 
  arg2 = *(sgpp::base::LinearBoundaryBasis< unsigned int,unsigned int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::LinearBoundaryBasis< unsigned int,unsigned int > & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return ;
  } 
  arg4 = *(std::vector< std::pair< size_t,double > > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< size_t,double > > & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->operator ()(*arg2,(sgpp::base::DataVector const &)*arg3,*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1SGetAffectedBasisFunctionsLinearStretchedBoundaries(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::GridStorage *arg1 = 0 ;
  sgpp::base::GetAffectedBasisFunctions< sgpp::base::SLinearStretchedBoundaryBase > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::GridStorage **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::base::GetAffectedBasisFunctions< sgpp::base::SLinearStretchedBoundaryBase > *)new sgpp::base::GetAffectedBasisFunctions< sgpp::base::SLinearStretchedBoundaryBase >(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::GetAffectedBasisFunctions< sgpp::base::SLinearStretchedBoundaryBase > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1SGetAffectedBasisFunctionsLinearStretchedBoundaries(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::GetAffectedBasisFunctions< sgpp::base::SLinearStretchedBoundaryBase > *arg1 = (sgpp::base::GetAffectedBasisFunctions< sgpp::base::SLinearStretchedBoundaryBase > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::GetAffectedBasisFunctions< sgpp::base::SLinearStretchedBoundaryBase > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_SGetAffectedBasisFunctionsLinearStretchedBoundaries_1operatorParentheses(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  sgpp::base::GetAffectedBasisFunctions< sgpp::base::SLinearStretchedBoundaryBase > *arg1 = (sgpp::base::GetAffectedBasisFunctions< sgpp::base::SLinearStretchedBoundaryBase > *) 0 ;
  sgpp::base::LinearStretchedBoundaryBasis< unsigned int,unsigned int > *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  std::vector< std::pair< size_t,double > > *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(sgpp::base::GetAffectedBasisFunctions< sgpp::base::SLinearStretchedBoundaryBase > **)&jarg1; 
  arg2 = *(sgpp::base::LinearStretchedBoundaryBasis< unsigned int,unsigned int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::LinearStretchedBoundaryBasis< unsigned int,unsigned int > & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return ;
  } 
  arg4 = *(std::vector< std::pair< size_t,double > > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< size_t,double > > & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->operator ()(*arg2,(sgpp::base::DataVector const &)*arg3,*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1BoundingBox1DVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< sgpp::base::BoundingBox1D > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< sgpp::base::BoundingBox1D > *)new std::vector< sgpp::base::BoundingBox1D >();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< sgpp::base::BoundingBox1D > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1BoundingBox1DVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< sgpp::base::BoundingBox1D >::size_type arg1 ;
  std::vector< sgpp::base::BoundingBox1D > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< sgpp::base::BoundingBox1D >::size_type)jarg1; 
  {
    try {
      result = (std::vector< sgpp::base::BoundingBox1D > *)new std::vector< sgpp::base::BoundingBox1D >(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< sgpp::base::BoundingBox1D > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_BoundingBox1DVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< sgpp::base::BoundingBox1D > *arg1 = (std::vector< sgpp::base::BoundingBox1D > *) 0 ;
  std::vector< sgpp::base::BoundingBox1D >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< sgpp::base::BoundingBox1D > **)&jarg1; 
  {
    try {
      result = ((std::vector< sgpp::base::BoundingBox1D > const *)arg1)->size();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_BoundingBox1DVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< sgpp::base::BoundingBox1D > *arg1 = (std::vector< sgpp::base::BoundingBox1D > *) 0 ;
  std::vector< sgpp::base::BoundingBox1D >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< sgpp::base::BoundingBox1D > **)&jarg1; 
  {
    try {
      result = ((std::vector< sgpp::base::BoundingBox1D > const *)arg1)->capacity();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_BoundingBox1DVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< sgpp::base::BoundingBox1D > *arg1 = (std::vector< sgpp::base::BoundingBox1D > *) 0 ;
  std::vector< sgpp::base::BoundingBox1D >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< sgpp::base::BoundingBox1D > **)&jarg1; 
  arg2 = (std::vector< sgpp::base::BoundingBox1D >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_sgpp_jsgppJNI_BoundingBox1DVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< sgpp::base::BoundingBox1D > *arg1 = (std::vector< sgpp::base::BoundingBox1D > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< sgpp::base::BoundingBox1D > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< sgpp::base::BoundingBox1D > const *)arg1)->empty();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_BoundingBox1DVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< sgpp::base::BoundingBox1D > *arg1 = (std::vector< sgpp::base::BoundingBox1D > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< sgpp::base::BoundingBox1D > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_BoundingBox1DVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< sgpp::base::BoundingBox1D > *arg1 = (std::vector< sgpp::base::BoundingBox1D > *) 0 ;
  std::vector< sgpp::base::BoundingBox1D >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< sgpp::base::BoundingBox1D > **)&jarg1; 
  arg2 = *(std::vector< sgpp::base::BoundingBox1D >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< sgpp::base::BoundingBox1D >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< sgpp::base::BoundingBox1D >::value_type const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_BoundingBox1DVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< sgpp::base::BoundingBox1D > *arg1 = (std::vector< sgpp::base::BoundingBox1D > *) 0 ;
  int arg2 ;
  std::vector< sgpp::base::BoundingBox1D >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< sgpp::base::BoundingBox1D > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< sgpp::base::BoundingBox1D >::value_type *) &std_vector_Sl_sgpp_base_BoundingBox1D_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< sgpp::base::BoundingBox1D >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_BoundingBox1DVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< sgpp::base::BoundingBox1D > *arg1 = (std::vector< sgpp::base::BoundingBox1D > *) 0 ;
  int arg2 ;
  std::vector< sgpp::base::BoundingBox1D >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< sgpp::base::BoundingBox1D > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< sgpp::base::BoundingBox1D >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< sgpp::base::BoundingBox1D >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_sgpp_base_BoundingBox1D_Sg__set(arg1,arg2,(sgpp::base::BoundingBox1D const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1BoundingBox1DVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< sgpp::base::BoundingBox1D > *arg1 = (std::vector< sgpp::base::BoundingBox1D > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< sgpp::base::BoundingBox1D > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1Stretching1DVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< sgpp::base::Stretching1D > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< sgpp::base::Stretching1D > *)new std::vector< sgpp::base::Stretching1D >();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< sgpp::base::Stretching1D > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1Stretching1DVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< sgpp::base::Stretching1D >::size_type arg1 ;
  std::vector< sgpp::base::Stretching1D > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< sgpp::base::Stretching1D >::size_type)jarg1; 
  {
    try {
      result = (std::vector< sgpp::base::Stretching1D > *)new std::vector< sgpp::base::Stretching1D >(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< sgpp::base::Stretching1D > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_Stretching1DVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< sgpp::base::Stretching1D > *arg1 = (std::vector< sgpp::base::Stretching1D > *) 0 ;
  std::vector< sgpp::base::Stretching1D >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< sgpp::base::Stretching1D > **)&jarg1; 
  {
    try {
      result = ((std::vector< sgpp::base::Stretching1D > const *)arg1)->size();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_Stretching1DVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< sgpp::base::Stretching1D > *arg1 = (std::vector< sgpp::base::Stretching1D > *) 0 ;
  std::vector< sgpp::base::Stretching1D >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< sgpp::base::Stretching1D > **)&jarg1; 
  {
    try {
      result = ((std::vector< sgpp::base::Stretching1D > const *)arg1)->capacity();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_Stretching1DVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< sgpp::base::Stretching1D > *arg1 = (std::vector< sgpp::base::Stretching1D > *) 0 ;
  std::vector< sgpp::base::Stretching1D >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< sgpp::base::Stretching1D > **)&jarg1; 
  arg2 = (std::vector< sgpp::base::Stretching1D >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_sgpp_jsgppJNI_Stretching1DVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< sgpp::base::Stretching1D > *arg1 = (std::vector< sgpp::base::Stretching1D > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< sgpp::base::Stretching1D > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< sgpp::base::Stretching1D > const *)arg1)->empty();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_Stretching1DVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< sgpp::base::Stretching1D > *arg1 = (std::vector< sgpp::base::Stretching1D > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< sgpp::base::Stretching1D > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_Stretching1DVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< sgpp::base::Stretching1D > *arg1 = (std::vector< sgpp::base::Stretching1D > *) 0 ;
  std::vector< sgpp::base::Stretching1D >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< sgpp::base::Stretching1D > **)&jarg1; 
  arg2 = *(std::vector< sgpp::base::Stretching1D >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< sgpp::base::Stretching1D >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< sgpp::base::Stretching1D >::value_type const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_Stretching1DVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< sgpp::base::Stretching1D > *arg1 = (std::vector< sgpp::base::Stretching1D > *) 0 ;
  int arg2 ;
  std::vector< sgpp::base::Stretching1D >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< sgpp::base::Stretching1D > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< sgpp::base::Stretching1D >::value_type *) &std_vector_Sl_sgpp_base_Stretching1D_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< sgpp::base::Stretching1D >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_Stretching1DVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< sgpp::base::Stretching1D > *arg1 = (std::vector< sgpp::base::Stretching1D > *) 0 ;
  int arg2 ;
  std::vector< sgpp::base::Stretching1D >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< sgpp::base::Stretching1D > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< sgpp::base::Stretching1D >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< sgpp::base::Stretching1D >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_sgpp_base_Stretching1D_Sg__set(arg1,arg2,(sgpp::base::Stretching1D const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1Stretching1DVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< sgpp::base::Stretching1D > *arg1 = (std::vector< sgpp::base::Stretching1D > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< sgpp::base::Stretching1D > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OperationParabolicPDESolverSystem(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::solver::OperationParabolicPDESolverSystem *arg1 = (sgpp::solver::OperationParabolicPDESolverSystem *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::solver::OperationParabolicPDESolverSystem **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OperationParabolicPDESolverSystem_1mult(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::solver::OperationParabolicPDESolverSystem *arg1 = (sgpp::solver::OperationParabolicPDESolverSystem *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::solver::OperationParabolicPDESolverSystem **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->mult(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OperationParabolicPDESolverSystem_1generateRHS(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::solver::OperationParabolicPDESolverSystem *arg1 = (sgpp::solver::OperationParabolicPDESolverSystem *) 0 ;
  sgpp::base::DataVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::solver::OperationParabolicPDESolverSystem **)&jarg1; 
  {
    try {
      result = (sgpp::base::DataVector *)(arg1)->generateRHS();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::DataVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OperationParabolicPDESolverSystem_1finishTimestep(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::solver::OperationParabolicPDESolverSystem *arg1 = (sgpp::solver::OperationParabolicPDESolverSystem *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::solver::OperationParabolicPDESolverSystem **)&jarg1; 
  {
    try {
      (arg1)->finishTimestep();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OperationParabolicPDESolverSystem_1coarsenAndRefine_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  sgpp::solver::OperationParabolicPDESolverSystem *arg1 = (sgpp::solver::OperationParabolicPDESolverSystem *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::solver::OperationParabolicPDESolverSystem **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->coarsenAndRefine(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OperationParabolicPDESolverSystem_1coarsenAndRefine_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::solver::OperationParabolicPDESolverSystem *arg1 = (sgpp::solver::OperationParabolicPDESolverSystem *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::solver::OperationParabolicPDESolverSystem **)&jarg1; 
  {
    try {
      (arg1)->coarsenAndRefine();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OperationParabolicPDESolverSystem_1startTimestep(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::solver::OperationParabolicPDESolverSystem *arg1 = (sgpp::solver::OperationParabolicPDESolverSystem *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::solver::OperationParabolicPDESolverSystem **)&jarg1; 
  {
    try {
      (arg1)->startTimestep();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OperationParabolicPDESolverSystem_1getGrid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::solver::OperationParabolicPDESolverSystem *arg1 = (sgpp::solver::OperationParabolicPDESolverSystem *) 0 ;
  sgpp::base::Grid *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::solver::OperationParabolicPDESolverSystem **)&jarg1; 
  {
    try {
      result = (sgpp::base::Grid *)(arg1)->getGrid();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::Grid **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OperationParabolicPDESolverSystem_1getGridCoefficientsForCG(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::solver::OperationParabolicPDESolverSystem *arg1 = (sgpp::solver::OperationParabolicPDESolverSystem *) 0 ;
  sgpp::base::DataVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::solver::OperationParabolicPDESolverSystem **)&jarg1; 
  {
    try {
      result = (sgpp::base::DataVector *)(arg1)->getGridCoefficientsForCG();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::DataVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OperationParabolicPDESolverSystem_1getGridCoefficients(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::solver::OperationParabolicPDESolverSystem *arg1 = (sgpp::solver::OperationParabolicPDESolverSystem *) 0 ;
  sgpp::base::DataVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::solver::OperationParabolicPDESolverSystem **)&jarg1; 
  {
    try {
      result = (sgpp::base::DataVector *)(arg1)->getGridCoefficients();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::DataVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OperationParabolicPDESolverSystem_1setODESolver(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  sgpp::solver::OperationParabolicPDESolverSystem *arg1 = (sgpp::solver::OperationParabolicPDESolverSystem *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::solver::OperationParabolicPDESolverSystem **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->setODESolver(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_sgpp_jsgppJNI_OperationParabolicPDESolverSystem_1getODESolver(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  sgpp::solver::OperationParabolicPDESolverSystem *arg1 = (sgpp::solver::OperationParabolicPDESolverSystem *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::solver::OperationParabolicPDESolverSystem **)&jarg1; 
  {
    try {
      result = (arg1)->getODESolver();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OperationParabolicPDESolverSystem_1getSumGridPointsComplete(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::solver::OperationParabolicPDESolverSystem *arg1 = (sgpp::solver::OperationParabolicPDESolverSystem *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::solver::OperationParabolicPDESolverSystem **)&jarg1; 
  {
    try {
      result = (arg1)->getSumGridPointsComplete();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OperationParabolicPDESolverSystem_1getSumGridPointsInner(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::solver::OperationParabolicPDESolverSystem *arg1 = (sgpp::solver::OperationParabolicPDESolverSystem *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::solver::OperationParabolicPDESolverSystem **)&jarg1; 
  {
    try {
      result = (arg1)->getSumGridPointsInner();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OperationParabolicPDESolverSystem_1setTimestepSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::solver::OperationParabolicPDESolverSystem *arg1 = (sgpp::solver::OperationParabolicPDESolverSystem *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::solver::OperationParabolicPDESolverSystem **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setTimestepSize(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OperationParabolicPDESolverSystem_1abortTimestep(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::solver::OperationParabolicPDESolverSystem *arg1 = (sgpp::solver::OperationParabolicPDESolverSystem *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::solver::OperationParabolicPDESolverSystem **)&jarg1; 
  {
    try {
      (arg1)->abortTimestep();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OperationParabolicPDESolverSystem_1saveAlpha(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::solver::OperationParabolicPDESolverSystem *arg1 = (sgpp::solver::OperationParabolicPDESolverSystem *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::solver::OperationParabolicPDESolverSystem **)&jarg1; 
  {
    try {
      (arg1)->saveAlpha();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OperationParabolicPDESolverSystem_1getGridCoefficientsForSC(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::solver::OperationParabolicPDESolverSystem *arg1 = (sgpp::solver::OperationParabolicPDESolverSystem *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::solver::OperationParabolicPDESolverSystem **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->getGridCoefficientsForSC(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OperationParabolicPDESolverSystem_1getGridStorage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::solver::OperationParabolicPDESolverSystem *arg1 = (sgpp::solver::OperationParabolicPDESolverSystem *) 0 ;
  sgpp::base::GridStorage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::solver::OperationParabolicPDESolverSystem **)&jarg1; 
  {
    try {
      result = (sgpp::base::GridStorage *)(arg1)->getGridStorage();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::GridStorage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OperationParabolicPDESolverSystem_1getOldGridStorage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::solver::OperationParabolicPDESolverSystem *arg1 = (sgpp::solver::OperationParabolicPDESolverSystem *) 0 ;
  sgpp::base::GridStorage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::solver::OperationParabolicPDESolverSystem **)&jarg1; 
  {
    try {
      result = (sgpp::base::GridStorage *)(arg1)->getOldGridStorage();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::GridStorage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OperationParabolicPDESolverSystem_1getSecondGridStorage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::solver::OperationParabolicPDESolverSystem *arg1 = (sgpp::solver::OperationParabolicPDESolverSystem *) 0 ;
  sgpp::base::GridStorage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::solver::OperationParabolicPDESolverSystem **)&jarg1; 
  {
    try {
      result = (sgpp::base::GridStorage *)(arg1)->getSecondGridStorage();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::GridStorage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OperationParabolicPDESolverSystemDirichlet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::pde::OperationParabolicPDESolverSystemDirichlet *arg1 = (sgpp::pde::OperationParabolicPDESolverSystemDirichlet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::pde::OperationParabolicPDESolverSystemDirichlet **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OperationParabolicPDESolverSystemDirichlet_1mult(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::pde::OperationParabolicPDESolverSystemDirichlet *arg1 = (sgpp::pde::OperationParabolicPDESolverSystemDirichlet *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::pde::OperationParabolicPDESolverSystemDirichlet **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->mult(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OperationParabolicPDESolverSystemDirichlet_1generateRHS(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::pde::OperationParabolicPDESolverSystemDirichlet *arg1 = (sgpp::pde::OperationParabolicPDESolverSystemDirichlet *) 0 ;
  sgpp::base::DataVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::pde::OperationParabolicPDESolverSystemDirichlet **)&jarg1; 
  {
    try {
      result = (sgpp::base::DataVector *)(arg1)->generateRHS();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::DataVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OperationParabolicPDESolverSystemDirichlet_1getGridCoefficientsForCG(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::pde::OperationParabolicPDESolverSystemDirichlet *arg1 = (sgpp::pde::OperationParabolicPDESolverSystemDirichlet *) 0 ;
  sgpp::base::DataVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::pde::OperationParabolicPDESolverSystemDirichlet **)&jarg1; 
  {
    try {
      result = (sgpp::base::DataVector *)(arg1)->getGridCoefficientsForCG();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::DataVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1HeatEquationParabolicPDESolverSystem_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3, jdouble jarg4, jstring jarg5) {
  jlong jresult = 0 ;
  sgpp::base::Grid *arg1 = 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  std::string arg5 ;
  sgpp::pde::HeatEquationParabolicPDESolverSystem *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::Grid **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  (&arg5)->assign(arg5_pstr);
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  {
    try {
      result = (sgpp::pde::HeatEquationParabolicPDESolverSystem *)new sgpp::pde::HeatEquationParabolicPDESolverSystem(*arg1,*arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::pde::HeatEquationParabolicPDESolverSystem **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1HeatEquationParabolicPDESolverSystem_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  sgpp::base::Grid *arg1 = 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  sgpp::pde::HeatEquationParabolicPDESolverSystem *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::Grid **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (sgpp::pde::HeatEquationParabolicPDESolverSystem *)new sgpp::pde::HeatEquationParabolicPDESolverSystem(*arg1,*arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::pde::HeatEquationParabolicPDESolverSystem **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1HeatEquationParabolicPDESolverSystem(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::pde::HeatEquationParabolicPDESolverSystem *arg1 = (sgpp::pde::HeatEquationParabolicPDESolverSystem *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::pde::HeatEquationParabolicPDESolverSystem **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_HeatEquationParabolicPDESolverSystem_1finishTimestep(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::pde::HeatEquationParabolicPDESolverSystem *arg1 = (sgpp::pde::HeatEquationParabolicPDESolverSystem *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::pde::HeatEquationParabolicPDESolverSystem **)&jarg1; 
  {
    try {
      (arg1)->finishTimestep();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_HeatEquationParabolicPDESolverSystem_1coarsenAndRefine_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  sgpp::pde::HeatEquationParabolicPDESolverSystem *arg1 = (sgpp::pde::HeatEquationParabolicPDESolverSystem *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::pde::HeatEquationParabolicPDESolverSystem **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->coarsenAndRefine(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_HeatEquationParabolicPDESolverSystem_1coarsenAndRefine_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::pde::HeatEquationParabolicPDESolverSystem *arg1 = (sgpp::pde::HeatEquationParabolicPDESolverSystem *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::pde::HeatEquationParabolicPDESolverSystem **)&jarg1; 
  {
    try {
      (arg1)->coarsenAndRefine();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_HeatEquationParabolicPDESolverSystem_1startTimestep(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::pde::HeatEquationParabolicPDESolverSystem *arg1 = (sgpp::pde::HeatEquationParabolicPDESolverSystem *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::pde::HeatEquationParabolicPDESolverSystem **)&jarg1; 
  {
    try {
      (arg1)->startTimestep();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1PDESolver(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::pde::PDESolver *arg1 = (sgpp::pde::PDESolver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::pde::PDESolver **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_PDESolver_1constructGrid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  sgpp::pde::PDESolver *arg1 = (sgpp::pde::PDESolver *) 0 ;
  sgpp::base::BoundingBox *arg2 = 0 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::pde::PDESolver **)&jarg1; 
  arg2 = *(sgpp::base::BoundingBox **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::BoundingBox & reference is null");
    return ;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      (arg1)->constructGrid(*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_PDESolver_1setGrid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  sgpp::pde::PDESolver *arg1 = (sgpp::pde::PDESolver *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::pde::PDESolver **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->setGrid((std::string const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_sgpp_jsgppJNI_PDESolver_1getGrid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  sgpp::pde::PDESolver *arg1 = (sgpp::pde::PDESolver *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::pde::PDESolver **)&jarg1; 
  {
    try {
      result = ((sgpp::pde::PDESolver const *)arg1)->getGrid();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_PDESolver_1deleteGrid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::pde::PDESolver *arg1 = (sgpp::pde::PDESolver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::pde::PDESolver **)&jarg1; 
  {
    try {
      (arg1)->deleteGrid();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_PDESolver_1refineInitialGridSurplus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jdouble jarg4) {
  sgpp::pde::PDESolver *arg1 = (sgpp::pde::PDESolver *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  int arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::pde::PDESolver **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->refineInitialGridSurplus(*arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_PDESolver_1refineInitialGridSurplusToMaxLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3, jlong jarg4) {
  sgpp::pde::PDESolver *arg1 = (sgpp::pde::PDESolver *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double arg3 ;
  sgpp::base::level_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::pde::PDESolver **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg3 = (double)jarg3; 
  arg4 = (sgpp::base::level_t)jarg4; 
  {
    try {
      (arg1)->refineInitialGridSurplusToMaxLevel(*arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_PDESolver_1refineInitialGridSurplusSubDomain(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jdouble jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_) {
  sgpp::pde::PDESolver *arg1 = (sgpp::pde::PDESolver *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  int arg3 ;
  double arg4 ;
  std::vector< double > *arg5 = 0 ;
  std::vector< double > *arg6 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(sgpp::pde::PDESolver **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(std::vector< double > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > & reference is null");
    return ;
  } 
  arg6 = *(std::vector< double > **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->refineInitialGridSurplusSubDomain(*arg2,arg3,arg4,*arg5,*arg6);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_PDESolver_1refineInitialGridSurplusToMaxLevelSubDomain(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3, jlong jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_) {
  sgpp::pde::PDESolver *arg1 = (sgpp::pde::PDESolver *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double arg3 ;
  sgpp::base::level_t arg4 ;
  std::vector< double > *arg5 = 0 ;
  std::vector< double > *arg6 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(sgpp::pde::PDESolver **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg3 = (double)jarg3; 
  arg4 = (sgpp::base::level_t)jarg4; 
  arg5 = *(std::vector< double > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > & reference is null");
    return ;
  } 
  arg6 = *(std::vector< double > **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->refineInitialGridSurplusToMaxLevelSubDomain(*arg2,arg3,arg4,*arg5,*arg6);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_PDESolver_1coarsenInitialGridSurplus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  sgpp::pde::PDESolver *arg1 = (sgpp::pde::PDESolver *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::pde::PDESolver **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->coarsenInitialGridSurplus(*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_PDESolver_1evaluatePoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jdouble jresult = 0 ;
  sgpp::pde::PDESolver *arg1 = (sgpp::pde::PDESolver *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::pde::PDESolver **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->evaluatePoint(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_PDESolver_1evaluateCuboid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  sgpp::pde::PDESolver *arg1 = (sgpp::pde::PDESolver *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  sgpp::base::DataMatrix *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(sgpp::pde::PDESolver **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg4 = *(sgpp::base::DataMatrix **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->evaluateCuboid(*arg2,*arg3,*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_PDESolver_1printLevelIndexGrid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  sgpp::pde::PDESolver *arg1 = (sgpp::pde::PDESolver *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::pde::PDESolver **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      ((sgpp::pde::PDESolver const *)arg1)->printLevelIndexGrid(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_PDESolver_1printGrid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jstring jarg4) {
  sgpp::pde::PDESolver *arg1 = (sgpp::pde::PDESolver *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  size_t arg3 ;
  std::string arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::pde::PDESolver **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg3 = (size_t)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  {
    try {
      ((sgpp::pde::PDESolver const *)arg1)->printGrid(*arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_PDESolver_1printGridDomain(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_, jstring jarg5) {
  sgpp::pde::PDESolver *arg1 = (sgpp::pde::PDESolver *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  size_t arg3 ;
  sgpp::base::BoundingBox *arg4 = 0 ;
  std::string arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(sgpp::pde::PDESolver **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = *(sgpp::base::BoundingBox **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::BoundingBox & reference is null");
    return ;
  } 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return ;
  (&arg5)->assign(arg5_pstr);
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  {
    try {
      ((sgpp::pde::PDESolver const *)arg1)->printGridDomain(*arg2,arg3,*arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_PDESolver_1printSparseGrid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jboolean jarg4) {
  sgpp::pde::PDESolver *arg1 = (sgpp::pde::PDESolver *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  std::string arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::pde::PDESolver **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false; 
  {
    try {
      ((sgpp::pde::PDESolver const *)arg1)->printSparseGrid(*arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_PDESolver_1printSparseGridExpTransform(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jboolean jarg4) {
  sgpp::pde::PDESolver *arg1 = (sgpp::pde::PDESolver *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  std::string arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::pde::PDESolver **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false; 
  {
    try {
      ((sgpp::pde::PDESolver const *)arg1)->printSparseGridExpTransform(*arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_PDESolver_1getNumberGridPoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::pde::PDESolver *arg1 = (sgpp::pde::PDESolver *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::pde::PDESolver **)&jarg1; 
  {
    try {
      result = ((sgpp::pde::PDESolver const *)arg1)->getNumberGridPoints();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_PDESolver_1getNumberInnerGridPoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::pde::PDESolver *arg1 = (sgpp::pde::PDESolver *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::pde::PDESolver **)&jarg1; 
  {
    try {
      result = ((sgpp::pde::PDESolver const *)arg1)->getNumberInnerGridPoints();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_PDESolver_1getNumberDimensions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::pde::PDESolver *arg1 = (sgpp::pde::PDESolver *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::pde::PDESolver **)&jarg1; 
  {
    try {
      result = ((sgpp::pde::PDESolver const *)arg1)->getNumberDimensions();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1ParabolicPDESolver(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::pde::ParabolicPDESolver *arg1 = (sgpp::pde::ParabolicPDESolver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::pde::ParabolicPDESolver **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_ParabolicPDESolver_1solveImplicitEuler_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdouble jarg3, jlong jarg4, jdouble jarg5, jlong jarg6, jobject jarg6_, jboolean jarg7, jboolean jarg8) {
  sgpp::pde::ParabolicPDESolver *arg1 = (sgpp::pde::ParabolicPDESolver *) 0 ;
  size_t arg2 ;
  double arg3 ;
  size_t arg4 ;
  double arg5 ;
  sgpp::base::DataVector *arg6 = 0 ;
  bool arg7 ;
  bool arg8 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  arg1 = *(sgpp::pde::ParabolicPDESolver **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = *(sgpp::base::DataVector **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg7 = jarg7 ? true : false; 
  arg8 = jarg8 ? true : false; 
  {
    try {
      (arg1)->solveImplicitEuler(arg2,arg3,arg4,arg5,*arg6,arg7,arg8);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_ParabolicPDESolver_1solveImplicitEuler_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdouble jarg3, jlong jarg4, jdouble jarg5, jlong jarg6, jobject jarg6_, jboolean jarg7) {
  sgpp::pde::ParabolicPDESolver *arg1 = (sgpp::pde::ParabolicPDESolver *) 0 ;
  size_t arg2 ;
  double arg3 ;
  size_t arg4 ;
  double arg5 ;
  sgpp::base::DataVector *arg6 = 0 ;
  bool arg7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  arg1 = *(sgpp::pde::ParabolicPDESolver **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = *(sgpp::base::DataVector **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg7 = jarg7 ? true : false; 
  {
    try {
      (arg1)->solveImplicitEuler(arg2,arg3,arg4,arg5,*arg6,arg7);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_ParabolicPDESolver_1solveImplicitEuler_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdouble jarg3, jlong jarg4, jdouble jarg5, jlong jarg6, jobject jarg6_) {
  sgpp::pde::ParabolicPDESolver *arg1 = (sgpp::pde::ParabolicPDESolver *) 0 ;
  size_t arg2 ;
  double arg3 ;
  size_t arg4 ;
  double arg5 ;
  sgpp::base::DataVector *arg6 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  arg1 = *(sgpp::pde::ParabolicPDESolver **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = *(sgpp::base::DataVector **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->solveImplicitEuler(arg2,arg3,arg4,arg5,*arg6);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_ParabolicPDESolver_1solveExplicitEuler_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdouble jarg3, jlong jarg4, jdouble jarg5, jlong jarg6, jobject jarg6_, jboolean jarg7, jboolean jarg8) {
  sgpp::pde::ParabolicPDESolver *arg1 = (sgpp::pde::ParabolicPDESolver *) 0 ;
  size_t arg2 ;
  double arg3 ;
  size_t arg4 ;
  double arg5 ;
  sgpp::base::DataVector *arg6 = 0 ;
  bool arg7 ;
  bool arg8 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  arg1 = *(sgpp::pde::ParabolicPDESolver **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = *(sgpp::base::DataVector **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg7 = jarg7 ? true : false; 
  arg8 = jarg8 ? true : false; 
  {
    try {
      (arg1)->solveExplicitEuler(arg2,arg3,arg4,arg5,*arg6,arg7,arg8);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_ParabolicPDESolver_1solveExplicitEuler_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdouble jarg3, jlong jarg4, jdouble jarg5, jlong jarg6, jobject jarg6_, jboolean jarg7) {
  sgpp::pde::ParabolicPDESolver *arg1 = (sgpp::pde::ParabolicPDESolver *) 0 ;
  size_t arg2 ;
  double arg3 ;
  size_t arg4 ;
  double arg5 ;
  sgpp::base::DataVector *arg6 = 0 ;
  bool arg7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  arg1 = *(sgpp::pde::ParabolicPDESolver **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = *(sgpp::base::DataVector **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg7 = jarg7 ? true : false; 
  {
    try {
      (arg1)->solveExplicitEuler(arg2,arg3,arg4,arg5,*arg6,arg7);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_ParabolicPDESolver_1solveExplicitEuler_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdouble jarg3, jlong jarg4, jdouble jarg5, jlong jarg6, jobject jarg6_) {
  sgpp::pde::ParabolicPDESolver *arg1 = (sgpp::pde::ParabolicPDESolver *) 0 ;
  size_t arg2 ;
  double arg3 ;
  size_t arg4 ;
  double arg5 ;
  sgpp::base::DataVector *arg6 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  arg1 = *(sgpp::pde::ParabolicPDESolver **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = *(sgpp::base::DataVector **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->solveExplicitEuler(arg2,arg3,arg4,arg5,*arg6);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_ParabolicPDESolver_1solveCrankNicolson_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdouble jarg3, jlong jarg4, jdouble jarg5, jlong jarg6, jobject jarg6_, jlong jarg7) {
  sgpp::pde::ParabolicPDESolver *arg1 = (sgpp::pde::ParabolicPDESolver *) 0 ;
  size_t arg2 ;
  double arg3 ;
  size_t arg4 ;
  double arg5 ;
  sgpp::base::DataVector *arg6 = 0 ;
  size_t arg7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  arg1 = *(sgpp::pde::ParabolicPDESolver **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = *(sgpp::base::DataVector **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg7 = (size_t)jarg7; 
  {
    try {
      (arg1)->solveCrankNicolson(arg2,arg3,arg4,arg5,*arg6,arg7);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_ParabolicPDESolver_1solveCrankNicolson_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdouble jarg3, jlong jarg4, jdouble jarg5, jlong jarg6, jobject jarg6_) {
  sgpp::pde::ParabolicPDESolver *arg1 = (sgpp::pde::ParabolicPDESolver *) 0 ;
  size_t arg2 ;
  double arg3 ;
  size_t arg4 ;
  double arg5 ;
  sgpp::base::DataVector *arg6 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  arg1 = *(sgpp::pde::ParabolicPDESolver **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = *(sgpp::base::DataVector **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->solveCrankNicolson(arg2,arg3,arg4,arg5,*arg6);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1HeatEquationSolver(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::pde::HeatEquationSolver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::pde::HeatEquationSolver *)new sgpp::pde::HeatEquationSolver();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::pde::HeatEquationSolver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1HeatEquationSolver(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::pde::HeatEquationSolver *arg1 = (sgpp::pde::HeatEquationSolver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::pde::HeatEquationSolver **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_HeatEquationSolver_1constructGrid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  sgpp::pde::HeatEquationSolver *arg1 = (sgpp::pde::HeatEquationSolver *) 0 ;
  sgpp::base::BoundingBox *arg2 = 0 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::pde::HeatEquationSolver **)&jarg1; 
  arg2 = *(sgpp::base::BoundingBox **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::BoundingBox & reference is null");
    return ;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      (arg1)->constructGrid(*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_HeatEquationSolver_1solveExplicitEuler_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdouble jarg3, jlong jarg4, jdouble jarg5, jlong jarg6, jobject jarg6_, jboolean jarg7, jboolean jarg8) {
  sgpp::pde::HeatEquationSolver *arg1 = (sgpp::pde::HeatEquationSolver *) 0 ;
  size_t arg2 ;
  double arg3 ;
  size_t arg4 ;
  double arg5 ;
  sgpp::base::DataVector *arg6 = 0 ;
  bool arg7 ;
  bool arg8 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  arg1 = *(sgpp::pde::HeatEquationSolver **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = *(sgpp::base::DataVector **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg7 = jarg7 ? true : false; 
  arg8 = jarg8 ? true : false; 
  {
    try {
      (arg1)->solveExplicitEuler(arg2,arg3,arg4,arg5,*arg6,arg7,arg8);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_HeatEquationSolver_1solveExplicitEuler_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdouble jarg3, jlong jarg4, jdouble jarg5, jlong jarg6, jobject jarg6_, jboolean jarg7) {
  sgpp::pde::HeatEquationSolver *arg1 = (sgpp::pde::HeatEquationSolver *) 0 ;
  size_t arg2 ;
  double arg3 ;
  size_t arg4 ;
  double arg5 ;
  sgpp::base::DataVector *arg6 = 0 ;
  bool arg7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  arg1 = *(sgpp::pde::HeatEquationSolver **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = *(sgpp::base::DataVector **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg7 = jarg7 ? true : false; 
  {
    try {
      (arg1)->solveExplicitEuler(arg2,arg3,arg4,arg5,*arg6,arg7);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_HeatEquationSolver_1solveExplicitEuler_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdouble jarg3, jlong jarg4, jdouble jarg5, jlong jarg6, jobject jarg6_) {
  sgpp::pde::HeatEquationSolver *arg1 = (sgpp::pde::HeatEquationSolver *) 0 ;
  size_t arg2 ;
  double arg3 ;
  size_t arg4 ;
  double arg5 ;
  sgpp::base::DataVector *arg6 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  arg1 = *(sgpp::pde::HeatEquationSolver **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = *(sgpp::base::DataVector **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->solveExplicitEuler(arg2,arg3,arg4,arg5,*arg6);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_HeatEquationSolver_1solveImplicitEuler_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdouble jarg3, jlong jarg4, jdouble jarg5, jlong jarg6, jobject jarg6_, jboolean jarg7, jboolean jarg8) {
  sgpp::pde::HeatEquationSolver *arg1 = (sgpp::pde::HeatEquationSolver *) 0 ;
  size_t arg2 ;
  double arg3 ;
  size_t arg4 ;
  double arg5 ;
  sgpp::base::DataVector *arg6 = 0 ;
  bool arg7 ;
  bool arg8 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  arg1 = *(sgpp::pde::HeatEquationSolver **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = *(sgpp::base::DataVector **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg7 = jarg7 ? true : false; 
  arg8 = jarg8 ? true : false; 
  {
    try {
      (arg1)->solveImplicitEuler(arg2,arg3,arg4,arg5,*arg6,arg7,arg8);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_HeatEquationSolver_1solveImplicitEuler_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdouble jarg3, jlong jarg4, jdouble jarg5, jlong jarg6, jobject jarg6_, jboolean jarg7) {
  sgpp::pde::HeatEquationSolver *arg1 = (sgpp::pde::HeatEquationSolver *) 0 ;
  size_t arg2 ;
  double arg3 ;
  size_t arg4 ;
  double arg5 ;
  sgpp::base::DataVector *arg6 = 0 ;
  bool arg7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  arg1 = *(sgpp::pde::HeatEquationSolver **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = *(sgpp::base::DataVector **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg7 = jarg7 ? true : false; 
  {
    try {
      (arg1)->solveImplicitEuler(arg2,arg3,arg4,arg5,*arg6,arg7);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_HeatEquationSolver_1solveImplicitEuler_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdouble jarg3, jlong jarg4, jdouble jarg5, jlong jarg6, jobject jarg6_) {
  sgpp::pde::HeatEquationSolver *arg1 = (sgpp::pde::HeatEquationSolver *) 0 ;
  size_t arg2 ;
  double arg3 ;
  size_t arg4 ;
  double arg5 ;
  sgpp::base::DataVector *arg6 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  arg1 = *(sgpp::pde::HeatEquationSolver **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = *(sgpp::base::DataVector **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->solveImplicitEuler(arg2,arg3,arg4,arg5,*arg6);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_HeatEquationSolver_1solveCrankNicolson_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdouble jarg3, jlong jarg4, jdouble jarg5, jlong jarg6, jobject jarg6_, jlong jarg7) {
  sgpp::pde::HeatEquationSolver *arg1 = (sgpp::pde::HeatEquationSolver *) 0 ;
  size_t arg2 ;
  double arg3 ;
  size_t arg4 ;
  double arg5 ;
  sgpp::base::DataVector *arg6 = 0 ;
  size_t arg7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  arg1 = *(sgpp::pde::HeatEquationSolver **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = *(sgpp::base::DataVector **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg7 = (size_t)jarg7; 
  {
    try {
      (arg1)->solveCrankNicolson(arg2,arg3,arg4,arg5,*arg6,arg7);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_HeatEquationSolver_1solveCrankNicolson_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdouble jarg3, jlong jarg4, jdouble jarg5, jlong jarg6, jobject jarg6_) {
  sgpp::pde::HeatEquationSolver *arg1 = (sgpp::pde::HeatEquationSolver *) 0 ;
  size_t arg2 ;
  double arg3 ;
  size_t arg4 ;
  double arg5 ;
  sgpp::base::DataVector *arg6 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  arg1 = *(sgpp::pde::HeatEquationSolver **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = *(sgpp::base::DataVector **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->solveCrankNicolson(arg2,arg3,arg4,arg5,*arg6);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_HeatEquationSolver_1setHeatCoefficient(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::pde::HeatEquationSolver *arg1 = (sgpp::pde::HeatEquationSolver *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::pde::HeatEquationSolver **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setHeatCoefficient(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_HeatEquationSolver_1initGridWithSmoothHeat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3, jdouble jarg4, jdouble jarg5) {
  sgpp::pde::HeatEquationSolver *arg1 = (sgpp::pde::HeatEquationSolver *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::pde::HeatEquationSolver **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  {
    try {
      (arg1)->initGridWithSmoothHeat(*arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_HeatEquationSolver_1initScreen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::pde::HeatEquationSolver *arg1 = (sgpp::pde::HeatEquationSolver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::pde::HeatEquationSolver **)&jarg1; 
  {
    try {
      (arg1)->initScreen();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_HeatEquationSolver_1storeInnerRHS(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jdouble jarg4) {
  sgpp::pde::HeatEquationSolver *arg1 = (sgpp::pde::HeatEquationSolver *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  std::string arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::pde::HeatEquationSolver **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->storeInnerRHS(*arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_HeatEquationSolver_1storeInnerSolution(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jdouble jarg4, jlong jarg5, jdouble jarg6, jstring jarg7) {
  sgpp::pde::HeatEquationSolver *arg1 = (sgpp::pde::HeatEquationSolver *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  size_t arg3 ;
  double arg4 ;
  size_t arg5 ;
  double arg6 ;
  std::string arg7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::pde::HeatEquationSolver **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (size_t)jarg5; 
  arg6 = (double)jarg6; 
  if(!jarg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg7_pstr = (const char *)jenv->GetStringUTFChars(jarg7, 0); 
  if (!arg7_pstr) return ;
  (&arg7)->assign(arg7_pstr);
  jenv->ReleaseStringUTFChars(jarg7, arg7_pstr); 
  {
    try {
      (arg1)->storeInnerSolution(*arg2,arg3,arg4,arg5,arg6,arg7);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1HeatEquationSolverWithStretching(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::pde::HeatEquationSolverWithStretching *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::pde::HeatEquationSolverWithStretching *)new sgpp::pde::HeatEquationSolverWithStretching();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::pde::HeatEquationSolverWithStretching **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1HeatEquationSolverWithStretching(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::pde::HeatEquationSolverWithStretching *arg1 = (sgpp::pde::HeatEquationSolverWithStretching *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::pde::HeatEquationSolverWithStretching **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_HeatEquationSolverWithStretching_1constructGrid_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  sgpp::pde::HeatEquationSolverWithStretching *arg1 = (sgpp::pde::HeatEquationSolverWithStretching *) 0 ;
  sgpp::base::Stretching *arg2 = 0 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::pde::HeatEquationSolverWithStretching **)&jarg1; 
  arg2 = *(sgpp::base::Stretching **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Stretching & reference is null");
    return ;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      (arg1)->constructGrid(*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_HeatEquationSolverWithStretching_1constructGrid_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  sgpp::pde::HeatEquationSolverWithStretching *arg1 = (sgpp::pde::HeatEquationSolverWithStretching *) 0 ;
  sgpp::base::BoundingBox *arg2 = 0 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::pde::HeatEquationSolverWithStretching **)&jarg1; 
  arg2 = *(sgpp::base::BoundingBox **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::BoundingBox & reference is null");
    return ;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      (arg1)->constructGrid(*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_HeatEquationSolverWithStretching_1solveExplicitEuler_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdouble jarg3, jlong jarg4, jdouble jarg5, jlong jarg6, jobject jarg6_, jboolean jarg7, jboolean jarg8) {
  sgpp::pde::HeatEquationSolverWithStretching *arg1 = (sgpp::pde::HeatEquationSolverWithStretching *) 0 ;
  size_t arg2 ;
  double arg3 ;
  size_t arg4 ;
  double arg5 ;
  sgpp::base::DataVector *arg6 = 0 ;
  bool arg7 ;
  bool arg8 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  arg1 = *(sgpp::pde::HeatEquationSolverWithStretching **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = *(sgpp::base::DataVector **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg7 = jarg7 ? true : false; 
  arg8 = jarg8 ? true : false; 
  {
    try {
      (arg1)->solveExplicitEuler(arg2,arg3,arg4,arg5,*arg6,arg7,arg8);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_HeatEquationSolverWithStretching_1solveExplicitEuler_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdouble jarg3, jlong jarg4, jdouble jarg5, jlong jarg6, jobject jarg6_, jboolean jarg7) {
  sgpp::pde::HeatEquationSolverWithStretching *arg1 = (sgpp::pde::HeatEquationSolverWithStretching *) 0 ;
  size_t arg2 ;
  double arg3 ;
  size_t arg4 ;
  double arg5 ;
  sgpp::base::DataVector *arg6 = 0 ;
  bool arg7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  arg1 = *(sgpp::pde::HeatEquationSolverWithStretching **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = *(sgpp::base::DataVector **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg7 = jarg7 ? true : false; 
  {
    try {
      (arg1)->solveExplicitEuler(arg2,arg3,arg4,arg5,*arg6,arg7);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_HeatEquationSolverWithStretching_1solveExplicitEuler_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdouble jarg3, jlong jarg4, jdouble jarg5, jlong jarg6, jobject jarg6_) {
  sgpp::pde::HeatEquationSolverWithStretching *arg1 = (sgpp::pde::HeatEquationSolverWithStretching *) 0 ;
  size_t arg2 ;
  double arg3 ;
  size_t arg4 ;
  double arg5 ;
  sgpp::base::DataVector *arg6 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  arg1 = *(sgpp::pde::HeatEquationSolverWithStretching **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = *(sgpp::base::DataVector **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->solveExplicitEuler(arg2,arg3,arg4,arg5,*arg6);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_HeatEquationSolverWithStretching_1solveImplicitEuler_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdouble jarg3, jlong jarg4, jdouble jarg5, jlong jarg6, jobject jarg6_, jboolean jarg7, jboolean jarg8) {
  sgpp::pde::HeatEquationSolverWithStretching *arg1 = (sgpp::pde::HeatEquationSolverWithStretching *) 0 ;
  size_t arg2 ;
  double arg3 ;
  size_t arg4 ;
  double arg5 ;
  sgpp::base::DataVector *arg6 = 0 ;
  bool arg7 ;
  bool arg8 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  arg1 = *(sgpp::pde::HeatEquationSolverWithStretching **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = *(sgpp::base::DataVector **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg7 = jarg7 ? true : false; 
  arg8 = jarg8 ? true : false; 
  {
    try {
      (arg1)->solveImplicitEuler(arg2,arg3,arg4,arg5,*arg6,arg7,arg8);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_HeatEquationSolverWithStretching_1solveImplicitEuler_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdouble jarg3, jlong jarg4, jdouble jarg5, jlong jarg6, jobject jarg6_, jboolean jarg7) {
  sgpp::pde::HeatEquationSolverWithStretching *arg1 = (sgpp::pde::HeatEquationSolverWithStretching *) 0 ;
  size_t arg2 ;
  double arg3 ;
  size_t arg4 ;
  double arg5 ;
  sgpp::base::DataVector *arg6 = 0 ;
  bool arg7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  arg1 = *(sgpp::pde::HeatEquationSolverWithStretching **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = *(sgpp::base::DataVector **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg7 = jarg7 ? true : false; 
  {
    try {
      (arg1)->solveImplicitEuler(arg2,arg3,arg4,arg5,*arg6,arg7);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_HeatEquationSolverWithStretching_1solveImplicitEuler_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdouble jarg3, jlong jarg4, jdouble jarg5, jlong jarg6, jobject jarg6_) {
  sgpp::pde::HeatEquationSolverWithStretching *arg1 = (sgpp::pde::HeatEquationSolverWithStretching *) 0 ;
  size_t arg2 ;
  double arg3 ;
  size_t arg4 ;
  double arg5 ;
  sgpp::base::DataVector *arg6 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  arg1 = *(sgpp::pde::HeatEquationSolverWithStretching **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = *(sgpp::base::DataVector **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->solveImplicitEuler(arg2,arg3,arg4,arg5,*arg6);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_HeatEquationSolverWithStretching_1solveCrankNicolson_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdouble jarg3, jlong jarg4, jdouble jarg5, jlong jarg6, jobject jarg6_, jlong jarg7) {
  sgpp::pde::HeatEquationSolverWithStretching *arg1 = (sgpp::pde::HeatEquationSolverWithStretching *) 0 ;
  size_t arg2 ;
  double arg3 ;
  size_t arg4 ;
  double arg5 ;
  sgpp::base::DataVector *arg6 = 0 ;
  size_t arg7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  arg1 = *(sgpp::pde::HeatEquationSolverWithStretching **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = *(sgpp::base::DataVector **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg7 = (size_t)jarg7; 
  {
    try {
      (arg1)->solveCrankNicolson(arg2,arg3,arg4,arg5,*arg6,arg7);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_HeatEquationSolverWithStretching_1solveCrankNicolson_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdouble jarg3, jlong jarg4, jdouble jarg5, jlong jarg6, jobject jarg6_) {
  sgpp::pde::HeatEquationSolverWithStretching *arg1 = (sgpp::pde::HeatEquationSolverWithStretching *) 0 ;
  size_t arg2 ;
  double arg3 ;
  size_t arg4 ;
  double arg5 ;
  sgpp::base::DataVector *arg6 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  arg1 = *(sgpp::pde::HeatEquationSolverWithStretching **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = *(sgpp::base::DataVector **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->solveCrankNicolson(arg2,arg3,arg4,arg5,*arg6);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_HeatEquationSolverWithStretching_1setHeatCoefficient(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::pde::HeatEquationSolverWithStretching *arg1 = (sgpp::pde::HeatEquationSolverWithStretching *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::pde::HeatEquationSolverWithStretching **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setHeatCoefficient(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_HeatEquationSolverWithStretching_1initGridWithSmoothHeat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3, jdouble jarg4, jdouble jarg5) {
  sgpp::pde::HeatEquationSolverWithStretching *arg1 = (sgpp::pde::HeatEquationSolverWithStretching *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::pde::HeatEquationSolverWithStretching **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  {
    try {
      (arg1)->initGridWithSmoothHeat(*arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_HeatEquationSolverWithStretching_1initScreen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::pde::HeatEquationSolverWithStretching *arg1 = (sgpp::pde::HeatEquationSolverWithStretching *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::pde::HeatEquationSolverWithStretching **)&jarg1; 
  {
    try {
      (arg1)->initScreen();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_HeatEquationSolverWithStretching_1printGrid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jstring jarg4) {
  sgpp::pde::HeatEquationSolverWithStretching *arg1 = (sgpp::pde::HeatEquationSolverWithStretching *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  size_t arg3 ;
  std::string arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::pde::HeatEquationSolverWithStretching **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg3 = (size_t)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  {
    try {
      ((sgpp::pde::HeatEquationSolverWithStretching const *)arg1)->printGrid(*arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_HeatEquationSolverWithStretching_1printGridDomain(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_, jstring jarg5) {
  sgpp::pde::HeatEquationSolverWithStretching *arg1 = (sgpp::pde::HeatEquationSolverWithStretching *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  size_t arg3 ;
  sgpp::base::BoundingBox *arg4 = 0 ;
  std::string arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(sgpp::pde::HeatEquationSolverWithStretching **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = *(sgpp::base::BoundingBox **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::BoundingBox & reference is null");
    return ;
  } 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return ;
  (&arg5)->assign(arg5_pstr);
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  {
    try {
      ((sgpp::pde::HeatEquationSolverWithStretching const *)arg1)->printGridDomain(*arg2,arg3,*arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_HeatEquationSolverWithStretching_1printGridDomainStretching(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_, jstring jarg5) {
  sgpp::pde::HeatEquationSolverWithStretching *arg1 = (sgpp::pde::HeatEquationSolverWithStretching *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  size_t arg3 ;
  sgpp::base::Stretching *arg4 = 0 ;
  std::string arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(sgpp::pde::HeatEquationSolverWithStretching **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = *(sgpp::base::Stretching **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Stretching & reference is null");
    return ;
  } 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return ;
  (&arg5)->assign(arg5_pstr);
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  {
    try {
      ((sgpp::pde::HeatEquationSolverWithStretching const *)arg1)->printGridDomainStretching(*arg2,arg3,*arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_HeatEquationSolverWithStretching_1printSparseGrid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jboolean jarg4) {
  sgpp::pde::HeatEquationSolverWithStretching *arg1 = (sgpp::pde::HeatEquationSolverWithStretching *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  std::string arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::pde::HeatEquationSolverWithStretching **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false; 
  {
    try {
      ((sgpp::pde::HeatEquationSolverWithStretching const *)arg1)->printSparseGrid(*arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_HeatEquationSolverWithStretching_1printSparseGridExpTransform(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jboolean jarg4) {
  sgpp::pde::HeatEquationSolverWithStretching *arg1 = (sgpp::pde::HeatEquationSolverWithStretching *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  std::string arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::pde::HeatEquationSolverWithStretching **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false; 
  {
    try {
      ((sgpp::pde::HeatEquationSolverWithStretching const *)arg1)->printSparseGridExpTransform(*arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1EllipticPDESolver(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::pde::EllipticPDESolver *arg1 = (sgpp::pde::EllipticPDESolver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::pde::EllipticPDESolver **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_EllipticPDESolver_1solvePDE_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jdouble jarg5, jboolean jarg6) {
  sgpp::pde::EllipticPDESolver *arg1 = (sgpp::pde::EllipticPDESolver *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  size_t arg4 ;
  double arg5 ;
  bool arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::pde::EllipticPDESolver **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg4 = (size_t)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = jarg6 ? true : false; 
  {
    try {
      (arg1)->solvePDE(*arg2,*arg3,arg4,arg5,arg6);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_EllipticPDESolver_1solvePDE_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jdouble jarg5) {
  sgpp::pde::EllipticPDESolver *arg1 = (sgpp::pde::EllipticPDESolver *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  size_t arg4 ;
  double arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::pde::EllipticPDESolver **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg4 = (size_t)jarg4; 
  arg5 = (double)jarg5; 
  {
    try {
      (arg1)->solvePDE(*arg2,*arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1PoissonEquationSolver(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::pde::PoissonEquationSolver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::pde::PoissonEquationSolver *)new sgpp::pde::PoissonEquationSolver();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::pde::PoissonEquationSolver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1PoissonEquationSolver(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::pde::PoissonEquationSolver *arg1 = (sgpp::pde::PoissonEquationSolver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::pde::PoissonEquationSolver **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_PoissonEquationSolver_1constructGrid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  sgpp::pde::PoissonEquationSolver *arg1 = (sgpp::pde::PoissonEquationSolver *) 0 ;
  sgpp::base::BoundingBox *arg2 = 0 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::pde::PoissonEquationSolver **)&jarg1; 
  arg2 = *(sgpp::base::BoundingBox **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::BoundingBox & reference is null");
    return ;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      (arg1)->constructGrid(*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_PoissonEquationSolver_1solvePDE_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jdouble jarg5, jboolean jarg6) {
  sgpp::pde::PoissonEquationSolver *arg1 = (sgpp::pde::PoissonEquationSolver *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  size_t arg4 ;
  double arg5 ;
  bool arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::pde::PoissonEquationSolver **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg4 = (size_t)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = jarg6 ? true : false; 
  {
    try {
      (arg1)->solvePDE(*arg2,*arg3,arg4,arg5,arg6);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_PoissonEquationSolver_1solvePDE_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jdouble jarg5) {
  sgpp::pde::PoissonEquationSolver *arg1 = (sgpp::pde::PoissonEquationSolver *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  size_t arg4 ;
  double arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::pde::PoissonEquationSolver **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg4 = (size_t)jarg4; 
  arg5 = (double)jarg5; 
  {
    try {
      (arg1)->solvePDE(*arg2,*arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_PoissonEquationSolver_1initGridWithSmoothHeat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3, jdouble jarg4, jdouble jarg5) {
  sgpp::pde::PoissonEquationSolver *arg1 = (sgpp::pde::PoissonEquationSolver *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::pde::PoissonEquationSolver **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  {
    try {
      (arg1)->initGridWithSmoothHeat(*arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_PoissonEquationSolver_1initGridWithSmoothHeatFullDomain(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3, jdouble jarg4, jdouble jarg5) {
  sgpp::pde::PoissonEquationSolver *arg1 = (sgpp::pde::PoissonEquationSolver *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::pde::PoissonEquationSolver **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  {
    try {
      (arg1)->initGridWithSmoothHeatFullDomain(*arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_PoissonEquationSolver_1initGridWithExpHeat_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  sgpp::pde::PoissonEquationSolver *arg1 = (sgpp::pde::PoissonEquationSolver *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::pde::PoissonEquationSolver **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->initGridWithExpHeat(*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_PoissonEquationSolver_1initGridWithExpHeat_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::pde::PoissonEquationSolver *arg1 = (sgpp::pde::PoissonEquationSolver *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::pde::PoissonEquationSolver **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->initGridWithExpHeat(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_PoissonEquationSolver_1initGridWithExpHeatFullDomain_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  sgpp::pde::PoissonEquationSolver *arg1 = (sgpp::pde::PoissonEquationSolver *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::pde::PoissonEquationSolver **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->initGridWithExpHeatFullDomain(*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_PoissonEquationSolver_1initGridWithExpHeatFullDomain_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::pde::PoissonEquationSolver *arg1 = (sgpp::pde::PoissonEquationSolver *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::pde::PoissonEquationSolver **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->initGridWithExpHeatFullDomain(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_PoissonEquationSolver_1storeInnerRHS(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  sgpp::pde::PoissonEquationSolver *arg1 = (sgpp::pde::PoissonEquationSolver *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  std::string arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::pde::PoissonEquationSolver **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      (arg1)->storeInnerRHS(*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_PoissonEquationSolver_1storeInnerSolution(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jdouble jarg4, jstring jarg5) {
  sgpp::pde::PoissonEquationSolver *arg1 = (sgpp::pde::PoissonEquationSolver *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  size_t arg3 ;
  double arg4 ;
  std::string arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::pde::PoissonEquationSolver **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (double)jarg4; 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return ;
  (&arg5)->assign(arg5_pstr);
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  {
    try {
      (arg1)->storeInnerSolution(*arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_PoissonEquationSolver_1initScreen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::pde::PoissonEquationSolver *arg1 = (sgpp::pde::PoissonEquationSolver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::pde::PoissonEquationSolver **)&jarg1; 
  {
    try {
      (arg1)->initScreen();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_createOperationLaplace_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::Grid *arg1 = 0 ;
  sgpp::base::OperationMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::Grid **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::base::OperationMatrix *)sgpp::op_factory::createOperationLaplace(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::OperationMatrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_createOperationLaplace_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  sgpp::base::Grid *arg1 = 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::OperationMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::Grid **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::base::OperationMatrix *)sgpp::op_factory::createOperationLaplace(*arg1,*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::OperationMatrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_createOperationLTwoDotProduct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::Grid *arg1 = 0 ;
  sgpp::base::OperationMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::Grid **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::base::OperationMatrix *)sgpp::op_factory::createOperationLTwoDotProduct(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::OperationMatrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_createOperationLTwoDotExplicit_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::Grid *arg1 = 0 ;
  sgpp::base::OperationMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::Grid **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::base::OperationMatrix *)sgpp::op_factory::createOperationLTwoDotExplicit(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::OperationMatrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_createOperationLTwoDotExplicit_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  sgpp::base::DataMatrix *arg1 = (sgpp::base::DataMatrix *) 0 ;
  sgpp::base::Grid *arg2 = 0 ;
  sgpp::base::OperationMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::DataMatrix **)&jarg1; 
  arg2 = *(sgpp::base::Grid **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::base::OperationMatrix *)sgpp::op_factory::createOperationLTwoDotExplicit(arg1,*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::OperationMatrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_createOperationLaplaceEnhanced_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::Grid *arg1 = 0 ;
  sgpp::base::OperationMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::Grid **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::base::OperationMatrix *)sgpp::op_factory::createOperationLaplaceEnhanced(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::OperationMatrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_createOperationLaplaceEnhanced_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  sgpp::base::Grid *arg1 = 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::OperationMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::Grid **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::base::OperationMatrix *)sgpp::op_factory::createOperationLaplaceEnhanced(*arg1,*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::OperationMatrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OperationParabolicPDESolverSystemFreeBoundaries(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::pde::OperationParabolicPDESolverSystemFreeBoundaries *arg1 = (sgpp::pde::OperationParabolicPDESolverSystemFreeBoundaries *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::pde::OperationParabolicPDESolverSystemFreeBoundaries **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OperationParabolicPDESolverSystemFreeBoundaries_1mult(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::pde::OperationParabolicPDESolverSystemFreeBoundaries *arg1 = (sgpp::pde::OperationParabolicPDESolverSystemFreeBoundaries *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::pde::OperationParabolicPDESolverSystemFreeBoundaries **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->mult(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OperationParabolicPDESolverSystemFreeBoundaries_1generateRHS(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::pde::OperationParabolicPDESolverSystemFreeBoundaries *arg1 = (sgpp::pde::OperationParabolicPDESolverSystemFreeBoundaries *) 0 ;
  sgpp::base::DataVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::pde::OperationParabolicPDESolverSystemFreeBoundaries **)&jarg1; 
  {
    try {
      result = (sgpp::base::DataVector *)(arg1)->generateRHS();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::DataVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OperationParabolicPDESolverSystemFreeBoundaries_1getGridCoefficientsForCG(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::pde::OperationParabolicPDESolverSystemFreeBoundaries *arg1 = (sgpp::pde::OperationParabolicPDESolverSystemFreeBoundaries *) 0 ;
  sgpp::base::DataVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::pde::OperationParabolicPDESolverSystemFreeBoundaries **)&jarg1; 
  {
    try {
      result = (sgpp::base::DataVector *)(arg1)->getGridCoefficientsForCG();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::DataVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OperationMatrixLTwoDotExplicitPeriodic_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  sgpp::base::DataMatrix *arg1 = (sgpp::base::DataMatrix *) 0 ;
  sgpp::base::Grid *arg2 = (sgpp::base::Grid *) 0 ;
  sgpp::pde::OperationMatrixLTwoDotExplicitPeriodic *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::DataMatrix **)&jarg1; 
  arg2 = *(sgpp::base::Grid **)&jarg2; 
  {
    try {
      result = (sgpp::pde::OperationMatrixLTwoDotExplicitPeriodic *)new sgpp::pde::OperationMatrixLTwoDotExplicitPeriodic(arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::pde::OperationMatrixLTwoDotExplicitPeriodic **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OperationMatrixLTwoDotExplicitPeriodic_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::Grid *arg1 = (sgpp::base::Grid *) 0 ;
  sgpp::pde::OperationMatrixLTwoDotExplicitPeriodic *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::Grid **)&jarg1; 
  {
    try {
      result = (sgpp::pde::OperationMatrixLTwoDotExplicitPeriodic *)new sgpp::pde::OperationMatrixLTwoDotExplicitPeriodic(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::pde::OperationMatrixLTwoDotExplicitPeriodic **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OperationMatrixLTwoDotExplicitPeriodic(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::pde::OperationMatrixLTwoDotExplicitPeriodic *arg1 = (sgpp::pde::OperationMatrixLTwoDotExplicitPeriodic *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::pde::OperationMatrixLTwoDotExplicitPeriodic **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OperationMatrixLTwoDotExplicitPeriodic_1mult(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::pde::OperationMatrixLTwoDotExplicitPeriodic *arg1 = (sgpp::pde::OperationMatrixLTwoDotExplicitPeriodic *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::pde::OperationMatrixLTwoDotExplicitPeriodic **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->mult(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OperationMatrixLTwoDotPeriodic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::GridStorage *arg1 = (sgpp::base::GridStorage *) 0 ;
  sgpp::pde::OperationMatrixLTwoDotPeriodic *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::GridStorage **)&jarg1; 
  {
    try {
      result = (sgpp::pde::OperationMatrixLTwoDotPeriodic *)new sgpp::pde::OperationMatrixLTwoDotPeriodic(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::pde::OperationMatrixLTwoDotPeriodic **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OperationMatrixLTwoDotPeriodic(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::pde::OperationMatrixLTwoDotPeriodic *arg1 = (sgpp::pde::OperationMatrixLTwoDotPeriodic *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::pde::OperationMatrixLTwoDotPeriodic **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OperationMatrixLTwoDotPeriodic_1mult(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::pde::OperationMatrixLTwoDotPeriodic *arg1 = (sgpp::pde::OperationMatrixLTwoDotPeriodic *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::pde::OperationMatrixLTwoDotPeriodic **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->mult(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1SGSolver(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  size_t arg1 ;
  double arg2 ;
  sgpp::solver::SGSolver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      result = (sgpp::solver::SGSolver *)new sgpp::solver::SGSolver(arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::solver::SGSolver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1SGSolver(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::solver::SGSolver *arg1 = (sgpp::solver::SGSolver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::solver::SGSolver **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_SGSolver_1getNumberIterations(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::solver::SGSolver *arg1 = (sgpp::solver::SGSolver *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::solver::SGSolver **)&jarg1; 
  {
    try {
      result = (arg1)->getNumberIterations();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_SGSolver_1getResiduum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::solver::SGSolver *arg1 = (sgpp::solver::SGSolver *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::solver::SGSolver **)&jarg1; 
  {
    try {
      result = (double)(arg1)->getResiduum();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_SGSolver_1setMaxIterations(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::solver::SGSolver *arg1 = (sgpp::solver::SGSolver *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::solver::SGSolver **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      (arg1)->setMaxIterations(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_SGSolver_1setEpsilon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::solver::SGSolver *arg1 = (sgpp::solver::SGSolver *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::solver::SGSolver **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setEpsilon(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_SGSolver_1getEpsilon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::solver::SGSolver *arg1 = (sgpp::solver::SGSolver *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::solver::SGSolver **)&jarg1; 
  {
    try {
      result = (double)(arg1)->getEpsilon();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_DEFAULT_1RES_1THRESHOLD_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(-1.0);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1SLESolver(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::solver::SLESolver *arg1 = (sgpp::solver::SLESolver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::solver::SLESolver **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_SLESolver_1solve_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jboolean jarg5, jboolean jarg6, jdouble jarg7) {
  sgpp::solver::SLESolver *arg1 = (sgpp::solver::SLESolver *) 0 ;
  sgpp::base::OperationMatrix *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  sgpp::base::DataVector *arg4 = 0 ;
  bool arg5 ;
  bool arg6 ;
  double arg7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(sgpp::solver::SLESolver **)&jarg1; 
  arg2 = *(sgpp::base::OperationMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::OperationMatrix & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg4 = *(sgpp::base::DataVector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  arg7 = (double)jarg7; 
  {
    try {
      (arg1)->solve(*arg2,*arg3,*arg4,arg5,arg6,arg7);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_SLESolver_1solve_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jboolean jarg5, jboolean jarg6) {
  sgpp::solver::SLESolver *arg1 = (sgpp::solver::SLESolver *) 0 ;
  sgpp::base::OperationMatrix *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  sgpp::base::DataVector *arg4 = 0 ;
  bool arg5 ;
  bool arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(sgpp::solver::SLESolver **)&jarg1; 
  arg2 = *(sgpp::base::OperationMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::OperationMatrix & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg4 = *(sgpp::base::DataVector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  {
    try {
      (arg1)->solve(*arg2,*arg3,*arg4,arg5,arg6);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_SLESolver_1solve_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jboolean jarg5) {
  sgpp::solver::SLESolver *arg1 = (sgpp::solver::SLESolver *) 0 ;
  sgpp::base::OperationMatrix *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  sgpp::base::DataVector *arg4 = 0 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(sgpp::solver::SLESolver **)&jarg1; 
  arg2 = *(sgpp::base::OperationMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::OperationMatrix & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg4 = *(sgpp::base::DataVector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg5 = jarg5 ? true : false; 
  {
    try {
      (arg1)->solve(*arg2,*arg3,*arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_SLESolver_1solve_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  sgpp::solver::SLESolver *arg1 = (sgpp::solver::SLESolver *) 0 ;
  sgpp::base::OperationMatrix *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  sgpp::base::DataVector *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(sgpp::solver::SLESolver **)&jarg1; 
  arg2 = *(sgpp::base::OperationMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::OperationMatrix & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg4 = *(sgpp::base::DataVector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->solve(*arg2,*arg3,*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1ODESolver(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::solver::ODESolver *arg1 = (sgpp::solver::ODESolver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::solver::ODESolver **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_ODESolver_1solve_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4, jboolean jarg5) {
  sgpp::solver::ODESolver *arg1 = (sgpp::solver::ODESolver *) 0 ;
  sgpp::solver::SLESolver *arg2 = 0 ;
  sgpp::solver::OperationParabolicPDESolverSystem *arg3 = 0 ;
  bool arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::solver::ODESolver **)&jarg1; 
  arg2 = *(sgpp::solver::SLESolver **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::solver::SLESolver & reference is null");
    return ;
  } 
  arg3 = *(sgpp::solver::OperationParabolicPDESolverSystem **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::solver::OperationParabolicPDESolverSystem & reference is null");
    return ;
  } 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  {
    try {
      (arg1)->solve(*arg2,*arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_ODESolver_1solve_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  sgpp::solver::ODESolver *arg1 = (sgpp::solver::ODESolver *) 0 ;
  sgpp::solver::SLESolver *arg2 = 0 ;
  sgpp::solver::OperationParabolicPDESolverSystem *arg3 = 0 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::solver::ODESolver **)&jarg1; 
  arg2 = *(sgpp::solver::SLESolver **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::solver::SLESolver & reference is null");
    return ;
  } 
  arg3 = *(sgpp::solver::OperationParabolicPDESolverSystem **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::solver::OperationParabolicPDESolverSystem & reference is null");
    return ;
  } 
  arg4 = jarg4 ? true : false; 
  {
    try {
      (arg1)->solve(*arg2,*arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_ODESolver_1solve_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::solver::ODESolver *arg1 = (sgpp::solver::ODESolver *) 0 ;
  sgpp::solver::SLESolver *arg2 = 0 ;
  sgpp::solver::OperationParabolicPDESolverSystem *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::solver::ODESolver **)&jarg1; 
  arg2 = *(sgpp::solver::SLESolver **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::solver::SLESolver & reference is null");
    return ;
  } 
  arg3 = *(sgpp::solver::OperationParabolicPDESolverSystem **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::solver::OperationParabolicPDESolverSystem & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->solve(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1ConjugateGradients(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  size_t arg1 ;
  double arg2 ;
  sgpp::solver::ConjugateGradients *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      result = (sgpp::solver::ConjugateGradients *)new SwigDirector_ConjugateGradients(jenv,arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::solver::ConjugateGradients **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1ConjugateGradients(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::solver::ConjugateGradients *arg1 = (sgpp::solver::ConjugateGradients *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::solver::ConjugateGradients **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_ConjugateGradients_1solve_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jboolean jarg5, jboolean jarg6, jdouble jarg7) {
  sgpp::solver::ConjugateGradients *arg1 = (sgpp::solver::ConjugateGradients *) 0 ;
  sgpp::base::OperationMatrix *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  sgpp::base::DataVector *arg4 = 0 ;
  bool arg5 ;
  bool arg6 ;
  double arg7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(sgpp::solver::ConjugateGradients **)&jarg1; 
  arg2 = *(sgpp::base::OperationMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::OperationMatrix & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg4 = *(sgpp::base::DataVector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  arg7 = (double)jarg7; 
  {
    try {
      (arg1)->solve(*arg2,*arg3,*arg4,arg5,arg6,arg7);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_ConjugateGradients_1solveSwigExplicitConjugateGradients_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jboolean jarg5, jboolean jarg6, jdouble jarg7) {
  sgpp::solver::ConjugateGradients *arg1 = (sgpp::solver::ConjugateGradients *) 0 ;
  sgpp::base::OperationMatrix *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  sgpp::base::DataVector *arg4 = 0 ;
  bool arg5 ;
  bool arg6 ;
  double arg7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(sgpp::solver::ConjugateGradients **)&jarg1; 
  arg2 = *(sgpp::base::OperationMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::OperationMatrix & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg4 = *(sgpp::base::DataVector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  arg7 = (double)jarg7; 
  {
    try {
      (arg1)->sgpp::solver::ConjugateGradients::solve(*arg2,*arg3,*arg4,arg5,arg6,arg7);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_ConjugateGradients_1solve_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jboolean jarg5, jboolean jarg6) {
  sgpp::solver::ConjugateGradients *arg1 = (sgpp::solver::ConjugateGradients *) 0 ;
  sgpp::base::OperationMatrix *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  sgpp::base::DataVector *arg4 = 0 ;
  bool arg5 ;
  bool arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(sgpp::solver::ConjugateGradients **)&jarg1; 
  arg2 = *(sgpp::base::OperationMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::OperationMatrix & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg4 = *(sgpp::base::DataVector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  {
    try {
      (arg1)->solve(*arg2,*arg3,*arg4,arg5,arg6);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_ConjugateGradients_1solveSwigExplicitConjugateGradients_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jboolean jarg5, jboolean jarg6) {
  sgpp::solver::ConjugateGradients *arg1 = (sgpp::solver::ConjugateGradients *) 0 ;
  sgpp::base::OperationMatrix *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  sgpp::base::DataVector *arg4 = 0 ;
  bool arg5 ;
  bool arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(sgpp::solver::ConjugateGradients **)&jarg1; 
  arg2 = *(sgpp::base::OperationMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::OperationMatrix & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg4 = *(sgpp::base::DataVector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  {
    try {
      (arg1)->sgpp::solver::ConjugateGradients::solve(*arg2,*arg3,*arg4,arg5,arg6);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_ConjugateGradients_1solve_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jboolean jarg5) {
  sgpp::solver::ConjugateGradients *arg1 = (sgpp::solver::ConjugateGradients *) 0 ;
  sgpp::base::OperationMatrix *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  sgpp::base::DataVector *arg4 = 0 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(sgpp::solver::ConjugateGradients **)&jarg1; 
  arg2 = *(sgpp::base::OperationMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::OperationMatrix & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg4 = *(sgpp::base::DataVector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg5 = jarg5 ? true : false; 
  {
    try {
      (arg1)->solve(*arg2,*arg3,*arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_ConjugateGradients_1solveSwigExplicitConjugateGradients_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jboolean jarg5) {
  sgpp::solver::ConjugateGradients *arg1 = (sgpp::solver::ConjugateGradients *) 0 ;
  sgpp::base::OperationMatrix *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  sgpp::base::DataVector *arg4 = 0 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(sgpp::solver::ConjugateGradients **)&jarg1; 
  arg2 = *(sgpp::base::OperationMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::OperationMatrix & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg4 = *(sgpp::base::DataVector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg5 = jarg5 ? true : false; 
  {
    try {
      (arg1)->sgpp::solver::ConjugateGradients::solve(*arg2,*arg3,*arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_ConjugateGradients_1solve_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  sgpp::solver::ConjugateGradients *arg1 = (sgpp::solver::ConjugateGradients *) 0 ;
  sgpp::base::OperationMatrix *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  sgpp::base::DataVector *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(sgpp::solver::ConjugateGradients **)&jarg1; 
  arg2 = *(sgpp::base::OperationMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::OperationMatrix & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg4 = *(sgpp::base::DataVector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->solve(*arg2,*arg3,*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_ConjugateGradients_1solveSwigExplicitConjugateGradients_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  sgpp::solver::ConjugateGradients *arg1 = (sgpp::solver::ConjugateGradients *) 0 ;
  sgpp::base::OperationMatrix *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  sgpp::base::DataVector *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(sgpp::solver::ConjugateGradients **)&jarg1; 
  arg2 = *(sgpp::base::OperationMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::OperationMatrix & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg4 = *(sgpp::base::DataVector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->sgpp::solver::ConjugateGradients::solve(*arg2,*arg3,*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_ConjugateGradients_1starting(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::solver::ConjugateGradients *arg1 = (sgpp::solver::ConjugateGradients *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::solver::ConjugateGradients **)&jarg1; 
  {
    try {
      (arg1)->starting();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_ConjugateGradients_1startingSwigExplicitConjugateGradients(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::solver::ConjugateGradients *arg1 = (sgpp::solver::ConjugateGradients *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::solver::ConjugateGradients **)&jarg1; 
  {
    try {
      (arg1)->sgpp::solver::ConjugateGradients::starting();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_ConjugateGradients_1calcStarting(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::solver::ConjugateGradients *arg1 = (sgpp::solver::ConjugateGradients *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::solver::ConjugateGradients **)&jarg1; 
  {
    try {
      (arg1)->calcStarting();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_ConjugateGradients_1calcStartingSwigExplicitConjugateGradients(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::solver::ConjugateGradients *arg1 = (sgpp::solver::ConjugateGradients *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::solver::ConjugateGradients **)&jarg1; 
  {
    try {
      (arg1)->sgpp::solver::ConjugateGradients::calcStarting();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_ConjugateGradients_1iterationComplete(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::solver::ConjugateGradients *arg1 = (sgpp::solver::ConjugateGradients *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::solver::ConjugateGradients **)&jarg1; 
  {
    try {
      (arg1)->iterationComplete();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_ConjugateGradients_1iterationCompleteSwigExplicitConjugateGradients(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::solver::ConjugateGradients *arg1 = (sgpp::solver::ConjugateGradients *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::solver::ConjugateGradients **)&jarg1; 
  {
    try {
      (arg1)->sgpp::solver::ConjugateGradients::iterationComplete();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_ConjugateGradients_1complete(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::solver::ConjugateGradients *arg1 = (sgpp::solver::ConjugateGradients *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::solver::ConjugateGradients **)&jarg1; 
  {
    try {
      (arg1)->complete();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_ConjugateGradients_1completeSwigExplicitConjugateGradients(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::solver::ConjugateGradients *arg1 = (sgpp::solver::ConjugateGradients *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::solver::ConjugateGradients **)&jarg1; 
  {
    try {
      (arg1)->sgpp::solver::ConjugateGradients::complete();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_ConjugateGradients_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  sgpp::solver::ConjugateGradients *obj = *((sgpp::solver::ConjugateGradients **)&objarg);
  (void)jcls;
  SwigDirector_ConjugateGradients *director = dynamic_cast<SwigDirector_ConjugateGradients *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_ConjugateGradients_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  sgpp::solver::ConjugateGradients *obj = *((sgpp::solver::ConjugateGradients **)&objarg);
  SwigDirector_ConjugateGradients *director = dynamic_cast<SwigDirector_ConjugateGradients *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1BiCGStab(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  size_t arg1 ;
  double arg2 ;
  sgpp::solver::BiCGStab *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      result = (sgpp::solver::BiCGStab *)new sgpp::solver::BiCGStab(arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::solver::BiCGStab **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1BiCGStab(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::solver::BiCGStab *arg1 = (sgpp::solver::BiCGStab *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::solver::BiCGStab **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_BiCGStab_1solve_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jboolean jarg5, jboolean jarg6, jdouble jarg7) {
  sgpp::solver::BiCGStab *arg1 = (sgpp::solver::BiCGStab *) 0 ;
  sgpp::base::OperationMatrix *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  sgpp::base::DataVector *arg4 = 0 ;
  bool arg5 ;
  bool arg6 ;
  double arg7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(sgpp::solver::BiCGStab **)&jarg1; 
  arg2 = *(sgpp::base::OperationMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::OperationMatrix & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg4 = *(sgpp::base::DataVector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  arg7 = (double)jarg7; 
  {
    try {
      (arg1)->solve(*arg2,*arg3,*arg4,arg5,arg6,arg7);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_BiCGStab_1solve_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jboolean jarg5, jboolean jarg6) {
  sgpp::solver::BiCGStab *arg1 = (sgpp::solver::BiCGStab *) 0 ;
  sgpp::base::OperationMatrix *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  sgpp::base::DataVector *arg4 = 0 ;
  bool arg5 ;
  bool arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(sgpp::solver::BiCGStab **)&jarg1; 
  arg2 = *(sgpp::base::OperationMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::OperationMatrix & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg4 = *(sgpp::base::DataVector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  {
    try {
      (arg1)->solve(*arg2,*arg3,*arg4,arg5,arg6);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_BiCGStab_1solve_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jboolean jarg5) {
  sgpp::solver::BiCGStab *arg1 = (sgpp::solver::BiCGStab *) 0 ;
  sgpp::base::OperationMatrix *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  sgpp::base::DataVector *arg4 = 0 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(sgpp::solver::BiCGStab **)&jarg1; 
  arg2 = *(sgpp::base::OperationMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::OperationMatrix & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg4 = *(sgpp::base::DataVector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg5 = jarg5 ? true : false; 
  {
    try {
      (arg1)->solve(*arg2,*arg3,*arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_BiCGStab_1solve_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  sgpp::solver::BiCGStab *arg1 = (sgpp::solver::BiCGStab *) 0 ;
  sgpp::base::OperationMatrix *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  sgpp::base::DataVector *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(sgpp::solver::BiCGStab **)&jarg1; 
  arg2 = *(sgpp::base::OperationMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::OperationMatrix & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg4 = *(sgpp::base::DataVector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->solve(*arg2,*arg3,*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1Euler_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jdouble jarg3, jboolean jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  std::string arg1 ;
  size_t arg2 ;
  double arg3 ;
  bool arg4 ;
  sgpp::base::ScreenOutput *arg5 = (sgpp::base::ScreenOutput *) 0 ;
  sgpp::solver::Euler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg5_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (size_t)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = *(sgpp::base::ScreenOutput **)&jarg5; 
  {
    try {
      result = (sgpp::solver::Euler *)new sgpp::solver::Euler(arg1,arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::solver::Euler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1Euler_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jdouble jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  std::string arg1 ;
  size_t arg2 ;
  double arg3 ;
  bool arg4 ;
  sgpp::solver::Euler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (size_t)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = jarg4 ? true : false; 
  {
    try {
      result = (sgpp::solver::Euler *)new sgpp::solver::Euler(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::solver::Euler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1Euler_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  std::string arg1 ;
  size_t arg2 ;
  double arg3 ;
  sgpp::solver::Euler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (size_t)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      result = (sgpp::solver::Euler *)new sgpp::solver::Euler(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::solver::Euler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1Euler(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::solver::Euler *arg1 = (sgpp::solver::Euler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::solver::Euler **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_Euler_1solve_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4, jboolean jarg5) {
  sgpp::solver::Euler *arg1 = (sgpp::solver::Euler *) 0 ;
  sgpp::solver::SLESolver *arg2 = 0 ;
  sgpp::solver::OperationParabolicPDESolverSystem *arg3 = 0 ;
  bool arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::solver::Euler **)&jarg1; 
  arg2 = *(sgpp::solver::SLESolver **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::solver::SLESolver & reference is null");
    return ;
  } 
  arg3 = *(sgpp::solver::OperationParabolicPDESolverSystem **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::solver::OperationParabolicPDESolverSystem & reference is null");
    return ;
  } 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  {
    try {
      (arg1)->solve(*arg2,*arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_Euler_1solve_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  sgpp::solver::Euler *arg1 = (sgpp::solver::Euler *) 0 ;
  sgpp::solver::SLESolver *arg2 = 0 ;
  sgpp::solver::OperationParabolicPDESolverSystem *arg3 = 0 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::solver::Euler **)&jarg1; 
  arg2 = *(sgpp::solver::SLESolver **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::solver::SLESolver & reference is null");
    return ;
  } 
  arg3 = *(sgpp::solver::OperationParabolicPDESolverSystem **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::solver::OperationParabolicPDESolverSystem & reference is null");
    return ;
  } 
  arg4 = jarg4 ? true : false; 
  {
    try {
      (arg1)->solve(*arg2,*arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_Euler_1solve_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::solver::Euler *arg1 = (sgpp::solver::Euler *) 0 ;
  sgpp::solver::SLESolver *arg2 = 0 ;
  sgpp::solver::OperationParabolicPDESolverSystem *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::solver::Euler **)&jarg1; 
  arg2 = *(sgpp::solver::SLESolver **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::solver::SLESolver & reference is null");
    return ;
  } 
  arg3 = *(sgpp::solver::OperationParabolicPDESolverSystem **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::solver::OperationParabolicPDESolverSystem & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->solve(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1CrankNicolson_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  size_t arg1 ;
  double arg2 ;
  sgpp::base::ScreenOutput *arg3 = (sgpp::base::ScreenOutput *) 0 ;
  sgpp::solver::CrankNicolson *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = (size_t)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = *(sgpp::base::ScreenOutput **)&jarg3; 
  {
    try {
      result = (sgpp::solver::CrankNicolson *)new sgpp::solver::CrankNicolson(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::solver::CrankNicolson **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1CrankNicolson_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  size_t arg1 ;
  double arg2 ;
  sgpp::solver::CrankNicolson *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      result = (sgpp::solver::CrankNicolson *)new sgpp::solver::CrankNicolson(arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::solver::CrankNicolson **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1CrankNicolson(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::solver::CrankNicolson *arg1 = (sgpp::solver::CrankNicolson *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::solver::CrankNicolson **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_CrankNicolson_1solve_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4, jboolean jarg5) {
  sgpp::solver::CrankNicolson *arg1 = (sgpp::solver::CrankNicolson *) 0 ;
  sgpp::solver::SLESolver *arg2 = 0 ;
  sgpp::solver::OperationParabolicPDESolverSystem *arg3 = 0 ;
  bool arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::solver::CrankNicolson **)&jarg1; 
  arg2 = *(sgpp::solver::SLESolver **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::solver::SLESolver & reference is null");
    return ;
  } 
  arg3 = *(sgpp::solver::OperationParabolicPDESolverSystem **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::solver::OperationParabolicPDESolverSystem & reference is null");
    return ;
  } 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  {
    try {
      (arg1)->solve(*arg2,*arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_CrankNicolson_1solve_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  sgpp::solver::CrankNicolson *arg1 = (sgpp::solver::CrankNicolson *) 0 ;
  sgpp::solver::SLESolver *arg2 = 0 ;
  sgpp::solver::OperationParabolicPDESolverSystem *arg3 = 0 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::solver::CrankNicolson **)&jarg1; 
  arg2 = *(sgpp::solver::SLESolver **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::solver::SLESolver & reference is null");
    return ;
  } 
  arg3 = *(sgpp::solver::OperationParabolicPDESolverSystem **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::solver::OperationParabolicPDESolverSystem & reference is null");
    return ;
  } 
  arg4 = jarg4 ? true : false; 
  {
    try {
      (arg1)->solve(*arg2,*arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_CrankNicolson_1solve_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::solver::CrankNicolson *arg1 = (sgpp::solver::CrankNicolson *) 0 ;
  sgpp::solver::SLESolver *arg2 = 0 ;
  sgpp::solver::OperationParabolicPDESolverSystem *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::solver::CrankNicolson **)&jarg1; 
  arg2 = *(sgpp::solver::SLESolver **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::solver::SLESolver & reference is null");
    return ;
  } 
  arg3 = *(sgpp::solver::OperationParabolicPDESolverSystem **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::solver::OperationParabolicPDESolverSystem & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->solve(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_SLESolverConfiguration_1type_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  sgpp::solver::SLESolverConfiguration *arg1 = (sgpp::solver::SLESolverConfiguration *) 0 ;
  sgpp::solver::SLESolverType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::solver::SLESolverConfiguration **)&jarg1; 
  arg2 = (sgpp::solver::SLESolverType)jarg2; 
  if (arg1) (arg1)->type_ = arg2;
}


SWIGEXPORT jint JNICALL Java_sgpp_jsgppJNI_SLESolverConfiguration_1type_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  sgpp::solver::SLESolverConfiguration *arg1 = (sgpp::solver::SLESolverConfiguration *) 0 ;
  sgpp::solver::SLESolverType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::solver::SLESolverConfiguration **)&jarg1; 
  result = (sgpp::solver::SLESolverType) ((arg1)->type_);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_SLESolverConfiguration_1eps_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::solver::SLESolverConfiguration *arg1 = (sgpp::solver::SLESolverConfiguration *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::solver::SLESolverConfiguration **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->eps_ = arg2;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_SLESolverConfiguration_1eps_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::solver::SLESolverConfiguration *arg1 = (sgpp::solver::SLESolverConfiguration *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::solver::SLESolverConfiguration **)&jarg1; 
  result = (double) ((arg1)->eps_);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_SLESolverConfiguration_1maxIterations_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::solver::SLESolverConfiguration *arg1 = (sgpp::solver::SLESolverConfiguration *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::solver::SLESolverConfiguration **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->maxIterations_ = arg2;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_SLESolverConfiguration_1maxIterations_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::solver::SLESolverConfiguration *arg1 = (sgpp::solver::SLESolverConfiguration *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::solver::SLESolverConfiguration **)&jarg1; 
  result =  ((arg1)->maxIterations_);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_SLESolverConfiguration_1threshold_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::solver::SLESolverConfiguration *arg1 = (sgpp::solver::SLESolverConfiguration *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::solver::SLESolverConfiguration **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->threshold_ = arg2;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_SLESolverConfiguration_1threshold_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::solver::SLESolverConfiguration *arg1 = (sgpp::solver::SLESolverConfiguration *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::solver::SLESolverConfiguration **)&jarg1; 
  result = (double) ((arg1)->threshold_);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1SLESolverConfiguration(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::solver::SLESolverConfiguration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::solver::SLESolverConfiguration *)new sgpp::solver::SLESolverConfiguration();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::solver::SLESolverConfiguration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1SLESolverConfiguration(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::solver::SLESolverConfiguration *arg1 = (sgpp::solver::SLESolverConfiguration *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::solver::SLESolverConfiguration **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_SLESolverSPConfiguration_1type_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  sgpp::solver::SLESolverSPConfiguration *arg1 = (sgpp::solver::SLESolverSPConfiguration *) 0 ;
  sgpp::solver::SLESolverType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::solver::SLESolverSPConfiguration **)&jarg1; 
  arg2 = (sgpp::solver::SLESolverType)jarg2; 
  if (arg1) (arg1)->type_ = arg2;
}


SWIGEXPORT jint JNICALL Java_sgpp_jsgppJNI_SLESolverSPConfiguration_1type_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  sgpp::solver::SLESolverSPConfiguration *arg1 = (sgpp::solver::SLESolverSPConfiguration *) 0 ;
  sgpp::solver::SLESolverType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::solver::SLESolverSPConfiguration **)&jarg1; 
  result = (sgpp::solver::SLESolverType) ((arg1)->type_);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_SLESolverSPConfiguration_1eps_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  sgpp::solver::SLESolverSPConfiguration *arg1 = (sgpp::solver::SLESolverSPConfiguration *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::solver::SLESolverSPConfiguration **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->eps_ = arg2;
}


SWIGEXPORT jfloat JNICALL Java_sgpp_jsgppJNI_SLESolverSPConfiguration_1eps_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  sgpp::solver::SLESolverSPConfiguration *arg1 = (sgpp::solver::SLESolverSPConfiguration *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::solver::SLESolverSPConfiguration **)&jarg1; 
  result = (float) ((arg1)->eps_);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_SLESolverSPConfiguration_1maxIterations_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::solver::SLESolverSPConfiguration *arg1 = (sgpp::solver::SLESolverSPConfiguration *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::solver::SLESolverSPConfiguration **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->maxIterations_ = arg2;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_SLESolverSPConfiguration_1maxIterations_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::solver::SLESolverSPConfiguration *arg1 = (sgpp::solver::SLESolverSPConfiguration *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::solver::SLESolverSPConfiguration **)&jarg1; 
  result =  ((arg1)->maxIterations_);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_SLESolverSPConfiguration_1threshold_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  sgpp::solver::SLESolverSPConfiguration *arg1 = (sgpp::solver::SLESolverSPConfiguration *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::solver::SLESolverSPConfiguration **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->threshold_ = arg2;
}


SWIGEXPORT jfloat JNICALL Java_sgpp_jsgppJNI_SLESolverSPConfiguration_1threshold_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  sgpp::solver::SLESolverSPConfiguration *arg1 = (sgpp::solver::SLESolverSPConfiguration *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::solver::SLESolverSPConfiguration **)&jarg1; 
  result = (float) ((arg1)->threshold_);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1SLESolverSPConfiguration(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::solver::SLESolverSPConfiguration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::solver::SLESolverSPConfiguration *)new sgpp::solver::SLESolverSPConfiguration();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::solver::SLESolverSPConfiguration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1SLESolverSPConfiguration(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::solver::SLESolverSPConfiguration *arg1 = (sgpp::solver::SLESolverSPConfiguration *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::solver::SLESolverSPConfiguration **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1DensitySystemMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jdouble jarg4) {
  jlong jresult = 0 ;
  sgpp::base::Grid *arg1 = 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  sgpp::base::OperationMatrix *arg3 = 0 ;
  double arg4 ;
  sgpp::datadriven::DensitySystemMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::base::Grid **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::base::OperationMatrix **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::OperationMatrix & reference is null");
    return 0;
  } 
  arg4 = (double)jarg4; 
  {
    try {
      result = (sgpp::datadriven::DensitySystemMatrix *)new sgpp::datadriven::DensitySystemMatrix(*arg1,*arg2,*arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::DensitySystemMatrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DensitySystemMatrix_1mult(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::datadriven::DensitySystemMatrix *arg1 = (sgpp::datadriven::DensitySystemMatrix *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::datadriven::DensitySystemMatrix **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->mult(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DensitySystemMatrix_1generateb(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::datadriven::DensitySystemMatrix *arg1 = (sgpp::datadriven::DensitySystemMatrix *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::datadriven::DensitySystemMatrix **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->generateb(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1DensitySystemMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::datadriven::DensitySystemMatrix *arg1 = (sgpp::datadriven::DensitySystemMatrix *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::datadriven::DensitySystemMatrix **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_BatchConfiguration_1filename_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  sgpp::base::BatchConfiguration *arg1 = (sgpp::base::BatchConfiguration *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BatchConfiguration **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->filename_ = *arg2;
}


SWIGEXPORT jstring JNICALL Java_sgpp_jsgppJNI_BatchConfiguration_1filename_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  sgpp::base::BatchConfiguration *arg1 = (sgpp::base::BatchConfiguration *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BatchConfiguration **)&jarg1; 
  result = (std::string *) & ((arg1)->filename_);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_BatchConfiguration_1batchsize_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::base::BatchConfiguration *arg1 = (sgpp::base::BatchConfiguration *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BatchConfiguration **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->batchsize_ = arg2;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_BatchConfiguration_1batchsize_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::BatchConfiguration *arg1 = (sgpp::base::BatchConfiguration *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BatchConfiguration **)&jarg1; 
  result =  ((arg1)->batchsize_);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_BatchConfiguration_1samples_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::base::BatchConfiguration *arg1 = (sgpp::base::BatchConfiguration *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BatchConfiguration **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->samples_ = arg2;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_BatchConfiguration_1samples_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::BatchConfiguration *arg1 = (sgpp::base::BatchConfiguration *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BatchConfiguration **)&jarg1; 
  result =  ((arg1)->samples_);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_BatchConfiguration_1seed_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  sgpp::base::BatchConfiguration *arg1 = (sgpp::base::BatchConfiguration *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BatchConfiguration **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->seed_ = arg2;
}


SWIGEXPORT jint JNICALL Java_sgpp_jsgppJNI_BatchConfiguration_1seed_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  sgpp::base::BatchConfiguration *arg1 = (sgpp::base::BatchConfiguration *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BatchConfiguration **)&jarg1; 
  result = (int) ((arg1)->seed_);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_BatchConfiguration_1wMode_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  sgpp::base::BatchConfiguration *arg1 = (sgpp::base::BatchConfiguration *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BatchConfiguration **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->wMode_ = arg2;
}


SWIGEXPORT jint JNICALL Java_sgpp_jsgppJNI_BatchConfiguration_1wMode_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  sgpp::base::BatchConfiguration *arg1 = (sgpp::base::BatchConfiguration *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BatchConfiguration **)&jarg1; 
  result = (int) ((arg1)->wMode_);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_BatchConfiguration_1wArgument_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::base::BatchConfiguration *arg1 = (sgpp::base::BatchConfiguration *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BatchConfiguration **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->wArgument_ = arg2;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_BatchConfiguration_1wArgument_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::base::BatchConfiguration *arg1 = (sgpp::base::BatchConfiguration *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BatchConfiguration **)&jarg1; 
  result = (double) ((arg1)->wArgument_);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_BatchConfiguration_1refineEvery_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::base::BatchConfiguration *arg1 = (sgpp::base::BatchConfiguration *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BatchConfiguration **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->refineEvery_ = arg2;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_BatchConfiguration_1refineEvery_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::BatchConfiguration *arg1 = (sgpp::base::BatchConfiguration *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BatchConfiguration **)&jarg1; 
  result =  ((arg1)->refineEvery_);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_BatchConfiguration_1verbose_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  sgpp::base::BatchConfiguration *arg1 = (sgpp::base::BatchConfiguration *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BatchConfiguration **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->verbose_ = arg2;
}


SWIGEXPORT jboolean JNICALL Java_sgpp_jsgppJNI_BatchConfiguration_1verbose_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  sgpp::base::BatchConfiguration *arg1 = (sgpp::base::BatchConfiguration *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BatchConfiguration **)&jarg1; 
  result = (bool) ((arg1)->verbose_);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_BatchConfiguration_1stack_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::base::BatchConfiguration *arg1 = (sgpp::base::BatchConfiguration *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BatchConfiguration **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->stack_ = arg2;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_BatchConfiguration_1stack_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::BatchConfiguration *arg1 = (sgpp::base::BatchConfiguration *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BatchConfiguration **)&jarg1; 
  result =  ((arg1)->stack_);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_BatchConfiguration_1testsize_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::base::BatchConfiguration *arg1 = (sgpp::base::BatchConfiguration *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BatchConfiguration **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->testsize_ = arg2;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_BatchConfiguration_1testsize_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::BatchConfiguration *arg1 = (sgpp::base::BatchConfiguration *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BatchConfiguration **)&jarg1; 
  result =  ((arg1)->testsize_);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_BatchConfiguration_1lambda_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::base::BatchConfiguration *arg1 = (sgpp::base::BatchConfiguration *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BatchConfiguration **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->lambda_ = arg2;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_BatchConfiguration_1lambda_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::base::BatchConfiguration *arg1 = (sgpp::base::BatchConfiguration *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::BatchConfiguration **)&jarg1; 
  result = (double) ((arg1)->lambda_);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1BatchConfiguration(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::base::BatchConfiguration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::base::BatchConfiguration *)new sgpp::base::BatchConfiguration();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::BatchConfiguration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1BatchConfiguration(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::base::BatchConfiguration *arg1 = (sgpp::base::BatchConfiguration *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::base::BatchConfiguration **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DensityEstimationConfiguration_1type_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  sgpp::datadriven::DensityEstimationConfiguration *arg1 = (sgpp::datadriven::DensityEstimationConfiguration *) 0 ;
  sgpp::datadriven::DensityEstimationType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DensityEstimationConfiguration **)&jarg1; 
  arg2 = (sgpp::datadriven::DensityEstimationType)jarg2; 
  if (arg1) (arg1)->type_ = arg2;
}


SWIGEXPORT jint JNICALL Java_sgpp_jsgppJNI_DensityEstimationConfiguration_1type_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  sgpp::datadriven::DensityEstimationConfiguration *arg1 = (sgpp::datadriven::DensityEstimationConfiguration *) 0 ;
  sgpp::datadriven::DensityEstimationType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DensityEstimationConfiguration **)&jarg1; 
  result = (sgpp::datadriven::DensityEstimationType) ((arg1)->type_);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DensityEstimationConfiguration_1decomposition_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  sgpp::datadriven::DensityEstimationConfiguration *arg1 = (sgpp::datadriven::DensityEstimationConfiguration *) 0 ;
  sgpp::datadriven::MatrixDecompositionType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DensityEstimationConfiguration **)&jarg1; 
  arg2 = (sgpp::datadriven::MatrixDecompositionType)jarg2; 
  if (arg1) (arg1)->decomposition_ = arg2;
}


SWIGEXPORT jint JNICALL Java_sgpp_jsgppJNI_DensityEstimationConfiguration_1decomposition_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  sgpp::datadriven::DensityEstimationConfiguration *arg1 = (sgpp::datadriven::DensityEstimationConfiguration *) 0 ;
  sgpp::datadriven::MatrixDecompositionType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DensityEstimationConfiguration **)&jarg1; 
  result = (sgpp::datadriven::MatrixDecompositionType) ((arg1)->decomposition_);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DensityEstimationConfiguration_1iCholSweepsDecompose_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::datadriven::DensityEstimationConfiguration *arg1 = (sgpp::datadriven::DensityEstimationConfiguration *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DensityEstimationConfiguration **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->iCholSweepsDecompose_ = arg2;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DensityEstimationConfiguration_1iCholSweepsDecompose_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::DensityEstimationConfiguration *arg1 = (sgpp::datadriven::DensityEstimationConfiguration *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DensityEstimationConfiguration **)&jarg1; 
  result =  ((arg1)->iCholSweepsDecompose_);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DensityEstimationConfiguration_1iCholSweepsRefine_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::datadriven::DensityEstimationConfiguration *arg1 = (sgpp::datadriven::DensityEstimationConfiguration *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DensityEstimationConfiguration **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->iCholSweepsRefine_ = arg2;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DensityEstimationConfiguration_1iCholSweepsRefine_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::DensityEstimationConfiguration *arg1 = (sgpp::datadriven::DensityEstimationConfiguration *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DensityEstimationConfiguration **)&jarg1; 
  result =  ((arg1)->iCholSweepsRefine_);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DensityEstimationConfiguration_1iCholSweepsUpdateLambda_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::datadriven::DensityEstimationConfiguration *arg1 = (sgpp::datadriven::DensityEstimationConfiguration *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DensityEstimationConfiguration **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->iCholSweepsUpdateLambda_ = arg2;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DensityEstimationConfiguration_1iCholSweepsUpdateLambda_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::DensityEstimationConfiguration *arg1 = (sgpp::datadriven::DensityEstimationConfiguration *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DensityEstimationConfiguration **)&jarg1; 
  result =  ((arg1)->iCholSweepsUpdateLambda_);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DensityEstimationConfiguration_1iCholSweepsSolver_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::datadriven::DensityEstimationConfiguration *arg1 = (sgpp::datadriven::DensityEstimationConfiguration *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DensityEstimationConfiguration **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->iCholSweepsSolver_ = arg2;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DensityEstimationConfiguration_1iCholSweepsSolver_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::DensityEstimationConfiguration *arg1 = (sgpp::datadriven::DensityEstimationConfiguration *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DensityEstimationConfiguration **)&jarg1; 
  result =  ((arg1)->iCholSweepsSolver_);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1DensityEstimationConfiguration(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::datadriven::DensityEstimationConfiguration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::datadriven::DensityEstimationConfiguration *)new sgpp::datadriven::DensityEstimationConfiguration();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::DensityEstimationConfiguration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1DensityEstimationConfiguration(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::datadriven::DensityEstimationConfiguration *arg1 = (sgpp::datadriven::DensityEstimationConfiguration *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::datadriven::DensityEstimationConfiguration **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_RegularizationConfiguration_1type_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  sgpp::datadriven::RegularizationConfiguration *arg1 = (sgpp::datadriven::RegularizationConfiguration *) 0 ;
  sgpp::datadriven::RegularizationType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::RegularizationConfiguration **)&jarg1; 
  arg2 = (sgpp::datadriven::RegularizationType)jarg2; 
  if (arg1) (arg1)->type_ = arg2;
}


SWIGEXPORT jint JNICALL Java_sgpp_jsgppJNI_RegularizationConfiguration_1type_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  sgpp::datadriven::RegularizationConfiguration *arg1 = (sgpp::datadriven::RegularizationConfiguration *) 0 ;
  sgpp::datadriven::RegularizationType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::RegularizationConfiguration **)&jarg1; 
  result = (sgpp::datadriven::RegularizationType) ((arg1)->type_);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_RegularizationConfiguration_1lambda_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::datadriven::RegularizationConfiguration *arg1 = (sgpp::datadriven::RegularizationConfiguration *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::RegularizationConfiguration **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->lambda_ = arg2;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_RegularizationConfiguration_1lambda_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::datadriven::RegularizationConfiguration *arg1 = (sgpp::datadriven::RegularizationConfiguration *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::RegularizationConfiguration **)&jarg1; 
  result = (double) ((arg1)->lambda_);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_RegularizationConfiguration_1l1Ratio_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::datadriven::RegularizationConfiguration *arg1 = (sgpp::datadriven::RegularizationConfiguration *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::RegularizationConfiguration **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->l1Ratio_ = arg2;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_RegularizationConfiguration_1l1Ratio_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::datadriven::RegularizationConfiguration *arg1 = (sgpp::datadriven::RegularizationConfiguration *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::RegularizationConfiguration **)&jarg1; 
  result = (double) ((arg1)->l1Ratio_);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_RegularizationConfiguration_1exponentBase_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::datadriven::RegularizationConfiguration *arg1 = (sgpp::datadriven::RegularizationConfiguration *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::RegularizationConfiguration **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->exponentBase_ = arg2;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_RegularizationConfiguration_1exponentBase_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::datadriven::RegularizationConfiguration *arg1 = (sgpp::datadriven::RegularizationConfiguration *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::RegularizationConfiguration **)&jarg1; 
  result = (double) ((arg1)->exponentBase_);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1RegularizationConfiguration(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::datadriven::RegularizationConfiguration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::datadriven::RegularizationConfiguration *)new sgpp::datadriven::RegularizationConfiguration();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::RegularizationConfiguration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1RegularizationConfiguration(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::datadriven::RegularizationConfiguration *arg1 = (sgpp::datadriven::RegularizationConfiguration *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::datadriven::RegularizationConfiguration **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1Dataset_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::datadriven::Dataset *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::datadriven::Dataset *)new sgpp::datadriven::Dataset();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::Dataset **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1Dataset_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  sgpp::datadriven::Dataset *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (sgpp::datadriven::Dataset *)new sgpp::datadriven::Dataset(arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::Dataset **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_Dataset_1getNumberInstances(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::Dataset *arg1 = (sgpp::datadriven::Dataset *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::Dataset **)&jarg1; 
  {
    try {
      result = ((sgpp::datadriven::Dataset const *)arg1)->getNumberInstances();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_Dataset_1getDimension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::Dataset *arg1 = (sgpp::datadriven::Dataset *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::Dataset **)&jarg1; 
  {
    try {
      result = ((sgpp::datadriven::Dataset const *)arg1)->getDimension();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_Dataset_1getTargets(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::Dataset *arg1 = (sgpp::datadriven::Dataset *) 0 ;
  sgpp::base::DataVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::Dataset **)&jarg1; 
  {
    try {
      result = (sgpp::base::DataVector *) &(arg1)->getTargets();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::DataVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_Dataset_1getConstTargets(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::Dataset *arg1 = (sgpp::datadriven::Dataset *) 0 ;
  sgpp::base::DataVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::Dataset **)&jarg1; 
  {
    try {
      result = (sgpp::base::DataVector *) &((sgpp::datadriven::Dataset const *)arg1)->getTargets();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::DataVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_Dataset_1getData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::Dataset *arg1 = (sgpp::datadriven::Dataset *) 0 ;
  sgpp::base::DataMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::Dataset **)&jarg1; 
  {
    try {
      result = (sgpp::base::DataMatrix *) &(arg1)->getData();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::DataMatrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_Dataset_1getConstData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::Dataset *arg1 = (sgpp::datadriven::Dataset *) 0 ;
  sgpp::base::DataMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::Dataset **)&jarg1; 
  {
    try {
      result = (sgpp::base::DataMatrix *) &((sgpp::datadriven::Dataset const *)arg1)->getData();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::DataMatrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1Dataset(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::datadriven::Dataset *arg1 = (sgpp::datadriven::Dataset *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::datadriven::Dataset **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1ConvergenceMonitor(JNIEnv *jenv, jclass jcls, jdouble jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  double arg1 ;
  size_t arg2 ;
  size_t arg3 ;
  sgpp::datadriven::ConvergenceMonitor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (sgpp::datadriven::ConvergenceMonitor *)new sgpp::datadriven::ConvergenceMonitor(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::ConvergenceMonitor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1ConvergenceMonitor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::datadriven::ConvergenceMonitor *arg1 = (sgpp::datadriven::ConvergenceMonitor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::datadriven::ConvergenceMonitor **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_ConvergenceMonitor_1pushToBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  sgpp::datadriven::ConvergenceMonitor *arg1 = (sgpp::datadriven::ConvergenceMonitor *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::ConvergenceMonitor **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->pushToBuffer(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_sgpp_jsgppJNI_ConvergenceMonitor_1checkConvergence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  sgpp::datadriven::ConvergenceMonitor *arg1 = (sgpp::datadriven::ConvergenceMonitor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::ConvergenceMonitor **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->checkConvergence();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_ConvergenceMonitor_1nextRefCnt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::datadriven::ConvergenceMonitor *arg1 = (sgpp::datadriven::ConvergenceMonitor *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::ConvergenceMonitor **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->nextRefCnt = arg2;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_ConvergenceMonitor_1nextRefCnt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::ConvergenceMonitor *arg1 = (sgpp::datadriven::ConvergenceMonitor *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::ConvergenceMonitor **)&jarg1; 
  result =  ((arg1)->nextRefCnt);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_ConvergenceMonitor_1minRefInterval_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::datadriven::ConvergenceMonitor *arg1 = (sgpp::datadriven::ConvergenceMonitor *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::ConvergenceMonitor **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->minRefInterval = arg2;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_ConvergenceMonitor_1minRefInterval_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::ConvergenceMonitor *arg1 = (sgpp::datadriven::ConvergenceMonitor *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::ConvergenceMonitor **)&jarg1; 
  result =  ((arg1)->minRefInterval);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_ConvergenceMonitor_1validErrorDeclineBuffer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::datadriven::ConvergenceMonitor *arg1 = (sgpp::datadriven::ConvergenceMonitor *) 0 ;
  std::deque< double > arg2 ;
  std::deque< double > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::ConvergenceMonitor **)&jarg1; 
  argp2 = *(std::deque< double > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::deque< double >");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->validErrorDeclineBuffer = arg2;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_ConvergenceMonitor_1validErrorDeclineBuffer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::ConvergenceMonitor *arg1 = (sgpp::datadriven::ConvergenceMonitor *) 0 ;
  std::deque< double > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::ConvergenceMonitor **)&jarg1; 
  result =  ((arg1)->validErrorDeclineBuffer);
  *(std::deque< double > **)&jresult = new std::deque< double >((const std::deque< double > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_ConvergenceMonitor_1trainErrorDeclineBuffer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::datadriven::ConvergenceMonitor *arg1 = (sgpp::datadriven::ConvergenceMonitor *) 0 ;
  std::deque< double > arg2 ;
  std::deque< double > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::ConvergenceMonitor **)&jarg1; 
  argp2 = *(std::deque< double > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::deque< double >");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->trainErrorDeclineBuffer = arg2;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_ConvergenceMonitor_1trainErrorDeclineBuffer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::ConvergenceMonitor *arg1 = (sgpp::datadriven::ConvergenceMonitor *) 0 ;
  std::deque< double > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::ConvergenceMonitor **)&jarg1; 
  result =  ((arg1)->trainErrorDeclineBuffer);
  *(std::deque< double > **)&jresult = new std::deque< double >((const std::deque< double > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1DBMatDecompMatrixSolver(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::datadriven::DBMatDecompMatrixSolver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::datadriven::DBMatDecompMatrixSolver *)new sgpp::datadriven::DBMatDecompMatrixSolver();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::DBMatDecompMatrixSolver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1DBMatDecompMatrixSolver(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::datadriven::DBMatDecompMatrixSolver *arg1 = (sgpp::datadriven::DBMatDecompMatrixSolver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::datadriven::DBMatDecompMatrixSolver **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1DBMatDMSChol(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::datadriven::DBMatDMSChol *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::datadriven::DBMatDMSChol *)new sgpp::datadriven::DBMatDMSChol();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::DBMatDMSChol **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DBMatDMSChol_1solve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jdouble jarg5, jdouble jarg6) {
  sgpp::datadriven::DBMatDMSChol *arg1 = (sgpp::datadriven::DBMatDMSChol *) 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  sgpp::base::DataVector *arg4 = 0 ;
  double arg5 ;
  double arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(sgpp::datadriven::DBMatDMSChol **)&jarg1; 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg4 = *(sgpp::base::DataVector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return ;
  } 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  {
    try {
      ((sgpp::datadriven::DBMatDMSChol const *)arg1)->solve(*arg2,*arg3,(sgpp::base::DataVector const &)*arg4,arg5,arg6);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DBMatDMSChol_1choleskyUpdate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  sgpp::datadriven::DBMatDMSChol *arg1 = (sgpp::datadriven::DBMatDMSChol *) 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::datadriven::DBMatDMSChol **)&jarg1; 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return ;
  } 
  arg4 = jarg4 ? true : false; 
  {
    try {
      ((sgpp::datadriven::DBMatDMSChol const *)arg1)->choleskyUpdate(*arg2,(sgpp::base::DataVector const &)*arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DBMatDMSChol_1choleskyUpdate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::datadriven::DBMatDMSChol *arg1 = (sgpp::datadriven::DBMatDMSChol *) 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::datadriven::DBMatDMSChol **)&jarg1; 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::datadriven::DBMatDMSChol const *)arg1)->choleskyUpdate(*arg2,(sgpp::base::DataVector const &)*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DBMatDMSChol_1choleskyDowndate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  sgpp::datadriven::DBMatDMSChol *arg1 = (sgpp::datadriven::DBMatDMSChol *) 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::datadriven::DBMatDMSChol **)&jarg1; 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return ;
  } 
  arg4 = jarg4 ? true : false; 
  {
    try {
      ((sgpp::datadriven::DBMatDMSChol const *)arg1)->choleskyDowndate(*arg2,(sgpp::base::DataVector const &)*arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DBMatDMSChol_1choleskyDowndate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::datadriven::DBMatDMSChol *arg1 = (sgpp::datadriven::DBMatDMSChol *) 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::datadriven::DBMatDMSChol **)&jarg1; 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::datadriven::DBMatDMSChol const *)arg1)->choleskyDowndate(*arg2,(sgpp::base::DataVector const &)*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1DBMatDMSChol(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::datadriven::DBMatDMSChol *arg1 = (sgpp::datadriven::DBMatDMSChol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::datadriven::DBMatDMSChol **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1DBMatDMSDenseIChol(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  sgpp::datadriven::DensityEstimationConfiguration *arg1 = 0 ;
  sgpp::datadriven::Grid *arg2 = 0 ;
  double arg3 ;
  bool arg4 ;
  sgpp::datadriven::DBMatDMSDenseIChol *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::datadriven::DensityEstimationConfiguration **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::DensityEstimationConfiguration const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::datadriven::Grid **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::Grid & reference is null");
    return 0;
  } 
  arg3 = (double)jarg3; 
  arg4 = jarg4 ? true : false; 
  {
    try {
      result = (sgpp::datadriven::DBMatDMSDenseIChol *)new sgpp::datadriven::DBMatDMSDenseIChol((sgpp::datadriven::DensityEstimationConfiguration const &)*arg1,*arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::DBMatDMSDenseIChol **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1DBMatDMSDenseIChol(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::datadriven::DBMatDMSDenseIChol *arg1 = (sgpp::datadriven::DBMatDMSDenseIChol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::datadriven::DBMatDMSDenseIChol **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1DBMatOffline(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::datadriven::DBMatOffline *arg1 = (sgpp::datadriven::DBMatOffline *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::datadriven::DBMatOffline **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DBMatOffline_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::DBMatOffline *arg1 = (sgpp::datadriven::DBMatOffline *) 0 ;
  sgpp::datadriven::DBMatOffline *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DBMatOffline **)&jarg1; 
  {
    try {
      result = (sgpp::datadriven::DBMatOffline *)(arg1)->clone();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::DBMatOffline **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_sgpp_jsgppJNI_DBMatOffline_1isRefineable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  sgpp::datadriven::DBMatOffline *arg1 = (sgpp::datadriven::DBMatOffline *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DBMatOffline **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->isRefineable();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DBMatOffline_1getGridConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::DBMatOffline *arg1 = (sgpp::datadriven::DBMatOffline *) 0 ;
  sgpp::base::RegularGridConfiguration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DBMatOffline **)&jarg1; 
  {
    try {
      result = (sgpp::base::RegularGridConfiguration *) &(arg1)->getGridConfig();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::RegularGridConfiguration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DBMatOffline_1getAdaptivityConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::DBMatOffline *arg1 = (sgpp::datadriven::DBMatOffline *) 0 ;
  sgpp::base::AdpativityConfiguration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DBMatOffline **)&jarg1; 
  {
    try {
      result = (sgpp::base::AdpativityConfiguration *) &(arg1)->getAdaptivityConfig();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::AdpativityConfiguration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DBMatOffline_1getRegularizationConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::DBMatOffline *arg1 = (sgpp::datadriven::DBMatOffline *) 0 ;
  sgpp::datadriven::RegularizationConfiguration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DBMatOffline **)&jarg1; 
  {
    try {
      result = (sgpp::datadriven::RegularizationConfiguration *) &(arg1)->getRegularizationConfig();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::RegularizationConfiguration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DBMatOffline_1getDensityEstimationConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::DBMatOffline *arg1 = (sgpp::datadriven::DBMatOffline *) 0 ;
  sgpp::datadriven::DensityEstimationConfiguration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DBMatOffline **)&jarg1; 
  {
    try {
      result = (sgpp::datadriven::DensityEstimationConfiguration *) &(arg1)->getDensityEstimationConfig();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::DensityEstimationConfiguration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DBMatOffline_1getDecomposedMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::DBMatOffline *arg1 = (sgpp::datadriven::DBMatOffline *) 0 ;
  sgpp::datadriven::DataMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DBMatOffline **)&jarg1; 
  {
    try {
      result = (sgpp::datadriven::DataMatrix *) &(arg1)->getDecomposedMatrix();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::DataMatrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DBMatOffline_1getLhsMatrix_1ONLY_1FOR_1TESTING(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::DBMatOffline *arg1 = (sgpp::datadriven::DBMatOffline *) 0 ;
  sgpp::datadriven::DataMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DBMatOffline **)&jarg1; 
  {
    try {
      result = (sgpp::datadriven::DataMatrix *) &(arg1)->getLhsMatrix_ONLY_FOR_TESTING();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::DataMatrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DBMatOffline_1getGrid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::DBMatOffline *arg1 = (sgpp::datadriven::DBMatOffline *) 0 ;
  sgpp::datadriven::Grid *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DBMatOffline **)&jarg1; 
  {
    try {
      result = (sgpp::datadriven::Grid *) &(arg1)->getGrid();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::Grid **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DBMatOffline_1buildMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::datadriven::DBMatOffline *arg1 = (sgpp::datadriven::DBMatOffline *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DBMatOffline **)&jarg1; 
  {
    try {
      (arg1)->buildMatrix();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DBMatOffline_1decomposeMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::datadriven::DBMatOffline *arg1 = (sgpp::datadriven::DBMatOffline *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DBMatOffline **)&jarg1; 
  {
    try {
      (arg1)->decomposeMatrix();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DBMatOffline_1printMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::datadriven::DBMatOffline *arg1 = (sgpp::datadriven::DBMatOffline *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DBMatOffline **)&jarg1; 
  {
    try {
      (arg1)->printMatrix();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DBMatOffline_1store(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  sgpp::datadriven::DBMatOffline *arg1 = (sgpp::datadriven::DBMatOffline *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DBMatOffline **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->store((std::string const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DBMatOffline_1setInter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::datadriven::DBMatOffline *arg1 = (sgpp::datadriven::DBMatOffline *) 0 ;
  SwigValueWrapper< std::vector< std::vector< size_t > > > arg2 ;
  std::vector< std::vector< size_t > > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DBMatOffline **)&jarg1; 
  argp2 = *(std::vector< std::vector< size_t > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::vector< size_t > >");
    return ;
  }
  arg2 = *argp2; 
  {
    try {
      (arg1)->setInter(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DBMatOffline_1interactions_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::datadriven::DBMatOffline *arg1 = (sgpp::datadriven::DBMatOffline *) 0 ;
  std::vector< std::vector< size_t > > *arg2 = (std::vector< std::vector< size_t > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DBMatOffline **)&jarg1; 
  arg2 = *(std::vector< std::vector< size_t > > **)&jarg2; 
  if (arg1) (arg1)->interactions = *arg2;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DBMatOffline_1interactions_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::DBMatOffline *arg1 = (sgpp::datadriven::DBMatOffline *) 0 ;
  std::vector< std::vector< size_t > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DBMatOffline **)&jarg1; 
  result = (std::vector< std::vector< size_t > > *)& ((arg1)->interactions);
  *(std::vector< std::vector< size_t > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DBMatOfflineGE_1buildMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::datadriven::DBMatOfflineGE *arg1 = (sgpp::datadriven::DBMatOfflineGE *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DBMatOfflineGE **)&jarg1; 
  {
    try {
      (arg1)->buildMatrix();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1DBMatOfflineGE(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::datadriven::DBMatOfflineGE *arg1 = (sgpp::datadriven::DBMatOfflineGE *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::datadriven::DBMatOfflineGE **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1DBMatOfflineChol_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  sgpp::base::RegularGridConfiguration *arg1 = 0 ;
  sgpp::base::AdpativityConfiguration *arg2 = 0 ;
  sgpp::datadriven::RegularizationConfiguration *arg3 = 0 ;
  sgpp::datadriven::DensityEstimationConfiguration *arg4 = 0 ;
  sgpp::datadriven::DBMatOfflineChol *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(sgpp::base::RegularGridConfiguration **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::RegularGridConfiguration const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::base::AdpativityConfiguration **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::AdpativityConfiguration const & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::datadriven::RegularizationConfiguration **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::RegularizationConfiguration const & reference is null");
    return 0;
  } 
  arg4 = *(sgpp::datadriven::DensityEstimationConfiguration **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::DensityEstimationConfiguration const & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::datadriven::DBMatOfflineChol *)new sgpp::datadriven::DBMatOfflineChol((sgpp::base::RegularGridConfiguration const &)*arg1,(sgpp::base::AdpativityConfiguration const &)*arg2,(sgpp::datadriven::RegularizationConfiguration const &)*arg3,(sgpp::datadriven::DensityEstimationConfiguration const &)*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::DBMatOfflineChol **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1DBMatOfflineChol_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  sgpp::datadriven::DBMatOfflineChol *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (sgpp::datadriven::DBMatOfflineChol *)new sgpp::datadriven::DBMatOfflineChol((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::DBMatOfflineChol **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DBMatOfflineChol_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::DBMatOfflineChol *arg1 = (sgpp::datadriven::DBMatOfflineChol *) 0 ;
  sgpp::datadriven::DBMatOffline *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DBMatOfflineChol **)&jarg1; 
  {
    try {
      result = (sgpp::datadriven::DBMatOffline *)(arg1)->clone();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::DBMatOffline **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_sgpp_jsgppJNI_DBMatOfflineChol_1isRefineable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  sgpp::datadriven::DBMatOfflineChol *arg1 = (sgpp::datadriven::DBMatOfflineChol *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DBMatOfflineChol **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->isRefineable();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DBMatOfflineChol_1decomposeMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::datadriven::DBMatOfflineChol *arg1 = (sgpp::datadriven::DBMatOfflineChol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DBMatOfflineChol **)&jarg1; 
  {
    try {
      (arg1)->decomposeMatrix();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DBMatOfflineChol_1choleskyModification(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jdouble jarg4) {
  sgpp::datadriven::DBMatOfflineChol *arg1 = (sgpp::datadriven::DBMatOfflineChol *) 0 ;
  size_t arg2 ;
  std::list< size_t > arg3 ;
  double arg4 ;
  std::list< size_t > *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DBMatOfflineChol **)&jarg1; 
  arg2 = (size_t)jarg2; 
  argp3 = *(std::list< size_t > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::list< size_t >");
    return ;
  }
  arg3 = *argp3; 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->choleskyModification(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1DBMatOfflineChol(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::datadriven::DBMatOfflineChol *arg1 = (sgpp::datadriven::DBMatOfflineChol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::datadriven::DBMatOfflineChol **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1DBMatOfflineDenseIChol_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  sgpp::base::RegularGridConfiguration *arg1 = 0 ;
  sgpp::base::AdpativityConfiguration *arg2 = 0 ;
  sgpp::datadriven::RegularizationConfiguration *arg3 = 0 ;
  sgpp::datadriven::DensityEstimationConfiguration *arg4 = 0 ;
  sgpp::datadriven::DBMatOfflineDenseIChol *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(sgpp::base::RegularGridConfiguration **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::RegularGridConfiguration const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::base::AdpativityConfiguration **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::AdpativityConfiguration const & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::datadriven::RegularizationConfiguration **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::RegularizationConfiguration const & reference is null");
    return 0;
  } 
  arg4 = *(sgpp::datadriven::DensityEstimationConfiguration **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::DensityEstimationConfiguration const & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::datadriven::DBMatOfflineDenseIChol *)new sgpp::datadriven::DBMatOfflineDenseIChol((sgpp::base::RegularGridConfiguration const &)*arg1,(sgpp::base::AdpativityConfiguration const &)*arg2,(sgpp::datadriven::RegularizationConfiguration const &)*arg3,(sgpp::datadriven::DensityEstimationConfiguration const &)*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::DBMatOfflineDenseIChol **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1DBMatOfflineDenseIChol_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  sgpp::datadriven::DBMatOfflineDenseIChol *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (sgpp::datadriven::DBMatOfflineDenseIChol *)new sgpp::datadriven::DBMatOfflineDenseIChol((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::DBMatOfflineDenseIChol **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DBMatOfflineDenseIChol_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::DBMatOfflineDenseIChol *arg1 = (sgpp::datadriven::DBMatOfflineDenseIChol *) 0 ;
  sgpp::datadriven::DBMatOffline *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DBMatOfflineDenseIChol **)&jarg1; 
  {
    try {
      result = (sgpp::datadriven::DBMatOffline *)(arg1)->clone();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::DBMatOffline **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DBMatOfflineDenseIChol_1decomposeMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::datadriven::DBMatOfflineDenseIChol *arg1 = (sgpp::datadriven::DBMatOfflineDenseIChol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DBMatOfflineDenseIChol **)&jarg1; 
  {
    try {
      (arg1)->decomposeMatrix();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DBMatOfflineDenseIChol_1choleskyModification(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jdouble jarg4) {
  sgpp::datadriven::DBMatOfflineDenseIChol *arg1 = (sgpp::datadriven::DBMatOfflineDenseIChol *) 0 ;
  size_t arg2 ;
  std::list< size_t > arg3 ;
  double arg4 ;
  std::list< size_t > *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DBMatOfflineDenseIChol **)&jarg1; 
  arg2 = (size_t)jarg2; 
  argp3 = *(std::list< size_t > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::list< size_t >");
    return ;
  }
  arg3 = *argp3; 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->choleskyModification(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DBMatOfflineDenseIChol_1ichol_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  sgpp::datadriven::DataMatrix *arg1 = 0 ;
  sgpp::datadriven::DataMatrix *arg2 = 0 ;
  size_t arg3 ;
  size_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::datadriven::DataMatrix **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::DataMatrix const & reference is null");
    return ;
  } 
  arg2 = *(sgpp::datadriven::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::DataMatrix & reference is null");
    return ;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  {
    try {
      sgpp::datadriven::DBMatOfflineDenseIChol::ichol((sgpp::base::DataMatrix const &)*arg1,*arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DBMatOfflineDenseIChol_1ichol_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  sgpp::datadriven::DataMatrix *arg1 = 0 ;
  sgpp::datadriven::DataMatrix *arg2 = 0 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::datadriven::DataMatrix **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::DataMatrix const & reference is null");
    return ;
  } 
  arg2 = *(sgpp::datadriven::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::DataMatrix & reference is null");
    return ;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      sgpp::datadriven::DBMatOfflineDenseIChol::ichol((sgpp::base::DataMatrix const &)*arg1,*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DBMatOfflineDenseIChol_1ichol_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::datadriven::DataMatrix *arg1 = 0 ;
  sgpp::datadriven::DataMatrix *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::datadriven::DataMatrix **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::DataMatrix const & reference is null");
    return ;
  } 
  arg2 = *(sgpp::datadriven::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::DataMatrix & reference is null");
    return ;
  } 
  {
    try {
      sgpp::datadriven::DBMatOfflineDenseIChol::ichol((sgpp::base::DataMatrix const &)*arg1,*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1DBMatOfflineDenseIChol(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::datadriven::DBMatOfflineDenseIChol *arg1 = (sgpp::datadriven::DBMatOfflineDenseIChol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::datadriven::DBMatOfflineDenseIChol **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1DBMatOnline_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::DBMatOffline *arg1 = 0 ;
  sgpp::datadriven::DBMatOnline *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DBMatOffline **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::DBMatOffline & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::datadriven::DBMatOnline *)new sgpp::datadriven::DBMatOnline(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::DBMatOnline **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1DBMatOnline_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::DBMatOnline *arg1 = 0 ;
  sgpp::datadriven::DBMatOnline *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DBMatOnline **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::DBMatOnline && reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::datadriven::DBMatOnline *)new sgpp::datadriven::DBMatOnline((sgpp::datadriven::DBMatOnline &&)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::DBMatOnline **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1DBMatOnline(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::datadriven::DBMatOnline *arg1 = (sgpp::datadriven::DBMatOnline *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::datadriven::DBMatOnline **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DBMatOnline_1setLambda(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::datadriven::DBMatOnline *arg1 = (sgpp::datadriven::DBMatOnline *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DBMatOnline **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setLambda(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DBMatOnline_1getOfflineObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::DBMatOnline *arg1 = (sgpp::datadriven::DBMatOnline *) 0 ;
  sgpp::datadriven::DBMatOffline *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DBMatOnline **)&jarg1; 
  {
    try {
      result = (sgpp::datadriven::DBMatOffline *) &(arg1)->getOfflineObject();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::DBMatOffline **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DBMatOnline_1getConstOfflineObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::DBMatOnline *arg1 = (sgpp::datadriven::DBMatOnline *) 0 ;
  sgpp::datadriven::DBMatOffline *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DBMatOnline **)&jarg1; 
  {
    try {
      result = (sgpp::datadriven::DBMatOffline *) &((sgpp::datadriven::DBMatOnline const *)arg1)->getOfflineObject();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::DBMatOffline **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DBMatOnline_1updateSystemMatrixDecomposition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  sgpp::datadriven::DBMatOnline *arg1 = (sgpp::datadriven::DBMatOnline *) 0 ;
  size_t arg2 ;
  std::list< size_t > arg3 ;
  double arg4 ;
  std::list< size_t > *argp3 ;
  std::vector< size_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DBMatOnline **)&jarg1; 
  arg2 = (size_t)jarg2; 
  argp3 = *(std::list< size_t > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::list< size_t >");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (arg1)->updateSystemMatrixDecomposition(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< size_t > **)&jresult = new std::vector< size_t >((const std::vector< size_t > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DBMatOnlineDE_1computeDensityFunction_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jboolean jarg4, jlong jarg5, jlong jarg6) {
  sgpp::datadriven::DBMatOnlineDE *arg1 = (sgpp::datadriven::DBMatOnlineDE *) 0 ;
  sgpp::datadriven::DataMatrix *arg2 = 0 ;
  bool arg3 ;
  bool arg4 ;
  std::list< size_t > *arg5 = (std::list< size_t > *) 0 ;
  size_t arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::datadriven::DBMatOnlineDE **)&jarg1; 
  arg2 = *(sgpp::datadriven::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::DataMatrix & reference is null");
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = *(std::list< size_t > **)&jarg5; 
  arg6 = (size_t)jarg6; 
  {
    try {
      (arg1)->computeDensityFunction(*arg2,arg3,arg4,arg5,arg6);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DBMatOnlineDE_1computeDensityFunction_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jboolean jarg4, jlong jarg5) {
  sgpp::datadriven::DBMatOnlineDE *arg1 = (sgpp::datadriven::DBMatOnlineDE *) 0 ;
  sgpp::datadriven::DataMatrix *arg2 = 0 ;
  bool arg3 ;
  bool arg4 ;
  std::list< size_t > *arg5 = (std::list< size_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::datadriven::DBMatOnlineDE **)&jarg1; 
  arg2 = *(sgpp::datadriven::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::DataMatrix & reference is null");
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = *(std::list< size_t > **)&jarg5; 
  {
    try {
      (arg1)->computeDensityFunction(*arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DBMatOnlineDE_1computeDensityFunction_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jboolean jarg4) {
  sgpp::datadriven::DBMatOnlineDE *arg1 = (sgpp::datadriven::DBMatOnlineDE *) 0 ;
  sgpp::datadriven::DataMatrix *arg2 = 0 ;
  bool arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::datadriven::DBMatOnlineDE **)&jarg1; 
  arg2 = *(sgpp::datadriven::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::DataMatrix & reference is null");
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  {
    try {
      (arg1)->computeDensityFunction(*arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DBMatOnlineDE_1computeDensityFunction_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  sgpp::datadriven::DBMatOnlineDE *arg1 = (sgpp::datadriven::DBMatOnlineDE *) 0 ;
  sgpp::datadriven::DataMatrix *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::datadriven::DBMatOnlineDE **)&jarg1; 
  arg2 = *(sgpp::datadriven::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::DataMatrix & reference is null");
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->computeDensityFunction(*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DBMatOnlineDE_1computeDensityFunction_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::datadriven::DBMatOnlineDE *arg1 = (sgpp::datadriven::DBMatOnlineDE *) 0 ;
  sgpp::datadriven::DataMatrix *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::datadriven::DBMatOnlineDE **)&jarg1; 
  arg2 = *(sgpp::datadriven::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::DataMatrix & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->computeDensityFunction(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_DBMatOnlineDE_1eval_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jdouble jresult = 0 ;
  sgpp::datadriven::DBMatOnlineDE *arg1 = (sgpp::datadriven::DBMatOnlineDE *) 0 ;
  sgpp::datadriven::DataVector *arg2 = 0 ;
  bool arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::datadriven::DBMatOnlineDE **)&jarg1; 
  arg2 = *(sgpp::datadriven::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::DataVector const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  {
    try {
      result = (double)(arg1)->eval((sgpp::datadriven::DataVector const &)*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_DBMatOnlineDE_1eval_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::datadriven::DBMatOnlineDE *arg1 = (sgpp::datadriven::DBMatOnlineDE *) 0 ;
  sgpp::datadriven::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::datadriven::DBMatOnlineDE **)&jarg1; 
  arg2 = *(sgpp::datadriven::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::DataVector const & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->eval((sgpp::datadriven::DataVector const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DBMatOnlineDE_1eval_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  sgpp::datadriven::DBMatOnlineDE *arg1 = (sgpp::datadriven::DBMatOnlineDE *) 0 ;
  sgpp::datadriven::DataMatrix *arg2 = 0 ;
  sgpp::datadriven::DataVector *arg3 = 0 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::datadriven::DBMatOnlineDE **)&jarg1; 
  arg2 = *(sgpp::datadriven::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::DataMatrix & reference is null");
    return ;
  } 
  arg3 = *(sgpp::datadriven::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::DataVector & reference is null");
    return ;
  } 
  arg4 = jarg4 ? true : false; 
  {
    try {
      (arg1)->eval(*arg2,*arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DBMatOnlineDE_1eval_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::datadriven::DBMatOnlineDE *arg1 = (sgpp::datadriven::DBMatOnlineDE *) 0 ;
  sgpp::datadriven::DataMatrix *arg2 = 0 ;
  sgpp::datadriven::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::datadriven::DBMatOnlineDE **)&jarg1; 
  arg2 = *(sgpp::datadriven::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::DataMatrix & reference is null");
    return ;
  } 
  arg3 = *(sgpp::datadriven::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->eval(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DBMatOnlineDE_1getAlpha(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::DBMatOnlineDE *arg1 = (sgpp::datadriven::DBMatOnlineDE *) 0 ;
  sgpp::datadriven::DataVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DBMatOnlineDE **)&jarg1; 
  {
    try {
      result = (sgpp::datadriven::DataVector *) &(arg1)->getAlpha();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::DataVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DBMatOnlineDE_1updateAlpha(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  sgpp::datadriven::DBMatOnlineDE *arg1 = (sgpp::datadriven::DBMatOnlineDE *) 0 ;
  std::list< size_t > *arg2 = (std::list< size_t > *) 0 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DBMatOnlineDE **)&jarg1; 
  arg2 = *(std::list< size_t > **)&jarg2; 
  arg3 = (size_t)jarg3; 
  {
    try {
      (arg1)->updateAlpha(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_sgpp_jsgppJNI_DBMatOnlineDE_1isComputed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  sgpp::datadriven::DBMatOnlineDE *arg1 = (sgpp::datadriven::DBMatOnlineDE *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DBMatOnlineDE **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->isComputed();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DBMatOnlineDE_1setCrossValidationParameters(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jboolean jarg7) {
  sgpp::datadriven::DBMatOnlineDE *arg1 = (sgpp::datadriven::DBMatOnlineDE *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  sgpp::datadriven::DataMatrix *arg5 = (sgpp::datadriven::DataMatrix *) 0 ;
  sgpp::datadriven::DataMatrix *arg6 = (sgpp::datadriven::DataMatrix *) 0 ;
  bool arg7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(sgpp::datadriven::DBMatOnlineDE **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(sgpp::datadriven::DataMatrix **)&jarg5; 
  arg6 = *(sgpp::datadriven::DataMatrix **)&jarg6; 
  arg7 = jarg7 ? true : false; 
  {
    try {
      (arg1)->setCrossValidationParameters(arg2,arg3,arg4,arg5,arg6,arg7);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_DBMatOnlineDE_1getBestLambda(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::datadriven::DBMatOnlineDE *arg1 = (sgpp::datadriven::DBMatOnlineDE *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DBMatOnlineDE **)&jarg1; 
  {
    try {
      result = (double)(arg1)->getBestLambda();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DBMatOnlineDE_1setBeta(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::datadriven::DBMatOnlineDE *arg1 = (sgpp::datadriven::DBMatOnlineDE *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DBMatOnlineDE **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setBeta(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_DBMatOnlineDE_1getBeta(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::datadriven::DBMatOnlineDE *arg1 = (sgpp::datadriven::DBMatOnlineDE *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DBMatOnlineDE **)&jarg1; 
  {
    try {
      result = (double)(arg1)->getBeta();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_DBMatOnlineDE_1normalize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jdouble jresult = 0 ;
  sgpp::datadriven::DBMatOnlineDE *arg1 = (sgpp::datadriven::DBMatOnlineDE *) 0 ;
  size_t arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DBMatOnlineDE **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (double)(arg1)->normalize(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_DBMatOnlineDE_1normalize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::datadriven::DBMatOnlineDE *arg1 = (sgpp::datadriven::DBMatOnlineDE *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DBMatOnlineDE **)&jarg1; 
  {
    try {
      result = (double)(arg1)->normalize();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_DBMatOnlineDE_1normalizeQuadrature(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::datadriven::DBMatOnlineDE *arg1 = (sgpp::datadriven::DBMatOnlineDE *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DBMatOnlineDE **)&jarg1; 
  {
    try {
      result = (double)(arg1)->normalizeQuadrature();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1DBMatOnlineDE(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::datadriven::DBMatOnlineDE *arg1 = (sgpp::datadriven::DBMatOnlineDE *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::datadriven::DBMatOnlineDE **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1DBMatOnlineDEChol_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  sgpp::datadriven::DBMatOffline *arg1 = 0 ;
  double arg2 ;
  sgpp::datadriven::DBMatOnlineDEChol *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DBMatOffline **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::DBMatOffline & reference is null");
    return 0;
  } 
  arg2 = (double)jarg2; 
  {
    try {
      result = (sgpp::datadriven::DBMatOnlineDEChol *)new sgpp::datadriven::DBMatOnlineDEChol(*arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::DBMatOnlineDEChol **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1DBMatOnlineDEChol_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::DBMatOffline *arg1 = 0 ;
  sgpp::datadriven::DBMatOnlineDEChol *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DBMatOffline **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::DBMatOffline & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::datadriven::DBMatOnlineDEChol *)new sgpp::datadriven::DBMatOnlineDEChol(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::DBMatOnlineDEChol **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DBMatOnlineDEChol_1updateSystemMatrixDecomposition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  sgpp::datadriven::DBMatOnlineDEChol *arg1 = (sgpp::datadriven::DBMatOnlineDEChol *) 0 ;
  size_t arg2 ;
  std::list< size_t > arg3 ;
  double arg4 ;
  std::list< size_t > *argp3 ;
  std::vector< size_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DBMatOnlineDEChol **)&jarg1; 
  arg2 = (size_t)jarg2; 
  argp3 = *(std::list< size_t > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::list< size_t >");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (arg1)->updateSystemMatrixDecomposition(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< size_t > **)&jresult = new std::vector< size_t >((const std::vector< size_t > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1DBMatOnlineDEChol(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::datadriven::DBMatOnlineDEChol *arg1 = (sgpp::datadriven::DBMatOnlineDEChol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::datadriven::DBMatOnlineDEChol **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_buildDBMatOnlineDE_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  sgpp::datadriven::DBMatOffline *arg1 = 0 ;
  double arg2 ;
  sgpp::datadriven::DBMatOnlineDE *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DBMatOffline **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::DBMatOffline & reference is null");
    return 0;
  } 
  arg2 = (double)jarg2; 
  {
    try {
      result = (sgpp::datadriven::DBMatOnlineDE *)sgpp::datadriven::DBMatOnlineDEFactory::buildDBMatOnlineDE(*arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::DBMatOnlineDE **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_buildDBMatOnlineDE_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::DBMatOffline *arg1 = 0 ;
  sgpp::datadriven::DBMatOnlineDE *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DBMatOffline **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::DBMatOffline & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::datadriven::DBMatOnlineDE *)sgpp::datadriven::DBMatOnlineDEFactory::buildDBMatOnlineDE(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::DBMatOnlineDE **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_buildOfflineObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  sgpp::base::RegularGridConfiguration *arg1 = 0 ;
  sgpp::base::AdpativityConfiguration *arg2 = 0 ;
  sgpp::datadriven::RegularizationConfiguration *arg3 = 0 ;
  sgpp::datadriven::DensityEstimationConfiguration *arg4 = 0 ;
  sgpp::datadriven::DBMatOffline *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(sgpp::base::RegularGridConfiguration **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::RegularGridConfiguration const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::base::AdpativityConfiguration **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::AdpativityConfiguration const & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::datadriven::RegularizationConfiguration **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::RegularizationConfiguration const & reference is null");
    return 0;
  } 
  arg4 = *(sgpp::datadriven::DensityEstimationConfiguration **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::DensityEstimationConfiguration const & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::datadriven::DBMatOffline *)sgpp::datadriven::DBMatOfflineFactory::buildOfflineObject((sgpp::base::RegularGridConfiguration const &)*arg1,(sgpp::base::AdpativityConfiguration const &)*arg2,(sgpp::datadriven::RegularizationConfiguration const &)*arg3,(sgpp::datadriven::DensityEstimationConfiguration const &)*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::DBMatOffline **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_buildFromFile(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  sgpp::datadriven::DBMatOffline *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (sgpp::datadriven::DBMatOffline *)sgpp::datadriven::DBMatOfflineFactory::buildFromFile((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::DBMatOffline **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_createOperationTest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::Grid *arg1 = 0 ;
  sgpp::datadriven::OperationTest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::Grid **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::datadriven::OperationTest *)sgpp::op_factory::createOperationTest(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::OperationTest **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_createOperationRegularizationDiagonal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  sgpp::base::Grid *arg1 = 0 ;
  int arg2 ;
  double arg3 ;
  sgpp::base::OperationMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::Grid **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return 0;
  } 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      result = (sgpp::base::OperationMatrix *)sgpp::op_factory::createOperationRegularizationDiagonal(*arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::OperationMatrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_createOperationDensityMarginalize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::Grid *arg1 = 0 ;
  sgpp::datadriven::OperationDensityMarginalize *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::Grid **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::datadriven::OperationDensityMarginalize *)sgpp::op_factory::createOperationDensityMarginalize(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::OperationDensityMarginalize **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_createOperationDensityMargTo1D(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::Grid *arg1 = 0 ;
  sgpp::datadriven::OperationDensityMargTo1D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::Grid **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::datadriven::OperationDensityMargTo1D *)sgpp::op_factory::createOperationDensityMargTo1D(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::OperationDensityMargTo1D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_createOperationDensitySampling1D(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::Grid *arg1 = 0 ;
  sgpp::datadriven::OperationDensitySampling1D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::Grid **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::datadriven::OperationDensitySampling1D *)sgpp::op_factory::createOperationDensitySampling1D(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::OperationDensitySampling1D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_createOperationDensitySampling(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::Grid *arg1 = 0 ;
  sgpp::datadriven::OperationDensitySampling *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::Grid **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::datadriven::OperationDensitySampling *)sgpp::op_factory::createOperationDensitySampling(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::OperationDensitySampling **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_createOperationDensityRejectionSampling(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::Grid *arg1 = 0 ;
  sgpp::datadriven::OperationDensityRejectionSampling *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::Grid **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::datadriven::OperationDensityRejectionSampling *)sgpp::op_factory::createOperationDensityRejectionSampling(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::OperationDensityRejectionSampling **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_createOperationDensityConditional(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::Grid *arg1 = 0 ;
  sgpp::datadriven::OperationDensityConditional *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::Grid **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::datadriven::OperationDensityConditional *)sgpp::op_factory::createOperationDensityConditional(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::OperationDensityConditional **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_createOperationRosenblattTransformation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::Grid *arg1 = 0 ;
  sgpp::datadriven::OperationRosenblattTransformation *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::Grid **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::datadriven::OperationRosenblattTransformation *)sgpp::op_factory::createOperationRosenblattTransformation(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::OperationRosenblattTransformation **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_createOperationRosenblattTransformation1D(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::Grid *arg1 = 0 ;
  sgpp::datadriven::OperationTransformation1D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::Grid **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::datadriven::OperationTransformation1D *)sgpp::op_factory::createOperationRosenblattTransformation1D(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::OperationTransformation1D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_createOperationInverseRosenblattTransformation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::Grid *arg1 = 0 ;
  sgpp::datadriven::OperationInverseRosenblattTransformation *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::Grid **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::datadriven::OperationInverseRosenblattTransformation *)sgpp::op_factory::createOperationInverseRosenblattTransformation(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::OperationInverseRosenblattTransformation **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_createOperationInverseRosenblattTransformation1D(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::Grid *arg1 = 0 ;
  sgpp::datadriven::OperationTransformation1D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::Grid **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::datadriven::OperationTransformation1D *)sgpp::op_factory::createOperationInverseRosenblattTransformation1D(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::OperationTransformation1D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_createOperationRosenblattTransformationKDE(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::GaussianKDE *arg1 = 0 ;
  sgpp::datadriven::OperationRosenblattTransformationKDE *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::GaussianKDE **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::GaussianKDE & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::datadriven::OperationRosenblattTransformationKDE *)sgpp::op_factory::createOperationRosenblattTransformationKDE(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::OperationRosenblattTransformationKDE **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_createOperationInverseRosenblattTransformationKDE(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::GaussianKDE *arg1 = 0 ;
  sgpp::datadriven::OperationInverseRosenblattTransformationKDE *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::GaussianKDE **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::GaussianKDE & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::datadriven::OperationInverseRosenblattTransformationKDE *)sgpp::op_factory::createOperationInverseRosenblattTransformationKDE(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::OperationInverseRosenblattTransformationKDE **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_createOperationDensityMarginalizeKDE(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::GaussianKDE *arg1 = 0 ;
  sgpp::datadriven::OperationDensityMarginalizeKDE *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::GaussianKDE **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::GaussianKDE & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::datadriven::OperationDensityMarginalizeKDE *)sgpp::op_factory::createOperationDensityMarginalizeKDE(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::OperationDensityMarginalizeKDE **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_createOperationDensityConditionalKDE(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::GaussianKDE *arg1 = 0 ;
  sgpp::datadriven::OperationDensityConditionalKDE *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::GaussianKDE **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::GaussianKDE & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::datadriven::OperationDensityConditionalKDE *)sgpp::op_factory::createOperationDensityConditionalKDE(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::OperationDensityConditionalKDE **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_createOperationMultipleEval_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  sgpp::base::Grid *arg1 = 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  sgpp::datadriven::OperationMultipleEvalConfiguration *arg3 = 0 ;
  sgpp::base::OperationMultipleEval *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::Grid **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::datadriven::OperationMultipleEvalConfiguration **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::OperationMultipleEvalConfiguration & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::base::OperationMultipleEval *)sgpp::op_factory::createOperationMultipleEval(*arg1,*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::OperationMultipleEval **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_ClassificatorQuality_1truePositive_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::datadriven::ClassificatorQuality *arg1 = (sgpp::datadriven::ClassificatorQuality *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::ClassificatorQuality **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->truePositive_ = arg2;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_ClassificatorQuality_1truePositive_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::ClassificatorQuality *arg1 = (sgpp::datadriven::ClassificatorQuality *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::ClassificatorQuality **)&jarg1; 
  result =  ((arg1)->truePositive_);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_ClassificatorQuality_1trueNegative_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::datadriven::ClassificatorQuality *arg1 = (sgpp::datadriven::ClassificatorQuality *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::ClassificatorQuality **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->trueNegative_ = arg2;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_ClassificatorQuality_1trueNegative_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::ClassificatorQuality *arg1 = (sgpp::datadriven::ClassificatorQuality *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::ClassificatorQuality **)&jarg1; 
  result =  ((arg1)->trueNegative_);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_ClassificatorQuality_1falsePositive_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::datadriven::ClassificatorQuality *arg1 = (sgpp::datadriven::ClassificatorQuality *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::ClassificatorQuality **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->falsePositive_ = arg2;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_ClassificatorQuality_1falsePositive_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::ClassificatorQuality *arg1 = (sgpp::datadriven::ClassificatorQuality *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::ClassificatorQuality **)&jarg1; 
  result =  ((arg1)->falsePositive_);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_ClassificatorQuality_1falseNegative_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::datadriven::ClassificatorQuality *arg1 = (sgpp::datadriven::ClassificatorQuality *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::ClassificatorQuality **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->falseNegative_ = arg2;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_ClassificatorQuality_1falseNegative_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::ClassificatorQuality *arg1 = (sgpp::datadriven::ClassificatorQuality *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::ClassificatorQuality **)&jarg1; 
  result =  ((arg1)->falseNegative_);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1ClassificatorQuality(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::datadriven::ClassificatorQuality *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::datadriven::ClassificatorQuality *)new sgpp::datadriven::ClassificatorQuality();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::ClassificatorQuality **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1ClassificatorQuality(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::datadriven::ClassificatorQuality *arg1 = (sgpp::datadriven::ClassificatorQuality *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::datadriven::ClassificatorQuality **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_LearnerTiming_1timeComplete_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::datadriven::LearnerTiming *arg1 = (sgpp::datadriven::LearnerTiming *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::LearnerTiming **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->timeComplete_ = arg2;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_LearnerTiming_1timeComplete_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::datadriven::LearnerTiming *arg1 = (sgpp::datadriven::LearnerTiming *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::LearnerTiming **)&jarg1; 
  result = (double) ((arg1)->timeComplete_);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_LearnerTiming_1timeMultComplete_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::datadriven::LearnerTiming *arg1 = (sgpp::datadriven::LearnerTiming *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::LearnerTiming **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->timeMultComplete_ = arg2;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_LearnerTiming_1timeMultComplete_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::datadriven::LearnerTiming *arg1 = (sgpp::datadriven::LearnerTiming *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::LearnerTiming **)&jarg1; 
  result = (double) ((arg1)->timeMultComplete_);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_LearnerTiming_1timeMultCompute_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::datadriven::LearnerTiming *arg1 = (sgpp::datadriven::LearnerTiming *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::LearnerTiming **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->timeMultCompute_ = arg2;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_LearnerTiming_1timeMultCompute_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::datadriven::LearnerTiming *arg1 = (sgpp::datadriven::LearnerTiming *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::LearnerTiming **)&jarg1; 
  result = (double) ((arg1)->timeMultCompute_);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_LearnerTiming_1timeMultTransComplete_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::datadriven::LearnerTiming *arg1 = (sgpp::datadriven::LearnerTiming *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::LearnerTiming **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->timeMultTransComplete_ = arg2;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_LearnerTiming_1timeMultTransComplete_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::datadriven::LearnerTiming *arg1 = (sgpp::datadriven::LearnerTiming *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::LearnerTiming **)&jarg1; 
  result = (double) ((arg1)->timeMultTransComplete_);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_LearnerTiming_1timeMultTransCompute_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::datadriven::LearnerTiming *arg1 = (sgpp::datadriven::LearnerTiming *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::LearnerTiming **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->timeMultTransCompute_ = arg2;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_LearnerTiming_1timeMultTransCompute_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::datadriven::LearnerTiming *arg1 = (sgpp::datadriven::LearnerTiming *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::LearnerTiming **)&jarg1; 
  result = (double) ((arg1)->timeMultTransCompute_);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_LearnerTiming_1timeRegularization_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::datadriven::LearnerTiming *arg1 = (sgpp::datadriven::LearnerTiming *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::LearnerTiming **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->timeRegularization_ = arg2;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_LearnerTiming_1timeRegularization_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::datadriven::LearnerTiming *arg1 = (sgpp::datadriven::LearnerTiming *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::LearnerTiming **)&jarg1; 
  result = (double) ((arg1)->timeRegularization_);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_LearnerTiming_1GFlop_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::datadriven::LearnerTiming *arg1 = (sgpp::datadriven::LearnerTiming *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::LearnerTiming **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->GFlop_ = arg2;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_LearnerTiming_1GFlop_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::datadriven::LearnerTiming *arg1 = (sgpp::datadriven::LearnerTiming *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::LearnerTiming **)&jarg1; 
  result = (double) ((arg1)->GFlop_);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_LearnerTiming_1GByte_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::datadriven::LearnerTiming *arg1 = (sgpp::datadriven::LearnerTiming *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::LearnerTiming **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->GByte_ = arg2;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_LearnerTiming_1GByte_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::datadriven::LearnerTiming *arg1 = (sgpp::datadriven::LearnerTiming *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::LearnerTiming **)&jarg1; 
  result = (double) ((arg1)->GByte_);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1LearnerTiming(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::datadriven::LearnerTiming *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::datadriven::LearnerTiming *)new sgpp::datadriven::LearnerTiming();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::LearnerTiming **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1LearnerTiming(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::datadriven::LearnerTiming *arg1 = (sgpp::datadriven::LearnerTiming *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::datadriven::LearnerTiming **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1LearnerBase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::datadriven::LearnerBase *arg1 = (sgpp::datadriven::LearnerBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::datadriven::LearnerBase **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_LearnerBase_1train_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_, jboolean jarg8, jdouble jarg9, jlong jarg10, jobject jarg10_, jlong jarg11, jobject jarg11_) {
  jlong jresult = 0 ;
  sgpp::datadriven::LearnerBase *arg1 = (sgpp::datadriven::LearnerBase *) 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  sgpp::base::RegularGridConfiguration *arg4 = 0 ;
  sgpp::solver::SLESolverConfiguration *arg5 = 0 ;
  sgpp::solver::SLESolverConfiguration *arg6 = 0 ;
  sgpp::base::AdpativityConfiguration *arg7 = 0 ;
  bool arg8 ;
  double arg9 ;
  sgpp::base::DataMatrix *arg10 = (sgpp::base::DataMatrix *) 0 ;
  sgpp::base::DataVector *arg11 = (sgpp::base::DataVector *) 0 ;
  sgpp::datadriven::LearnerTiming result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  (void)jarg7_;
  (void)jarg10_;
  (void)jarg11_;
  arg1 = *(sgpp::datadriven::LearnerBase **)&jarg1; 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  arg4 = *(sgpp::base::RegularGridConfiguration **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::RegularGridConfiguration const & reference is null");
    return 0;
  } 
  arg5 = *(sgpp::solver::SLESolverConfiguration **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::solver::SLESolverConfiguration const & reference is null");
    return 0;
  } 
  arg6 = *(sgpp::solver::SLESolverConfiguration **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::solver::SLESolverConfiguration const & reference is null");
    return 0;
  } 
  arg7 = *(sgpp::base::AdpativityConfiguration **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::AdpativityConfiguration const & reference is null");
    return 0;
  } 
  arg8 = jarg8 ? true : false; 
  arg9 = (double)jarg9; 
  arg10 = *(sgpp::base::DataMatrix **)&jarg10; 
  arg11 = *(sgpp::base::DataVector **)&jarg11; 
  {
    try {
      result = (arg1)->train(*arg2,*arg3,(sgpp::base::RegularGridConfiguration const &)*arg4,(sgpp::solver::SLESolverConfiguration const &)*arg5,(sgpp::solver::SLESolverConfiguration const &)*arg6,(sgpp::base::AdpativityConfiguration const &)*arg7,arg8,arg9,arg10,arg11);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::LearnerTiming **)&jresult = new sgpp::datadriven::LearnerTiming((const sgpp::datadriven::LearnerTiming &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_LearnerBase_1train_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_, jboolean jarg8, jdouble jarg9, jlong jarg10, jobject jarg10_) {
  jlong jresult = 0 ;
  sgpp::datadriven::LearnerBase *arg1 = (sgpp::datadriven::LearnerBase *) 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  sgpp::base::RegularGridConfiguration *arg4 = 0 ;
  sgpp::solver::SLESolverConfiguration *arg5 = 0 ;
  sgpp::solver::SLESolverConfiguration *arg6 = 0 ;
  sgpp::base::AdpativityConfiguration *arg7 = 0 ;
  bool arg8 ;
  double arg9 ;
  sgpp::base::DataMatrix *arg10 = (sgpp::base::DataMatrix *) 0 ;
  sgpp::datadriven::LearnerTiming result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  (void)jarg7_;
  (void)jarg10_;
  arg1 = *(sgpp::datadriven::LearnerBase **)&jarg1; 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  arg4 = *(sgpp::base::RegularGridConfiguration **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::RegularGridConfiguration const & reference is null");
    return 0;
  } 
  arg5 = *(sgpp::solver::SLESolverConfiguration **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::solver::SLESolverConfiguration const & reference is null");
    return 0;
  } 
  arg6 = *(sgpp::solver::SLESolverConfiguration **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::solver::SLESolverConfiguration const & reference is null");
    return 0;
  } 
  arg7 = *(sgpp::base::AdpativityConfiguration **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::AdpativityConfiguration const & reference is null");
    return 0;
  } 
  arg8 = jarg8 ? true : false; 
  arg9 = (double)jarg9; 
  arg10 = *(sgpp::base::DataMatrix **)&jarg10; 
  {
    try {
      result = (arg1)->train(*arg2,*arg3,(sgpp::base::RegularGridConfiguration const &)*arg4,(sgpp::solver::SLESolverConfiguration const &)*arg5,(sgpp::solver::SLESolverConfiguration const &)*arg6,(sgpp::base::AdpativityConfiguration const &)*arg7,arg8,arg9,arg10);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::LearnerTiming **)&jresult = new sgpp::datadriven::LearnerTiming((const sgpp::datadriven::LearnerTiming &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_LearnerBase_1train_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_, jboolean jarg8, jdouble jarg9) {
  jlong jresult = 0 ;
  sgpp::datadriven::LearnerBase *arg1 = (sgpp::datadriven::LearnerBase *) 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  sgpp::base::RegularGridConfiguration *arg4 = 0 ;
  sgpp::solver::SLESolverConfiguration *arg5 = 0 ;
  sgpp::solver::SLESolverConfiguration *arg6 = 0 ;
  sgpp::base::AdpativityConfiguration *arg7 = 0 ;
  bool arg8 ;
  double arg9 ;
  sgpp::datadriven::LearnerTiming result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  (void)jarg7_;
  arg1 = *(sgpp::datadriven::LearnerBase **)&jarg1; 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  arg4 = *(sgpp::base::RegularGridConfiguration **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::RegularGridConfiguration const & reference is null");
    return 0;
  } 
  arg5 = *(sgpp::solver::SLESolverConfiguration **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::solver::SLESolverConfiguration const & reference is null");
    return 0;
  } 
  arg6 = *(sgpp::solver::SLESolverConfiguration **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::solver::SLESolverConfiguration const & reference is null");
    return 0;
  } 
  arg7 = *(sgpp::base::AdpativityConfiguration **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::AdpativityConfiguration const & reference is null");
    return 0;
  } 
  arg8 = jarg8 ? true : false; 
  arg9 = (double)jarg9; 
  {
    try {
      result = (arg1)->train(*arg2,*arg3,(sgpp::base::RegularGridConfiguration const &)*arg4,(sgpp::solver::SLESolverConfiguration const &)*arg5,(sgpp::solver::SLESolverConfiguration const &)*arg6,(sgpp::base::AdpativityConfiguration const &)*arg7,arg8,arg9);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::LearnerTiming **)&jresult = new sgpp::datadriven::LearnerTiming((const sgpp::datadriven::LearnerTiming &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_LearnerBase_1train_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jdouble jarg6) {
  jlong jresult = 0 ;
  sgpp::datadriven::LearnerBase *arg1 = (sgpp::datadriven::LearnerBase *) 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  sgpp::base::RegularGridConfiguration *arg4 = 0 ;
  sgpp::solver::SLESolverConfiguration *arg5 = 0 ;
  double arg6 ;
  sgpp::datadriven::LearnerTiming result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(sgpp::datadriven::LearnerBase **)&jarg1; 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  arg4 = *(sgpp::base::RegularGridConfiguration **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::RegularGridConfiguration const & reference is null");
    return 0;
  } 
  arg5 = *(sgpp::solver::SLESolverConfiguration **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::solver::SLESolverConfiguration const & reference is null");
    return 0;
  } 
  arg6 = (double)jarg6; 
  {
    try {
      result = (arg1)->train(*arg2,*arg3,(sgpp::base::RegularGridConfiguration const &)*arg4,(sgpp::solver::SLESolverConfiguration const &)*arg5,arg6);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::LearnerTiming **)&jresult = new sgpp::datadriven::LearnerTiming((const sgpp::datadriven::LearnerTiming &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_LearnerBase_1predict(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::datadriven::LearnerBase *arg1 = (sgpp::datadriven::LearnerBase *) 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::datadriven::LearnerBase **)&jarg1; 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->predict(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_LearnerBase_1multTranspose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  sgpp::datadriven::LearnerBase *arg1 = (sgpp::datadriven::LearnerBase *) 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  sgpp::base::DataVector *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(sgpp::datadriven::LearnerBase **)&jarg1; 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg4 = *(sgpp::base::DataVector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->multTranspose(*arg2,*arg3,*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_LearnerBase_1getAccuracy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jdouble jarg4) {
  jdouble jresult = 0 ;
  sgpp::datadriven::LearnerBase *arg1 = (sgpp::datadriven::LearnerBase *) 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  double arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::datadriven::LearnerBase **)&jarg1; 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  arg4 = (double)jarg4; 
  {
    try {
      result = (double)(arg1)->getAccuracy(*arg2,(sgpp::base::DataVector const &)*arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_LearnerBase_1getAccuracy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jdouble jresult = 0 ;
  sgpp::datadriven::LearnerBase *arg1 = (sgpp::datadriven::LearnerBase *) 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::datadriven::LearnerBase **)&jarg1; 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->getAccuracy(*arg2,(sgpp::base::DataVector const &)*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_LearnerBase_1getAccuracy_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jdouble jarg4) {
  jdouble jresult = 0 ;
  sgpp::datadriven::LearnerBase *arg1 = (sgpp::datadriven::LearnerBase *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  double arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::datadriven::LearnerBase **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  arg4 = (double)jarg4; 
  {
    try {
      result = (double)(arg1)->getAccuracy((sgpp::base::DataVector const &)*arg2,(sgpp::base::DataVector const &)*arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_LearnerBase_1getAccuracy_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jdouble jresult = 0 ;
  sgpp::datadriven::LearnerBase *arg1 = (sgpp::datadriven::LearnerBase *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::datadriven::LearnerBase **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->getAccuracy((sgpp::base::DataVector const &)*arg2,(sgpp::base::DataVector const &)*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_LearnerBase_1getCassificatorQuality_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jdouble jarg4) {
  jlong jresult = 0 ;
  sgpp::datadriven::LearnerBase *arg1 = (sgpp::datadriven::LearnerBase *) 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  double arg4 ;
  sgpp::datadriven::ClassificatorQuality result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::datadriven::LearnerBase **)&jarg1; 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  arg4 = (double)jarg4; 
  {
    try {
      result = (arg1)->getCassificatorQuality(*arg2,(sgpp::base::DataVector const &)*arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::ClassificatorQuality **)&jresult = new sgpp::datadriven::ClassificatorQuality((const sgpp::datadriven::ClassificatorQuality &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_LearnerBase_1getCassificatorQuality_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  sgpp::datadriven::LearnerBase *arg1 = (sgpp::datadriven::LearnerBase *) 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  sgpp::datadriven::ClassificatorQuality result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::datadriven::LearnerBase **)&jarg1; 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->getCassificatorQuality(*arg2,(sgpp::base::DataVector const &)*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::ClassificatorQuality **)&jresult = new sgpp::datadriven::ClassificatorQuality((const sgpp::datadriven::ClassificatorQuality &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_LearnerBase_1getCassificatorQuality_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jdouble jarg4) {
  jlong jresult = 0 ;
  sgpp::datadriven::LearnerBase *arg1 = (sgpp::datadriven::LearnerBase *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  double arg4 ;
  sgpp::datadriven::ClassificatorQuality result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::datadriven::LearnerBase **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  arg4 = (double)jarg4; 
  {
    try {
      result = (arg1)->getCassificatorQuality((sgpp::base::DataVector const &)*arg2,(sgpp::base::DataVector const &)*arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::ClassificatorQuality **)&jresult = new sgpp::datadriven::ClassificatorQuality((const sgpp::datadriven::ClassificatorQuality &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_LearnerBase_1getCassificatorQuality_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  sgpp::datadriven::LearnerBase *arg1 = (sgpp::datadriven::LearnerBase *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  sgpp::datadriven::ClassificatorQuality result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::datadriven::LearnerBase **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->getCassificatorQuality((sgpp::base::DataVector const &)*arg2,(sgpp::base::DataVector const &)*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::ClassificatorQuality **)&jresult = new sgpp::datadriven::ClassificatorQuality((const sgpp::datadriven::ClassificatorQuality &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_LearnerBase_1store(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  sgpp::datadriven::LearnerBase *arg1 = (sgpp::datadriven::LearnerBase *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::LearnerBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      (arg1)->store(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_LearnerBase_1dumpGrid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  sgpp::datadriven::LearnerBase *arg1 = (sgpp::datadriven::LearnerBase *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::LearnerBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->dumpGrid(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_LearnerBase_1dumpFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  sgpp::datadriven::LearnerBase *arg1 = (sgpp::datadriven::LearnerBase *) 0 ;
  std::string arg2 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::LearnerBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (size_t)jarg3; 
  {
    try {
      (arg1)->dumpFunction(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_sgpp_jsgppJNI_LearnerBase_1getIsRegression(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  sgpp::datadriven::LearnerBase *arg1 = (sgpp::datadriven::LearnerBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::LearnerBase **)&jarg1; 
  {
    try {
      result = (bool)((sgpp::datadriven::LearnerBase const *)arg1)->getIsRegression();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_sgpp_jsgppJNI_LearnerBase_1getIsVerbose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  sgpp::datadriven::LearnerBase *arg1 = (sgpp::datadriven::LearnerBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::LearnerBase **)&jarg1; 
  {
    try {
      result = (bool)((sgpp::datadriven::LearnerBase const *)arg1)->getIsVerbose();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_LearnerBase_1setIsVerbose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  sgpp::datadriven::LearnerBase *arg1 = (sgpp::datadriven::LearnerBase *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::LearnerBase **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setIsVerbose(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_LearnerBase_1getRefinementExecTimes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::LearnerBase *arg1 = (sgpp::datadriven::LearnerBase *) 0 ;
  std::vector< std::pair< size_t,double > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::LearnerBase **)&jarg1; 
  {
    try {
      result = (arg1)->getRefinementExecTimes();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< std::pair< size_t,double > > **)&jresult = new std::vector< std::pair< size_t,double > >((const std::vector< std::pair< size_t,double > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_LearnerBase_1getGrid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::LearnerBase *arg1 = (sgpp::datadriven::LearnerBase *) 0 ;
  sgpp::base::Grid *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::LearnerBase **)&jarg1; 
  {
    try {
      result = (sgpp::base::Grid *) &(arg1)->getGrid();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::Grid **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_LearnerBase_1getAlpha(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::LearnerBase *arg1 = (sgpp::datadriven::LearnerBase *) 0 ;
  sgpp::base::DataVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::LearnerBase **)&jarg1; 
  {
    try {
      result = (sgpp::base::DataVector *) &(arg1)->getAlpha();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::DataVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_LearnerBase_1setReuseCoefficients(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  sgpp::datadriven::LearnerBase *arg1 = (sgpp::datadriven::LearnerBase *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::LearnerBase **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setReuseCoefficients(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_LearnerBase_1setSolverVerbose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  sgpp::datadriven::LearnerBase *arg1 = (sgpp::datadriven::LearnerBase *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::LearnerBase **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setSolverVerbose(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1DensityEstimator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::datadriven::DensityEstimator *arg1 = (sgpp::datadriven::DensityEstimator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::datadriven::DensityEstimator **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DensityEstimator_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::datadriven::DensityEstimator *arg1 = (sgpp::datadriven::DensityEstimator *) 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::datadriven::DensityEstimator **)&jarg1; 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->initialize(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_DensityEstimator_1pdf_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::datadriven::DensityEstimator *arg1 = (sgpp::datadriven::DensityEstimator *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::datadriven::DensityEstimator **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->pdf(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DensityEstimator_1pdf_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::datadriven::DensityEstimator *arg1 = (sgpp::datadriven::DensityEstimator *) 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::datadriven::DensityEstimator **)&jarg1; 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->pdf(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_DensityEstimator_1mean(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::datadriven::DensityEstimator *arg1 = (sgpp::datadriven::DensityEstimator *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DensityEstimator **)&jarg1; 
  {
    try {
      result = (double)(arg1)->mean();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_DensityEstimator_1variance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::datadriven::DensityEstimator *arg1 = (sgpp::datadriven::DensityEstimator *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DensityEstimator **)&jarg1; 
  {
    try {
      result = (double)(arg1)->variance();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_DensityEstimator_1std_1deviation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::datadriven::DensityEstimator *arg1 = (sgpp::datadriven::DensityEstimator *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DensityEstimator **)&jarg1; 
  {
    try {
      result = (double)(arg1)->std_deviation();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DensityEstimator_1cov(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::datadriven::DensityEstimator *arg1 = (sgpp::datadriven::DensityEstimator *) 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::datadriven::DensityEstimator **)&jarg1; 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->cov(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DensityEstimator_1corrcoef(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::datadriven::DensityEstimator *arg1 = (sgpp::datadriven::DensityEstimator *) 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::datadriven::DensityEstimator **)&jarg1; 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->corrcoef(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DensityEstimator_1getSamples_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  sgpp::datadriven::DensityEstimator *arg1 = (sgpp::datadriven::DensityEstimator *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< std::shared_ptr< sgpp::base::DataVector > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DensityEstimator **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (arg1)->getSamples(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(std::shared_ptr< sgpp::base::DataVector > **)&jresult = new std::shared_ptr< sgpp::base::DataVector >((const std::shared_ptr< sgpp::base::DataVector > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DensityEstimator_1getSamples_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::DensityEstimator *arg1 = (sgpp::datadriven::DensityEstimator *) 0 ;
  SwigValueWrapper< std::shared_ptr< sgpp::base::DataMatrix > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DensityEstimator **)&jarg1; 
  {
    try {
      result = (arg1)->getSamples();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(std::shared_ptr< sgpp::base::DataMatrix > **)&jresult = new std::shared_ptr< sgpp::base::DataMatrix >((const std::shared_ptr< sgpp::base::DataMatrix > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DensityEstimator_1getDim(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::DensityEstimator *arg1 = (sgpp::datadriven::DensityEstimator *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DensityEstimator **)&jarg1; 
  {
    try {
      result = (arg1)->getDim();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DensityEstimator_1getNsamples(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::DensityEstimator *arg1 = (sgpp::datadriven::DensityEstimator *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DensityEstimator **)&jarg1; 
  {
    try {
      result = (arg1)->getNsamples();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_M_1SQRT2PI_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(2.506628274631000241612355239340);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1GaussianKDE_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::datadriven::GaussianKDE *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::datadriven::GaussianKDE *)new sgpp::datadriven::GaussianKDE();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::GaussianKDE **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1GaussianKDE_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< sgpp::base::DataVector > > *arg1 = 0 ;
  sgpp::datadriven::GaussianKDE *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::shared_ptr< sgpp::base::DataVector > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::shared_ptr< sgpp::base::DataVector > > & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::datadriven::GaussianKDE *)new sgpp::datadriven::GaussianKDE(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::GaussianKDE **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1GaussianKDE_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::DataMatrix *arg1 = 0 ;
  sgpp::datadriven::GaussianKDE *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataMatrix **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::datadriven::GaussianKDE *)new sgpp::datadriven::GaussianKDE(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::GaussianKDE **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1GaussianKDE_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::GaussianKDE *arg1 = 0 ;
  sgpp::datadriven::GaussianKDE *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::GaussianKDE **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::GaussianKDE const & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::datadriven::GaussianKDE *)new sgpp::datadriven::GaussianKDE((sgpp::datadriven::GaussianKDE const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::GaussianKDE **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1GaussianKDE(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::datadriven::GaussianKDE *arg1 = (sgpp::datadriven::GaussianKDE *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::datadriven::GaussianKDE **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_GaussianKDE_1initialize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::datadriven::GaussianKDE *arg1 = (sgpp::datadriven::GaussianKDE *) 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::datadriven::GaussianKDE **)&jarg1; 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->initialize(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_GaussianKDE_1initialize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::datadriven::GaussianKDE *arg1 = (sgpp::datadriven::GaussianKDE *) 0 ;
  std::vector< std::shared_ptr< sgpp::base::DataVector > > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::GaussianKDE **)&jarg1; 
  arg2 = *(std::vector< std::shared_ptr< sgpp::base::DataVector > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::shared_ptr< sgpp::base::DataVector > > & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->initialize(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_GaussianKDE_1mean(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::datadriven::GaussianKDE *arg1 = (sgpp::datadriven::GaussianKDE *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::GaussianKDE **)&jarg1; 
  {
    try {
      result = (double)(arg1)->mean();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_GaussianKDE_1variance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::datadriven::GaussianKDE *arg1 = (sgpp::datadriven::GaussianKDE *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::GaussianKDE **)&jarg1; 
  {
    try {
      result = (double)(arg1)->variance();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_GaussianKDE_1cov(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::datadriven::GaussianKDE *arg1 = (sgpp::datadriven::GaussianKDE *) 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::datadriven::GaussianKDE **)&jarg1; 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->cov(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_GaussianKDE_1pdf_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::datadriven::GaussianKDE *arg1 = (sgpp::datadriven::GaussianKDE *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::datadriven::GaussianKDE **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->pdf(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_GaussianKDE_1pdf_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::datadriven::GaussianKDE *arg1 = (sgpp::datadriven::GaussianKDE *) 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::datadriven::GaussianKDE **)&jarg1; 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->pdf(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_GaussianKDE_1getConditionalizationFactor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::datadriven::GaussianKDE *arg1 = (sgpp::datadriven::GaussianKDE *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::datadriven::GaussianKDE **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->getConditionalizationFactor(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_GaussianKDE_1setConditionalizationFactor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::datadriven::GaussianKDE *arg1 = (sgpp::datadriven::GaussianKDE *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::datadriven::GaussianKDE **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setConditionalizationFactor(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_GaussianKDE_1updateConditionalizationFactors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  sgpp::datadriven::GaussianKDE *arg1 = (sgpp::datadriven::GaussianKDE *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  std::vector< size_t > *arg3 = 0 ;
  sgpp::base::DataVector *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(sgpp::datadriven::GaussianKDE **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg3 = *(std::vector< size_t > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< size_t > & reference is null");
    return ;
  } 
  arg4 = *(sgpp::base::DataVector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->updateConditionalizationFactors(*arg2,*arg3,*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_GaussianKDE_1getBandwidths(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::datadriven::GaussianKDE *arg1 = (sgpp::datadriven::GaussianKDE *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::datadriven::GaussianKDE **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->getBandwidths(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_GaussianKDE_1getSamples_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::GaussianKDE *arg1 = (sgpp::datadriven::GaussianKDE *) 0 ;
  SwigValueWrapper< std::shared_ptr< sgpp::base::DataMatrix > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::GaussianKDE **)&jarg1; 
  {
    try {
      result = (arg1)->getSamples();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(std::shared_ptr< sgpp::base::DataMatrix > **)&jresult = new std::shared_ptr< sgpp::base::DataMatrix >((const std::shared_ptr< sgpp::base::DataMatrix > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_GaussianKDE_1getSamples_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  sgpp::datadriven::GaussianKDE *arg1 = (sgpp::datadriven::GaussianKDE *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< std::shared_ptr< sgpp::base::DataVector > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::GaussianKDE **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (arg1)->getSamples(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(std::shared_ptr< sgpp::base::DataVector > **)&jresult = new std::shared_ptr< sgpp::base::DataVector >((const std::shared_ptr< sgpp::base::DataVector > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_GaussianKDE_1getDim(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::GaussianKDE *arg1 = (sgpp::datadriven::GaussianKDE *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::GaussianKDE **)&jarg1; 
  {
    try {
      result = (arg1)->getDim();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_GaussianKDE_1getNsamples(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::GaussianKDE *arg1 = (sgpp::datadriven::GaussianKDE *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::GaussianKDE **)&jarg1; 
  {
    try {
      result = (arg1)->getNsamples();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1LearnerSGDEConfiguration_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::datadriven::LearnerSGDEConfiguration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::datadriven::LearnerSGDEConfiguration *)new sgpp::datadriven::LearnerSGDEConfiguration();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::LearnerSGDEConfiguration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1LearnerSGDEConfiguration_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  sgpp::datadriven::LearnerSGDEConfiguration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (sgpp::datadriven::LearnerSGDEConfiguration *)new sgpp::datadriven::LearnerSGDEConfiguration((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::LearnerSGDEConfiguration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_LearnerSGDEConfiguration_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::LearnerSGDEConfiguration *arg1 = (sgpp::datadriven::LearnerSGDEConfiguration *) 0 ;
  sgpp::datadriven::LearnerSGDEConfiguration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::LearnerSGDEConfiguration **)&jarg1; 
  {
    try {
      result = (sgpp::datadriven::LearnerSGDEConfiguration *)(arg1)->clone();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::LearnerSGDEConfiguration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_LearnerSGDEConfiguration_1initConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::datadriven::LearnerSGDEConfiguration *arg1 = (sgpp::datadriven::LearnerSGDEConfiguration *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::LearnerSGDEConfiguration **)&jarg1; 
  {
    try {
      (arg1)->initConfig();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_sgpp_jsgppJNI_LearnerSGDEConfiguration_1stringToGridType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  sgpp::datadriven::LearnerSGDEConfiguration *arg1 = (sgpp::datadriven::LearnerSGDEConfiguration *) 0 ;
  std::string *arg2 = 0 ;
  sgpp::base::GridType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::LearnerSGDEConfiguration **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::base::GridType)(arg1)->stringToGridType(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_sgpp_jsgppJNI_LearnerSGDEConfiguration_1stringToRegularizationType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  sgpp::datadriven::LearnerSGDEConfiguration *arg1 = (sgpp::datadriven::LearnerSGDEConfiguration *) 0 ;
  std::string *arg2 = 0 ;
  sgpp::datadriven::RegularizationType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::LearnerSGDEConfiguration **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::datadriven::RegularizationType)(arg1)->stringToRegularizationType(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_sgpp_jsgppJNI_LearnerSGDEConfiguration_1stringToSolverType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  sgpp::datadriven::LearnerSGDEConfiguration *arg1 = (sgpp::datadriven::LearnerSGDEConfiguration *) 0 ;
  std::string *arg2 = 0 ;
  sgpp::solver::SLESolverType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::LearnerSGDEConfiguration **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::solver::SLESolverType)(arg1)->stringToSolverType(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1LearnerSGDEConfiguration(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::datadriven::LearnerSGDEConfiguration *arg1 = (sgpp::datadriven::LearnerSGDEConfiguration *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::datadriven::LearnerSGDEConfiguration **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1LearnerSGDE_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5) {
  jlong jresult = 0 ;
  sgpp::base::RegularGridConfiguration *arg1 = 0 ;
  sgpp::base::AdpativityConfiguration *arg2 = 0 ;
  sgpp::solver::SLESolverConfiguration *arg3 = 0 ;
  sgpp::datadriven::RegularizationConfiguration *arg4 = 0 ;
  CrossvalidationConfiguration *arg5 = 0 ;
  sgpp::datadriven::LearnerSGDE *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(sgpp::base::RegularGridConfiguration **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::RegularGridConfiguration & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::base::AdpativityConfiguration **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::AdpativityConfiguration & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::solver::SLESolverConfiguration **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::solver::SLESolverConfiguration & reference is null");
    return 0;
  } 
  arg4 = *(sgpp::datadriven::RegularizationConfiguration **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::RegularizationConfiguration & reference is null");
    return 0;
  } 
  arg5 = *(CrossvalidationConfiguration **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CrossvalidationConfiguration & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::datadriven::LearnerSGDE *)new sgpp::datadriven::LearnerSGDE(*arg1,*arg2,*arg3,*arg4,*arg5);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::LearnerSGDE **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1LearnerSGDE_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::LearnerSGDEConfiguration *arg1 = 0 ;
  sgpp::datadriven::LearnerSGDE *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::LearnerSGDEConfiguration **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::LearnerSGDEConfiguration & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::datadriven::LearnerSGDE *)new sgpp::datadriven::LearnerSGDE(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::LearnerSGDE **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1LearnerSGDE_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::LearnerSGDE *arg1 = 0 ;
  sgpp::datadriven::LearnerSGDE *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::LearnerSGDE **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::LearnerSGDE const & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::datadriven::LearnerSGDE *)new sgpp::datadriven::LearnerSGDE((sgpp::datadriven::LearnerSGDE const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::LearnerSGDE **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1LearnerSGDE(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::datadriven::LearnerSGDE *arg1 = (sgpp::datadriven::LearnerSGDE *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::datadriven::LearnerSGDE **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_LearnerSGDE_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::datadriven::LearnerSGDE *arg1 = (sgpp::datadriven::LearnerSGDE *) 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::datadriven::LearnerSGDE **)&jarg1; 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->initialize(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_LearnerSGDE_1pdf_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::datadriven::LearnerSGDE *arg1 = (sgpp::datadriven::LearnerSGDE *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::datadriven::LearnerSGDE **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->pdf(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_LearnerSGDE_1pdf_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::datadriven::LearnerSGDE *arg1 = (sgpp::datadriven::LearnerSGDE *) 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::datadriven::LearnerSGDE **)&jarg1; 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->pdf(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_LearnerSGDE_1mean(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::datadriven::LearnerSGDE *arg1 = (sgpp::datadriven::LearnerSGDE *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::LearnerSGDE **)&jarg1; 
  {
    try {
      result = (double)(arg1)->mean();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_LearnerSGDE_1variance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::datadriven::LearnerSGDE *arg1 = (sgpp::datadriven::LearnerSGDE *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::LearnerSGDE **)&jarg1; 
  {
    try {
      result = (double)(arg1)->variance();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_LearnerSGDE_1cov(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::datadriven::LearnerSGDE *arg1 = (sgpp::datadriven::LearnerSGDE *) 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::datadriven::LearnerSGDE **)&jarg1; 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->cov(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_LearnerSGDE_1getSamples_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  sgpp::datadriven::LearnerSGDE *arg1 = (sgpp::datadriven::LearnerSGDE *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< std::shared_ptr< sgpp::base::DataVector > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::LearnerSGDE **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (arg1)->getSamples(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(std::shared_ptr< sgpp::base::DataVector > **)&jresult = new std::shared_ptr< sgpp::base::DataVector >((const std::shared_ptr< sgpp::base::DataVector > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_LearnerSGDE_1getSamples_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::LearnerSGDE *arg1 = (sgpp::datadriven::LearnerSGDE *) 0 ;
  SwigValueWrapper< std::shared_ptr< sgpp::base::DataMatrix > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::LearnerSGDE **)&jarg1; 
  {
    try {
      result = (arg1)->getSamples();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(std::shared_ptr< sgpp::base::DataMatrix > **)&jresult = new std::shared_ptr< sgpp::base::DataMatrix >((const std::shared_ptr< sgpp::base::DataMatrix > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_LearnerSGDE_1getDim(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::LearnerSGDE *arg1 = (sgpp::datadriven::LearnerSGDE *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::LearnerSGDE **)&jarg1; 
  {
    try {
      result = (arg1)->getDim();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_LearnerSGDE_1getNsamples(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::LearnerSGDE *arg1 = (sgpp::datadriven::LearnerSGDE *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::LearnerSGDE **)&jarg1; 
  {
    try {
      result = (arg1)->getNsamples();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_LearnerSGDE_1getSurpluses(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::LearnerSGDE *arg1 = (sgpp::datadriven::LearnerSGDE *) 0 ;
  SwigValueWrapper< std::shared_ptr< sgpp::base::DataVector > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::LearnerSGDE **)&jarg1; 
  {
    try {
      result = (arg1)->getSurpluses();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(std::shared_ptr< sgpp::base::DataVector > **)&jresult = new std::shared_ptr< sgpp::base::DataVector >((const std::shared_ptr< sgpp::base::DataVector > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_LearnerSGDE_1getGrid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::LearnerSGDE *arg1 = (sgpp::datadriven::LearnerSGDE *) 0 ;
  SwigValueWrapper< std::shared_ptr< sgpp::base::Grid > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::LearnerSGDE **)&jarg1; 
  {
    try {
      result = (arg1)->getGrid();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(std::shared_ptr< sgpp::base::Grid > **)&jresult = new std::shared_ptr< sgpp::base::Grid >((const std::shared_ptr< sgpp::base::Grid > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_LearnerSGDE_1train_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jdouble jarg5) {
  sgpp::datadriven::LearnerSGDE *arg1 = (sgpp::datadriven::LearnerSGDE *) 0 ;
  sgpp::base::Grid *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  sgpp::base::DataMatrix *arg4 = 0 ;
  double arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(sgpp::datadriven::LearnerSGDE **)&jarg1; 
  arg2 = *(sgpp::base::Grid **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg4 = *(sgpp::base::DataMatrix **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return ;
  } 
  arg5 = (double)jarg5; 
  {
    try {
      (arg1)->train(*arg2,*arg3,*arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_LearnerSGDE_1train_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::datadriven::LearnerSGDE *arg1 = (sgpp::datadriven::LearnerSGDE *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::LearnerSGDE **)&jarg1; 
  {
    try {
      (arg1)->train();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_LearnerSGDE_1trainOnline(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_, jlong jarg8, jstring jarg9, jstring jarg10, jlong jarg11, jdouble jarg12, jlong jarg13, jlong jarg14, jboolean jarg15) {
  sgpp::datadriven::LearnerSGDE *arg1 = (sgpp::datadriven::LearnerSGDE *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataMatrix *arg3 = 0 ;
  sgpp::base::DataVector *arg4 = 0 ;
  sgpp::base::DataMatrix *arg5 = (sgpp::base::DataMatrix *) 0 ;
  sgpp::base::DataVector *arg6 = (sgpp::base::DataVector *) 0 ;
  sgpp::base::DataVector *arg7 = 0 ;
  size_t arg8 ;
  std::string arg9 ;
  std::string arg10 ;
  size_t arg11 ;
  double arg12 ;
  size_t arg13 ;
  size_t arg14 ;
  bool arg15 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  (void)jarg7_;
  arg1 = *(sgpp::datadriven::LearnerSGDE **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataMatrix **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return ;
  } 
  arg4 = *(sgpp::base::DataVector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg5 = *(sgpp::base::DataMatrix **)&jarg5; 
  arg6 = *(sgpp::base::DataVector **)&jarg6; 
  arg7 = *(sgpp::base::DataVector **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg8 = (size_t)jarg8; 
  if(!jarg9) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg9_pstr = (const char *)jenv->GetStringUTFChars(jarg9, 0); 
  if (!arg9_pstr) return ;
  (&arg9)->assign(arg9_pstr);
  jenv->ReleaseStringUTFChars(jarg9, arg9_pstr); 
  if(!jarg10) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg10_pstr = (const char *)jenv->GetStringUTFChars(jarg10, 0); 
  if (!arg10_pstr) return ;
  (&arg10)->assign(arg10_pstr);
  jenv->ReleaseStringUTFChars(jarg10, arg10_pstr); 
  arg11 = (size_t)jarg11; 
  arg12 = (double)jarg12; 
  arg13 = (size_t)jarg13; 
  arg14 = (size_t)jarg14; 
  arg15 = jarg15 ? true : false; 
  {
    try {
      (arg1)->trainOnline(*arg2,*arg3,*arg4,arg5,arg6,*arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_LearnerSGDE_1storeResults(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::datadriven::LearnerSGDE *arg1 = (sgpp::datadriven::LearnerSGDE *) 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::datadriven::LearnerSGDE **)&jarg1; 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->storeResults(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_LearnerSGDE_1predict(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::datadriven::LearnerSGDE *arg1 = (sgpp::datadriven::LearnerSGDE *) 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::datadriven::LearnerSGDE **)&jarg1; 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->predict(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_LearnerSGDE_1getAccuracy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jdouble jarg4) {
  jdouble jresult = 0 ;
  sgpp::datadriven::LearnerSGDE *arg1 = (sgpp::datadriven::LearnerSGDE *) 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  double arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::datadriven::LearnerSGDE **)&jarg1; 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  arg4 = (double)jarg4; 
  {
    try {
      result = (double)(arg1)->getAccuracy(*arg2,(sgpp::base::DataVector const &)*arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_LearnerSGDE_1getAccuracy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3, jlong jarg4, jobject jarg4_) {
  jdouble jresult = 0 ;
  sgpp::datadriven::LearnerSGDE *arg1 = (sgpp::datadriven::LearnerSGDE *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double arg3 ;
  sgpp::base::DataVector *arg4 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(sgpp::datadriven::LearnerSGDE **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  arg3 = (double)jarg3; 
  arg4 = *(sgpp::base::DataVector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->getAccuracy((sgpp::base::DataVector const &)*arg2,arg3,(sgpp::base::DataVector const &)*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_LearnerSGDE_1getError(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jdouble jarg4, jstring jarg5) {
  jdouble jresult = 0 ;
  sgpp::datadriven::LearnerSGDE *arg1 = (sgpp::datadriven::LearnerSGDE *) 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  double arg4 ;
  std::string arg5 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::datadriven::LearnerSGDE **)&jarg1; 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  arg4 = (double)jarg4; 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  (&arg5)->assign(arg5_pstr);
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  {
    try {
      result = (double)(arg1)->getError(*arg2,(sgpp::base::DataVector const &)*arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_LearnerSGDE_1error_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::datadriven::LearnerSGDE *arg1 = (sgpp::datadriven::LearnerSGDE *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::LearnerSGDE **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->error = arg2;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_LearnerSGDE_1error_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::datadriven::LearnerSGDE *arg1 = (sgpp::datadriven::LearnerSGDE *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::LearnerSGDE **)&jarg1; 
  result = (double) ((arg1)->error);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_LearnerSGDE_1avgErrors_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::datadriven::LearnerSGDE *arg1 = (sgpp::datadriven::LearnerSGDE *) 0 ;
  sgpp::base::DataVector *arg2 = (sgpp::base::DataVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::datadriven::LearnerSGDE **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2; 
  if (arg1) (arg1)->avgErrors = *arg2;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_LearnerSGDE_1avgErrors_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::LearnerSGDE *arg1 = (sgpp::datadriven::LearnerSGDE *) 0 ;
  sgpp::base::DataVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::LearnerSGDE **)&jarg1; 
  result = (sgpp::base::DataVector *)& ((arg1)->avgErrors);
  *(sgpp::base::DataVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1RegressionLearner_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6) {
  jlong jresult = 0 ;
  sgpp::base::RegularGridConfiguration arg1 ;
  sgpp::base::AdpativityConfiguration arg2 ;
  sgpp::solver::SLESolverConfiguration arg3 ;
  sgpp::solver::SLESolverConfiguration arg4 ;
  sgpp::datadriven::RegularizationConfiguration arg5 ;
  SwigValueWrapper< std::vector< std::vector< size_t > > > arg6 ;
  sgpp::base::RegularGridConfiguration *argp1 ;
  sgpp::base::AdpativityConfiguration *argp2 ;
  sgpp::solver::SLESolverConfiguration *argp3 ;
  sgpp::solver::SLESolverConfiguration *argp4 ;
  sgpp::datadriven::RegularizationConfiguration *argp5 ;
  std::vector< std::vector< size_t > > *argp6 ;
  sgpp::datadriven::RegressionLearner *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  argp1 = *(sgpp::base::RegularGridConfiguration **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null sgpp::base::RegularGridConfiguration");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(sgpp::base::AdpativityConfiguration **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null sgpp::base::AdpativityConfiguration");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(sgpp::solver::SLESolverConfiguration **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null sgpp::solver::SLESolverConfiguration");
    return 0;
  }
  arg3 = *argp3; 
  argp4 = *(sgpp::solver::SLESolverConfiguration **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null sgpp::solver::SLESolverConfiguration");
    return 0;
  }
  arg4 = *argp4; 
  argp5 = *(sgpp::datadriven::RegularizationConfiguration **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null sgpp::datadriven::RegularizationConfiguration");
    return 0;
  }
  arg5 = *argp5; 
  argp6 = *(std::vector< std::vector< size_t > > **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::vector< size_t > >");
    return 0;
  }
  arg6 = *argp6; 
  {
    try {
      result = (sgpp::datadriven::RegressionLearner *)new sgpp::datadriven::RegressionLearner(arg1,arg2,arg3,arg4,arg5,arg6);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::RegressionLearner **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1RegressionLearner_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  sgpp::base::RegularGridConfiguration arg1 ;
  sgpp::base::AdpativityConfiguration arg2 ;
  sgpp::solver::SLESolverConfiguration arg3 ;
  sgpp::solver::SLESolverConfiguration arg4 ;
  sgpp::datadriven::RegularizationConfiguration arg5 ;
  sgpp::base::RegularGridConfiguration *argp1 ;
  sgpp::base::AdpativityConfiguration *argp2 ;
  sgpp::solver::SLESolverConfiguration *argp3 ;
  sgpp::solver::SLESolverConfiguration *argp4 ;
  sgpp::datadriven::RegularizationConfiguration *argp5 ;
  sgpp::datadriven::RegressionLearner *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  argp1 = *(sgpp::base::RegularGridConfiguration **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null sgpp::base::RegularGridConfiguration");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(sgpp::base::AdpativityConfiguration **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null sgpp::base::AdpativityConfiguration");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(sgpp::solver::SLESolverConfiguration **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null sgpp::solver::SLESolverConfiguration");
    return 0;
  }
  arg3 = *argp3; 
  argp4 = *(sgpp::solver::SLESolverConfiguration **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null sgpp::solver::SLESolverConfiguration");
    return 0;
  }
  arg4 = *argp4; 
  argp5 = *(sgpp::datadriven::RegularizationConfiguration **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null sgpp::datadriven::RegularizationConfiguration");
    return 0;
  }
  arg5 = *argp5; 
  {
    try {
      result = (sgpp::datadriven::RegressionLearner *)new sgpp::datadriven::RegressionLearner(arg1,arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::RegressionLearner **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_RegressionLearner_1train(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::datadriven::RegressionLearner *arg1 = (sgpp::datadriven::RegressionLearner *) 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::datadriven::RegressionLearner **)&jarg1; 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->train(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_RegressionLearner_1predict(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  sgpp::datadriven::RegressionLearner *arg1 = (sgpp::datadriven::RegressionLearner *) 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  sgpp::base::DataVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::datadriven::RegressionLearner **)&jarg1; 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->predict(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::DataVector **)&jresult = new sgpp::base::DataVector((const sgpp::base::DataVector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_RegressionLearner_1getGridSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::RegressionLearner *arg1 = (sgpp::datadriven::RegressionLearner *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::RegressionLearner **)&jarg1; 
  {
    try {
      result = ((sgpp::datadriven::RegressionLearner const *)arg1)->getGridSize();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_RegressionLearner_1getGrid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::RegressionLearner *arg1 = (sgpp::datadriven::RegressionLearner *) 0 ;
  sgpp::base::Grid *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::RegressionLearner **)&jarg1; 
  {
    try {
      result = (sgpp::base::Grid *) &(arg1)->getGrid();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::Grid **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_RegressionLearner_1getMSE(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jdouble jresult = 0 ;
  sgpp::datadriven::RegressionLearner *arg1 = (sgpp::datadriven::RegressionLearner *) 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::datadriven::RegressionLearner **)&jarg1; 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->getMSE(*arg2,(sgpp::base::DataVector const &)*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_RegressionLearner_1getWeights(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::RegressionLearner *arg1 = (sgpp::datadriven::RegressionLearner *) 0 ;
  sgpp::base::DataVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::RegressionLearner **)&jarg1; 
  {
    try {
      result = ((sgpp::datadriven::RegressionLearner const *)arg1)->getWeights();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::DataVector **)&jresult = new sgpp::base::DataVector((const sgpp::base::DataVector &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_RegressionLearner_1setWeights(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::datadriven::RegressionLearner *arg1 = (sgpp::datadriven::RegressionLearner *) 0 ;
  sgpp::base::DataVector arg2 ;
  sgpp::base::DataVector *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::datadriven::RegressionLearner **)&jarg1; 
  argp2 = *(sgpp::base::DataVector **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null sgpp::base::DataVector");
    return ;
  }
  arg2 = *argp2; 
  {
    try {
      (arg1)->setWeights(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1RegressionLearner(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::datadriven::RegressionLearner *arg1 = (sgpp::datadriven::RegressionLearner *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::datadriven::RegressionLearner **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1ClassificationLearner_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6) {
  jlong jresult = 0 ;
  sgpp::base::RegularGridConfiguration arg1 ;
  sgpp::base::AdpativityConfiguration arg2 ;
  sgpp::solver::SLESolverConfiguration arg3 ;
  sgpp::solver::SLESolverConfiguration arg4 ;
  sgpp::datadriven::RegularizationConfiguration arg5 ;
  SwigValueWrapper< std::vector< std::vector< size_t > > > arg6 ;
  sgpp::base::RegularGridConfiguration *argp1 ;
  sgpp::base::AdpativityConfiguration *argp2 ;
  sgpp::solver::SLESolverConfiguration *argp3 ;
  sgpp::solver::SLESolverConfiguration *argp4 ;
  sgpp::datadriven::RegularizationConfiguration *argp5 ;
  std::vector< std::vector< size_t > > *argp6 ;
  sgpp::datadriven::ClassificationLearner *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  argp1 = *(sgpp::base::RegularGridConfiguration **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null sgpp::base::RegularGridConfiguration");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(sgpp::base::AdpativityConfiguration **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null sgpp::base::AdpativityConfiguration");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(sgpp::solver::SLESolverConfiguration **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null sgpp::solver::SLESolverConfiguration");
    return 0;
  }
  arg3 = *argp3; 
  argp4 = *(sgpp::solver::SLESolverConfiguration **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null sgpp::solver::SLESolverConfiguration");
    return 0;
  }
  arg4 = *argp4; 
  argp5 = *(sgpp::datadriven::RegularizationConfiguration **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null sgpp::datadriven::RegularizationConfiguration");
    return 0;
  }
  arg5 = *argp5; 
  argp6 = *(std::vector< std::vector< size_t > > **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::vector< size_t > >");
    return 0;
  }
  arg6 = *argp6; 
  {
    try {
      result = (sgpp::datadriven::ClassificationLearner *)new sgpp::datadriven::ClassificationLearner(arg1,arg2,arg3,arg4,arg5,arg6);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::ClassificationLearner **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1ClassificationLearner_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  sgpp::base::RegularGridConfiguration arg1 ;
  sgpp::base::AdpativityConfiguration arg2 ;
  sgpp::solver::SLESolverConfiguration arg3 ;
  sgpp::solver::SLESolverConfiguration arg4 ;
  sgpp::datadriven::RegularizationConfiguration arg5 ;
  sgpp::base::RegularGridConfiguration *argp1 ;
  sgpp::base::AdpativityConfiguration *argp2 ;
  sgpp::solver::SLESolverConfiguration *argp3 ;
  sgpp::solver::SLESolverConfiguration *argp4 ;
  sgpp::datadriven::RegularizationConfiguration *argp5 ;
  sgpp::datadriven::ClassificationLearner *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  argp1 = *(sgpp::base::RegularGridConfiguration **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null sgpp::base::RegularGridConfiguration");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(sgpp::base::AdpativityConfiguration **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null sgpp::base::AdpativityConfiguration");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(sgpp::solver::SLESolverConfiguration **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null sgpp::solver::SLESolverConfiguration");
    return 0;
  }
  arg3 = *argp3; 
  argp4 = *(sgpp::solver::SLESolverConfiguration **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null sgpp::solver::SLESolverConfiguration");
    return 0;
  }
  arg4 = *argp4; 
  argp5 = *(sgpp::datadriven::RegularizationConfiguration **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null sgpp::datadriven::RegularizationConfiguration");
    return 0;
  }
  arg5 = *argp5; 
  {
    try {
      result = (sgpp::datadriven::ClassificationLearner *)new sgpp::datadriven::ClassificationLearner(arg1,arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::ClassificationLearner **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_ClassificationLearner_1train(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::datadriven::ClassificationLearner *arg1 = (sgpp::datadriven::ClassificationLearner *) 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::datadriven::ClassificationLearner **)&jarg1; 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->train(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_ClassificationLearner_1predict(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  sgpp::datadriven::ClassificationLearner *arg1 = (sgpp::datadriven::ClassificationLearner *) 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  sgpp::base::DataVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::datadriven::ClassificationLearner **)&jarg1; 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->predict(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::DataVector **)&jresult = new sgpp::base::DataVector((const sgpp::base::DataVector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_ClassificationLearner_1predictWithCertainty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  sgpp::datadriven::ClassificationLearner *arg1 = (sgpp::datadriven::ClassificationLearner *) 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  SwigValueWrapper< std::pair< sgpp::base::DataVector,sgpp::base::DataVector > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::datadriven::ClassificationLearner **)&jarg1; 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->predictWithCertainty(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(std::pair< sgpp::base::DataVector,sgpp::base::DataVector > **)&jresult = new std::pair< sgpp::base::DataVector,sgpp::base::DataVector >((const std::pair< sgpp::base::DataVector,sgpp::base::DataVector > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_ClassificationLearner_1getGridSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::ClassificationLearner *arg1 = (sgpp::datadriven::ClassificationLearner *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::ClassificationLearner **)&jarg1; 
  {
    try {
      result = ((sgpp::datadriven::ClassificationLearner const *)arg1)->getGridSize();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_ClassificationLearner_1getAccuracy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jdouble jresult = 0 ;
  sgpp::datadriven::ClassificationLearner *arg1 = (sgpp::datadriven::ClassificationLearner *) 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::datadriven::ClassificationLearner **)&jarg1; 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->getAccuracy(*arg2,(sgpp::base::DataVector const &)*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1ClassificationLearner(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::datadriven::ClassificationLearner *arg1 = (sgpp::datadriven::ClassificationLearner *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::datadriven::ClassificationLearner **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1NearestNeighbors(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  sgpp::datadriven::NearestNeighbors *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (sgpp::datadriven::NearestNeighbors *)new sgpp::datadriven::NearestNeighbors(arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::NearestNeighbors **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_NearestNeighbors_1getAllInteractions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  sgpp::datadriven::NearestNeighbors *arg1 = (sgpp::datadriven::NearestNeighbors *) 0 ;
  size_t arg2 ;
  double arg3 ;
  SwigValueWrapper< std::vector< std::vector< size_t > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::NearestNeighbors **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      result = ((sgpp::datadriven::NearestNeighbors const *)arg1)->getAllInteractions(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< std::vector< size_t > > **)&jresult = new std::vector< std::vector< size_t > >((const std::vector< std::vector< size_t > > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1NearestNeighbors(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::datadriven::NearestNeighbors *arg1 = (sgpp::datadriven::NearestNeighbors *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::datadriven::NearestNeighbors **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1LearnerSGDEOnOff_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_, jlong jarg8, jobject jarg8_, jlong jarg9, jboolean jarg10, jdouble jarg11, jstring jarg12) {
  jlong jresult = 0 ;
  sgpp::base::RegularGridConfiguration *arg1 = 0 ;
  sgpp::base::AdpativityConfiguration *arg2 = 0 ;
  sgpp::datadriven::RegularizationConfiguration *arg3 = 0 ;
  sgpp::datadriven::DensityEstimationConfiguration *arg4 = 0 ;
  sgpp::datadriven::Dataset *arg5 = 0 ;
  sgpp::datadriven::Dataset *arg6 = 0 ;
  sgpp::datadriven::Dataset *arg7 = (sgpp::datadriven::Dataset *) 0 ;
  sgpp::datadriven::DataVector *arg8 = 0 ;
  size_t arg9 ;
  bool arg10 ;
  double arg11 ;
  std::string arg12 ;
  sgpp::datadriven::LearnerSGDEOnOff *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  (void)jarg7_;
  (void)jarg8_;
  arg1 = *(sgpp::base::RegularGridConfiguration **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::RegularGridConfiguration & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::base::AdpativityConfiguration **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::AdpativityConfiguration & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::datadriven::RegularizationConfiguration **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::RegularizationConfiguration & reference is null");
    return 0;
  } 
  arg4 = *(sgpp::datadriven::DensityEstimationConfiguration **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::DensityEstimationConfiguration & reference is null");
    return 0;
  } 
  arg5 = *(sgpp::datadriven::Dataset **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::Dataset & reference is null");
    return 0;
  } 
  arg6 = *(sgpp::datadriven::Dataset **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::Dataset & reference is null");
    return 0;
  } 
  arg7 = *(sgpp::datadriven::Dataset **)&jarg7; 
  arg8 = *(sgpp::datadriven::DataVector **)&jarg8;
  if (!arg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::DataVector & reference is null");
    return 0;
  } 
  arg9 = (size_t)jarg9; 
  arg10 = jarg10 ? true : false; 
  arg11 = (double)jarg11; 
  if(!jarg12) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg12_pstr = (const char *)jenv->GetStringUTFChars(jarg12, 0); 
  if (!arg12_pstr) return 0;
  (&arg12)->assign(arg12_pstr);
  jenv->ReleaseStringUTFChars(jarg12, arg12_pstr); 
  {
    try {
      result = (sgpp::datadriven::LearnerSGDEOnOff *)new sgpp::datadriven::LearnerSGDEOnOff(*arg1,*arg2,*arg3,*arg4,*arg5,*arg6,arg7,*arg8,arg9,arg10,arg11,arg12);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::LearnerSGDEOnOff **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1LearnerSGDEOnOff_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_, jlong jarg8, jobject jarg8_, jlong jarg9, jboolean jarg10, jdouble jarg11) {
  jlong jresult = 0 ;
  sgpp::base::RegularGridConfiguration *arg1 = 0 ;
  sgpp::base::AdpativityConfiguration *arg2 = 0 ;
  sgpp::datadriven::RegularizationConfiguration *arg3 = 0 ;
  sgpp::datadriven::DensityEstimationConfiguration *arg4 = 0 ;
  sgpp::datadriven::Dataset *arg5 = 0 ;
  sgpp::datadriven::Dataset *arg6 = 0 ;
  sgpp::datadriven::Dataset *arg7 = (sgpp::datadriven::Dataset *) 0 ;
  sgpp::datadriven::DataVector *arg8 = 0 ;
  size_t arg9 ;
  bool arg10 ;
  double arg11 ;
  sgpp::datadriven::LearnerSGDEOnOff *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  (void)jarg7_;
  (void)jarg8_;
  arg1 = *(sgpp::base::RegularGridConfiguration **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::RegularGridConfiguration & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::base::AdpativityConfiguration **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::AdpativityConfiguration & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::datadriven::RegularizationConfiguration **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::RegularizationConfiguration & reference is null");
    return 0;
  } 
  arg4 = *(sgpp::datadriven::DensityEstimationConfiguration **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::DensityEstimationConfiguration & reference is null");
    return 0;
  } 
  arg5 = *(sgpp::datadriven::Dataset **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::Dataset & reference is null");
    return 0;
  } 
  arg6 = *(sgpp::datadriven::Dataset **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::Dataset & reference is null");
    return 0;
  } 
  arg7 = *(sgpp::datadriven::Dataset **)&jarg7; 
  arg8 = *(sgpp::datadriven::DataVector **)&jarg8;
  if (!arg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::DataVector & reference is null");
    return 0;
  } 
  arg9 = (size_t)jarg9; 
  arg10 = jarg10 ? true : false; 
  arg11 = (double)jarg11; 
  {
    try {
      result = (sgpp::datadriven::LearnerSGDEOnOff *)new sgpp::datadriven::LearnerSGDEOnOff(*arg1,*arg2,*arg3,*arg4,*arg5,*arg6,arg7,*arg8,arg9,arg10,arg11);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::LearnerSGDEOnOff **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_LearnerSGDEOnOff_1train_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jstring jarg4, jstring jarg5, jlong jarg6, jdouble jarg7, jlong jarg8, jlong jarg9, jboolean jarg10, jlong jarg11) {
  sgpp::datadriven::LearnerSGDEOnOff *arg1 = (sgpp::datadriven::LearnerSGDEOnOff *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  size_t arg6 ;
  double arg7 ;
  size_t arg8 ;
  size_t arg9 ;
  bool arg10 ;
  size_t arg11 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::LearnerSGDEOnOff **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return ;
  (&arg5)->assign(arg5_pstr);
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  arg6 = (size_t)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (size_t)jarg8; 
  arg9 = (size_t)jarg9; 
  arg10 = jarg10 ? true : false; 
  arg11 = (size_t)jarg11; 
  {
    try {
      (arg1)->train(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_LearnerSGDEOnOff_1train_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jlong jarg4) {
  sgpp::datadriven::LearnerSGDEOnOff *arg1 = (sgpp::datadriven::LearnerSGDEOnOff *) 0 ;
  sgpp::datadriven::Dataset *arg2 = 0 ;
  bool arg3 ;
  std::vector< std::pair< std::list< size_t >,size_t > > *arg4 = (std::vector< std::pair< std::list< size_t >,size_t > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::datadriven::LearnerSGDEOnOff **)&jarg1; 
  arg2 = *(sgpp::datadriven::Dataset **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::Dataset & reference is null");
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = *(std::vector< std::pair< std::list< size_t >,size_t > > **)&jarg4; 
  {
    try {
      (arg1)->train(*arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_LearnerSGDEOnOff_1train_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  sgpp::datadriven::LearnerSGDEOnOff *arg1 = (sgpp::datadriven::LearnerSGDEOnOff *) 0 ;
  sgpp::datadriven::Dataset *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::datadriven::LearnerSGDEOnOff **)&jarg1; 
  arg2 = *(sgpp::datadriven::Dataset **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::Dataset & reference is null");
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->train(*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_LearnerSGDEOnOff_1train_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::datadriven::LearnerSGDEOnOff *arg1 = (sgpp::datadriven::LearnerSGDEOnOff *) 0 ;
  sgpp::datadriven::Dataset *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::datadriven::LearnerSGDEOnOff **)&jarg1; 
  arg2 = *(sgpp::datadriven::Dataset **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::Dataset & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->train(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_LearnerSGDEOnOff_1train_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3, jlong jarg4) {
  sgpp::datadriven::LearnerSGDEOnOff *arg1 = (sgpp::datadriven::LearnerSGDEOnOff *) 0 ;
  std::vector< std::pair< sgpp::base::DataMatrix *,double > > *arg2 = 0 ;
  bool arg3 ;
  std::vector< std::pair< std::list< size_t >,size_t > > *arg4 = (std::vector< std::pair< std::list< size_t >,size_t > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::LearnerSGDEOnOff **)&jarg1; 
  arg2 = *(std::vector< std::pair< sgpp::base::DataMatrix *,double > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< sgpp::base::DataMatrix *,double > > & reference is null");
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = *(std::vector< std::pair< std::list< size_t >,size_t > > **)&jarg4; 
  {
    try {
      (arg1)->train(*arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_LearnerSGDEOnOff_1train_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  sgpp::datadriven::LearnerSGDEOnOff *arg1 = (sgpp::datadriven::LearnerSGDEOnOff *) 0 ;
  std::vector< std::pair< sgpp::base::DataMatrix *,double > > *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::LearnerSGDEOnOff **)&jarg1; 
  arg2 = *(std::vector< std::pair< sgpp::base::DataMatrix *,double > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< sgpp::base::DataMatrix *,double > > & reference is null");
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->train(*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_LearnerSGDEOnOff_1train_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::datadriven::LearnerSGDEOnOff *arg1 = (sgpp::datadriven::LearnerSGDEOnOff *) 0 ;
  std::vector< std::pair< sgpp::base::DataMatrix *,double > > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::LearnerSGDEOnOff **)&jarg1; 
  arg2 = *(std::vector< std::pair< sgpp::base::DataMatrix *,double > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< sgpp::base::DataMatrix *,double > > & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->train(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_LearnerSGDEOnOff_1getAccuracy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::datadriven::LearnerSGDEOnOff *arg1 = (sgpp::datadriven::LearnerSGDEOnOff *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::LearnerSGDEOnOff **)&jarg1; 
  {
    try {
      result = (double)((sgpp::datadriven::LearnerSGDEOnOff const *)arg1)->getAccuracy();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_LearnerSGDEOnOff_1predict_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::datadriven::LearnerSGDEOnOff *arg1 = (sgpp::datadriven::LearnerSGDEOnOff *) 0 ;
  sgpp::datadriven::DataMatrix *arg2 = 0 ;
  sgpp::datadriven::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::datadriven::LearnerSGDEOnOff **)&jarg1; 
  arg2 = *(sgpp::datadriven::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::DataMatrix & reference is null");
    return ;
  } 
  arg3 = *(sgpp::datadriven::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::DataVector & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::datadriven::LearnerSGDEOnOff const *)arg1)->predict(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_sgpp_jsgppJNI_LearnerSGDEOnOff_1predict_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  sgpp::datadriven::LearnerSGDEOnOff *arg1 = (sgpp::datadriven::LearnerSGDEOnOff *) 0 ;
  sgpp::datadriven::DataVector *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::datadriven::LearnerSGDEOnOff **)&jarg1; 
  arg2 = *(sgpp::datadriven::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::DataVector & reference is null");
    return 0;
  } 
  {
    try {
      result = (int)((sgpp::datadriven::LearnerSGDEOnOff const *)arg1)->predict(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_LearnerSGDEOnOff_1getError(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::datadriven::LearnerSGDEOnOff *arg1 = (sgpp::datadriven::LearnerSGDEOnOff *) 0 ;
  sgpp::datadriven::Dataset *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::datadriven::LearnerSGDEOnOff **)&jarg1; 
  arg2 = *(sgpp::datadriven::Dataset **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::Dataset & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)((sgpp::datadriven::LearnerSGDEOnOff const *)arg1)->getError(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_LearnerSGDEOnOff_1getAvgErrors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::datadriven::LearnerSGDEOnOff *arg1 = (sgpp::datadriven::LearnerSGDEOnOff *) 0 ;
  sgpp::datadriven::DataVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::datadriven::LearnerSGDEOnOff **)&jarg1; 
  arg2 = *(sgpp::datadriven::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::DataVector & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::datadriven::LearnerSGDEOnOff const *)arg1)->getAvgErrors(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_LearnerSGDEOnOff_1storeResults(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::datadriven::LearnerSGDEOnOff *arg1 = (sgpp::datadriven::LearnerSGDEOnOff *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::LearnerSGDEOnOff **)&jarg1; 
  {
    try {
      (arg1)->storeResults();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_LearnerSGDEOnOff_1getDensities(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::datadriven::LearnerSGDEOnOff *arg1 = (sgpp::datadriven::LearnerSGDEOnOff *) 0 ;
  sgpp::datadriven::DataVector *arg2 = 0 ;
  sgpp::datadriven::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::datadriven::LearnerSGDEOnOff **)&jarg1; 
  arg2 = *(sgpp::datadriven::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::DataVector & reference is null");
    return ;
  } 
  arg3 = *(sgpp::datadriven::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::DataVector & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::datadriven::LearnerSGDEOnOff const *)arg1)->getDensities(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_LearnerSGDEOnOff_1setCrossValidationParameters(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jboolean jarg7) {
  sgpp::datadriven::LearnerSGDEOnOff *arg1 = (sgpp::datadriven::LearnerSGDEOnOff *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  sgpp::datadriven::DataMatrix *arg5 = (sgpp::datadriven::DataMatrix *) 0 ;
  sgpp::datadriven::DataMatrix *arg6 = (sgpp::datadriven::DataMatrix *) 0 ;
  bool arg7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(sgpp::datadriven::LearnerSGDEOnOff **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(sgpp::datadriven::DataMatrix **)&jarg5; 
  arg6 = *(sgpp::datadriven::DataMatrix **)&jarg6; 
  arg7 = jarg7 ? true : false; 
  {
    try {
      (arg1)->setCrossValidationParameters(arg2,arg3,arg4,arg5,arg6,arg7);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_LearnerSGDEOnOff_1getNumClasses(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::LearnerSGDEOnOff *arg1 = (sgpp::datadriven::LearnerSGDEOnOff *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::LearnerSGDEOnOff **)&jarg1; 
  {
    try {
      result = ((sgpp::datadriven::LearnerSGDEOnOff const *)arg1)->getNumClasses();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_LearnerSGDEOnOff_1getDensityFunctions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::LearnerSGDEOnOff *arg1 = (sgpp::datadriven::LearnerSGDEOnOff *) 0 ;
  sgpp::datadriven::ClassDensityConntainer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::LearnerSGDEOnOff **)&jarg1; 
  {
    try {
      result = (sgpp::datadriven::ClassDensityConntainer *) &(arg1)->getDensityFunctions();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::ClassDensityConntainer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1LearnerSGDEOnOff(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::datadriven::LearnerSGDEOnOff *arg1 = (sgpp::datadriven::LearnerSGDEOnOff *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::datadriven::LearnerSGDEOnOff **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1LearnerSGD(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_, jlong jarg8, jobject jarg8_, jdouble jarg9, jdouble jarg10, jlong jarg11, jboolean jarg12) {
  jlong jresult = 0 ;
  sgpp::base::RegularGridConfiguration *arg1 = 0 ;
  sgpp::base::AdpativityConfiguration *arg2 = 0 ;
  sgpp::base::DataMatrix *arg3 = 0 ;
  sgpp::base::DataVector *arg4 = 0 ;
  sgpp::base::DataMatrix *arg5 = 0 ;
  sgpp::base::DataVector *arg6 = 0 ;
  sgpp::base::DataMatrix *arg7 = (sgpp::base::DataMatrix *) 0 ;
  sgpp::base::DataVector *arg8 = (sgpp::base::DataVector *) 0 ;
  double arg9 ;
  double arg10 ;
  size_t arg11 ;
  bool arg12 ;
  sgpp::datadriven::LearnerSGD *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  (void)jarg7_;
  (void)jarg8_;
  arg1 = *(sgpp::base::RegularGridConfiguration **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::RegularGridConfiguration & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::base::AdpativityConfiguration **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::AdpativityConfiguration & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::base::DataMatrix **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return 0;
  } 
  arg4 = *(sgpp::base::DataVector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  arg5 = *(sgpp::base::DataMatrix **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return 0;
  } 
  arg6 = *(sgpp::base::DataVector **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  arg7 = *(sgpp::base::DataMatrix **)&jarg7; 
  arg8 = *(sgpp::base::DataVector **)&jarg8; 
  arg9 = (double)jarg9; 
  arg10 = (double)jarg10; 
  arg11 = (size_t)jarg11; 
  arg12 = jarg12 ? true : false; 
  {
    try {
      result = (sgpp::datadriven::LearnerSGD *)new sgpp::datadriven::LearnerSGD(*arg1,*arg2,*arg3,*arg4,*arg5,*arg6,arg7,arg8,arg9,arg10,arg11,arg12);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::LearnerSGD **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1LearnerSGD(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::datadriven::LearnerSGD *arg1 = (sgpp::datadriven::LearnerSGD *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::datadriven::LearnerSGD **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_LearnerSGD_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::datadriven::LearnerSGD *arg1 = (sgpp::datadriven::LearnerSGD *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::LearnerSGD **)&jarg1; 
  {
    try {
      (arg1)->initialize();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_LearnerSGD_1train(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jstring jarg4, jlong jarg5, jdouble jarg6, jlong jarg7, jlong jarg8) {
  sgpp::datadriven::LearnerSGD *arg1 = (sgpp::datadriven::LearnerSGD *) 0 ;
  size_t arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  size_t arg5 ;
  double arg6 ;
  size_t arg7 ;
  size_t arg8 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::LearnerSGD **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (size_t)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (size_t)jarg7; 
  arg8 = (size_t)jarg8; 
  {
    try {
      (arg1)->train(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_LearnerSGD_1getAccuracy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jdouble jarg4) {
  jdouble jresult = 0 ;
  sgpp::datadriven::LearnerSGD *arg1 = (sgpp::datadriven::LearnerSGD *) 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  double arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::datadriven::LearnerSGD **)&jarg1; 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  arg4 = (double)jarg4; 
  {
    try {
      result = (double)(arg1)->getAccuracy(*arg2,*arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_LearnerSGD_1storeResults(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::datadriven::LearnerSGD *arg1 = (sgpp::datadriven::LearnerSGD *) 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::datadriven::LearnerSGD **)&jarg1; 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->storeResults(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_LearnerSGD_1error_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::datadriven::LearnerSGD *arg1 = (sgpp::datadriven::LearnerSGD *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::LearnerSGD **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->error = arg2;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_LearnerSGD_1error_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::datadriven::LearnerSGD *arg1 = (sgpp::datadriven::LearnerSGD *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::LearnerSGD **)&jarg1; 
  result = (double) ((arg1)->error);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_LearnerSGD_1avgErrors_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::datadriven::LearnerSGD *arg1 = (sgpp::datadriven::LearnerSGD *) 0 ;
  sgpp::base::DataVector *arg2 = (sgpp::base::DataVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::datadriven::LearnerSGD **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2; 
  if (arg1) (arg1)->avgErrors = *arg2;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_LearnerSGD_1avgErrors_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::LearnerSGD *arg1 = (sgpp::datadriven::LearnerSGD *) 0 ;
  sgpp::base::DataVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::LearnerSGD **)&jarg1; 
  result = (sgpp::base::DataVector *)& ((arg1)->avgErrors);
  *(sgpp::base::DataVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1LearnerSVM(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_, jlong jarg8, jobject jarg8_) {
  jlong jresult = 0 ;
  sgpp::base::RegularGridConfiguration *arg1 = 0 ;
  sgpp::base::AdpativityConfiguration *arg2 = 0 ;
  sgpp::base::DataMatrix *arg3 = 0 ;
  sgpp::base::DataVector *arg4 = 0 ;
  sgpp::base::DataMatrix *arg5 = 0 ;
  sgpp::base::DataVector *arg6 = 0 ;
  sgpp::base::DataMatrix *arg7 = (sgpp::base::DataMatrix *) 0 ;
  sgpp::base::DataVector *arg8 = (sgpp::base::DataVector *) 0 ;
  sgpp::datadriven::LearnerSVM *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  (void)jarg7_;
  (void)jarg8_;
  arg1 = *(sgpp::base::RegularGridConfiguration **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::RegularGridConfiguration & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::base::AdpativityConfiguration **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::AdpativityConfiguration & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::base::DataMatrix **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return 0;
  } 
  arg4 = *(sgpp::base::DataVector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  arg5 = *(sgpp::base::DataMatrix **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return 0;
  } 
  arg6 = *(sgpp::base::DataVector **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  arg7 = *(sgpp::base::DataMatrix **)&jarg7; 
  arg8 = *(sgpp::base::DataVector **)&jarg8; 
  {
    try {
      result = (sgpp::datadriven::LearnerSVM *)new sgpp::datadriven::LearnerSVM(*arg1,*arg2,*arg3,*arg4,*arg5,*arg6,arg7,arg8);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::LearnerSVM **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1LearnerSVM(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::datadriven::LearnerSVM *arg1 = (sgpp::datadriven::LearnerSVM *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::datadriven::LearnerSVM **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_LearnerSVM_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::datadriven::LearnerSVM *arg1 = (sgpp::datadriven::LearnerSVM *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::LearnerSVM **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      (arg1)->initialize(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_LearnerSVM_1train(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdouble jarg3, jdouble jarg4, jstring jarg5, jstring jarg6, jlong jarg7, jdouble jarg8, jlong jarg9, jlong jarg10) {
  sgpp::datadriven::LearnerSVM *arg1 = (sgpp::datadriven::LearnerSVM *) 0 ;
  size_t arg2 ;
  double arg3 ;
  double arg4 ;
  std::string arg5 ;
  std::string arg6 ;
  size_t arg7 ;
  double arg8 ;
  size_t arg9 ;
  size_t arg10 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::LearnerSVM **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return ;
  (&arg5)->assign(arg5_pstr);
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  if(!jarg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg6_pstr = (const char *)jenv->GetStringUTFChars(jarg6, 0); 
  if (!arg6_pstr) return ;
  (&arg6)->assign(arg6_pstr);
  jenv->ReleaseStringUTFChars(jarg6, arg6_pstr); 
  arg7 = (size_t)jarg7; 
  arg8 = (double)jarg8; 
  arg9 = (size_t)jarg9; 
  arg10 = (size_t)jarg10; 
  {
    try {
      (arg1)->train(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_LearnerSVM_1storeResults(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::datadriven::LearnerSVM *arg1 = (sgpp::datadriven::LearnerSVM *) 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::datadriven::LearnerSVM **)&jarg1; 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->storeResults(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_LearnerSVM_1getAccuracy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jdouble jarg4) {
  jdouble jresult = 0 ;
  sgpp::datadriven::LearnerSVM *arg1 = (sgpp::datadriven::LearnerSVM *) 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  double arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::datadriven::LearnerSVM **)&jarg1; 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  arg4 = (double)jarg4; 
  {
    try {
      result = (double)(arg1)->getAccuracy(*arg2,(sgpp::base::DataVector const &)*arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_LearnerSVM_1getAccuracy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3, jlong jarg4, jobject jarg4_) {
  jdouble jresult = 0 ;
  sgpp::datadriven::LearnerSVM *arg1 = (sgpp::datadriven::LearnerSVM *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double arg3 ;
  sgpp::base::DataVector *arg4 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(sgpp::datadriven::LearnerSVM **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  arg3 = (double)jarg3; 
  arg4 = *(sgpp::base::DataVector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->getAccuracy((sgpp::base::DataVector const &)*arg2,arg3,(sgpp::base::DataVector const &)*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_LearnerSVM_1predict(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::datadriven::LearnerSVM *arg1 = (sgpp::datadriven::LearnerSVM *) 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::datadriven::LearnerSVM **)&jarg1; 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->predict(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_LearnerSVM_1getError(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jstring jarg4) {
  jdouble jresult = 0 ;
  sgpp::datadriven::LearnerSVM *arg1 = (sgpp::datadriven::LearnerSVM *) 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  std::string arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::datadriven::LearnerSVM **)&jarg1; 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  {
    try {
      result = (double)(arg1)->getError(*arg2,*arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_LearnerSVM_1error_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::datadriven::LearnerSVM *arg1 = (sgpp::datadriven::LearnerSVM *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::LearnerSVM **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->error = arg2;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_LearnerSVM_1error_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::datadriven::LearnerSVM *arg1 = (sgpp::datadriven::LearnerSVM *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::LearnerSVM **)&jarg1; 
  result = (double) ((arg1)->error);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_LearnerSVM_1avgErrors_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::datadriven::LearnerSVM *arg1 = (sgpp::datadriven::LearnerSVM *) 0 ;
  sgpp::base::DataVector *arg2 = (sgpp::base::DataVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::datadriven::LearnerSVM **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2; 
  if (arg1) (arg1)->avgErrors = *arg2;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_LearnerSVM_1avgErrors_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::LearnerSVM *arg1 = (sgpp::datadriven::LearnerSVM *) 0 ;
  sgpp::base::DataVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::LearnerSVM **)&jarg1; 
  result = (sgpp::base::DataVector *)& ((arg1)->avgErrors);
  *(sgpp::base::DataVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1PrimalDualSVM(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  size_t arg3 ;
  bool arg4 ;
  sgpp::datadriven::PrimalDualSVM *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = jarg4 ? true : false; 
  {
    try {
      result = (sgpp::datadriven::PrimalDualSVM *)new sgpp::datadriven::PrimalDualSVM(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::PrimalDualSVM **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1PrimalDualSVM(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::datadriven::PrimalDualSVM *arg1 = (sgpp::datadriven::PrimalDualSVM *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::datadriven::PrimalDualSVM **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_PrimalDualSVM_1predictRaw_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jboolean jarg5) {
  jdouble jresult = 0 ;
  sgpp::datadriven::PrimalDualSVM *arg1 = (sgpp::datadriven::PrimalDualSVM *) 0 ;
  sgpp::base::Grid *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  size_t arg4 ;
  bool arg5 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::datadriven::PrimalDualSVM **)&jarg1; 
  arg2 = *(sgpp::base::Grid **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  arg4 = (size_t)jarg4; 
  arg5 = jarg5 ? true : false; 
  {
    try {
      result = (double)(arg1)->predictRaw(*arg2,*arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_PrimalDualSVM_1predictRaw_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  jdouble jresult = 0 ;
  sgpp::datadriven::PrimalDualSVM *arg1 = (sgpp::datadriven::PrimalDualSVM *) 0 ;
  sgpp::base::Grid *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  size_t arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::datadriven::PrimalDualSVM **)&jarg1; 
  arg2 = *(sgpp::base::Grid **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  arg4 = (size_t)jarg4; 
  {
    try {
      result = (double)(arg1)->predictRaw(*arg2,*arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_sgpp_jsgppJNI_PrimalDualSVM_1predict(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  jint jresult = 0 ;
  sgpp::datadriven::PrimalDualSVM *arg1 = (sgpp::datadriven::PrimalDualSVM *) 0 ;
  sgpp::base::Grid *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  size_t arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::datadriven::PrimalDualSVM **)&jarg1; 
  arg2 = *(sgpp::base::Grid **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  arg4 = (size_t)jarg4; 
  {
    try {
      result = (int)(arg1)->predict(*arg2,*arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_PrimalDualSVM_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jdouble jarg4, jlong jarg5) {
  sgpp::datadriven::PrimalDualSVM *arg1 = (sgpp::datadriven::PrimalDualSVM *) 0 ;
  sgpp::base::Grid *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  double arg4 ;
  size_t arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::datadriven::PrimalDualSVM **)&jarg1; 
  arg2 = *(sgpp::base::Grid **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg4 = (double)jarg4; 
  arg5 = (size_t)jarg5; 
  {
    try {
      (arg1)->add(*arg2,*arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_PrimalDualSVM_1multiply(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::datadriven::PrimalDualSVM *arg1 = (sgpp::datadriven::PrimalDualSVM *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::PrimalDualSVM **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->multiply(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_PrimalDualSVM_1svs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::datadriven::PrimalDualSVM *arg1 = (sgpp::datadriven::PrimalDualSVM *) 0 ;
  sgpp::base::DataMatrix *arg2 = (sgpp::base::DataMatrix *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::datadriven::PrimalDualSVM **)&jarg1; 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2; 
  if (arg1) (arg1)->svs = *arg2;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_PrimalDualSVM_1svs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::PrimalDualSVM *arg1 = (sgpp::datadriven::PrimalDualSVM *) 0 ;
  sgpp::base::DataMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::PrimalDualSVM **)&jarg1; 
  result = (sgpp::base::DataMatrix *)& ((arg1)->svs);
  *(sgpp::base::DataMatrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_PrimalDualSVM_1alphas_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::datadriven::PrimalDualSVM *arg1 = (sgpp::datadriven::PrimalDualSVM *) 0 ;
  sgpp::base::DataVector *arg2 = (sgpp::base::DataVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::datadriven::PrimalDualSVM **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2; 
  if (arg1) (arg1)->alphas = *arg2;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_PrimalDualSVM_1alphas_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::PrimalDualSVM *arg1 = (sgpp::datadriven::PrimalDualSVM *) 0 ;
  sgpp::base::DataVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::PrimalDualSVM **)&jarg1; 
  result = (sgpp::base::DataVector *)& ((arg1)->alphas);
  *(sgpp::base::DataVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_PrimalDualSVM_1norms_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::datadriven::PrimalDualSVM *arg1 = (sgpp::datadriven::PrimalDualSVM *) 0 ;
  sgpp::base::DataVector *arg2 = (sgpp::base::DataVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::datadriven::PrimalDualSVM **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2; 
  if (arg1) (arg1)->norms = *arg2;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_PrimalDualSVM_1norms_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::PrimalDualSVM *arg1 = (sgpp::datadriven::PrimalDualSVM *) 0 ;
  sgpp::base::DataVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::PrimalDualSVM **)&jarg1; 
  result = (sgpp::base::DataVector *)& ((arg1)->norms);
  *(sgpp::base::DataVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_PrimalDualSVM_1w_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::datadriven::PrimalDualSVM *arg1 = (sgpp::datadriven::PrimalDualSVM *) 0 ;
  sgpp::base::DataVector *arg2 = (sgpp::base::DataVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::datadriven::PrimalDualSVM **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2; 
  if (arg1) (arg1)->w = *arg2;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_PrimalDualSVM_1w_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::PrimalDualSVM *arg1 = (sgpp::datadriven::PrimalDualSVM *) 0 ;
  sgpp::base::DataVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::PrimalDualSVM **)&jarg1; 
  result = (sgpp::base::DataVector *)& ((arg1)->w);
  *(sgpp::base::DataVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_PrimalDualSVM_1w2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::datadriven::PrimalDualSVM *arg1 = (sgpp::datadriven::PrimalDualSVM *) 0 ;
  sgpp::base::DataVector *arg2 = (sgpp::base::DataVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::datadriven::PrimalDualSVM **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2; 
  if (arg1) (arg1)->w2 = *arg2;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_PrimalDualSVM_1w2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::PrimalDualSVM *arg1 = (sgpp::datadriven::PrimalDualSVM *) 0 ;
  sgpp::base::DataVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::PrimalDualSVM **)&jarg1; 
  result = (sgpp::base::DataVector *)& ((arg1)->w2);
  *(sgpp::base::DataVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_MultiGridRefinementFunctor_1setGridIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::datadriven::MultiGridRefinementFunctor *arg1 = (sgpp::datadriven::MultiGridRefinementFunctor *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::MultiGridRefinementFunctor **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      (arg1)->setGridIndex(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_MultiGridRefinementFunctor_1getNumGrids(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::MultiGridRefinementFunctor *arg1 = (sgpp::datadriven::MultiGridRefinementFunctor *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::MultiGridRefinementFunctor **)&jarg1; 
  {
    try {
      result = (arg1)->getNumGrids();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_MultiGridRefinementFunctor_1preComputeEvaluations(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::datadriven::MultiGridRefinementFunctor *arg1 = (sgpp::datadriven::MultiGridRefinementFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::MultiGridRefinementFunctor **)&jarg1; 
  {
    try {
      (arg1)->preComputeEvaluations();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1MultiGridRefinementFunctor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::datadriven::MultiGridRefinementFunctor *arg1 = (sgpp::datadriven::MultiGridRefinementFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::datadriven::MultiGridRefinementFunctor **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1MultiSurplusRefinementFunctor_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jboolean jarg4, jdouble jarg5) {
  jlong jresult = 0 ;
  SwigValueWrapper< std::vector< sgpp::base::Grid * > > arg1 ;
  SwigValueWrapper< std::vector< sgpp::base::DataVector * > > arg2 ;
  size_t arg3 ;
  bool arg4 ;
  double arg5 ;
  std::vector< sgpp::base::Grid * > *argp1 ;
  std::vector< sgpp::base::DataVector * > *argp2 ;
  sgpp::datadriven::MultiSurplusRefinementFunctor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(std::vector< sgpp::base::Grid * > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< sgpp::base::Grid * >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::vector< sgpp::base::DataVector * > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< sgpp::base::DataVector * >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (size_t)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (double)jarg5; 
  {
    try {
      result = (sgpp::datadriven::MultiSurplusRefinementFunctor *)new sgpp::datadriven::MultiSurplusRefinementFunctor(arg1,arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::MultiSurplusRefinementFunctor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1MultiSurplusRefinementFunctor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  SwigValueWrapper< std::vector< sgpp::base::Grid * > > arg1 ;
  SwigValueWrapper< std::vector< sgpp::base::DataVector * > > arg2 ;
  size_t arg3 ;
  bool arg4 ;
  std::vector< sgpp::base::Grid * > *argp1 ;
  std::vector< sgpp::base::DataVector * > *argp2 ;
  sgpp::datadriven::MultiSurplusRefinementFunctor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(std::vector< sgpp::base::Grid * > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< sgpp::base::Grid * >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::vector< sgpp::base::DataVector * > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< sgpp::base::DataVector * >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (size_t)jarg3; 
  arg4 = jarg4 ? true : false; 
  {
    try {
      result = (sgpp::datadriven::MultiSurplusRefinementFunctor *)new sgpp::datadriven::MultiSurplusRefinementFunctor(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::MultiSurplusRefinementFunctor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1MultiSurplusRefinementFunctor_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  SwigValueWrapper< std::vector< sgpp::base::Grid * > > arg1 ;
  SwigValueWrapper< std::vector< sgpp::base::DataVector * > > arg2 ;
  size_t arg3 ;
  std::vector< sgpp::base::Grid * > *argp1 ;
  std::vector< sgpp::base::DataVector * > *argp2 ;
  sgpp::datadriven::MultiSurplusRefinementFunctor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(std::vector< sgpp::base::Grid * > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< sgpp::base::Grid * >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::vector< sgpp::base::DataVector * > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< sgpp::base::DataVector * >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (sgpp::datadriven::MultiSurplusRefinementFunctor *)new sgpp::datadriven::MultiSurplusRefinementFunctor(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::MultiSurplusRefinementFunctor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1MultiSurplusRefinementFunctor_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  SwigValueWrapper< std::vector< sgpp::base::Grid * > > arg1 ;
  SwigValueWrapper< std::vector< sgpp::base::DataVector * > > arg2 ;
  std::vector< sgpp::base::Grid * > *argp1 ;
  std::vector< sgpp::base::DataVector * > *argp2 ;
  sgpp::datadriven::MultiSurplusRefinementFunctor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(std::vector< sgpp::base::Grid * > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< sgpp::base::Grid * >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::vector< sgpp::base::DataVector * > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< sgpp::base::DataVector * >");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (sgpp::datadriven::MultiSurplusRefinementFunctor *)new sgpp::datadriven::MultiSurplusRefinementFunctor(arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::MultiSurplusRefinementFunctor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_MultiSurplusRefinementFunctor_1operatorParentheses(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jdouble jresult = 0 ;
  sgpp::datadriven::MultiSurplusRefinementFunctor *arg1 = (sgpp::datadriven::MultiSurplusRefinementFunctor *) 0 ;
  sgpp::base::GridStorage *arg2 = 0 ;
  size_t arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::datadriven::MultiSurplusRefinementFunctor **)&jarg1; 
  arg2 = *(sgpp::base::GridStorage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (double)((sgpp::datadriven::MultiSurplusRefinementFunctor const *)arg1)->operator ()(*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_MultiSurplusRefinementFunctor_1start(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::datadriven::MultiSurplusRefinementFunctor *arg1 = (sgpp::datadriven::MultiSurplusRefinementFunctor *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::MultiSurplusRefinementFunctor **)&jarg1; 
  {
    try {
      result = (double)((sgpp::datadriven::MultiSurplusRefinementFunctor const *)arg1)->start();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_MultiSurplusRefinementFunctor_1getRefinementsNum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::MultiSurplusRefinementFunctor *arg1 = (sgpp::datadriven::MultiSurplusRefinementFunctor *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::MultiSurplusRefinementFunctor **)&jarg1; 
  {
    try {
      result = ((sgpp::datadriven::MultiSurplusRefinementFunctor const *)arg1)->getRefinementsNum();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_MultiSurplusRefinementFunctor_1getRefinementThreshold(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::datadriven::MultiSurplusRefinementFunctor *arg1 = (sgpp::datadriven::MultiSurplusRefinementFunctor *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::MultiSurplusRefinementFunctor **)&jarg1; 
  {
    try {
      result = (double)((sgpp::datadriven::MultiSurplusRefinementFunctor const *)arg1)->getRefinementThreshold();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1MultiSurplusRefinementFunctor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::datadriven::MultiSurplusRefinementFunctor *arg1 = (sgpp::datadriven::MultiSurplusRefinementFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::datadriven::MultiSurplusRefinementFunctor **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_MultiSurplusRefinementFunctor_1setGridIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::datadriven::MultiSurplusRefinementFunctor *arg1 = (sgpp::datadriven::MultiSurplusRefinementFunctor *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::MultiSurplusRefinementFunctor **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      (arg1)->setGridIndex(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_MultiSurplusRefinementFunctor_1getNumGrids(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::MultiSurplusRefinementFunctor *arg1 = (sgpp::datadriven::MultiSurplusRefinementFunctor *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::MultiSurplusRefinementFunctor **)&jarg1; 
  {
    try {
      result = (arg1)->getNumGrids();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1DataBasedRefinementFunctor_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jboolean jarg6, jlong jarg7, jobject jarg7_, jdouble jarg8) {
  jlong jresult = 0 ;
  SwigValueWrapper< std::vector< sgpp::base::Grid * > > arg1 ;
  SwigValueWrapper< std::vector< sgpp::base::DataVector * > > arg2 ;
  sgpp::base::DataMatrix *arg3 = (sgpp::base::DataMatrix *) 0 ;
  sgpp::base::DataVector *arg4 = (sgpp::base::DataVector *) 0 ;
  size_t arg5 ;
  bool arg6 ;
  std::vector< double > arg7 ;
  double arg8 ;
  std::vector< sgpp::base::Grid * > *argp1 ;
  std::vector< sgpp::base::DataVector * > *argp2 ;
  std::vector< double > *argp7 ;
  sgpp::datadriven::DataBasedRefinementFunctor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg7_;
  argp1 = *(std::vector< sgpp::base::Grid * > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< sgpp::base::Grid * >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::vector< sgpp::base::DataVector * > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< sgpp::base::DataVector * >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(sgpp::base::DataMatrix **)&jarg3; 
  arg4 = *(sgpp::base::DataVector **)&jarg4; 
  arg5 = (size_t)jarg5; 
  arg6 = jarg6 ? true : false; 
  argp7 = *(std::vector< double > **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< double >");
    return 0;
  }
  arg7 = *argp7; 
  arg8 = (double)jarg8; 
  {
    try {
      result = (sgpp::datadriven::DataBasedRefinementFunctor *)new sgpp::datadriven::DataBasedRefinementFunctor(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::DataBasedRefinementFunctor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1DataBasedRefinementFunctor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jboolean jarg6, jlong jarg7, jobject jarg7_) {
  jlong jresult = 0 ;
  SwigValueWrapper< std::vector< sgpp::base::Grid * > > arg1 ;
  SwigValueWrapper< std::vector< sgpp::base::DataVector * > > arg2 ;
  sgpp::base::DataMatrix *arg3 = (sgpp::base::DataMatrix *) 0 ;
  sgpp::base::DataVector *arg4 = (sgpp::base::DataVector *) 0 ;
  size_t arg5 ;
  bool arg6 ;
  std::vector< double > arg7 ;
  std::vector< sgpp::base::Grid * > *argp1 ;
  std::vector< sgpp::base::DataVector * > *argp2 ;
  std::vector< double > *argp7 ;
  sgpp::datadriven::DataBasedRefinementFunctor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg7_;
  argp1 = *(std::vector< sgpp::base::Grid * > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< sgpp::base::Grid * >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::vector< sgpp::base::DataVector * > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< sgpp::base::DataVector * >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(sgpp::base::DataMatrix **)&jarg3; 
  arg4 = *(sgpp::base::DataVector **)&jarg4; 
  arg5 = (size_t)jarg5; 
  arg6 = jarg6 ? true : false; 
  argp7 = *(std::vector< double > **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< double >");
    return 0;
  }
  arg7 = *argp7; 
  {
    try {
      result = (sgpp::datadriven::DataBasedRefinementFunctor *)new sgpp::datadriven::DataBasedRefinementFunctor(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::DataBasedRefinementFunctor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1DataBasedRefinementFunctor_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jboolean jarg6) {
  jlong jresult = 0 ;
  SwigValueWrapper< std::vector< sgpp::base::Grid * > > arg1 ;
  SwigValueWrapper< std::vector< sgpp::base::DataVector * > > arg2 ;
  sgpp::base::DataMatrix *arg3 = (sgpp::base::DataMatrix *) 0 ;
  sgpp::base::DataVector *arg4 = (sgpp::base::DataVector *) 0 ;
  size_t arg5 ;
  bool arg6 ;
  std::vector< sgpp::base::Grid * > *argp1 ;
  std::vector< sgpp::base::DataVector * > *argp2 ;
  sgpp::datadriven::DataBasedRefinementFunctor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  (void)jarg4_;
  argp1 = *(std::vector< sgpp::base::Grid * > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< sgpp::base::Grid * >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::vector< sgpp::base::DataVector * > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< sgpp::base::DataVector * >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(sgpp::base::DataMatrix **)&jarg3; 
  arg4 = *(sgpp::base::DataVector **)&jarg4; 
  arg5 = (size_t)jarg5; 
  arg6 = jarg6 ? true : false; 
  {
    try {
      result = (sgpp::datadriven::DataBasedRefinementFunctor *)new sgpp::datadriven::DataBasedRefinementFunctor(arg1,arg2,arg3,arg4,arg5,arg6);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::DataBasedRefinementFunctor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1DataBasedRefinementFunctor_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5) {
  jlong jresult = 0 ;
  SwigValueWrapper< std::vector< sgpp::base::Grid * > > arg1 ;
  SwigValueWrapper< std::vector< sgpp::base::DataVector * > > arg2 ;
  sgpp::base::DataMatrix *arg3 = (sgpp::base::DataMatrix *) 0 ;
  sgpp::base::DataVector *arg4 = (sgpp::base::DataVector *) 0 ;
  size_t arg5 ;
  std::vector< sgpp::base::Grid * > *argp1 ;
  std::vector< sgpp::base::DataVector * > *argp2 ;
  sgpp::datadriven::DataBasedRefinementFunctor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  (void)jarg4_;
  argp1 = *(std::vector< sgpp::base::Grid * > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< sgpp::base::Grid * >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::vector< sgpp::base::DataVector * > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< sgpp::base::DataVector * >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(sgpp::base::DataMatrix **)&jarg3; 
  arg4 = *(sgpp::base::DataVector **)&jarg4; 
  arg5 = (size_t)jarg5; 
  {
    try {
      result = (sgpp::datadriven::DataBasedRefinementFunctor *)new sgpp::datadriven::DataBasedRefinementFunctor(arg1,arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::DataBasedRefinementFunctor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1DataBasedRefinementFunctor_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  SwigValueWrapper< std::vector< sgpp::base::Grid * > > arg1 ;
  SwigValueWrapper< std::vector< sgpp::base::DataVector * > > arg2 ;
  sgpp::base::DataMatrix *arg3 = (sgpp::base::DataMatrix *) 0 ;
  sgpp::base::DataVector *arg4 = (sgpp::base::DataVector *) 0 ;
  std::vector< sgpp::base::Grid * > *argp1 ;
  std::vector< sgpp::base::DataVector * > *argp2 ;
  sgpp::datadriven::DataBasedRefinementFunctor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  (void)jarg4_;
  argp1 = *(std::vector< sgpp::base::Grid * > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< sgpp::base::Grid * >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::vector< sgpp::base::DataVector * > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< sgpp::base::DataVector * >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(sgpp::base::DataMatrix **)&jarg3; 
  arg4 = *(sgpp::base::DataVector **)&jarg4; 
  {
    try {
      result = (sgpp::datadriven::DataBasedRefinementFunctor *)new sgpp::datadriven::DataBasedRefinementFunctor(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::DataBasedRefinementFunctor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_DataBasedRefinementFunctor_1operatorParentheses(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jdouble jresult = 0 ;
  sgpp::datadriven::DataBasedRefinementFunctor *arg1 = (sgpp::datadriven::DataBasedRefinementFunctor *) 0 ;
  sgpp::base::GridStorage *arg2 = 0 ;
  size_t arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::datadriven::DataBasedRefinementFunctor **)&jarg1; 
  arg2 = *(sgpp::base::GridStorage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (double)((sgpp::datadriven::DataBasedRefinementFunctor const *)arg1)->operator ()(*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_DataBasedRefinementFunctor_1start(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::datadriven::DataBasedRefinementFunctor *arg1 = (sgpp::datadriven::DataBasedRefinementFunctor *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DataBasedRefinementFunctor **)&jarg1; 
  {
    try {
      result = (double)((sgpp::datadriven::DataBasedRefinementFunctor const *)arg1)->start();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DataBasedRefinementFunctor_1getRefinementsNum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::DataBasedRefinementFunctor *arg1 = (sgpp::datadriven::DataBasedRefinementFunctor *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DataBasedRefinementFunctor **)&jarg1; 
  {
    try {
      result = ((sgpp::datadriven::DataBasedRefinementFunctor const *)arg1)->getRefinementsNum();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_DataBasedRefinementFunctor_1getRefinementThreshold(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::datadriven::DataBasedRefinementFunctor *arg1 = (sgpp::datadriven::DataBasedRefinementFunctor *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DataBasedRefinementFunctor **)&jarg1; 
  {
    try {
      result = (double)((sgpp::datadriven::DataBasedRefinementFunctor const *)arg1)->getRefinementThreshold();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1DataBasedRefinementFunctor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::datadriven::DataBasedRefinementFunctor *arg1 = (sgpp::datadriven::DataBasedRefinementFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::datadriven::DataBasedRefinementFunctor **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataBasedRefinementFunctor_1setGridIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::datadriven::DataBasedRefinementFunctor *arg1 = (sgpp::datadriven::DataBasedRefinementFunctor *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DataBasedRefinementFunctor **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      (arg1)->setGridIndex(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DataBasedRefinementFunctor_1getNumGrids(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::DataBasedRefinementFunctor *arg1 = (sgpp::datadriven::DataBasedRefinementFunctor *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DataBasedRefinementFunctor **)&jarg1; 
  {
    try {
      result = (arg1)->getNumGrids();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataBasedRefinementFunctor_1setData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::datadriven::DataBasedRefinementFunctor *arg1 = (sgpp::datadriven::DataBasedRefinementFunctor *) 0 ;
  sgpp::base::DataMatrix *arg2 = (sgpp::base::DataMatrix *) 0 ;
  sgpp::base::DataVector *arg3 = (sgpp::base::DataVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::datadriven::DataBasedRefinementFunctor **)&jarg1; 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2; 
  arg3 = *(sgpp::base::DataVector **)&jarg3; 
  {
    try {
      (arg1)->setData(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataBasedRefinementFunctor_1computeH(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::datadriven::DataBasedRefinementFunctor *arg1 = (sgpp::datadriven::DataBasedRefinementFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DataBasedRefinementFunctor **)&jarg1; 
  {
    try {
      (arg1)->computeH();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DataBasedRefinementFunctor_1getHk(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  sgpp::datadriven::DataBasedRefinementFunctor *arg1 = (sgpp::datadriven::DataBasedRefinementFunctor *) 0 ;
  size_t arg2 ;
  sgpp::base::DataMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DataBasedRefinementFunctor **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (sgpp::base::DataMatrix *) &(arg1)->getHk(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::DataMatrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1GridPointBasedRefinementFunctor_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jboolean jarg4, jboolean jarg5, jdouble jarg6) {
  jlong jresult = 0 ;
  SwigValueWrapper< std::vector< sgpp::base::Grid * > > arg1 ;
  SwigValueWrapper< std::vector< sgpp::base::DataVector * > > arg2 ;
  size_t arg3 ;
  bool arg4 ;
  bool arg5 ;
  double arg6 ;
  std::vector< sgpp::base::Grid * > *argp1 ;
  std::vector< sgpp::base::DataVector * > *argp2 ;
  sgpp::datadriven::GridPointBasedRefinementFunctor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(std::vector< sgpp::base::Grid * > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< sgpp::base::Grid * >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::vector< sgpp::base::DataVector * > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< sgpp::base::DataVector * >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (size_t)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = (double)jarg6; 
  {
    try {
      result = (sgpp::datadriven::GridPointBasedRefinementFunctor *)new sgpp::datadriven::GridPointBasedRefinementFunctor(arg1,arg2,arg3,arg4,arg5,arg6);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::GridPointBasedRefinementFunctor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1GridPointBasedRefinementFunctor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jboolean jarg4, jboolean jarg5) {
  jlong jresult = 0 ;
  SwigValueWrapper< std::vector< sgpp::base::Grid * > > arg1 ;
  SwigValueWrapper< std::vector< sgpp::base::DataVector * > > arg2 ;
  size_t arg3 ;
  bool arg4 ;
  bool arg5 ;
  std::vector< sgpp::base::Grid * > *argp1 ;
  std::vector< sgpp::base::DataVector * > *argp2 ;
  sgpp::datadriven::GridPointBasedRefinementFunctor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(std::vector< sgpp::base::Grid * > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< sgpp::base::Grid * >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::vector< sgpp::base::DataVector * > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< sgpp::base::DataVector * >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (size_t)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  {
    try {
      result = (sgpp::datadriven::GridPointBasedRefinementFunctor *)new sgpp::datadriven::GridPointBasedRefinementFunctor(arg1,arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::GridPointBasedRefinementFunctor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1GridPointBasedRefinementFunctor_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  SwigValueWrapper< std::vector< sgpp::base::Grid * > > arg1 ;
  SwigValueWrapper< std::vector< sgpp::base::DataVector * > > arg2 ;
  size_t arg3 ;
  bool arg4 ;
  std::vector< sgpp::base::Grid * > *argp1 ;
  std::vector< sgpp::base::DataVector * > *argp2 ;
  sgpp::datadriven::GridPointBasedRefinementFunctor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(std::vector< sgpp::base::Grid * > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< sgpp::base::Grid * >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::vector< sgpp::base::DataVector * > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< sgpp::base::DataVector * >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (size_t)jarg3; 
  arg4 = jarg4 ? true : false; 
  {
    try {
      result = (sgpp::datadriven::GridPointBasedRefinementFunctor *)new sgpp::datadriven::GridPointBasedRefinementFunctor(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::GridPointBasedRefinementFunctor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1GridPointBasedRefinementFunctor_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  SwigValueWrapper< std::vector< sgpp::base::Grid * > > arg1 ;
  SwigValueWrapper< std::vector< sgpp::base::DataVector * > > arg2 ;
  size_t arg3 ;
  std::vector< sgpp::base::Grid * > *argp1 ;
  std::vector< sgpp::base::DataVector * > *argp2 ;
  sgpp::datadriven::GridPointBasedRefinementFunctor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(std::vector< sgpp::base::Grid * > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< sgpp::base::Grid * >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::vector< sgpp::base::DataVector * > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< sgpp::base::DataVector * >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (sgpp::datadriven::GridPointBasedRefinementFunctor *)new sgpp::datadriven::GridPointBasedRefinementFunctor(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::GridPointBasedRefinementFunctor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1GridPointBasedRefinementFunctor_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  SwigValueWrapper< std::vector< sgpp::base::Grid * > > arg1 ;
  SwigValueWrapper< std::vector< sgpp::base::DataVector * > > arg2 ;
  std::vector< sgpp::base::Grid * > *argp1 ;
  std::vector< sgpp::base::DataVector * > *argp2 ;
  sgpp::datadriven::GridPointBasedRefinementFunctor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(std::vector< sgpp::base::Grid * > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< sgpp::base::Grid * >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::vector< sgpp::base::DataVector * > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< sgpp::base::DataVector * >");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (sgpp::datadriven::GridPointBasedRefinementFunctor *)new sgpp::datadriven::GridPointBasedRefinementFunctor(arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::GridPointBasedRefinementFunctor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_GridPointBasedRefinementFunctor_1operatorParentheses(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jdouble jresult = 0 ;
  sgpp::datadriven::GridPointBasedRefinementFunctor *arg1 = (sgpp::datadriven::GridPointBasedRefinementFunctor *) 0 ;
  sgpp::base::GridStorage *arg2 = 0 ;
  size_t arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::datadriven::GridPointBasedRefinementFunctor **)&jarg1; 
  arg2 = *(sgpp::base::GridStorage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (double)((sgpp::datadriven::GridPointBasedRefinementFunctor const *)arg1)->operator ()(*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_GridPointBasedRefinementFunctor_1start(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::datadriven::GridPointBasedRefinementFunctor *arg1 = (sgpp::datadriven::GridPointBasedRefinementFunctor *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::GridPointBasedRefinementFunctor **)&jarg1; 
  {
    try {
      result = (double)((sgpp::datadriven::GridPointBasedRefinementFunctor const *)arg1)->start();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_GridPointBasedRefinementFunctor_1getRefinementsNum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::GridPointBasedRefinementFunctor *arg1 = (sgpp::datadriven::GridPointBasedRefinementFunctor *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::GridPointBasedRefinementFunctor **)&jarg1; 
  {
    try {
      result = ((sgpp::datadriven::GridPointBasedRefinementFunctor const *)arg1)->getRefinementsNum();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_GridPointBasedRefinementFunctor_1getRefinementThreshold(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::datadriven::GridPointBasedRefinementFunctor *arg1 = (sgpp::datadriven::GridPointBasedRefinementFunctor *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::GridPointBasedRefinementFunctor **)&jarg1; 
  {
    try {
      result = (double)((sgpp::datadriven::GridPointBasedRefinementFunctor const *)arg1)->getRefinementThreshold();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1GridPointBasedRefinementFunctor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::datadriven::GridPointBasedRefinementFunctor *arg1 = (sgpp::datadriven::GridPointBasedRefinementFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::datadriven::GridPointBasedRefinementFunctor **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_GridPointBasedRefinementFunctor_1setGridIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::datadriven::GridPointBasedRefinementFunctor *arg1 = (sgpp::datadriven::GridPointBasedRefinementFunctor *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::GridPointBasedRefinementFunctor **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      (arg1)->setGridIndex(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_GridPointBasedRefinementFunctor_1getNumGrids(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::GridPointBasedRefinementFunctor *arg1 = (sgpp::datadriven::GridPointBasedRefinementFunctor *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::GridPointBasedRefinementFunctor **)&jarg1; 
  {
    try {
      result = (arg1)->getNumGrids();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_GridPointBasedRefinementFunctor_1preComputeEvaluations(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::datadriven::GridPointBasedRefinementFunctor *arg1 = (sgpp::datadriven::GridPointBasedRefinementFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::GridPointBasedRefinementFunctor **)&jarg1; 
  {
    try {
      (arg1)->preComputeEvaluations();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1ZeroCrossingRefinementFunctor_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jboolean jarg4, jboolean jarg5, jdouble jarg6) {
  jlong jresult = 0 ;
  SwigValueWrapper< std::vector< sgpp::base::Grid * > > arg1 ;
  SwigValueWrapper< std::vector< sgpp::base::DataVector * > > arg2 ;
  size_t arg3 ;
  bool arg4 ;
  bool arg5 ;
  double arg6 ;
  std::vector< sgpp::base::Grid * > *argp1 ;
  std::vector< sgpp::base::DataVector * > *argp2 ;
  sgpp::datadriven::ZeroCrossingRefinementFunctor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(std::vector< sgpp::base::Grid * > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< sgpp::base::Grid * >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::vector< sgpp::base::DataVector * > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< sgpp::base::DataVector * >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (size_t)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = (double)jarg6; 
  {
    try {
      result = (sgpp::datadriven::ZeroCrossingRefinementFunctor *)new sgpp::datadriven::ZeroCrossingRefinementFunctor(arg1,arg2,arg3,arg4,arg5,arg6);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::ZeroCrossingRefinementFunctor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1ZeroCrossingRefinementFunctor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jboolean jarg4, jboolean jarg5) {
  jlong jresult = 0 ;
  SwigValueWrapper< std::vector< sgpp::base::Grid * > > arg1 ;
  SwigValueWrapper< std::vector< sgpp::base::DataVector * > > arg2 ;
  size_t arg3 ;
  bool arg4 ;
  bool arg5 ;
  std::vector< sgpp::base::Grid * > *argp1 ;
  std::vector< sgpp::base::DataVector * > *argp2 ;
  sgpp::datadriven::ZeroCrossingRefinementFunctor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(std::vector< sgpp::base::Grid * > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< sgpp::base::Grid * >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::vector< sgpp::base::DataVector * > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< sgpp::base::DataVector * >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (size_t)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  {
    try {
      result = (sgpp::datadriven::ZeroCrossingRefinementFunctor *)new sgpp::datadriven::ZeroCrossingRefinementFunctor(arg1,arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::ZeroCrossingRefinementFunctor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1ZeroCrossingRefinementFunctor_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  SwigValueWrapper< std::vector< sgpp::base::Grid * > > arg1 ;
  SwigValueWrapper< std::vector< sgpp::base::DataVector * > > arg2 ;
  size_t arg3 ;
  bool arg4 ;
  std::vector< sgpp::base::Grid * > *argp1 ;
  std::vector< sgpp::base::DataVector * > *argp2 ;
  sgpp::datadriven::ZeroCrossingRefinementFunctor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(std::vector< sgpp::base::Grid * > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< sgpp::base::Grid * >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::vector< sgpp::base::DataVector * > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< sgpp::base::DataVector * >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (size_t)jarg3; 
  arg4 = jarg4 ? true : false; 
  {
    try {
      result = (sgpp::datadriven::ZeroCrossingRefinementFunctor *)new sgpp::datadriven::ZeroCrossingRefinementFunctor(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::ZeroCrossingRefinementFunctor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1ZeroCrossingRefinementFunctor_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  SwigValueWrapper< std::vector< sgpp::base::Grid * > > arg1 ;
  SwigValueWrapper< std::vector< sgpp::base::DataVector * > > arg2 ;
  size_t arg3 ;
  std::vector< sgpp::base::Grid * > *argp1 ;
  std::vector< sgpp::base::DataVector * > *argp2 ;
  sgpp::datadriven::ZeroCrossingRefinementFunctor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(std::vector< sgpp::base::Grid * > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< sgpp::base::Grid * >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::vector< sgpp::base::DataVector * > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< sgpp::base::DataVector * >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (sgpp::datadriven::ZeroCrossingRefinementFunctor *)new sgpp::datadriven::ZeroCrossingRefinementFunctor(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::ZeroCrossingRefinementFunctor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1ZeroCrossingRefinementFunctor_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  SwigValueWrapper< std::vector< sgpp::base::Grid * > > arg1 ;
  SwigValueWrapper< std::vector< sgpp::base::DataVector * > > arg2 ;
  std::vector< sgpp::base::Grid * > *argp1 ;
  std::vector< sgpp::base::DataVector * > *argp2 ;
  sgpp::datadriven::ZeroCrossingRefinementFunctor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(std::vector< sgpp::base::Grid * > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< sgpp::base::Grid * >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::vector< sgpp::base::DataVector * > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< sgpp::base::DataVector * >");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (sgpp::datadriven::ZeroCrossingRefinementFunctor *)new sgpp::datadriven::ZeroCrossingRefinementFunctor(arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::ZeroCrossingRefinementFunctor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_ZeroCrossingRefinementFunctor_1operatorParentheses(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jdouble jresult = 0 ;
  sgpp::datadriven::ZeroCrossingRefinementFunctor *arg1 = (sgpp::datadriven::ZeroCrossingRefinementFunctor *) 0 ;
  sgpp::base::GridStorage *arg2 = 0 ;
  size_t arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::datadriven::ZeroCrossingRefinementFunctor **)&jarg1; 
  arg2 = *(sgpp::base::GridStorage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (double)((sgpp::datadriven::ZeroCrossingRefinementFunctor const *)arg1)->operator ()(*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_ZeroCrossingRefinementFunctor_1start(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::datadriven::ZeroCrossingRefinementFunctor *arg1 = (sgpp::datadriven::ZeroCrossingRefinementFunctor *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::ZeroCrossingRefinementFunctor **)&jarg1; 
  {
    try {
      result = (double)((sgpp::datadriven::ZeroCrossingRefinementFunctor const *)arg1)->start();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_ZeroCrossingRefinementFunctor_1getRefinementsNum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::ZeroCrossingRefinementFunctor *arg1 = (sgpp::datadriven::ZeroCrossingRefinementFunctor *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::ZeroCrossingRefinementFunctor **)&jarg1; 
  {
    try {
      result = ((sgpp::datadriven::ZeroCrossingRefinementFunctor const *)arg1)->getRefinementsNum();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_ZeroCrossingRefinementFunctor_1getRefinementThreshold(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::datadriven::ZeroCrossingRefinementFunctor *arg1 = (sgpp::datadriven::ZeroCrossingRefinementFunctor *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::ZeroCrossingRefinementFunctor **)&jarg1; 
  {
    try {
      result = (double)((sgpp::datadriven::ZeroCrossingRefinementFunctor const *)arg1)->getRefinementThreshold();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1ZeroCrossingRefinementFunctor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::datadriven::ZeroCrossingRefinementFunctor *arg1 = (sgpp::datadriven::ZeroCrossingRefinementFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::datadriven::ZeroCrossingRefinementFunctor **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_ZeroCrossingRefinementFunctor_1setGridIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::datadriven::ZeroCrossingRefinementFunctor *arg1 = (sgpp::datadriven::ZeroCrossingRefinementFunctor *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::ZeroCrossingRefinementFunctor **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      (arg1)->setGridIndex(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_ZeroCrossingRefinementFunctor_1getNumGrids(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::ZeroCrossingRefinementFunctor *arg1 = (sgpp::datadriven::ZeroCrossingRefinementFunctor *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::ZeroCrossingRefinementFunctor **)&jarg1; 
  {
    try {
      result = (arg1)->getNumGrids();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_ZeroCrossingRefinementFunctor_1preComputeEvaluations(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::datadriven::ZeroCrossingRefinementFunctor *arg1 = (sgpp::datadriven::ZeroCrossingRefinementFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::ZeroCrossingRefinementFunctor **)&jarg1; 
  {
    try {
      (arg1)->preComputeEvaluations();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_SampleProvider_1_1_1assign_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  sgpp::datadriven::SampleProvider *arg1 = (sgpp::datadriven::SampleProvider *) 0 ;
  sgpp::datadriven::SampleProvider *arg2 = 0 ;
  sgpp::datadriven::SampleProvider *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::datadriven::SampleProvider **)&jarg1; 
  arg2 = *(sgpp::datadriven::SampleProvider **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::SampleProvider const & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::datadriven::SampleProvider *) &(arg1)->operator =((sgpp::datadriven::SampleProvider const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::SampleProvider **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1SampleProvider(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::datadriven::SampleProvider *arg1 = (sgpp::datadriven::SampleProvider *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::datadriven::SampleProvider **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_SampleProvider_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::SampleProvider *arg1 = (sgpp::datadriven::SampleProvider *) 0 ;
  sgpp::datadriven::SampleProvider *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::SampleProvider **)&jarg1; 
  {
    try {
      result = (sgpp::datadriven::SampleProvider *)((sgpp::datadriven::SampleProvider const *)arg1)->clone();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::SampleProvider **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_SampleProvider_1getNextSamples(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  sgpp::datadriven::SampleProvider *arg1 = (sgpp::datadriven::SampleProvider *) 0 ;
  size_t arg2 ;
  sgpp::datadriven::Dataset *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::SampleProvider **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (sgpp::datadriven::Dataset *)(arg1)->getNextSamples(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::Dataset **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_SampleProvider_1getAllSamples(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::SampleProvider *arg1 = (sgpp::datadriven::SampleProvider *) 0 ;
  sgpp::datadriven::Dataset *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::SampleProvider **)&jarg1; 
  {
    try {
      result = (sgpp::datadriven::Dataset *)(arg1)->getAllSamples();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::Dataset **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_SampleProvider_1getDim(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::SampleProvider *arg1 = (sgpp::datadriven::SampleProvider *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::SampleProvider **)&jarg1; 
  {
    try {
      result = ((sgpp::datadriven::SampleProvider const *)arg1)->getDim();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_FileSampleProvider_1getNumSamples(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::FileSampleProvider *arg1 = (sgpp::datadriven::FileSampleProvider *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::FileSampleProvider **)&jarg1; 
  {
    try {
      result = ((sgpp::datadriven::FileSampleProvider const *)arg1)->getNumSamples();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_FileSampleProvider_1readFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  sgpp::datadriven::FileSampleProvider *arg1 = (sgpp::datadriven::FileSampleProvider *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::FileSampleProvider **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->readFile((std::string const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_FileSampleProvider_1readString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  sgpp::datadriven::FileSampleProvider *arg1 = (sgpp::datadriven::FileSampleProvider *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::FileSampleProvider **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->readString((std::string const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1FileSampleProvider(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::datadriven::FileSampleProvider *arg1 = (sgpp::datadriven::FileSampleProvider *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::datadriven::FileSampleProvider **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1ArffFileSampleProvider(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::datadriven::ArffFileSampleProvider *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::datadriven::ArffFileSampleProvider *)new sgpp::datadriven::ArffFileSampleProvider();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::ArffFileSampleProvider **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_ArffFileSampleProvider_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::ArffFileSampleProvider *arg1 = (sgpp::datadriven::ArffFileSampleProvider *) 0 ;
  sgpp::datadriven::SampleProvider *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::ArffFileSampleProvider **)&jarg1; 
  {
    try {
      result = (sgpp::datadriven::SampleProvider *)((sgpp::datadriven::ArffFileSampleProvider const *)arg1)->clone();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::SampleProvider **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_ArffFileSampleProvider_1getNextSamples(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  sgpp::datadriven::ArffFileSampleProvider *arg1 = (sgpp::datadriven::ArffFileSampleProvider *) 0 ;
  size_t arg2 ;
  sgpp::datadriven::Dataset *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::ArffFileSampleProvider **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (sgpp::datadriven::Dataset *)(arg1)->getNextSamples(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::Dataset **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_ArffFileSampleProvider_1getAllSamples(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::ArffFileSampleProvider *arg1 = (sgpp::datadriven::ArffFileSampleProvider *) 0 ;
  sgpp::datadriven::Dataset *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::ArffFileSampleProvider **)&jarg1; 
  {
    try {
      result = (sgpp::datadriven::Dataset *)(arg1)->getAllSamples();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::Dataset **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_ArffFileSampleProvider_1getDim(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::ArffFileSampleProvider *arg1 = (sgpp::datadriven::ArffFileSampleProvider *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::ArffFileSampleProvider **)&jarg1; 
  {
    try {
      result = ((sgpp::datadriven::ArffFileSampleProvider const *)arg1)->getDim();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_ArffFileSampleProvider_1getNumSamples(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::ArffFileSampleProvider *arg1 = (sgpp::datadriven::ArffFileSampleProvider *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::ArffFileSampleProvider **)&jarg1; 
  {
    try {
      result = ((sgpp::datadriven::ArffFileSampleProvider const *)arg1)->getNumSamples();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_ArffFileSampleProvider_1readFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  sgpp::datadriven::ArffFileSampleProvider *arg1 = (sgpp::datadriven::ArffFileSampleProvider *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::ArffFileSampleProvider **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->readFile((std::string const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_ArffFileSampleProvider_1readString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  sgpp::datadriven::ArffFileSampleProvider *arg1 = (sgpp::datadriven::ArffFileSampleProvider *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::ArffFileSampleProvider **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->readString((std::string const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1ArffFileSampleProvider(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::datadriven::ArffFileSampleProvider *arg1 = (sgpp::datadriven::ArffFileSampleProvider *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::datadriven::ArffFileSampleProvider **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_FileSampleDecorator_1_1_1assign_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  sgpp::datadriven::FileSampleDecorator *arg1 = (sgpp::datadriven::FileSampleDecorator *) 0 ;
  sgpp::datadriven::FileSampleDecorator *arg2 = 0 ;
  sgpp::datadriven::FileSampleDecorator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::datadriven::FileSampleDecorator **)&jarg1; 
  arg2 = *(sgpp::datadriven::FileSampleDecorator **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::FileSampleDecorator const & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::datadriven::FileSampleDecorator *) &(arg1)->operator =((sgpp::datadriven::FileSampleDecorator const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::FileSampleDecorator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1FileSampleDecorator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::datadriven::FileSampleDecorator *arg1 = (sgpp::datadriven::FileSampleDecorator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::datadriven::FileSampleDecorator **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_FileSampleDecorator_1getNextSamples(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  sgpp::datadriven::FileSampleDecorator *arg1 = (sgpp::datadriven::FileSampleDecorator *) 0 ;
  size_t arg2 ;
  sgpp::datadriven::Dataset *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::FileSampleDecorator **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (sgpp::datadriven::Dataset *)(arg1)->getNextSamples(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::Dataset **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_FileSampleDecorator_1getAllSamples(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::FileSampleDecorator *arg1 = (sgpp::datadriven::FileSampleDecorator *) 0 ;
  sgpp::datadriven::Dataset *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::FileSampleDecorator **)&jarg1; 
  {
    try {
      result = (sgpp::datadriven::Dataset *)(arg1)->getAllSamples();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::Dataset **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_FileSampleDecorator_1getDim(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::FileSampleDecorator *arg1 = (sgpp::datadriven::FileSampleDecorator *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::FileSampleDecorator **)&jarg1; 
  {
    try {
      result = ((sgpp::datadriven::FileSampleDecorator const *)arg1)->getDim();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_FileSampleDecorator_1getNumSamples(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::FileSampleDecorator *arg1 = (sgpp::datadriven::FileSampleDecorator *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::FileSampleDecorator **)&jarg1; 
  {
    try {
      result = ((sgpp::datadriven::FileSampleDecorator const *)arg1)->getNumSamples();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_FileSampleDecorator_1readFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  sgpp::datadriven::FileSampleDecorator *arg1 = (sgpp::datadriven::FileSampleDecorator *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::FileSampleDecorator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->readFile((std::string const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_FileSampleDecorator_1readString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  sgpp::datadriven::FileSampleDecorator *arg1 = (sgpp::datadriven::FileSampleDecorator *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::FileSampleDecorator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->readString((std::string const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataSourceConfig_1filePath_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  sgpp::datadriven::DataSourceConfig *arg1 = (sgpp::datadriven::DataSourceConfig *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DataSourceConfig **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->filePath = *arg2;
}


SWIGEXPORT jstring JNICALL Java_sgpp_jsgppJNI_DataSourceConfig_1filePath_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  sgpp::datadriven::DataSourceConfig *arg1 = (sgpp::datadriven::DataSourceConfig *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DataSourceConfig **)&jarg1; 
  result = (std::string *) & ((arg1)->filePath);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataSourceConfig_1fileType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  sgpp::datadriven::DataSourceConfig *arg1 = (sgpp::datadriven::DataSourceConfig *) 0 ;
  sgpp::datadriven::DataSourceFileType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DataSourceConfig **)&jarg1; 
  arg2 = (sgpp::datadriven::DataSourceFileType)jarg2; 
  if (arg1) (arg1)->fileType = arg2;
}


SWIGEXPORT jint JNICALL Java_sgpp_jsgppJNI_DataSourceConfig_1fileType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  sgpp::datadriven::DataSourceConfig *arg1 = (sgpp::datadriven::DataSourceConfig *) 0 ;
  sgpp::datadriven::DataSourceFileType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DataSourceConfig **)&jarg1; 
  result = (sgpp::datadriven::DataSourceFileType) ((arg1)->fileType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataSourceConfig_1isCompressed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  sgpp::datadriven::DataSourceConfig *arg1 = (sgpp::datadriven::DataSourceConfig *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DataSourceConfig **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isCompressed = arg2;
}


SWIGEXPORT jboolean JNICALL Java_sgpp_jsgppJNI_DataSourceConfig_1isCompressed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  sgpp::datadriven::DataSourceConfig *arg1 = (sgpp::datadriven::DataSourceConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DataSourceConfig **)&jarg1; 
  result = (bool) ((arg1)->isCompressed);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataSourceConfig_1numBatches_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::datadriven::DataSourceConfig *arg1 = (sgpp::datadriven::DataSourceConfig *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DataSourceConfig **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->numBatches = arg2;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DataSourceConfig_1numBatches_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::DataSourceConfig *arg1 = (sgpp::datadriven::DataSourceConfig *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DataSourceConfig **)&jarg1; 
  result =  ((arg1)->numBatches);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_DataSourceConfig_1batchSize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::datadriven::DataSourceConfig *arg1 = (sgpp::datadriven::DataSourceConfig *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DataSourceConfig **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->batchSize = arg2;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DataSourceConfig_1batchSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::DataSourceConfig *arg1 = (sgpp::datadriven::DataSourceConfig *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DataSourceConfig **)&jarg1; 
  result =  ((arg1)->batchSize);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1DataSourceConfig(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::datadriven::DataSourceConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::datadriven::DataSourceConfig *)new sgpp::datadriven::DataSourceConfig();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::DataSourceConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1DataSourceConfig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::datadriven::DataSourceConfig *arg1 = (sgpp::datadriven::DataSourceConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::datadriven::DataSourceConfig **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1DataSource(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  sgpp::datadriven::DataSourceConfig arg1 ;
  sgpp::datadriven::SampleProvider *arg2 = (sgpp::datadriven::SampleProvider *) 0 ;
  sgpp::datadriven::DataSourceConfig *argp1 ;
  sgpp::datadriven::DataSource *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(sgpp::datadriven::DataSourceConfig **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null sgpp::datadriven::DataSourceConfig");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = *(sgpp::datadriven::SampleProvider **)&jarg2; 
  {
    try {
      result = (sgpp::datadriven::DataSource *)new sgpp::datadriven::DataSource(arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::DataSource **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DataSource_1getConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::DataSource *arg1 = (sgpp::datadriven::DataSource *) 0 ;
  sgpp::datadriven::DataSourceConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DataSource **)&jarg1; 
  {
    try {
      result = (sgpp::datadriven::DataSourceConfig *) &((sgpp::datadriven::DataSource const *)arg1)->getConfig();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::DataSourceConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DataSource_1getNextSamples(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::DataSource *arg1 = (sgpp::datadriven::DataSource *) 0 ;
  sgpp::datadriven::Dataset *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DataSource **)&jarg1; 
  {
    try {
      result = (sgpp::datadriven::Dataset *)(arg1)->getNextSamples();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::Dataset **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DataSource_1getCurrentIteration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::DataSource *arg1 = (sgpp::datadriven::DataSource *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DataSource **)&jarg1; 
  {
    try {
      result = ((sgpp::datadriven::DataSource const *)arg1)->getCurrentIteration();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1DataSource(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::datadriven::DataSource *arg1 = (sgpp::datadriven::DataSource *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::datadriven::DataSource **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_FitterConfiguration_1_1_1assign_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  sgpp::datadriven::FitterConfiguration *arg1 = (sgpp::datadriven::FitterConfiguration *) 0 ;
  sgpp::datadriven::FitterConfiguration *arg2 = 0 ;
  sgpp::datadriven::FitterConfiguration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::datadriven::FitterConfiguration **)&jarg1; 
  arg2 = *(sgpp::datadriven::FitterConfiguration **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::FitterConfiguration const & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::datadriven::FitterConfiguration *) &(arg1)->operator =((sgpp::datadriven::FitterConfiguration const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::FitterConfiguration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1FitterConfiguration(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::datadriven::FitterConfiguration *arg1 = (sgpp::datadriven::FitterConfiguration *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::datadriven::FitterConfiguration **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_FitterConfiguration_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::FitterConfiguration *arg1 = (sgpp::datadriven::FitterConfiguration *) 0 ;
  sgpp::datadriven::FitterConfiguration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::FitterConfiguration **)&jarg1; 
  {
    try {
      result = (sgpp::datadriven::FitterConfiguration *)((sgpp::datadriven::FitterConfiguration const *)arg1)->clone();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::FitterConfiguration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_FitterConfiguration_1getConstGridConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::FitterConfiguration *arg1 = (sgpp::datadriven::FitterConfiguration *) 0 ;
  sgpp::base::RegularGridConfiguration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::FitterConfiguration **)&jarg1; 
  {
    try {
      result = (sgpp::base::RegularGridConfiguration *) &((sgpp::datadriven::FitterConfiguration const *)arg1)->getGridConfig();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::RegularGridConfiguration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_FitterConfiguration_1getConstRefinementConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::FitterConfiguration *arg1 = (sgpp::datadriven::FitterConfiguration *) 0 ;
  sgpp::base::AdpativityConfiguration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::FitterConfiguration **)&jarg1; 
  {
    try {
      result = (sgpp::base::AdpativityConfiguration *) &((sgpp::datadriven::FitterConfiguration const *)arg1)->getRefinementConfig();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::AdpativityConfiguration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_FitterConfiguration_1getConstCrossvalidationConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::FitterConfiguration *arg1 = (sgpp::datadriven::FitterConfiguration *) 0 ;
  sgpp::datadriven::CrossvalidationConfiguration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::FitterConfiguration **)&jarg1; 
  {
    try {
      result = (sgpp::datadriven::CrossvalidationConfiguration *) &((sgpp::datadriven::FitterConfiguration const *)arg1)->getCrossvalidationConfig();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::CrossvalidationConfiguration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_FitterConfiguration_1getConstDensityEstimationConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::FitterConfiguration *arg1 = (sgpp::datadriven::FitterConfiguration *) 0 ;
  sgpp::datadriven::DensityEstimationConfiguration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::FitterConfiguration **)&jarg1; 
  {
    try {
      result = (sgpp::datadriven::DensityEstimationConfiguration *) &((sgpp::datadriven::FitterConfiguration const *)arg1)->getDensityEstimationConfig();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::DensityEstimationConfiguration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_FitterConfiguration_1getConstSolverRefineConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::FitterConfiguration *arg1 = (sgpp::datadriven::FitterConfiguration *) 0 ;
  sgpp::solver::SLESolverConfiguration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::FitterConfiguration **)&jarg1; 
  {
    try {
      result = (sgpp::solver::SLESolverConfiguration *) &((sgpp::datadriven::FitterConfiguration const *)arg1)->getSolverRefineConfig();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::solver::SLESolverConfiguration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_FitterConfiguration_1getConstSolverFinalConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::FitterConfiguration *arg1 = (sgpp::datadriven::FitterConfiguration *) 0 ;
  sgpp::solver::SLESolverConfiguration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::FitterConfiguration **)&jarg1; 
  {
    try {
      result = (sgpp::solver::SLESolverConfiguration *) &((sgpp::datadriven::FitterConfiguration const *)arg1)->getSolverFinalConfig();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::solver::SLESolverConfiguration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_FitterConfiguration_1getConstRegularizationConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::FitterConfiguration *arg1 = (sgpp::datadriven::FitterConfiguration *) 0 ;
  sgpp::datadriven::RegularizationConfiguration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::FitterConfiguration **)&jarg1; 
  {
    try {
      result = (sgpp::datadriven::RegularizationConfiguration *) &((sgpp::datadriven::FitterConfiguration const *)arg1)->getRegularizationConfig();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::RegularizationConfiguration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_FitterConfiguration_1getConstMultipleEvalConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::FitterConfiguration *arg1 = (sgpp::datadriven::FitterConfiguration *) 0 ;
  sgpp::datadriven::OperationMultipleEvalConfiguration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::FitterConfiguration **)&jarg1; 
  {
    try {
      result = (sgpp::datadriven::OperationMultipleEvalConfiguration *) &((sgpp::datadriven::FitterConfiguration const *)arg1)->getMultipleEvalConfig();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::OperationMultipleEvalConfiguration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_FitterConfiguration_1getGridConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::FitterConfiguration *arg1 = (sgpp::datadriven::FitterConfiguration *) 0 ;
  sgpp::base::RegularGridConfiguration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::FitterConfiguration **)&jarg1; 
  {
    try {
      result = (sgpp::base::RegularGridConfiguration *) &(arg1)->getGridConfig();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::RegularGridConfiguration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_FitterConfiguration_1getRefinementConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::FitterConfiguration *arg1 = (sgpp::datadriven::FitterConfiguration *) 0 ;
  sgpp::base::AdpativityConfiguration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::FitterConfiguration **)&jarg1; 
  {
    try {
      result = (sgpp::base::AdpativityConfiguration *) &(arg1)->getRefinementConfig();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::AdpativityConfiguration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_FitterConfiguration_1getCrossvalidationConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::FitterConfiguration *arg1 = (sgpp::datadriven::FitterConfiguration *) 0 ;
  sgpp::datadriven::CrossvalidationConfiguration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::FitterConfiguration **)&jarg1; 
  {
    try {
      result = (sgpp::datadriven::CrossvalidationConfiguration *) &(arg1)->getCrossvalidationConfig();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::CrossvalidationConfiguration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_FitterConfiguration_1getDensityEstimationConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::FitterConfiguration *arg1 = (sgpp::datadriven::FitterConfiguration *) 0 ;
  sgpp::datadriven::DensityEstimationConfiguration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::FitterConfiguration **)&jarg1; 
  {
    try {
      result = (sgpp::datadriven::DensityEstimationConfiguration *) &(arg1)->getDensityEstimationConfig();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::DensityEstimationConfiguration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_FitterConfiguration_1getSolverRefineConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::FitterConfiguration *arg1 = (sgpp::datadriven::FitterConfiguration *) 0 ;
  sgpp::solver::SLESolverConfiguration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::FitterConfiguration **)&jarg1; 
  {
    try {
      result = (sgpp::solver::SLESolverConfiguration *) &(arg1)->getSolverRefineConfig();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::solver::SLESolverConfiguration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_FitterConfiguration_1getSolverFinalConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::FitterConfiguration *arg1 = (sgpp::datadriven::FitterConfiguration *) 0 ;
  sgpp::solver::SLESolverConfiguration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::FitterConfiguration **)&jarg1; 
  {
    try {
      result = (sgpp::solver::SLESolverConfiguration *) &(arg1)->getSolverFinalConfig();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::solver::SLESolverConfiguration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_FitterConfiguration_1getRegularizationConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::FitterConfiguration *arg1 = (sgpp::datadriven::FitterConfiguration *) 0 ;
  sgpp::datadriven::RegularizationConfiguration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::FitterConfiguration **)&jarg1; 
  {
    try {
      result = (sgpp::datadriven::RegularizationConfiguration *) &(arg1)->getRegularizationConfig();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::RegularizationConfiguration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_FitterConfiguration_1getMultipleEvalConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::FitterConfiguration *arg1 = (sgpp::datadriven::FitterConfiguration *) 0 ;
  sgpp::datadriven::OperationMultipleEvalConfiguration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::FitterConfiguration **)&jarg1; 
  {
    try {
      result = (sgpp::datadriven::OperationMultipleEvalConfiguration *) &(arg1)->getMultipleEvalConfig();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::OperationMultipleEvalConfiguration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_FitterConfiguration_1setupDefaults(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::datadriven::FitterConfiguration *arg1 = (sgpp::datadriven::FitterConfiguration *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::FitterConfiguration **)&jarg1; 
  {
    try {
      (arg1)->setupDefaults();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_FitterConfiguration_1readParams(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::datadriven::FitterConfiguration *arg1 = (sgpp::datadriven::FitterConfiguration *) 0 ;
  sgpp::datadriven::DataMiningConfigParser *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::FitterConfiguration **)&jarg1; 
  arg2 = *(sgpp::datadriven::DataMiningConfigParser **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::DataMiningConfigParser const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->readParams((sgpp::datadriven::DataMiningConfigParser const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1FitterConfigurationLeastSquares(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::datadriven::FitterConfigurationLeastSquares *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::datadriven::FitterConfigurationLeastSquares *)new sgpp::datadriven::FitterConfigurationLeastSquares();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::FitterConfigurationLeastSquares **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_FitterConfigurationLeastSquares_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::FitterConfigurationLeastSquares *arg1 = (sgpp::datadriven::FitterConfigurationLeastSquares *) 0 ;
  sgpp::datadriven::FitterConfiguration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::FitterConfigurationLeastSquares **)&jarg1; 
  {
    try {
      result = (sgpp::datadriven::FitterConfiguration *)((sgpp::datadriven::FitterConfigurationLeastSquares const *)arg1)->clone();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::FitterConfiguration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_FitterConfigurationLeastSquares_1setupDefaults(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::datadriven::FitterConfigurationLeastSquares *arg1 = (sgpp::datadriven::FitterConfigurationLeastSquares *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::FitterConfigurationLeastSquares **)&jarg1; 
  {
    try {
      (arg1)->setupDefaults();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_FitterConfigurationLeastSquares_1readParams(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::datadriven::FitterConfigurationLeastSquares *arg1 = (sgpp::datadriven::FitterConfigurationLeastSquares *) 0 ;
  sgpp::datadriven::DataMiningConfigParser *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::FitterConfigurationLeastSquares **)&jarg1; 
  arg2 = *(sgpp::datadriven::DataMiningConfigParser **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::DataMiningConfigParser const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->readParams((sgpp::datadriven::DataMiningConfigParser const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1FitterConfigurationLeastSquares(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::datadriven::FitterConfigurationLeastSquares *arg1 = (sgpp::datadriven::FitterConfigurationLeastSquares *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::datadriven::FitterConfigurationLeastSquares **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_sgpp_jsgppJNI_FitterTypeParser_1parse(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  sgpp::datadriven::FitterType result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (sgpp::datadriven::FitterType)sgpp::datadriven::FitterTypeParser::parse((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_sgpp_jsgppJNI_FitterTypeParser_1toString(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  sgpp::datadriven::FitterType arg1 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (sgpp::datadriven::FitterType)jarg1; 
  {
    try {
      result = (std::string *) &sgpp::datadriven::FitterTypeParser::toString(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1FitterTypeParser(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::datadriven::FitterTypeParser *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::datadriven::FitterTypeParser *)new sgpp::datadriven::FitterTypeParser();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::FitterTypeParser **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1FitterTypeParser(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::datadriven::FitterTypeParser *arg1 = (sgpp::datadriven::FitterTypeParser *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::datadriven::FitterTypeParser **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1ModelFittingBase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::datadriven::ModelFittingBase *arg1 = (sgpp::datadriven::ModelFittingBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::datadriven::ModelFittingBase **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_ModelFittingBase_1fit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::datadriven::ModelFittingBase *arg1 = (sgpp::datadriven::ModelFittingBase *) 0 ;
  sgpp::datadriven::Dataset *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::datadriven::ModelFittingBase **)&jarg1; 
  arg2 = *(sgpp::datadriven::Dataset **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::Dataset & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->fit(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_sgpp_jsgppJNI_ModelFittingBase_1refine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  sgpp::datadriven::ModelFittingBase *arg1 = (sgpp::datadriven::ModelFittingBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::ModelFittingBase **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->refine();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_ModelFittingBase_1update(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::datadriven::ModelFittingBase *arg1 = (sgpp::datadriven::ModelFittingBase *) 0 ;
  sgpp::datadriven::Dataset *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::datadriven::ModelFittingBase **)&jarg1; 
  arg2 = *(sgpp::datadriven::Dataset **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::Dataset & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->update(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_ModelFittingBase_1evaluate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::datadriven::ModelFittingBase *arg1 = (sgpp::datadriven::ModelFittingBase *) 0 ;
  sgpp::datadriven::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::datadriven::ModelFittingBase **)&jarg1; 
  arg2 = *(sgpp::datadriven::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::DataVector const & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)((sgpp::datadriven::ModelFittingBase const *)arg1)->evaluate((sgpp::datadriven::DataVector const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_ModelFittingBase_1evaluate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::datadriven::ModelFittingBase *arg1 = (sgpp::datadriven::ModelFittingBase *) 0 ;
  sgpp::datadriven::DataMatrix *arg2 = 0 ;
  sgpp::datadriven::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::datadriven::ModelFittingBase **)&jarg1; 
  arg2 = *(sgpp::datadriven::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::DataMatrix & reference is null");
    return ;
  } 
  arg3 = *(sgpp::datadriven::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->evaluate(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_ModelFittingBase_1getGrid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::ModelFittingBase *arg1 = (sgpp::datadriven::ModelFittingBase *) 0 ;
  sgpp::datadriven::Grid *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::ModelFittingBase **)&jarg1; 
  {
    try {
      result = (sgpp::datadriven::Grid *) &((sgpp::datadriven::ModelFittingBase const *)arg1)->getGrid();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::Grid **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_ModelFittingBase_1getSurpluses(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::ModelFittingBase *arg1 = (sgpp::datadriven::ModelFittingBase *) 0 ;
  sgpp::datadriven::DataVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::ModelFittingBase **)&jarg1; 
  {
    try {
      result = (sgpp::datadriven::DataVector *) &((sgpp::datadriven::ModelFittingBase const *)arg1)->getSurpluses();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::DataVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_ModelFittingBase_1getFitterConfiguration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::ModelFittingBase *arg1 = (sgpp::datadriven::ModelFittingBase *) 0 ;
  sgpp::datadriven::FitterConfiguration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::ModelFittingBase **)&jarg1; 
  {
    try {
      result = (sgpp::datadriven::FitterConfiguration *) &((sgpp::datadriven::ModelFittingBase const *)arg1)->getFitterConfiguration();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::FitterConfiguration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1ModelFittingLeastSquares(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::FitterConfigurationLeastSquares *arg1 = 0 ;
  sgpp::datadriven::ModelFittingLeastSquares *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::FitterConfigurationLeastSquares **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::FitterConfigurationLeastSquares const & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::datadriven::ModelFittingLeastSquares *)new sgpp::datadriven::ModelFittingLeastSquares((sgpp::datadriven::FitterConfigurationLeastSquares const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::ModelFittingLeastSquares **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_ModelFittingLeastSquares_1fit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::datadriven::ModelFittingLeastSquares *arg1 = (sgpp::datadriven::ModelFittingLeastSquares *) 0 ;
  sgpp::datadriven::Dataset *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::datadriven::ModelFittingLeastSquares **)&jarg1; 
  arg2 = *(sgpp::datadriven::Dataset **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::Dataset & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->fit(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_sgpp_jsgppJNI_ModelFittingLeastSquares_1refine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  sgpp::datadriven::ModelFittingLeastSquares *arg1 = (sgpp::datadriven::ModelFittingLeastSquares *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::ModelFittingLeastSquares **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->refine();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_ModelFittingLeastSquares_1update(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::datadriven::ModelFittingLeastSquares *arg1 = (sgpp::datadriven::ModelFittingLeastSquares *) 0 ;
  sgpp::datadriven::Dataset *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::datadriven::ModelFittingLeastSquares **)&jarg1; 
  arg2 = *(sgpp::datadriven::Dataset **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::Dataset & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->update(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_ModelFittingLeastSquares_1evaluate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::datadriven::ModelFittingLeastSquares *arg1 = (sgpp::datadriven::ModelFittingLeastSquares *) 0 ;
  sgpp::datadriven::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::datadriven::ModelFittingLeastSquares **)&jarg1; 
  arg2 = *(sgpp::datadriven::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::DataVector const & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)((sgpp::datadriven::ModelFittingLeastSquares const *)arg1)->evaluate((sgpp::datadriven::DataVector const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_ModelFittingLeastSquares_1evaluate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::datadriven::ModelFittingLeastSquares *arg1 = (sgpp::datadriven::ModelFittingLeastSquares *) 0 ;
  sgpp::datadriven::DataMatrix *arg2 = 0 ;
  sgpp::datadriven::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::datadriven::ModelFittingLeastSquares **)&jarg1; 
  arg2 = *(sgpp::datadriven::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::DataMatrix & reference is null");
    return ;
  } 
  arg3 = *(sgpp::datadriven::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->evaluate(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1ModelFittingLeastSquares(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::datadriven::ModelFittingLeastSquares *arg1 = (sgpp::datadriven::ModelFittingLeastSquares *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::datadriven::ModelFittingLeastSquares **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_Metric_1_1_1assign_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  sgpp::datadriven::Metric *arg1 = (sgpp::datadriven::Metric *) 0 ;
  sgpp::datadriven::Metric *arg2 = 0 ;
  sgpp::datadriven::Metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::datadriven::Metric **)&jarg1; 
  arg2 = *(sgpp::datadriven::Metric **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::Metric const & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::datadriven::Metric *) &(arg1)->operator =((sgpp::datadriven::Metric const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::Metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1Metric(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::datadriven::Metric *arg1 = (sgpp::datadriven::Metric *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::datadriven::Metric **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_Metric_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::Metric *arg1 = (sgpp::datadriven::Metric *) 0 ;
  sgpp::datadriven::Metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::Metric **)&jarg1; 
  {
    try {
      result = (sgpp::datadriven::Metric *)((sgpp::datadriven::Metric const *)arg1)->clone();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::Metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_Metric_1measure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jdouble jresult = 0 ;
  sgpp::datadriven::Metric *arg1 = (sgpp::datadriven::Metric *) 0 ;
  sgpp::datadriven::DataVector *arg2 = 0 ;
  sgpp::datadriven::DataVector *arg3 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::datadriven::Metric **)&jarg1; 
  arg2 = *(sgpp::datadriven::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::DataVector const & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::datadriven::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::DataVector const & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)((sgpp::datadriven::Metric const *)arg1)->measure((sgpp::datadriven::DataVector const &)*arg2,(sgpp::datadriven::DataVector const &)*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_MSE_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::MSE *arg1 = (sgpp::datadriven::MSE *) 0 ;
  sgpp::datadriven::Metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::MSE **)&jarg1; 
  {
    try {
      result = (sgpp::datadriven::Metric *)((sgpp::datadriven::MSE const *)arg1)->clone();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::Metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_MSE_1measure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jdouble jresult = 0 ;
  sgpp::datadriven::MSE *arg1 = (sgpp::datadriven::MSE *) 0 ;
  sgpp::datadriven::DataVector *arg2 = 0 ;
  sgpp::datadriven::DataVector *arg3 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::datadriven::MSE **)&jarg1; 
  arg2 = *(sgpp::datadriven::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::DataVector const & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::datadriven::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::DataVector const & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)((sgpp::datadriven::MSE const *)arg1)->measure((sgpp::datadriven::DataVector const &)*arg2,(sgpp::datadriven::DataVector const &)*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1MSE(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::datadriven::MSE *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::datadriven::MSE *)new sgpp::datadriven::MSE();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::MSE **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1MSE(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::datadriven::MSE *arg1 = (sgpp::datadriven::MSE *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::datadriven::MSE **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_ShufflingFunctor_1_1_1assign_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  sgpp::datadriven::ShufflingFunctor *arg1 = (sgpp::datadriven::ShufflingFunctor *) 0 ;
  sgpp::datadriven::ShufflingFunctor *arg2 = 0 ;
  sgpp::datadriven::ShufflingFunctor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::datadriven::ShufflingFunctor **)&jarg1; 
  arg2 = *(sgpp::datadriven::ShufflingFunctor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::ShufflingFunctor const & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::datadriven::ShufflingFunctor *) &(arg1)->operator =((sgpp::datadriven::ShufflingFunctor const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::ShufflingFunctor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1ShufflingFunctor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::datadriven::ShufflingFunctor *arg1 = (sgpp::datadriven::ShufflingFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::datadriven::ShufflingFunctor **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_ShufflingFunctor_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::ShufflingFunctor *arg1 = (sgpp::datadriven::ShufflingFunctor *) 0 ;
  sgpp::datadriven::ShufflingFunctor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::ShufflingFunctor **)&jarg1; 
  {
    try {
      result = (sgpp::datadriven::ShufflingFunctor *)((sgpp::datadriven::ShufflingFunctor const *)arg1)->clone();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::ShufflingFunctor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_ShufflingFunctor_1shuffle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::datadriven::ShufflingFunctor *arg1 = (sgpp::datadriven::ShufflingFunctor *) 0 ;
  sgpp::datadriven::Dataset *arg2 = 0 ;
  std::vector< size_t > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::datadriven::ShufflingFunctor **)&jarg1; 
  arg2 = *(sgpp::datadriven::Dataset **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::Dataset const & reference is null");
    return ;
  } 
  arg3 = *(std::vector< size_t > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< size_t > & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->shuffle((sgpp::datadriven::Dataset const &)*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_ShufflingFunctor_1getSeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::ShufflingFunctor *arg1 = (sgpp::datadriven::ShufflingFunctor *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::ShufflingFunctor **)&jarg1; 
  {
    try {
      result = (int64_t)((sgpp::datadriven::ShufflingFunctor const *)arg1)->getSeed();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_ShufflingFunctor_1setSeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::datadriven::ShufflingFunctor *arg1 = (sgpp::datadriven::ShufflingFunctor *) 0 ;
  int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::ShufflingFunctor **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  {
    try {
      (arg1)->setSeed(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_SequentialShufflingFunctor_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::SequentialShufflingFunctor *arg1 = (sgpp::datadriven::SequentialShufflingFunctor *) 0 ;
  sgpp::datadriven::ShufflingFunctor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::SequentialShufflingFunctor **)&jarg1; 
  {
    try {
      result = (sgpp::datadriven::ShufflingFunctor *)((sgpp::datadriven::SequentialShufflingFunctor const *)arg1)->clone();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::ShufflingFunctor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_SequentialShufflingFunctor_1shuffle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::datadriven::SequentialShufflingFunctor *arg1 = (sgpp::datadriven::SequentialShufflingFunctor *) 0 ;
  sgpp::datadriven::Dataset *arg2 = 0 ;
  std::vector< size_t > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::datadriven::SequentialShufflingFunctor **)&jarg1; 
  arg2 = *(sgpp::datadriven::Dataset **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::Dataset const & reference is null");
    return ;
  } 
  arg3 = *(std::vector< size_t > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< size_t > & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->shuffle((sgpp::datadriven::Dataset const &)*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1SequentialShufflingFunctor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::datadriven::SequentialShufflingFunctor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::datadriven::SequentialShufflingFunctor *)new sgpp::datadriven::SequentialShufflingFunctor();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::SequentialShufflingFunctor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1SequentialShufflingFunctor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::datadriven::SequentialShufflingFunctor *arg1 = (sgpp::datadriven::SequentialShufflingFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::datadriven::SequentialShufflingFunctor **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_RandomShufflingFunctor_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::RandomShufflingFunctor *arg1 = (sgpp::datadriven::RandomShufflingFunctor *) 0 ;
  sgpp::datadriven::ShufflingFunctor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::RandomShufflingFunctor **)&jarg1; 
  {
    try {
      result = (sgpp::datadriven::ShufflingFunctor *)((sgpp::datadriven::RandomShufflingFunctor const *)arg1)->clone();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::ShufflingFunctor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_RandomShufflingFunctor_1shuffle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::datadriven::RandomShufflingFunctor *arg1 = (sgpp::datadriven::RandomShufflingFunctor *) 0 ;
  sgpp::datadriven::Dataset *arg2 = 0 ;
  std::vector< size_t > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::datadriven::RandomShufflingFunctor **)&jarg1; 
  arg2 = *(sgpp::datadriven::Dataset **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::Dataset const & reference is null");
    return ;
  } 
  arg3 = *(std::vector< size_t > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< size_t > & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->shuffle((sgpp::datadriven::Dataset const &)*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1RandomShufflingFunctor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::datadriven::RandomShufflingFunctor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::datadriven::RandomShufflingFunctor *)new sgpp::datadriven::RandomShufflingFunctor();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::RandomShufflingFunctor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1RandomShufflingFunctor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::datadriven::RandomShufflingFunctor *arg1 = (sgpp::datadriven::RandomShufflingFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::datadriven::RandomShufflingFunctor **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_CrossValidationConfiguration_1folds_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::datadriven::CrossValidationConfiguration *arg1 = (sgpp::datadriven::CrossValidationConfiguration *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::CrossValidationConfiguration **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->folds = arg2;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_CrossValidationConfiguration_1folds_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::CrossValidationConfiguration *arg1 = (sgpp::datadriven::CrossValidationConfiguration *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::CrossValidationConfiguration **)&jarg1; 
  result =  ((arg1)->folds);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_CrossValidationConfiguration_1randomSeed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::datadriven::CrossValidationConfiguration *arg1 = (sgpp::datadriven::CrossValidationConfiguration *) 0 ;
  int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::CrossValidationConfiguration **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->randomSeed = arg2;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_CrossValidationConfiguration_1randomSeed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::CrossValidationConfiguration *arg1 = (sgpp::datadriven::CrossValidationConfiguration *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::CrossValidationConfiguration **)&jarg1; 
  result = (int64_t) ((arg1)->randomSeed);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_CrossValidationConfiguration_1metric_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  sgpp::datadriven::CrossValidationConfiguration *arg1 = (sgpp::datadriven::CrossValidationConfiguration *) 0 ;
  sgpp::datadriven::ScorerMetricType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::CrossValidationConfiguration **)&jarg1; 
  arg2 = (sgpp::datadriven::ScorerMetricType)jarg2; 
  if (arg1) (arg1)->metric = arg2;
}


SWIGEXPORT jint JNICALL Java_sgpp_jsgppJNI_CrossValidationConfiguration_1metric_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  sgpp::datadriven::CrossValidationConfiguration *arg1 = (sgpp::datadriven::CrossValidationConfiguration *) 0 ;
  sgpp::datadriven::ScorerMetricType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::CrossValidationConfiguration **)&jarg1; 
  result = (sgpp::datadriven::ScorerMetricType) ((arg1)->metric);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_CrossValidationConfiguration_1shuffling_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  sgpp::datadriven::CrossValidationConfiguration *arg1 = (sgpp::datadriven::CrossValidationConfiguration *) 0 ;
  sgpp::datadriven::ScorerShufflingType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::CrossValidationConfiguration **)&jarg1; 
  arg2 = (sgpp::datadriven::ScorerShufflingType)jarg2; 
  if (arg1) (arg1)->shuffling = arg2;
}


SWIGEXPORT jint JNICALL Java_sgpp_jsgppJNI_CrossValidationConfiguration_1shuffling_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  sgpp::datadriven::CrossValidationConfiguration *arg1 = (sgpp::datadriven::CrossValidationConfiguration *) 0 ;
  sgpp::datadriven::ScorerShufflingType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::CrossValidationConfiguration **)&jarg1; 
  result = (sgpp::datadriven::ScorerShufflingType) ((arg1)->shuffling);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1CrossValidationConfiguration(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::datadriven::CrossValidationConfiguration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::datadriven::CrossValidationConfiguration *)new sgpp::datadriven::CrossValidationConfiguration();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::CrossValidationConfiguration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1CrossValidationConfiguration(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::datadriven::CrossValidationConfiguration *arg1 = (sgpp::datadriven::CrossValidationConfiguration *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::datadriven::CrossValidationConfiguration **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_TestingConfiguration_1testingPortion_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::datadriven::TestingConfiguration *arg1 = (sgpp::datadriven::TestingConfiguration *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::TestingConfiguration **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->testingPortion = arg2;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_TestingConfiguration_1testingPortion_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::datadriven::TestingConfiguration *arg1 = (sgpp::datadriven::TestingConfiguration *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::TestingConfiguration **)&jarg1; 
  result = (double) ((arg1)->testingPortion);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_TestingConfiguration_1randomSeed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::datadriven::TestingConfiguration *arg1 = (sgpp::datadriven::TestingConfiguration *) 0 ;
  int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::TestingConfiguration **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->randomSeed = arg2;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_TestingConfiguration_1randomSeed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::TestingConfiguration *arg1 = (sgpp::datadriven::TestingConfiguration *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::TestingConfiguration **)&jarg1; 
  result = (int64_t) ((arg1)->randomSeed);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_TestingConfiguration_1metric_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  sgpp::datadriven::TestingConfiguration *arg1 = (sgpp::datadriven::TestingConfiguration *) 0 ;
  sgpp::datadriven::ScorerMetricType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::TestingConfiguration **)&jarg1; 
  arg2 = (sgpp::datadriven::ScorerMetricType)jarg2; 
  if (arg1) (arg1)->metric = arg2;
}


SWIGEXPORT jint JNICALL Java_sgpp_jsgppJNI_TestingConfiguration_1metric_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  sgpp::datadriven::TestingConfiguration *arg1 = (sgpp::datadriven::TestingConfiguration *) 0 ;
  sgpp::datadriven::ScorerMetricType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::TestingConfiguration **)&jarg1; 
  result = (sgpp::datadriven::ScorerMetricType) ((arg1)->metric);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_TestingConfiguration_1shuffling_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  sgpp::datadriven::TestingConfiguration *arg1 = (sgpp::datadriven::TestingConfiguration *) 0 ;
  sgpp::datadriven::ScorerShufflingType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::TestingConfiguration **)&jarg1; 
  arg2 = (sgpp::datadriven::ScorerShufflingType)jarg2; 
  if (arg1) (arg1)->shuffling = arg2;
}


SWIGEXPORT jint JNICALL Java_sgpp_jsgppJNI_TestingConfiguration_1shuffling_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  sgpp::datadriven::TestingConfiguration *arg1 = (sgpp::datadriven::TestingConfiguration *) 0 ;
  sgpp::datadriven::ScorerShufflingType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::TestingConfiguration **)&jarg1; 
  result = (sgpp::datadriven::ScorerShufflingType) ((arg1)->shuffling);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1TestingConfiguration(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::datadriven::TestingConfiguration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::datadriven::TestingConfiguration *)new sgpp::datadriven::TestingConfiguration();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::TestingConfiguration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1TestingConfiguration(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::datadriven::TestingConfiguration *arg1 = (sgpp::datadriven::TestingConfiguration *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::datadriven::TestingConfiguration **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_sgpp_jsgppJNI_ScorerMetricTypeParser_1parse(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  sgpp::datadriven::ScorerMetricType result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (sgpp::datadriven::ScorerMetricType)sgpp::datadriven::ScorerMetricTypeParser::parse((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_sgpp_jsgppJNI_ScorerMetricTypeParser_1toString(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  sgpp::datadriven::ScorerMetricType arg1 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (sgpp::datadriven::ScorerMetricType)jarg1; 
  {
    try {
      result = (std::string *) &sgpp::datadriven::ScorerMetricTypeParser::toString(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1ScorerMetricTypeParser(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::datadriven::ScorerMetricTypeParser *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::datadriven::ScorerMetricTypeParser *)new sgpp::datadriven::ScorerMetricTypeParser();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::ScorerMetricTypeParser **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1ScorerMetricTypeParser(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::datadriven::ScorerMetricTypeParser *arg1 = (sgpp::datadriven::ScorerMetricTypeParser *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::datadriven::ScorerMetricTypeParser **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_sgpp_jsgppJNI_ScorerShufflingTypeParser_1parse(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  sgpp::datadriven::ScorerShufflingType result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (sgpp::datadriven::ScorerShufflingType)sgpp::datadriven::ScorerShufflingTypeParser::parse((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_sgpp_jsgppJNI_ScorerShufflingTypeParser_1toString(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  sgpp::datadriven::ScorerShufflingType arg1 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (sgpp::datadriven::ScorerShufflingType)jarg1; 
  {
    try {
      result = (std::string *) &sgpp::datadriven::ScorerShufflingTypeParser::toString(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1ScorerShufflingTypeParser(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::datadriven::ScorerShufflingTypeParser *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::datadriven::ScorerShufflingTypeParser *)new sgpp::datadriven::ScorerShufflingTypeParser();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::ScorerShufflingTypeParser **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1ScorerShufflingTypeParser(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::datadriven::ScorerShufflingTypeParser *arg1 = (sgpp::datadriven::ScorerShufflingTypeParser *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::datadriven::ScorerShufflingTypeParser **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_Scorer_1_1_1assign_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  sgpp::datadriven::Scorer *arg1 = (sgpp::datadriven::Scorer *) 0 ;
  sgpp::datadriven::Scorer *arg2 = 0 ;
  sgpp::datadriven::Scorer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::datadriven::Scorer **)&jarg1; 
  arg2 = *(sgpp::datadriven::Scorer **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::Scorer const & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::datadriven::Scorer *) &(arg1)->operator =((sgpp::datadriven::Scorer const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::Scorer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1Scorer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::datadriven::Scorer *arg1 = (sgpp::datadriven::Scorer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::datadriven::Scorer **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_Scorer_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::Scorer *arg1 = (sgpp::datadriven::Scorer *) 0 ;
  sgpp::datadriven::Scorer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::Scorer **)&jarg1; 
  {
    try {
      result = (sgpp::datadriven::Scorer *)((sgpp::datadriven::Scorer const *)arg1)->clone();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::Scorer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_Scorer_1calculateScore_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  jdouble jresult = 0 ;
  sgpp::datadriven::Scorer *arg1 = (sgpp::datadriven::Scorer *) 0 ;
  sgpp::datadriven::ModelFittingBase *arg2 = 0 ;
  sgpp::datadriven::Dataset *arg3 = 0 ;
  double *arg4 = (double *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::datadriven::Scorer **)&jarg1; 
  arg2 = *(sgpp::datadriven::ModelFittingBase **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::ModelFittingBase & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::datadriven::Dataset **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::Dataset & reference is null");
    return 0;
  } 
  arg4 = *(double **)&jarg4; 
  {
    try {
      result = (double)(arg1)->calculateScore(*arg2,*arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_Scorer_1calculateScore_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jdouble jresult = 0 ;
  sgpp::datadriven::Scorer *arg1 = (sgpp::datadriven::Scorer *) 0 ;
  sgpp::datadriven::ModelFittingBase *arg2 = 0 ;
  sgpp::datadriven::Dataset *arg3 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::datadriven::Scorer **)&jarg1; 
  arg2 = *(sgpp::datadriven::ModelFittingBase **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::ModelFittingBase & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::datadriven::Dataset **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::Dataset & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->calculateScore(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1SplittingScorer_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  sgpp::datadriven::Metric *arg1 = (sgpp::datadriven::Metric *) 0 ;
  sgpp::datadriven::ShufflingFunctor *arg2 = (sgpp::datadriven::ShufflingFunctor *) 0 ;
  int64_t arg3 ;
  double arg4 ;
  sgpp::datadriven::SplittingScorer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::datadriven::Metric **)&jarg1; 
  arg2 = *(sgpp::datadriven::ShufflingFunctor **)&jarg2; 
  arg3 = (int64_t)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (sgpp::datadriven::SplittingScorer *)new sgpp::datadriven::SplittingScorer(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::SplittingScorer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1SplittingScorer_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  sgpp::datadriven::Metric *arg1 = (sgpp::datadriven::Metric *) 0 ;
  sgpp::datadriven::ShufflingFunctor *arg2 = (sgpp::datadriven::ShufflingFunctor *) 0 ;
  int64_t arg3 ;
  sgpp::datadriven::SplittingScorer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::datadriven::Metric **)&jarg1; 
  arg2 = *(sgpp::datadriven::ShufflingFunctor **)&jarg2; 
  arg3 = (int64_t)jarg3; 
  {
    try {
      result = (sgpp::datadriven::SplittingScorer *)new sgpp::datadriven::SplittingScorer(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::SplittingScorer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1SplittingScorer_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  sgpp::datadriven::Metric *arg1 = (sgpp::datadriven::Metric *) 0 ;
  sgpp::datadriven::ShufflingFunctor *arg2 = (sgpp::datadriven::ShufflingFunctor *) 0 ;
  sgpp::datadriven::SplittingScorer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::datadriven::Metric **)&jarg1; 
  arg2 = *(sgpp::datadriven::ShufflingFunctor **)&jarg2; 
  {
    try {
      result = (sgpp::datadriven::SplittingScorer *)new sgpp::datadriven::SplittingScorer(arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::SplittingScorer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_SplittingScorer_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::SplittingScorer *arg1 = (sgpp::datadriven::SplittingScorer *) 0 ;
  sgpp::datadriven::Scorer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::SplittingScorer **)&jarg1; 
  {
    try {
      result = (sgpp::datadriven::Scorer *)((sgpp::datadriven::SplittingScorer const *)arg1)->clone();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::Scorer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_SplittingScorer_1calculateScore_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  jdouble jresult = 0 ;
  sgpp::datadriven::SplittingScorer *arg1 = (sgpp::datadriven::SplittingScorer *) 0 ;
  sgpp::datadriven::ModelFittingBase *arg2 = 0 ;
  sgpp::datadriven::Dataset *arg3 = 0 ;
  double *arg4 = (double *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::datadriven::SplittingScorer **)&jarg1; 
  arg2 = *(sgpp::datadriven::ModelFittingBase **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::ModelFittingBase & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::datadriven::Dataset **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::Dataset & reference is null");
    return 0;
  } 
  arg4 = *(double **)&jarg4; 
  {
    try {
      result = (double)(arg1)->calculateScore(*arg2,*arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_SplittingScorer_1calculateScore_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jdouble jresult = 0 ;
  sgpp::datadriven::SplittingScorer *arg1 = (sgpp::datadriven::SplittingScorer *) 0 ;
  sgpp::datadriven::ModelFittingBase *arg2 = 0 ;
  sgpp::datadriven::Dataset *arg3 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::datadriven::SplittingScorer **)&jarg1; 
  arg2 = *(sgpp::datadriven::ModelFittingBase **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::ModelFittingBase & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::datadriven::Dataset **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::Dataset & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->calculateScore(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1SplittingScorer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::datadriven::SplittingScorer *arg1 = (sgpp::datadriven::SplittingScorer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::datadriven::SplittingScorer **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1CrossValidation_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  sgpp::datadriven::Metric *arg1 = (sgpp::datadriven::Metric *) 0 ;
  sgpp::datadriven::ShufflingFunctor *arg2 = (sgpp::datadriven::ShufflingFunctor *) 0 ;
  int64_t arg3 ;
  size_t arg4 ;
  sgpp::datadriven::CrossValidation *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::datadriven::Metric **)&jarg1; 
  arg2 = *(sgpp::datadriven::ShufflingFunctor **)&jarg2; 
  arg3 = (int64_t)jarg3; 
  arg4 = (size_t)jarg4; 
  {
    try {
      result = (sgpp::datadriven::CrossValidation *)new sgpp::datadriven::CrossValidation(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::CrossValidation **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1CrossValidation_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  sgpp::datadriven::Metric *arg1 = (sgpp::datadriven::Metric *) 0 ;
  sgpp::datadriven::ShufflingFunctor *arg2 = (sgpp::datadriven::ShufflingFunctor *) 0 ;
  int64_t arg3 ;
  sgpp::datadriven::CrossValidation *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::datadriven::Metric **)&jarg1; 
  arg2 = *(sgpp::datadriven::ShufflingFunctor **)&jarg2; 
  arg3 = (int64_t)jarg3; 
  {
    try {
      result = (sgpp::datadriven::CrossValidation *)new sgpp::datadriven::CrossValidation(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::CrossValidation **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1CrossValidation_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  sgpp::datadriven::Metric *arg1 = (sgpp::datadriven::Metric *) 0 ;
  sgpp::datadriven::ShufflingFunctor *arg2 = (sgpp::datadriven::ShufflingFunctor *) 0 ;
  sgpp::datadriven::CrossValidation *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::datadriven::Metric **)&jarg1; 
  arg2 = *(sgpp::datadriven::ShufflingFunctor **)&jarg2; 
  {
    try {
      result = (sgpp::datadriven::CrossValidation *)new sgpp::datadriven::CrossValidation(arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::CrossValidation **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_CrossValidation_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::CrossValidation *arg1 = (sgpp::datadriven::CrossValidation *) 0 ;
  sgpp::datadriven::Scorer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::CrossValidation **)&jarg1; 
  {
    try {
      result = (sgpp::datadriven::Scorer *)((sgpp::datadriven::CrossValidation const *)arg1)->clone();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::Scorer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_CrossValidation_1calculateScore_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  jdouble jresult = 0 ;
  sgpp::datadriven::CrossValidation *arg1 = (sgpp::datadriven::CrossValidation *) 0 ;
  sgpp::datadriven::ModelFittingBase *arg2 = 0 ;
  sgpp::datadriven::Dataset *arg3 = 0 ;
  double *arg4 = (double *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::datadriven::CrossValidation **)&jarg1; 
  arg2 = *(sgpp::datadriven::ModelFittingBase **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::ModelFittingBase & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::datadriven::Dataset **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::Dataset & reference is null");
    return 0;
  } 
  arg4 = *(double **)&jarg4; 
  {
    try {
      result = (double)(arg1)->calculateScore(*arg2,*arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_CrossValidation_1calculateScore_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jdouble jresult = 0 ;
  sgpp::datadriven::CrossValidation *arg1 = (sgpp::datadriven::CrossValidation *) 0 ;
  sgpp::datadriven::ModelFittingBase *arg2 = 0 ;
  sgpp::datadriven::Dataset *arg3 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::datadriven::CrossValidation **)&jarg1; 
  arg2 = *(sgpp::datadriven::ModelFittingBase **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::ModelFittingBase & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::datadriven::Dataset **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::Dataset & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->calculateScore(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1CrossValidation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::datadriven::CrossValidation *arg1 = (sgpp::datadriven::CrossValidation *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::datadriven::CrossValidation **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1SparseGridMiner_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  sgpp::datadriven::DataSource *arg1 = (sgpp::datadriven::DataSource *) 0 ;
  sgpp::datadriven::ModelFittingBase *arg2 = (sgpp::datadriven::ModelFittingBase *) 0 ;
  sgpp::datadriven::Scorer *arg3 = (sgpp::datadriven::Scorer *) 0 ;
  sgpp::datadriven::SparseGridMiner *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::datadriven::DataSource **)&jarg1; 
  arg2 = *(sgpp::datadriven::ModelFittingBase **)&jarg2; 
  arg3 = *(sgpp::datadriven::Scorer **)&jarg3; 
  {
    try {
      result = (sgpp::datadriven::SparseGridMiner *)new sgpp::datadriven::SparseGridMiner(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::SparseGridMiner **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1SparseGridMiner_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::SparseGridMiner *arg1 = 0 ;
  sgpp::datadriven::SparseGridMiner *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::SparseGridMiner **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::SparseGridMiner && reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::datadriven::SparseGridMiner *)new sgpp::datadriven::SparseGridMiner((sgpp::datadriven::SparseGridMiner &&)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::SparseGridMiner **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1SparseGridMiner(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::datadriven::SparseGridMiner *arg1 = (sgpp::datadriven::SparseGridMiner *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::datadriven::SparseGridMiner **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_SparseGridMiner_1learn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::datadriven::SparseGridMiner *arg1 = (sgpp::datadriven::SparseGridMiner *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::SparseGridMiner **)&jarg1; 
  {
    try {
      (arg1)->learn();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_sgpp_jsgppJNI_DensityEstimationTypeParser_1parse(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  sgpp::datadriven::DensityEstimationType result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (sgpp::datadriven::DensityEstimationType)sgpp::datadriven::DensityEstimationTypeParser::parse((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_sgpp_jsgppJNI_DensityEstimationTypeParser_1toString(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  sgpp::datadriven::DensityEstimationType arg1 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (sgpp::datadriven::DensityEstimationType)jarg1; 
  {
    try {
      result = (std::string *) &sgpp::datadriven::DensityEstimationTypeParser::toString(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1DensityEstimationTypeParser(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::datadriven::DensityEstimationTypeParser *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::datadriven::DensityEstimationTypeParser *)new sgpp::datadriven::DensityEstimationTypeParser();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::DensityEstimationTypeParser **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1DensityEstimationTypeParser(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::datadriven::DensityEstimationTypeParser *arg1 = (sgpp::datadriven::DensityEstimationTypeParser *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::datadriven::DensityEstimationTypeParser **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_sgpp_jsgppJNI_GridTypeParser_1parse(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  sgpp::datadriven::GridType result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (sgpp::datadriven::GridType)sgpp::datadriven::GridTypeParser::parse((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_sgpp_jsgppJNI_GridTypeParser_1toString(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  sgpp::datadriven::GridType arg1 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (sgpp::datadriven::GridType)jarg1; 
  {
    try {
      result = (std::string *) &sgpp::datadriven::GridTypeParser::toString(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1GridTypeParser(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::datadriven::GridTypeParser *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::datadriven::GridTypeParser *)new sgpp::datadriven::GridTypeParser();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::GridTypeParser **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1GridTypeParser(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::datadriven::GridTypeParser *arg1 = (sgpp::datadriven::GridTypeParser *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::datadriven::GridTypeParser **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_sgpp_jsgppJNI_MatrixDecompositionTypeParser_1parse(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  sgpp::datadriven::MatrixDecompositionType result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (sgpp::datadriven::MatrixDecompositionType)sgpp::datadriven::MatrixDecompositionTypeParser::parse((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_sgpp_jsgppJNI_MatrixDecompositionTypeParser_1toString(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  sgpp::datadriven::MatrixDecompositionType arg1 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (sgpp::datadriven::MatrixDecompositionType)jarg1; 
  {
    try {
      result = (std::string *) &sgpp::datadriven::MatrixDecompositionTypeParser::toString(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1MatrixDecompositionTypeParser(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::datadriven::MatrixDecompositionTypeParser *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::datadriven::MatrixDecompositionTypeParser *)new sgpp::datadriven::MatrixDecompositionTypeParser();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::MatrixDecompositionTypeParser **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1MatrixDecompositionTypeParser(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::datadriven::MatrixDecompositionTypeParser *arg1 = (sgpp::datadriven::MatrixDecompositionTypeParser *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::datadriven::MatrixDecompositionTypeParser **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_sgpp_jsgppJNI_RegularizationTypeParser_1parse(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  sgpp::datadriven::RegularizationType result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (sgpp::datadriven::RegularizationType)sgpp::datadriven::RegularizationTypeParser::parse((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_sgpp_jsgppJNI_RegularizationTypeParser_1toString(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  sgpp::datadriven::RegularizationType arg1 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (sgpp::datadriven::RegularizationType)jarg1; 
  {
    try {
      result = (std::string *) &sgpp::datadriven::RegularizationTypeParser::toString(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1RegularizationTypeParser(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::datadriven::RegularizationTypeParser *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::datadriven::RegularizationTypeParser *)new sgpp::datadriven::RegularizationTypeParser();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::RegularizationTypeParser **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1RegularizationTypeParser(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::datadriven::RegularizationTypeParser *arg1 = (sgpp::datadriven::RegularizationTypeParser *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::datadriven::RegularizationTypeParser **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_sgpp_jsgppJNI_SLESolverTypeParser_1parse(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  sgpp::datadriven::SLESolverType result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (sgpp::datadriven::SLESolverType)sgpp::datadriven::SLESolverTypeParser::parse((std::string const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_sgpp_jsgppJNI_SLESolverTypeParser_1toString(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  sgpp::datadriven::SLESolverType arg1 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (sgpp::datadriven::SLESolverType)jarg1; 
  {
    try {
      result = (std::string *) &sgpp::datadriven::SLESolverTypeParser::toString(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1SLESolverTypeParser(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::datadriven::SLESolverTypeParser *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::datadriven::SLESolverTypeParser *)new sgpp::datadriven::SLESolverTypeParser();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::SLESolverTypeParser **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1SLESolverTypeParser(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::datadriven::SLESolverTypeParser *arg1 = (sgpp::datadriven::SLESolverTypeParser *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::datadriven::SLESolverTypeParser **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1DataSourceBuilder(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::datadriven::DataSourceBuilder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::datadriven::DataSourceBuilder *)new sgpp::datadriven::DataSourceBuilder();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::DataSourceBuilder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DataSourceBuilder_1withPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  sgpp::datadriven::DataSourceBuilder *arg1 = (sgpp::datadriven::DataSourceBuilder *) 0 ;
  std::string *arg2 = 0 ;
  sgpp::datadriven::DataSourceBuilder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DataSourceBuilder **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (sgpp::datadriven::DataSourceBuilder *) &(arg1)->withPath((std::string const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::DataSourceBuilder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DataSourceBuilder_1withCompression(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  sgpp::datadriven::DataSourceBuilder *arg1 = (sgpp::datadriven::DataSourceBuilder *) 0 ;
  bool arg2 ;
  sgpp::datadriven::DataSourceBuilder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DataSourceBuilder **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      result = (sgpp::datadriven::DataSourceBuilder *) &(arg1)->withCompression(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::DataSourceBuilder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DataSourceBuilder_1withFileType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  sgpp::datadriven::DataSourceBuilder *arg1 = (sgpp::datadriven::DataSourceBuilder *) 0 ;
  sgpp::datadriven::DataSourceFileType arg2 ;
  sgpp::datadriven::DataSourceBuilder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DataSourceBuilder **)&jarg1; 
  arg2 = (sgpp::datadriven::DataSourceFileType)jarg2; 
  {
    try {
      result = (sgpp::datadriven::DataSourceBuilder *) &(arg1)->withFileType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::DataSourceBuilder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DataSourceBuilder_1inBatches(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  sgpp::datadriven::DataSourceBuilder *arg1 = (sgpp::datadriven::DataSourceBuilder *) 0 ;
  size_t arg2 ;
  sgpp::datadriven::DataSourceBuilder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DataSourceBuilder **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (sgpp::datadriven::DataSourceBuilder *) &(arg1)->inBatches(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::DataSourceBuilder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DataSourceBuilder_1withBatchSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  sgpp::datadriven::DataSourceBuilder *arg1 = (sgpp::datadriven::DataSourceBuilder *) 0 ;
  size_t arg2 ;
  sgpp::datadriven::DataSourceBuilder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DataSourceBuilder **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (sgpp::datadriven::DataSourceBuilder *) &(arg1)->withBatchSize(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::DataSourceBuilder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DataSourceBuilder_1assemble(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::DataSourceBuilder *arg1 = (sgpp::datadriven::DataSourceBuilder *) 0 ;
  sgpp::datadriven::DataSource *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::DataSourceBuilder **)&jarg1; 
  {
    try {
      result = (sgpp::datadriven::DataSource *)((sgpp::datadriven::DataSourceBuilder const *)arg1)->assemble();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::DataSource **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DataSourceBuilder_1fromConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  sgpp::datadriven::DataSourceBuilder *arg1 = (sgpp::datadriven::DataSourceBuilder *) 0 ;
  sgpp::datadriven::DataSourceConfig *arg2 = 0 ;
  sgpp::datadriven::DataSource *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::datadriven::DataSourceBuilder **)&jarg1; 
  arg2 = *(sgpp::datadriven::DataSourceConfig **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::DataSourceConfig const & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::datadriven::DataSource *)(arg1)->fromConfig((sgpp::datadriven::DataSourceConfig const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::DataSource **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1DataSourceBuilder(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::datadriven::DataSourceBuilder *arg1 = (sgpp::datadriven::DataSourceBuilder *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::datadriven::DataSourceBuilder **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1ScorerFactory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::datadriven::ScorerFactory *arg1 = (sgpp::datadriven::ScorerFactory *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::datadriven::ScorerFactory **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_ScorerFactory_1buildScorer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  sgpp::datadriven::ScorerFactory *arg1 = (sgpp::datadriven::ScorerFactory *) 0 ;
  sgpp::datadriven::DataMiningConfigParser *arg2 = 0 ;
  sgpp::datadriven::Scorer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::ScorerFactory **)&jarg1; 
  arg2 = *(sgpp::datadriven::DataMiningConfigParser **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::DataMiningConfigParser const & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::datadriven::Scorer *)((sgpp::datadriven::ScorerFactory const *)arg1)->buildScorer((sgpp::datadriven::DataMiningConfigParser const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::Scorer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1SplittingScorerFactory(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::datadriven::SplittingScorerFactory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::datadriven::SplittingScorerFactory *)new sgpp::datadriven::SplittingScorerFactory();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::SplittingScorerFactory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_SplittingScorerFactory_1buildScorer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  sgpp::datadriven::SplittingScorerFactory *arg1 = (sgpp::datadriven::SplittingScorerFactory *) 0 ;
  sgpp::datadriven::DataMiningConfigParser *arg2 = 0 ;
  sgpp::datadriven::Scorer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::SplittingScorerFactory **)&jarg1; 
  arg2 = *(sgpp::datadriven::DataMiningConfigParser **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::DataMiningConfigParser const & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::datadriven::Scorer *)((sgpp::datadriven::SplittingScorerFactory const *)arg1)->buildScorer((sgpp::datadriven::DataMiningConfigParser const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::Scorer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1SplittingScorerFactory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::datadriven::SplittingScorerFactory *arg1 = (sgpp::datadriven::SplittingScorerFactory *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::datadriven::SplittingScorerFactory **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1CrossValidationScorerFactory(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::datadriven::CrossValidationScorerFactory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::datadriven::CrossValidationScorerFactory *)new sgpp::datadriven::CrossValidationScorerFactory();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::CrossValidationScorerFactory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_CrossValidationScorerFactory_1buildScorer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  sgpp::datadriven::CrossValidationScorerFactory *arg1 = (sgpp::datadriven::CrossValidationScorerFactory *) 0 ;
  sgpp::datadriven::DataMiningConfigParser *arg2 = 0 ;
  sgpp::datadriven::Scorer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::CrossValidationScorerFactory **)&jarg1; 
  arg2 = *(sgpp::datadriven::DataMiningConfigParser **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::DataMiningConfigParser const & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::datadriven::Scorer *)((sgpp::datadriven::CrossValidationScorerFactory const *)arg1)->buildScorer((sgpp::datadriven::DataMiningConfigParser const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::Scorer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1CrossValidationScorerFactory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::datadriven::CrossValidationScorerFactory *arg1 = (sgpp::datadriven::CrossValidationScorerFactory *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::datadriven::CrossValidationScorerFactory **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1MinerFactory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::datadriven::MinerFactory *arg1 = (sgpp::datadriven::MinerFactory *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::datadriven::MinerFactory **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_MinerFactory_1buildMiner(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  sgpp::datadriven::MinerFactory *arg1 = (sgpp::datadriven::MinerFactory *) 0 ;
  std::string *arg2 = 0 ;
  sgpp::datadriven::SparseGridMiner *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::MinerFactory **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (sgpp::datadriven::SparseGridMiner *)((sgpp::datadriven::MinerFactory const *)arg1)->buildMiner((std::string const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::SparseGridMiner **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1LeastSquaresRegressionMinerFactory(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::datadriven::LeastSquaresRegressionMinerFactory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::datadriven::LeastSquaresRegressionMinerFactory *)new sgpp::datadriven::LeastSquaresRegressionMinerFactory();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::LeastSquaresRegressionMinerFactory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_LeastSquaresRegressionMinerFactory_1buildMiner(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  sgpp::datadriven::LeastSquaresRegressionMinerFactory *arg1 = (sgpp::datadriven::LeastSquaresRegressionMinerFactory *) 0 ;
  std::string *arg2 = 0 ;
  sgpp::datadriven::SparseGridMiner *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::LeastSquaresRegressionMinerFactory **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (sgpp::datadriven::SparseGridMiner *)((sgpp::datadriven::LeastSquaresRegressionMinerFactory const *)arg1)->buildMiner((std::string const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::SparseGridMiner **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1LeastSquaresRegressionMinerFactory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::datadriven::LeastSquaresRegressionMinerFactory *arg1 = (sgpp::datadriven::LeastSquaresRegressionMinerFactory *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::datadriven::LeastSquaresRegressionMinerFactory **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OperationTest(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::datadriven::OperationTest *arg1 = (sgpp::datadriven::OperationTest *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::datadriven::OperationTest **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OperationTest_1test(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jdouble jresult = 0 ;
  sgpp::datadriven::OperationTest *arg1 = (sgpp::datadriven::OperationTest *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataMatrix *arg3 = 0 ;
  sgpp::base::DataVector *arg4 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(sgpp::datadriven::OperationTest **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::base::DataMatrix **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return 0;
  } 
  arg4 = *(sgpp::base::DataVector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->test(*arg2,*arg3,*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OperationTest_1testMSE(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jdouble jresult = 0 ;
  sgpp::datadriven::OperationTest *arg1 = (sgpp::datadriven::OperationTest *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataMatrix *arg3 = 0 ;
  sgpp::base::DataVector *arg4 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(sgpp::datadriven::OperationTest **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::base::DataMatrix **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return 0;
  } 
  arg4 = *(sgpp::base::DataVector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->testMSE(*arg2,*arg3,*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OperationTest_1testWithCharacteristicNumber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jdouble jresult = 0 ;
  sgpp::datadriven::OperationTest *arg1 = (sgpp::datadriven::OperationTest *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataMatrix *arg3 = 0 ;
  sgpp::base::DataVector *arg4 = 0 ;
  sgpp::base::DataVector *arg5 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(sgpp::datadriven::OperationTest **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::base::DataMatrix **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return 0;
  } 
  arg4 = *(sgpp::base::DataVector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  arg5 = *(sgpp::base::DataVector **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->testWithCharacteristicNumber(*arg2,*arg3,*arg4,*arg5);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OperationTest_1calculateROCcurve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_) {
  sgpp::datadriven::OperationTest *arg1 = (sgpp::datadriven::OperationTest *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataMatrix *arg3 = 0 ;
  sgpp::base::DataVector *arg4 = 0 ;
  sgpp::base::DataVector *arg5 = 0 ;
  sgpp::base::DataMatrix *arg6 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(sgpp::datadriven::OperationTest **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataMatrix **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return ;
  } 
  arg4 = *(sgpp::base::DataVector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg5 = *(sgpp::base::DataVector **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg6 = *(sgpp::base::DataMatrix **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->calculateROCcurve(*arg2,*arg3,*arg4,*arg5,*arg6);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_sgpp_jsgppJNI_OperationRegularizationDiagonal_1HKMIX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)sgpp::datadriven::OperationRegularizationDiagonal::HKMIX;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_sgpp_jsgppJNI_OperationRegularizationDiagonal_1H0HKLAPLACE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)sgpp::datadriven::OperationRegularizationDiagonal::H0HKLAPLACE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_sgpp_jsgppJNI_OperationRegularizationDiagonal_1ISOTROPIC_1PENALTY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)sgpp::datadriven::OperationRegularizationDiagonal::ISOTROPIC_PENALTY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_sgpp_jsgppJNI_OperationRegularizationDiagonal_1ANISOTROPIC_1PENALTY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)sgpp::datadriven::OperationRegularizationDiagonal::ANISOTROPIC_PENALTY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OperationRegularizationDiagonal(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::datadriven::OperationRegularizationDiagonal *arg1 = (sgpp::datadriven::OperationRegularizationDiagonal *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::datadriven::OperationRegularizationDiagonal **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OperationRegularizationDiagonal_1mult(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::datadriven::OperationRegularizationDiagonal *arg1 = (sgpp::datadriven::OperationRegularizationDiagonal *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::datadriven::OperationRegularizationDiagonal **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->mult(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OperationRosenblattTransformation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::datadriven::OperationRosenblattTransformation *arg1 = (sgpp::datadriven::OperationRosenblattTransformation *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::datadriven::OperationRosenblattTransformation **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OperationRosenblattTransformation_1doTransformation_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  sgpp::datadriven::OperationRosenblattTransformation *arg1 = (sgpp::datadriven::OperationRosenblattTransformation *) 0 ;
  sgpp::base::DataVector *arg2 = (sgpp::base::DataVector *) 0 ;
  sgpp::base::DataMatrix *arg3 = (sgpp::base::DataMatrix *) 0 ;
  sgpp::base::DataMatrix *arg4 = (sgpp::base::DataMatrix *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(sgpp::datadriven::OperationRosenblattTransformation **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2; 
  arg3 = *(sgpp::base::DataMatrix **)&jarg3; 
  arg4 = *(sgpp::base::DataMatrix **)&jarg4; 
  {
    try {
      (arg1)->doTransformation(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OperationRosenblattTransformation_1doTransformation_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5) {
  sgpp::datadriven::OperationRosenblattTransformation *arg1 = (sgpp::datadriven::OperationRosenblattTransformation *) 0 ;
  sgpp::base::DataVector *arg2 = (sgpp::base::DataVector *) 0 ;
  sgpp::base::DataMatrix *arg3 = (sgpp::base::DataMatrix *) 0 ;
  sgpp::base::DataMatrix *arg4 = (sgpp::base::DataMatrix *) 0 ;
  size_t arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(sgpp::datadriven::OperationRosenblattTransformation **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2; 
  arg3 = *(sgpp::base::DataMatrix **)&jarg3; 
  arg4 = *(sgpp::base::DataMatrix **)&jarg4; 
  arg5 = (size_t)jarg5; 
  {
    try {
      (arg1)->doTransformation(arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OperationInverseRosenblattTransformation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::datadriven::OperationInverseRosenblattTransformation *arg1 = (sgpp::datadriven::OperationInverseRosenblattTransformation *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::datadriven::OperationInverseRosenblattTransformation **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OperationInverseRosenblattTransformation_1doTransformation_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  sgpp::datadriven::OperationInverseRosenblattTransformation *arg1 = (sgpp::datadriven::OperationInverseRosenblattTransformation *) 0 ;
  sgpp::base::DataVector *arg2 = (sgpp::base::DataVector *) 0 ;
  sgpp::base::DataMatrix *arg3 = (sgpp::base::DataMatrix *) 0 ;
  sgpp::base::DataMatrix *arg4 = (sgpp::base::DataMatrix *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(sgpp::datadriven::OperationInverseRosenblattTransformation **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2; 
  arg3 = *(sgpp::base::DataMatrix **)&jarg3; 
  arg4 = *(sgpp::base::DataMatrix **)&jarg4; 
  {
    try {
      (arg1)->doTransformation(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OperationInverseRosenblattTransformation_1doTransformation_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5) {
  sgpp::datadriven::OperationInverseRosenblattTransformation *arg1 = (sgpp::datadriven::OperationInverseRosenblattTransformation *) 0 ;
  sgpp::base::DataVector *arg2 = (sgpp::base::DataVector *) 0 ;
  sgpp::base::DataMatrix *arg3 = (sgpp::base::DataMatrix *) 0 ;
  sgpp::base::DataMatrix *arg4 = (sgpp::base::DataMatrix *) 0 ;
  size_t arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(sgpp::datadriven::OperationInverseRosenblattTransformation **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2; 
  arg3 = *(sgpp::base::DataMatrix **)&jarg3; 
  arg4 = *(sgpp::base::DataMatrix **)&jarg4; 
  arg5 = (size_t)jarg5; 
  {
    try {
      (arg1)->doTransformation(arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OperationRosenblattTransformationKDE(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::GaussianKDE *arg1 = 0 ;
  sgpp::datadriven::OperationRosenblattTransformationKDE *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::GaussianKDE **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::GaussianKDE & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::datadriven::OperationRosenblattTransformationKDE *)new sgpp::datadriven::OperationRosenblattTransformationKDE(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::OperationRosenblattTransformationKDE **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OperationRosenblattTransformationKDE(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::datadriven::OperationRosenblattTransformationKDE *arg1 = (sgpp::datadriven::OperationRosenblattTransformationKDE *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::datadriven::OperationRosenblattTransformationKDE **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OperationRosenblattTransformationKDE_1doTransformation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::datadriven::OperationRosenblattTransformationKDE *arg1 = (sgpp::datadriven::OperationRosenblattTransformationKDE *) 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  sgpp::base::DataMatrix *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::datadriven::OperationRosenblattTransformationKDE **)&jarg1; 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataMatrix **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->doTransformation(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OperationRosenblattTransformationKDE_1doShuffledTransformation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::datadriven::OperationRosenblattTransformationKDE *arg1 = (sgpp::datadriven::OperationRosenblattTransformationKDE *) 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  sgpp::base::DataMatrix *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::datadriven::OperationRosenblattTransformationKDE **)&jarg1; 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataMatrix **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->doShuffledTransformation(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OperationRosenblattTransformationKDE_1doTransformation1D(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3, jobject jarg3_, jdouble jarg4, jlong jarg5, jobject jarg5_) {
  jdouble jresult = 0 ;
  sgpp::datadriven::OperationRosenblattTransformationKDE *arg1 = (sgpp::datadriven::OperationRosenblattTransformationKDE *) 0 ;
  double arg2 ;
  sgpp::base::DataVector *arg3 = 0 ;
  double arg4 ;
  sgpp::base::DataVector *arg5 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg5_;
  arg1 = *(sgpp::datadriven::OperationRosenblattTransformationKDE **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  arg4 = (double)jarg4; 
  arg5 = *(sgpp::base::DataVector **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->doTransformation1D(arg2,*arg3,arg4,*arg5);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OperationInverseRosenblattTransformationKDE_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  sgpp::datadriven::GaussianKDE *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  sgpp::datadriven::OperationInverseRosenblattTransformationKDE *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::GaussianKDE **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::GaussianKDE & reference is null");
    return 0;
  } 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      result = (sgpp::datadriven::OperationInverseRosenblattTransformationKDE *)new sgpp::datadriven::OperationInverseRosenblattTransformationKDE(*arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::OperationInverseRosenblattTransformationKDE **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OperationInverseRosenblattTransformationKDE_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  sgpp::datadriven::GaussianKDE *arg1 = 0 ;
  double arg2 ;
  sgpp::datadriven::OperationInverseRosenblattTransformationKDE *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::GaussianKDE **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::GaussianKDE & reference is null");
    return 0;
  } 
  arg2 = (double)jarg2; 
  {
    try {
      result = (sgpp::datadriven::OperationInverseRosenblattTransformationKDE *)new sgpp::datadriven::OperationInverseRosenblattTransformationKDE(*arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::OperationInverseRosenblattTransformationKDE **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OperationInverseRosenblattTransformationKDE_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::GaussianKDE *arg1 = 0 ;
  sgpp::datadriven::OperationInverseRosenblattTransformationKDE *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::GaussianKDE **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::GaussianKDE & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::datadriven::OperationInverseRosenblattTransformationKDE *)new sgpp::datadriven::OperationInverseRosenblattTransformationKDE(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::OperationInverseRosenblattTransformationKDE **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OperationInverseRosenblattTransformationKDE(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::datadriven::OperationInverseRosenblattTransformationKDE *arg1 = (sgpp::datadriven::OperationInverseRosenblattTransformationKDE *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::datadriven::OperationInverseRosenblattTransformationKDE **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OperationInverseRosenblattTransformationKDE_1doTransformation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::datadriven::OperationInverseRosenblattTransformationKDE *arg1 = (sgpp::datadriven::OperationInverseRosenblattTransformationKDE *) 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  sgpp::base::DataMatrix *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::datadriven::OperationInverseRosenblattTransformationKDE **)&jarg1; 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataMatrix **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->doTransformation(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OperationInverseRosenblattTransformationKDE_1doShuffledTransformation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::datadriven::OperationInverseRosenblattTransformationKDE *arg1 = (sgpp::datadriven::OperationInverseRosenblattTransformationKDE *) 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  sgpp::base::DataMatrix *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::datadriven::OperationInverseRosenblattTransformationKDE **)&jarg1; 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataMatrix **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->doShuffledTransformation(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OperationInverseRosenblattTransformationKDE_1doTransformation1D(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3, jobject jarg3_, jdouble jarg4, jdouble jarg5, jdouble jarg6, jdouble jarg7, jdouble jarg8, jlong jarg9, jobject jarg9_) {
  jdouble jresult = 0 ;
  sgpp::datadriven::OperationInverseRosenblattTransformationKDE *arg1 = (sgpp::datadriven::OperationInverseRosenblattTransformationKDE *) 0 ;
  double arg2 ;
  sgpp::base::DataVector *arg3 = 0 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  sgpp::base::DataVector *arg9 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg9_;
  arg1 = *(sgpp::datadriven::OperationInverseRosenblattTransformationKDE **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  arg9 = *(sgpp::base::DataVector **)&jarg9;
  if (!arg9) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->doTransformation1D(arg2,*arg3,arg4,arg5,arg6,arg7,arg8,*arg9);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OperationInverseRosenblattTransformationKDE_1getMaxInversionError(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::datadriven::OperationInverseRosenblattTransformationKDE *arg1 = (sgpp::datadriven::OperationInverseRosenblattTransformationKDE *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::OperationInverseRosenblattTransformationKDE **)&jarg1; 
  {
    try {
      result = (double)(arg1)->getMaxInversionError();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OperationDensityMarginalizeKDE(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::GaussianKDE *arg1 = 0 ;
  sgpp::datadriven::OperationDensityMarginalizeKDE *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::GaussianKDE **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::GaussianKDE & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::datadriven::OperationDensityMarginalizeKDE *)new sgpp::datadriven::OperationDensityMarginalizeKDE(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::OperationDensityMarginalizeKDE **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OperationDensityMarginalizeKDE(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::datadriven::OperationDensityMarginalizeKDE *arg1 = (sgpp::datadriven::OperationDensityMarginalizeKDE *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::datadriven::OperationDensityMarginalizeKDE **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OperationDensityMarginalizeKDE_1doMarginalize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  sgpp::datadriven::OperationDensityMarginalizeKDE *arg1 = (sgpp::datadriven::OperationDensityMarginalizeKDE *) 0 ;
  size_t arg2 ;
  sgpp::datadriven::GaussianKDE *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(sgpp::datadriven::OperationDensityMarginalizeKDE **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(sgpp::datadriven::GaussianKDE **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::GaussianKDE & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->doMarginalize(arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OperationDensityMarginalizeKDE_1doMarginalize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::datadriven::OperationDensityMarginalizeKDE *arg1 = (sgpp::datadriven::OperationDensityMarginalizeKDE *) 0 ;
  std::vector< size_t > *arg2 = 0 ;
  sgpp::datadriven::GaussianKDE *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::datadriven::OperationDensityMarginalizeKDE **)&jarg1; 
  arg2 = *(std::vector< size_t > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< size_t > & reference is null");
    return ;
  } 
  arg3 = *(sgpp::datadriven::GaussianKDE **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::GaussianKDE & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->doMarginalize(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OperationDensityMarginalizeKDE_1margToDimX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  sgpp::datadriven::OperationDensityMarginalizeKDE *arg1 = (sgpp::datadriven::OperationDensityMarginalizeKDE *) 0 ;
  size_t arg2 ;
  sgpp::datadriven::GaussianKDE *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(sgpp::datadriven::OperationDensityMarginalizeKDE **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(sgpp::datadriven::GaussianKDE **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::GaussianKDE & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->margToDimX(arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OperationDensityMarginalizeKDE_1margToDimXs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::datadriven::OperationDensityMarginalizeKDE *arg1 = (sgpp::datadriven::OperationDensityMarginalizeKDE *) 0 ;
  std::vector< size_t > *arg2 = 0 ;
  sgpp::datadriven::GaussianKDE *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::datadriven::OperationDensityMarginalizeKDE **)&jarg1; 
  arg2 = *(std::vector< size_t > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< size_t > & reference is null");
    return ;
  } 
  arg3 = *(sgpp::datadriven::GaussianKDE **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::GaussianKDE & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->margToDimXs(*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OperationDensityConditionalKDE(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::datadriven::GaussianKDE *arg1 = 0 ;
  sgpp::datadriven::OperationDensityConditionalKDE *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::datadriven::GaussianKDE **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::GaussianKDE & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::datadriven::OperationDensityConditionalKDE *)new sgpp::datadriven::OperationDensityConditionalKDE(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::datadriven::OperationDensityConditionalKDE **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OperationDensityConditionalKDE(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::datadriven::OperationDensityConditionalKDE *arg1 = (sgpp::datadriven::OperationDensityConditionalKDE *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::datadriven::OperationDensityConditionalKDE **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OperationDensityConditionalKDE_1doConditional_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdouble jarg3, jlong jarg4, jobject jarg4_) {
  sgpp::datadriven::OperationDensityConditionalKDE *arg1 = (sgpp::datadriven::OperationDensityConditionalKDE *) 0 ;
  size_t arg2 ;
  double arg3 ;
  sgpp::datadriven::GaussianKDE *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(sgpp::datadriven::OperationDensityConditionalKDE **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = *(sgpp::datadriven::GaussianKDE **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::GaussianKDE & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->doConditional(arg2,arg3,*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OperationDensityConditionalKDE_1doConditional_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  sgpp::datadriven::OperationDensityConditionalKDE *arg1 = (sgpp::datadriven::OperationDensityConditionalKDE *) 0 ;
  std::vector< size_t > *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  sgpp::datadriven::GaussianKDE *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(sgpp::datadriven::OperationDensityConditionalKDE **)&jarg1; 
  arg2 = *(std::vector< size_t > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< size_t > & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg4 = *(sgpp::datadriven::GaussianKDE **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::GaussianKDE & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->doConditional(*arg2,*arg3,*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OperationDensityConditionalKDE_1condToDimX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  sgpp::datadriven::OperationDensityConditionalKDE *arg1 = (sgpp::datadriven::OperationDensityConditionalKDE *) 0 ;
  size_t arg2 ;
  sgpp::base::DataVector *arg3 = 0 ;
  sgpp::datadriven::GaussianKDE *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(sgpp::datadriven::OperationDensityConditionalKDE **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg4 = *(sgpp::datadriven::GaussianKDE **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::GaussianKDE & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->condToDimX(arg2,*arg3,*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OperationDensityConditionalKDE_1condToDimXs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  sgpp::datadriven::OperationDensityConditionalKDE *arg1 = (sgpp::datadriven::OperationDensityConditionalKDE *) 0 ;
  std::vector< size_t > *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  sgpp::datadriven::GaussianKDE *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(sgpp::datadriven::OperationDensityConditionalKDE **)&jarg1; 
  arg2 = *(std::vector< size_t > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< size_t > & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg4 = *(sgpp::datadriven::GaussianKDE **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::datadriven::GaussianKDE & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->condToDimXs(*arg2,*arg3,*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_Random_1seed_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jobject jarg1) {
  std::uint64_t arg1 ;
  
  (void)jenv;
  (void)jcls;
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg1);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg1, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg1 = 0;
    for(i=0; i<sz; i++) {
      arg1 = (arg1 << 8) | (std::uint64_t)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    try {
      sgpp::quadrature::Random::seed(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_Random_1seed_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  {
    try {
      sgpp::quadrature::Random::seed();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jobject JNICALL Java_sgpp_jsgppJNI_Random_1random_1uint64(JNIEnv *jenv, jclass jcls) {
  jobject jresult = 0 ;
  std::uint64_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::uint64_t)sgpp::quadrature::Random::random_uint64();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_Random_1random_1double(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (double)sgpp::quadrature::Random::random_double();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1Random(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::quadrature::Random *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::quadrature::Random *)new sgpp::quadrature::Random();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::quadrature::Random **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1Random(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::quadrature::Random *arg1 = (sgpp::quadrature::Random *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::quadrature::Random **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1SampleGenerator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg2) {
  jlong jresult = 0 ;
  size_t arg1 ;
  std::uint64_t arg2 ;
  sgpp::quadrature::SampleGenerator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    for(i=0; i<sz; i++) {
      arg2 = (arg2 << 8) | (std::uint64_t)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    try {
      result = (sgpp::quadrature::SampleGenerator *)new sgpp::quadrature::SampleGenerator(arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::quadrature::SampleGenerator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1SampleGenerator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  sgpp::quadrature::SampleGenerator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (sgpp::quadrature::SampleGenerator *)new sgpp::quadrature::SampleGenerator(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::quadrature::SampleGenerator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1SampleGenerator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::quadrature::SampleGenerator *arg1 = (sgpp::quadrature::SampleGenerator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::quadrature::SampleGenerator **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_SampleGenerator_1getSample(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::quadrature::SampleGenerator *arg1 = (sgpp::quadrature::SampleGenerator *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::quadrature::SampleGenerator **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->getSample(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_SampleGenerator_1getSamples(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::quadrature::SampleGenerator *arg1 = (sgpp::quadrature::SampleGenerator *) 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::quadrature::SampleGenerator **)&jarg1; 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->getSamples(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_SampleGenerator_1getDimensions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::quadrature::SampleGenerator *arg1 = (sgpp::quadrature::SampleGenerator *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::quadrature::SampleGenerator **)&jarg1; 
  {
    try {
      result = (arg1)->getDimensions();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_SampleGenerator_1setDimensions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::quadrature::SampleGenerator *arg1 = (sgpp::quadrature::SampleGenerator *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::quadrature::SampleGenerator **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      (arg1)->setDimensions(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1NaiveSampleGenerator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg2) {
  jlong jresult = 0 ;
  size_t arg1 ;
  std::uint64_t arg2 ;
  sgpp::quadrature::NaiveSampleGenerator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    for(i=0; i<sz; i++) {
      arg2 = (arg2 << 8) | (std::uint64_t)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    try {
      result = (sgpp::quadrature::NaiveSampleGenerator *)new sgpp::quadrature::NaiveSampleGenerator(arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::quadrature::NaiveSampleGenerator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1NaiveSampleGenerator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  sgpp::quadrature::NaiveSampleGenerator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (sgpp::quadrature::NaiveSampleGenerator *)new sgpp::quadrature::NaiveSampleGenerator(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::quadrature::NaiveSampleGenerator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1NaiveSampleGenerator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::quadrature::NaiveSampleGenerator *arg1 = (sgpp::quadrature::NaiveSampleGenerator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::quadrature::NaiveSampleGenerator **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_NaiveSampleGenerator_1getSample(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::quadrature::NaiveSampleGenerator *arg1 = (sgpp::quadrature::NaiveSampleGenerator *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::quadrature::NaiveSampleGenerator **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->getSample(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1LatinHypercubeSampleGenerator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg3) {
  jlong jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  std::uint64_t arg3 ;
  sgpp::quadrature::LatinHypercubeSampleGenerator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg3);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg3, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg3 = 0;
    for(i=0; i<sz; i++) {
      arg3 = (arg3 << 8) | (std::uint64_t)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    try {
      result = (sgpp::quadrature::LatinHypercubeSampleGenerator *)new sgpp::quadrature::LatinHypercubeSampleGenerator(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::quadrature::LatinHypercubeSampleGenerator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1LatinHypercubeSampleGenerator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  sgpp::quadrature::LatinHypercubeSampleGenerator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (sgpp::quadrature::LatinHypercubeSampleGenerator *)new sgpp::quadrature::LatinHypercubeSampleGenerator(arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::quadrature::LatinHypercubeSampleGenerator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1LatinHypercubeSampleGenerator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::quadrature::LatinHypercubeSampleGenerator *arg1 = (sgpp::quadrature::LatinHypercubeSampleGenerator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::quadrature::LatinHypercubeSampleGenerator **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_LatinHypercubeSampleGenerator_1getSample(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::quadrature::LatinHypercubeSampleGenerator *arg1 = (sgpp::quadrature::LatinHypercubeSampleGenerator *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::quadrature::LatinHypercubeSampleGenerator **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->getSample(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1StratifiedSampleGenerator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jlong jresult = 0 ;
  std::vector< size_t > *arg1 = 0 ;
  std::uint64_t arg2 ;
  sgpp::quadrature::StratifiedSampleGenerator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< size_t > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< size_t > & reference is null");
    return 0;
  } 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    for(i=0; i<sz; i++) {
      arg2 = (arg2 << 8) | (std::uint64_t)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    try {
      result = (sgpp::quadrature::StratifiedSampleGenerator *)new sgpp::quadrature::StratifiedSampleGenerator(*arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::quadrature::StratifiedSampleGenerator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1StratifiedSampleGenerator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< size_t > *arg1 = 0 ;
  sgpp::quadrature::StratifiedSampleGenerator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< size_t > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< size_t > & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::quadrature::StratifiedSampleGenerator *)new sgpp::quadrature::StratifiedSampleGenerator(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::quadrature::StratifiedSampleGenerator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1StratifiedSampleGenerator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::quadrature::StratifiedSampleGenerator *arg1 = (sgpp::quadrature::StratifiedSampleGenerator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::quadrature::StratifiedSampleGenerator **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_StratifiedSampleGenerator_1getSample(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::quadrature::StratifiedSampleGenerator *arg1 = (sgpp::quadrature::StratifiedSampleGenerator *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::quadrature::StratifiedSampleGenerator **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->getSample(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1HaltonSampleGenerator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg2) {
  jlong jresult = 0 ;
  size_t arg1 ;
  std::uint64_t arg2 ;
  sgpp::quadrature::HaltonSampleGenerator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    for(i=0; i<sz; i++) {
      arg2 = (arg2 << 8) | (std::uint64_t)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    try {
      result = (sgpp::quadrature::HaltonSampleGenerator *)new sgpp::quadrature::HaltonSampleGenerator(arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::quadrature::HaltonSampleGenerator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1HaltonSampleGenerator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  sgpp::quadrature::HaltonSampleGenerator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (sgpp::quadrature::HaltonSampleGenerator *)new sgpp::quadrature::HaltonSampleGenerator(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::quadrature::HaltonSampleGenerator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1HaltonSampleGenerator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::quadrature::HaltonSampleGenerator *arg1 = (sgpp::quadrature::HaltonSampleGenerator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::quadrature::HaltonSampleGenerator **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_HaltonSampleGenerator_1getSample(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::quadrature::HaltonSampleGenerator *arg1 = (sgpp::quadrature::HaltonSampleGenerator *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::quadrature::HaltonSampleGenerator **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->getSample(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_createOperationQuadratureMCAdvanced_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg3) {
  jlong jresult = 0 ;
  sgpp::base::Grid *arg1 = 0 ;
  size_t arg2 ;
  std::uint64_t arg3 ;
  sgpp::quadrature::OperationQuadratureMCAdvanced *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::Grid **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return 0;
  } 
  arg2 = (size_t)jarg2; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg3);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg3, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg3 = 0;
    for(i=0; i<sz; i++) {
      arg3 = (arg3 << 8) | (std::uint64_t)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    try {
      result = (sgpp::quadrature::OperationQuadratureMCAdvanced *)sgpp::op_factory::createOperationQuadratureMCAdvanced(*arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::quadrature::OperationQuadratureMCAdvanced **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_createOperationQuadratureMCAdvanced_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  sgpp::base::Grid *arg1 = 0 ;
  size_t arg2 ;
  sgpp::quadrature::OperationQuadratureMCAdvanced *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::Grid **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return 0;
  } 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (sgpp::quadrature::OperationQuadratureMCAdvanced *)sgpp::op_factory::createOperationQuadratureMCAdvanced(*arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::quadrature::OperationQuadratureMCAdvanced **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_omp_1set_1num_1threads(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  {
    try {
      omp_set_num_threads(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_sgpp_jsgppJNI_ARMADILLO_1ENABLED_1get(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)(bool)ARMADILLO_ENABLED;
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_sgpp_jsgppJNI_EIGEN_1ENABLED_1get(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)(bool)EIGEN_ENABLED;
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_sgpp_jsgppJNI_GMMPP_1ENABLED_1get(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)(bool)GMMPP_ENABLED;
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_sgpp_jsgppJNI_UMFPACK_1ENABLED_1get(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)(bool)UMFPACK_ENABLED;
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptRNG_1getInstance(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::RandomNumberGenerator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::RandomNumberGenerator *) &sgpp::optimization::RandomNumberGenerator::getInstance();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::RandomNumberGenerator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptRNG_1getUniformRN_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  jdouble jresult = 0 ;
  sgpp::optimization::RandomNumberGenerator *arg1 = (sgpp::optimization::RandomNumberGenerator *) 0 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::RandomNumberGenerator **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      result = (double)(arg1)->getUniformRN(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptRNG_1getUniformRN_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jdouble jresult = 0 ;
  sgpp::optimization::RandomNumberGenerator *arg1 = (sgpp::optimization::RandomNumberGenerator *) 0 ;
  double arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::RandomNumberGenerator **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      result = (double)(arg1)->getUniformRN(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptRNG_1getUniformRN_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::optimization::RandomNumberGenerator *arg1 = (sgpp::optimization::RandomNumberGenerator *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::RandomNumberGenerator **)&jarg1; 
  {
    try {
      result = (double)(arg1)->getUniformRN();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptRNG_1getUniformRV_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3, jdouble jarg4) {
  sgpp::optimization::RandomNumberGenerator *arg1 = (sgpp::optimization::RandomNumberGenerator *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::RandomNumberGenerator **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->getUniformRV(*arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptRNG_1getUniformRV_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  sgpp::optimization::RandomNumberGenerator *arg1 = (sgpp::optimization::RandomNumberGenerator *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::RandomNumberGenerator **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->getUniformRV(*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptRNG_1getUniformRV_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::optimization::RandomNumberGenerator *arg1 = (sgpp::optimization::RandomNumberGenerator *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::RandomNumberGenerator **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->getUniformRV(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptRNG_1getUniformIndexRN(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  sgpp::optimization::RandomNumberGenerator *arg1 = (sgpp::optimization::RandomNumberGenerator *) 0 ;
  size_t arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::RandomNumberGenerator **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (arg1)->getUniformIndexRN(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptRNG_1getGaussianRN_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  jdouble jresult = 0 ;
  sgpp::optimization::RandomNumberGenerator *arg1 = (sgpp::optimization::RandomNumberGenerator *) 0 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::RandomNumberGenerator **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      result = (double)(arg1)->getGaussianRN(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptRNG_1getGaussianRN_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jdouble jresult = 0 ;
  sgpp::optimization::RandomNumberGenerator *arg1 = (sgpp::optimization::RandomNumberGenerator *) 0 ;
  double arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::RandomNumberGenerator **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      result = (double)(arg1)->getGaussianRN(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptRNG_1getGaussianRN_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::optimization::RandomNumberGenerator *arg1 = (sgpp::optimization::RandomNumberGenerator *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::RandomNumberGenerator **)&jarg1; 
  {
    try {
      result = (double)(arg1)->getGaussianRN();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptRNG_1getGaussianRV_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3, jdouble jarg4) {
  sgpp::optimization::RandomNumberGenerator *arg1 = (sgpp::optimization::RandomNumberGenerator *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::RandomNumberGenerator **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->getGaussianRV(*arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptRNG_1getGaussianRV_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  sgpp::optimization::RandomNumberGenerator *arg1 = (sgpp::optimization::RandomNumberGenerator *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::RandomNumberGenerator **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->getGaussianRV(*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptRNG_1getGaussianRV_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::optimization::RandomNumberGenerator *arg1 = (sgpp::optimization::RandomNumberGenerator *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::RandomNumberGenerator **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->getGaussianRV(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptRNG_1getSeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::RandomNumberGenerator *arg1 = (sgpp::optimization::RandomNumberGenerator *) 0 ;
  sgpp::optimization::RandomNumberGenerator::SeedType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::RandomNumberGenerator **)&jarg1; 
  {
    try {
      result = ((sgpp::optimization::RandomNumberGenerator const *)arg1)->getSeed();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::RandomNumberGenerator::SeedType **)&jresult = new sgpp::optimization::RandomNumberGenerator::SeedType((const sgpp::optimization::RandomNumberGenerator::SeedType &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptRNG_1setSeed_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::optimization::RandomNumberGenerator *arg1 = (sgpp::optimization::RandomNumberGenerator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::RandomNumberGenerator **)&jarg1; 
  {
    try {
      (arg1)->setSeed();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptRNG_1setSeed_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::RandomNumberGenerator *arg1 = (sgpp::optimization::RandomNumberGenerator *) 0 ;
  sgpp::optimization::RandomNumberGenerator::SeedType arg2 ;
  sgpp::optimization::RandomNumberGenerator::SeedType *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::RandomNumberGenerator **)&jarg1; 
  argp2 = *(sgpp::optimization::RandomNumberGenerator::SeedType **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null sgpp::optimization::RandomNumberGenerator::SeedType");
    return ;
  }
  arg2 = *argp2; 
  {
    try {
      (arg1)->setSeed(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptRNG(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::RandomNumberGenerator *arg1 = (sgpp::optimization::RandomNumberGenerator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::RandomNumberGenerator **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptScalarFunction(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  sgpp::optimization::ScalarFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (sgpp::optimization::ScalarFunction *)new SwigDirector_OptScalarFunction(jenv,arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::ScalarFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptScalarFunction(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::ScalarFunction *arg1 = (sgpp::optimization::ScalarFunction *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptScalarFunction_1eval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = (sgpp::optimization::ScalarFunction *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->eval((sgpp::base::DataVector const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptScalarFunction_1getNumberOfParameters(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = (sgpp::optimization::ScalarFunction *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1; 
  {
    try {
      result = ((sgpp::optimization::ScalarFunction const *)arg1)->getNumberOfParameters();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptScalarFunction_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::ScalarFunction *arg1 = (sgpp::optimization::ScalarFunction *) 0 ;
  std::unique_ptr< sgpp::optimization::ScalarFunction > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::ScalarFunction > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::ScalarFunction > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::ScalarFunction const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptScalarFunction_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  sgpp::optimization::ScalarFunction *obj = *((sgpp::optimization::ScalarFunction **)&objarg);
  (void)jcls;
  SwigDirector_OptScalarFunction *director = dynamic_cast<SwigDirector_OptScalarFunction *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptScalarFunction_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  sgpp::optimization::ScalarFunction *obj = *((sgpp::optimization::ScalarFunction **)&objarg);
  SwigDirector_OptScalarFunction *director = dynamic_cast<SwigDirector_OptScalarFunction *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptScalarFunctionGradient(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  sgpp::optimization::ScalarFunctionGradient *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (sgpp::optimization::ScalarFunctionGradient *)new SwigDirector_OptScalarFunctionGradient(jenv,arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::ScalarFunctionGradient **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptScalarFunctionGradient(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::ScalarFunctionGradient *arg1 = (sgpp::optimization::ScalarFunctionGradient *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::ScalarFunctionGradient **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptScalarFunctionGradient_1eval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jdouble jresult = 0 ;
  sgpp::optimization::ScalarFunctionGradient *arg1 = (sgpp::optimization::ScalarFunctionGradient *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::optimization::ScalarFunctionGradient **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->eval((sgpp::base::DataVector const &)*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptScalarFunctionGradient_1getNumberOfParameters(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunctionGradient *arg1 = (sgpp::optimization::ScalarFunctionGradient *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::ScalarFunctionGradient **)&jarg1; 
  {
    try {
      result = ((sgpp::optimization::ScalarFunctionGradient const *)arg1)->getNumberOfParameters();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptScalarFunctionGradient_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::ScalarFunctionGradient *arg1 = (sgpp::optimization::ScalarFunctionGradient *) 0 ;
  std::unique_ptr< sgpp::optimization::ScalarFunctionGradient > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::ScalarFunctionGradient **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::ScalarFunctionGradient > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::ScalarFunctionGradient > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::ScalarFunctionGradient const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptScalarFunctionGradient_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  sgpp::optimization::ScalarFunctionGradient *obj = *((sgpp::optimization::ScalarFunctionGradient **)&objarg);
  (void)jcls;
  SwigDirector_OptScalarFunctionGradient *director = dynamic_cast<SwigDirector_OptScalarFunctionGradient *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptScalarFunctionGradient_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  sgpp::optimization::ScalarFunctionGradient *obj = *((sgpp::optimization::ScalarFunctionGradient **)&objarg);
  SwigDirector_OptScalarFunctionGradient *director = dynamic_cast<SwigDirector_OptScalarFunctionGradient *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptScalarFunctionHessian(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  sgpp::optimization::ScalarFunctionHessian *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (sgpp::optimization::ScalarFunctionHessian *)new SwigDirector_OptScalarFunctionHessian(jenv,arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::ScalarFunctionHessian **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptScalarFunctionHessian(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::ScalarFunctionHessian *arg1 = (sgpp::optimization::ScalarFunctionHessian *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::ScalarFunctionHessian **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptScalarFunctionHessian_1eval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jdouble jresult = 0 ;
  sgpp::optimization::ScalarFunctionHessian *arg1 = (sgpp::optimization::ScalarFunctionHessian *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  sgpp::base::DataMatrix *arg4 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(sgpp::optimization::ScalarFunctionHessian **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  arg4 = *(sgpp::base::DataMatrix **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->eval((sgpp::base::DataVector const &)*arg2,*arg3,*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptScalarFunctionHessian_1getNumberOfParameters(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunctionHessian *arg1 = (sgpp::optimization::ScalarFunctionHessian *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::ScalarFunctionHessian **)&jarg1; 
  {
    try {
      result = ((sgpp::optimization::ScalarFunctionHessian const *)arg1)->getNumberOfParameters();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptScalarFunctionHessian_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::ScalarFunctionHessian *arg1 = (sgpp::optimization::ScalarFunctionHessian *) 0 ;
  std::unique_ptr< sgpp::optimization::ScalarFunctionHessian > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::ScalarFunctionHessian **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::ScalarFunctionHessian > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::ScalarFunctionHessian > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::ScalarFunctionHessian const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptScalarFunctionHessian_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  sgpp::optimization::ScalarFunctionHessian *obj = *((sgpp::optimization::ScalarFunctionHessian **)&objarg);
  (void)jcls;
  SwigDirector_OptScalarFunctionHessian *director = dynamic_cast<SwigDirector_OptScalarFunctionHessian *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptScalarFunctionHessian_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  sgpp::optimization::ScalarFunctionHessian *obj = *((sgpp::optimization::ScalarFunctionHessian **)&objarg);
  SwigDirector_OptScalarFunctionHessian *director = dynamic_cast<SwigDirector_OptScalarFunctionHessian *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptInterpolantScalarFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  sgpp::base::Grid *arg1 = 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::optimization::InterpolantScalarFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::Grid **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::optimization::InterpolantScalarFunction *)new sgpp::optimization::InterpolantScalarFunction(*arg1,(sgpp::base::DataVector const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::InterpolantScalarFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptInterpolantScalarFunction(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::InterpolantScalarFunction *arg1 = (sgpp::optimization::InterpolantScalarFunction *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::InterpolantScalarFunction **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptInterpolantScalarFunction_1eval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::InterpolantScalarFunction *arg1 = (sgpp::optimization::InterpolantScalarFunction *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::InterpolantScalarFunction **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->eval((sgpp::base::DataVector const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptInterpolantScalarFunction_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::InterpolantScalarFunction *arg1 = (sgpp::optimization::InterpolantScalarFunction *) 0 ;
  std::unique_ptr< sgpp::optimization::ScalarFunction > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::InterpolantScalarFunction **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::ScalarFunction > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::ScalarFunction > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::InterpolantScalarFunction const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptInterpolantScalarFunction_1getAlpha(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::InterpolantScalarFunction *arg1 = (sgpp::optimization::InterpolantScalarFunction *) 0 ;
  sgpp::base::DataVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::InterpolantScalarFunction **)&jarg1; 
  {
    try {
      result = (sgpp::base::DataVector *) &((sgpp::optimization::InterpolantScalarFunction const *)arg1)->getAlpha();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::DataVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptInterpolantScalarFunction_1setAlpha(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::optimization::InterpolantScalarFunction *arg1 = (sgpp::optimization::InterpolantScalarFunction *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::InterpolantScalarFunction **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setAlpha((sgpp::base::DataVector const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptInterpolantScalarFunctionGradient(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  sgpp::base::Grid *arg1 = 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::optimization::InterpolantScalarFunctionGradient *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::Grid **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::optimization::InterpolantScalarFunctionGradient *)new sgpp::optimization::InterpolantScalarFunctionGradient(*arg1,(sgpp::base::DataVector const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::InterpolantScalarFunctionGradient **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptInterpolantScalarFunctionGradient(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::InterpolantScalarFunctionGradient *arg1 = (sgpp::optimization::InterpolantScalarFunctionGradient *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::InterpolantScalarFunctionGradient **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptInterpolantScalarFunctionGradient_1eval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jdouble jresult = 0 ;
  sgpp::optimization::InterpolantScalarFunctionGradient *arg1 = (sgpp::optimization::InterpolantScalarFunctionGradient *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::optimization::InterpolantScalarFunctionGradient **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->eval((sgpp::base::DataVector const &)*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptInterpolantScalarFunctionGradient_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::InterpolantScalarFunctionGradient *arg1 = (sgpp::optimization::InterpolantScalarFunctionGradient *) 0 ;
  std::unique_ptr< sgpp::optimization::ScalarFunctionGradient > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::InterpolantScalarFunctionGradient **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::ScalarFunctionGradient > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::ScalarFunctionGradient > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::InterpolantScalarFunctionGradient const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptInterpolantScalarFunctionGradient_1getAlpha(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::InterpolantScalarFunctionGradient *arg1 = (sgpp::optimization::InterpolantScalarFunctionGradient *) 0 ;
  sgpp::base::DataVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::InterpolantScalarFunctionGradient **)&jarg1; 
  {
    try {
      result = (sgpp::base::DataVector *) &((sgpp::optimization::InterpolantScalarFunctionGradient const *)arg1)->getAlpha();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::DataVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptInterpolantScalarFunctionGradient_1setAlpha(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::optimization::InterpolantScalarFunctionGradient *arg1 = (sgpp::optimization::InterpolantScalarFunctionGradient *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::InterpolantScalarFunctionGradient **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setAlpha((sgpp::base::DataVector const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptInterpolantScalarFunctionHessian(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  sgpp::base::Grid *arg1 = 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::optimization::InterpolantScalarFunctionHessian *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::Grid **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::optimization::InterpolantScalarFunctionHessian *)new sgpp::optimization::InterpolantScalarFunctionHessian(*arg1,(sgpp::base::DataVector const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::InterpolantScalarFunctionHessian **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptInterpolantScalarFunctionHessian(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::InterpolantScalarFunctionHessian *arg1 = (sgpp::optimization::InterpolantScalarFunctionHessian *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::InterpolantScalarFunctionHessian **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptInterpolantScalarFunctionHessian_1eval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jdouble jresult = 0 ;
  sgpp::optimization::InterpolantScalarFunctionHessian *arg1 = (sgpp::optimization::InterpolantScalarFunctionHessian *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  sgpp::base::DataMatrix *arg4 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(sgpp::optimization::InterpolantScalarFunctionHessian **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  arg4 = *(sgpp::base::DataMatrix **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->eval((sgpp::base::DataVector const &)*arg2,*arg3,*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptInterpolantScalarFunctionHessian_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::InterpolantScalarFunctionHessian *arg1 = (sgpp::optimization::InterpolantScalarFunctionHessian *) 0 ;
  std::unique_ptr< sgpp::optimization::ScalarFunctionHessian > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::InterpolantScalarFunctionHessian **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::ScalarFunctionHessian > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::ScalarFunctionHessian > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::InterpolantScalarFunctionHessian const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptInterpolantScalarFunctionHessian_1getAlpha(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::InterpolantScalarFunctionHessian *arg1 = (sgpp::optimization::InterpolantScalarFunctionHessian *) 0 ;
  sgpp::base::DataVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::InterpolantScalarFunctionHessian **)&jarg1; 
  {
    try {
      result = (sgpp::base::DataVector *) &((sgpp::optimization::InterpolantScalarFunctionHessian const *)arg1)->getAlpha();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::DataVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptInterpolantScalarFunctionHessian_1setAlpha(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::optimization::InterpolantScalarFunctionHessian *arg1 = (sgpp::optimization::InterpolantScalarFunctionHessian *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::InterpolantScalarFunctionHessian **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setAlpha((sgpp::base::DataVector const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptVectorFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  sgpp::optimization::VectorFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (sgpp::optimization::VectorFunction *)new SwigDirector_OptVectorFunction(jenv,arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::VectorFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptVectorFunction(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::VectorFunction *arg1 = (sgpp::optimization::VectorFunction *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::VectorFunction **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptVectorFunction_1eval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::optimization::VectorFunction *arg1 = (sgpp::optimization::VectorFunction *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::optimization::VectorFunction **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->eval((sgpp::base::DataVector const &)*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptVectorFunction_1getNumberOfParameters(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::VectorFunction *arg1 = (sgpp::optimization::VectorFunction *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::VectorFunction **)&jarg1; 
  {
    try {
      result = ((sgpp::optimization::VectorFunction const *)arg1)->getNumberOfParameters();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptVectorFunction_1getNumberOfComponents(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::VectorFunction *arg1 = (sgpp::optimization::VectorFunction *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::VectorFunction **)&jarg1; 
  {
    try {
      result = ((sgpp::optimization::VectorFunction const *)arg1)->getNumberOfComponents();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptVectorFunction_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::VectorFunction *arg1 = (sgpp::optimization::VectorFunction *) 0 ;
  std::unique_ptr< sgpp::optimization::VectorFunction > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::VectorFunction **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::VectorFunction > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::VectorFunction > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::VectorFunction const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptVectorFunction_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  sgpp::optimization::VectorFunction *obj = *((sgpp::optimization::VectorFunction **)&objarg);
  (void)jcls;
  SwigDirector_OptVectorFunction *director = dynamic_cast<SwigDirector_OptVectorFunction *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptVectorFunction_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  sgpp::optimization::VectorFunction *obj = *((sgpp::optimization::VectorFunction **)&objarg);
  SwigDirector_OptVectorFunction *director = dynamic_cast<SwigDirector_OptVectorFunction *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptVectorFunctionGradient(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  sgpp::optimization::VectorFunctionGradient *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (sgpp::optimization::VectorFunctionGradient *)new SwigDirector_OptVectorFunctionGradient(jenv,arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::VectorFunctionGradient **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptVectorFunctionGradient(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::VectorFunctionGradient *arg1 = (sgpp::optimization::VectorFunctionGradient *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::VectorFunctionGradient **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptVectorFunctionGradient_1eval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  sgpp::optimization::VectorFunctionGradient *arg1 = (sgpp::optimization::VectorFunctionGradient *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  sgpp::base::DataMatrix *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(sgpp::optimization::VectorFunctionGradient **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg4 = *(sgpp::base::DataMatrix **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->eval((sgpp::base::DataVector const &)*arg2,*arg3,*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptVectorFunctionGradient_1getNumberOfParameters(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::VectorFunctionGradient *arg1 = (sgpp::optimization::VectorFunctionGradient *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::VectorFunctionGradient **)&jarg1; 
  {
    try {
      result = ((sgpp::optimization::VectorFunctionGradient const *)arg1)->getNumberOfParameters();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptVectorFunctionGradient_1getNumberOfComponents(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::VectorFunctionGradient *arg1 = (sgpp::optimization::VectorFunctionGradient *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::VectorFunctionGradient **)&jarg1; 
  {
    try {
      result = ((sgpp::optimization::VectorFunctionGradient const *)arg1)->getNumberOfComponents();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptVectorFunctionGradient_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::VectorFunctionGradient *arg1 = (sgpp::optimization::VectorFunctionGradient *) 0 ;
  std::unique_ptr< sgpp::optimization::VectorFunctionGradient > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::VectorFunctionGradient **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::VectorFunctionGradient > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::VectorFunctionGradient > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::VectorFunctionGradient const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptVectorFunctionGradient_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  sgpp::optimization::VectorFunctionGradient *obj = *((sgpp::optimization::VectorFunctionGradient **)&objarg);
  (void)jcls;
  SwigDirector_OptVectorFunctionGradient *director = dynamic_cast<SwigDirector_OptVectorFunctionGradient *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptVectorFunctionGradient_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  sgpp::optimization::VectorFunctionGradient *obj = *((sgpp::optimization::VectorFunctionGradient **)&objarg);
  SwigDirector_OptVectorFunctionGradient *director = dynamic_cast<SwigDirector_OptVectorFunctionGradient *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptVectorFunctionHessian(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  sgpp::optimization::VectorFunctionHessian *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (sgpp::optimization::VectorFunctionHessian *)new SwigDirector_OptVectorFunctionHessian(jenv,arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::VectorFunctionHessian **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptVectorFunctionHessian(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::VectorFunctionHessian *arg1 = (sgpp::optimization::VectorFunctionHessian *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::VectorFunctionHessian **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptVectorFunctionHessian_1eval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5) {
  sgpp::optimization::VectorFunctionHessian *arg1 = (sgpp::optimization::VectorFunctionHessian *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  sgpp::base::DataMatrix *arg4 = 0 ;
  std::vector< sgpp::base::DataMatrix > *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(sgpp::optimization::VectorFunctionHessian **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg4 = *(sgpp::base::DataMatrix **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return ;
  } 
  arg5 = *(std::vector< sgpp::base::DataMatrix > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< sgpp::base::DataMatrix > & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->eval((sgpp::base::DataVector const &)*arg2,*arg3,*arg4,*arg5);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptVectorFunctionHessian_1getNumberOfParameters(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::VectorFunctionHessian *arg1 = (sgpp::optimization::VectorFunctionHessian *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::VectorFunctionHessian **)&jarg1; 
  {
    try {
      result = ((sgpp::optimization::VectorFunctionHessian const *)arg1)->getNumberOfParameters();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptVectorFunctionHessian_1getNumberOfComponents(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::VectorFunctionHessian *arg1 = (sgpp::optimization::VectorFunctionHessian *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::VectorFunctionHessian **)&jarg1; 
  {
    try {
      result = ((sgpp::optimization::VectorFunctionHessian const *)arg1)->getNumberOfComponents();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptVectorFunctionHessian_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::VectorFunctionHessian *arg1 = (sgpp::optimization::VectorFunctionHessian *) 0 ;
  std::unique_ptr< sgpp::optimization::VectorFunctionHessian > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::VectorFunctionHessian **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::VectorFunctionHessian > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::VectorFunctionHessian > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::VectorFunctionHessian const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptVectorFunctionHessian_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  sgpp::optimization::VectorFunctionHessian *obj = *((sgpp::optimization::VectorFunctionHessian **)&objarg);
  (void)jcls;
  SwigDirector_OptVectorFunctionHessian *director = dynamic_cast<SwigDirector_OptVectorFunctionHessian *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptVectorFunctionHessian_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  sgpp::optimization::VectorFunctionHessian *obj = *((sgpp::optimization::VectorFunctionHessian **)&objarg);
  SwigDirector_OptVectorFunctionHessian *director = dynamic_cast<SwigDirector_OptVectorFunctionHessian *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptInterpolantVectorFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  sgpp::base::Grid *arg1 = 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  sgpp::optimization::InterpolantVectorFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::Grid **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix const & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::optimization::InterpolantVectorFunction *)new sgpp::optimization::InterpolantVectorFunction(*arg1,(sgpp::base::DataMatrix const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::InterpolantVectorFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptInterpolantVectorFunction(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::InterpolantVectorFunction *arg1 = (sgpp::optimization::InterpolantVectorFunction *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::InterpolantVectorFunction **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptInterpolantVectorFunction_1eval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::optimization::InterpolantVectorFunction *arg1 = (sgpp::optimization::InterpolantVectorFunction *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::optimization::InterpolantVectorFunction **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->eval((sgpp::base::DataVector const &)*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptInterpolantVectorFunction_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::InterpolantVectorFunction *arg1 = (sgpp::optimization::InterpolantVectorFunction *) 0 ;
  std::unique_ptr< sgpp::optimization::VectorFunction > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::InterpolantVectorFunction **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::VectorFunction > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::VectorFunction > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::InterpolantVectorFunction const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptInterpolantVectorFunction_1getAlpha(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::InterpolantVectorFunction *arg1 = (sgpp::optimization::InterpolantVectorFunction *) 0 ;
  sgpp::base::DataMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::InterpolantVectorFunction **)&jarg1; 
  {
    try {
      result = (sgpp::base::DataMatrix *) &((sgpp::optimization::InterpolantVectorFunction const *)arg1)->getAlpha();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::DataMatrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptInterpolantVectorFunction_1setAlpha(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::optimization::InterpolantVectorFunction *arg1 = (sgpp::optimization::InterpolantVectorFunction *) 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::InterpolantVectorFunction **)&jarg1; 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setAlpha((sgpp::base::DataMatrix const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptInterpolantVectorFunctionGradient(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  sgpp::base::Grid *arg1 = 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  sgpp::optimization::InterpolantVectorFunctionGradient *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::Grid **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix const & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::optimization::InterpolantVectorFunctionGradient *)new sgpp::optimization::InterpolantVectorFunctionGradient(*arg1,(sgpp::base::DataMatrix const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::InterpolantVectorFunctionGradient **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptInterpolantVectorFunctionGradient(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::InterpolantVectorFunctionGradient *arg1 = (sgpp::optimization::InterpolantVectorFunctionGradient *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::InterpolantVectorFunctionGradient **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptInterpolantVectorFunctionGradient_1eval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  sgpp::optimization::InterpolantVectorFunctionGradient *arg1 = (sgpp::optimization::InterpolantVectorFunctionGradient *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  sgpp::base::DataMatrix *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(sgpp::optimization::InterpolantVectorFunctionGradient **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg4 = *(sgpp::base::DataMatrix **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->eval((sgpp::base::DataVector const &)*arg2,*arg3,*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptInterpolantVectorFunctionGradient_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::InterpolantVectorFunctionGradient *arg1 = (sgpp::optimization::InterpolantVectorFunctionGradient *) 0 ;
  std::unique_ptr< sgpp::optimization::VectorFunctionGradient > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::InterpolantVectorFunctionGradient **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::VectorFunctionGradient > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::VectorFunctionGradient > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::InterpolantVectorFunctionGradient const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptInterpolantVectorFunctionGradient_1getAlpha(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::InterpolantVectorFunctionGradient *arg1 = (sgpp::optimization::InterpolantVectorFunctionGradient *) 0 ;
  sgpp::base::DataMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::InterpolantVectorFunctionGradient **)&jarg1; 
  {
    try {
      result = (sgpp::base::DataMatrix *) &((sgpp::optimization::InterpolantVectorFunctionGradient const *)arg1)->getAlpha();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::DataMatrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptInterpolantVectorFunctionGradient_1setAlpha(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::optimization::InterpolantVectorFunctionGradient *arg1 = (sgpp::optimization::InterpolantVectorFunctionGradient *) 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::InterpolantVectorFunctionGradient **)&jarg1; 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setAlpha((sgpp::base::DataMatrix const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptInterpolantVectorFunctionHessian(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  sgpp::base::Grid *arg1 = 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  sgpp::optimization::InterpolantVectorFunctionHessian *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::Grid **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix const & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::optimization::InterpolantVectorFunctionHessian *)new sgpp::optimization::InterpolantVectorFunctionHessian(*arg1,(sgpp::base::DataMatrix const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::InterpolantVectorFunctionHessian **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptInterpolantVectorFunctionHessian(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::InterpolantVectorFunctionHessian *arg1 = (sgpp::optimization::InterpolantVectorFunctionHessian *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::InterpolantVectorFunctionHessian **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptInterpolantVectorFunctionHessian_1eval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5) {
  sgpp::optimization::InterpolantVectorFunctionHessian *arg1 = (sgpp::optimization::InterpolantVectorFunctionHessian *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  sgpp::base::DataMatrix *arg4 = 0 ;
  std::vector< sgpp::base::DataMatrix > *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(sgpp::optimization::InterpolantVectorFunctionHessian **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg4 = *(sgpp::base::DataMatrix **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return ;
  } 
  arg5 = *(std::vector< sgpp::base::DataMatrix > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< sgpp::base::DataMatrix > & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->eval((sgpp::base::DataVector const &)*arg2,*arg3,*arg4,*arg5);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptInterpolantVectorFunctionHessian_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::InterpolantVectorFunctionHessian *arg1 = (sgpp::optimization::InterpolantVectorFunctionHessian *) 0 ;
  std::unique_ptr< sgpp::optimization::VectorFunctionHessian > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::InterpolantVectorFunctionHessian **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::VectorFunctionHessian > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::VectorFunctionHessian > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::InterpolantVectorFunctionHessian const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptInterpolantVectorFunctionHessian_1getAlpha(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::InterpolantVectorFunctionHessian *arg1 = (sgpp::optimization::InterpolantVectorFunctionHessian *) 0 ;
  sgpp::base::DataMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::InterpolantVectorFunctionHessian **)&jarg1; 
  {
    try {
      result = (sgpp::base::DataMatrix *) &((sgpp::optimization::InterpolantVectorFunctionHessian const *)arg1)->getAlpha();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::DataMatrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptInterpolantVectorFunctionHessian_1setAlpha(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::optimization::InterpolantVectorFunctionHessian *arg1 = (sgpp::optimization::InterpolantVectorFunctionHessian *) 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::InterpolantVectorFunctionHessian **)&jarg1; 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setAlpha((sgpp::base::DataMatrix const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptComponentScalarFunction_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  std::vector< double > arg2 ;
  std::vector< double > *argp2 ;
  sgpp::optimization::ComponentScalarFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction & reference is null");
    return 0;
  } 
  argp2 = *(std::vector< double > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< double >");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (sgpp::optimization::ComponentScalarFunction *)new sgpp::optimization::ComponentScalarFunction(*arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::ComponentScalarFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptComponentScalarFunction_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::optimization::ComponentScalarFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::optimization::ComponentScalarFunction *)new sgpp::optimization::ComponentScalarFunction(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::ComponentScalarFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptComponentScalarFunction_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  sgpp::optimization::VectorFunction *arg1 = 0 ;
  size_t arg2 ;
  std::vector< double > arg3 ;
  std::vector< double > *argp3 ;
  sgpp::optimization::ComponentScalarFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(sgpp::optimization::VectorFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::VectorFunction & reference is null");
    return 0;
  } 
  arg2 = (size_t)jarg2; 
  argp3 = *(std::vector< double > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< double >");
    return 0;
  }
  arg3 = *argp3; 
  {
    try {
      result = (sgpp::optimization::ComponentScalarFunction *)new sgpp::optimization::ComponentScalarFunction(*arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::ComponentScalarFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptComponentScalarFunction_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  sgpp::optimization::VectorFunction *arg1 = 0 ;
  size_t arg2 ;
  sgpp::optimization::ComponentScalarFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::VectorFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::VectorFunction & reference is null");
    return 0;
  } 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (sgpp::optimization::ComponentScalarFunction *)new sgpp::optimization::ComponentScalarFunction(*arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::ComponentScalarFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptComponentScalarFunction(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::ComponentScalarFunction *arg1 = (sgpp::optimization::ComponentScalarFunction *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::ComponentScalarFunction **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptComponentScalarFunction_1eval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::ComponentScalarFunction *arg1 = (sgpp::optimization::ComponentScalarFunction *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::ComponentScalarFunction **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->eval((sgpp::base::DataVector const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptComponentScalarFunction_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::ComponentScalarFunction *arg1 = (sgpp::optimization::ComponentScalarFunction *) 0 ;
  std::unique_ptr< sgpp::optimization::ScalarFunction > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::ComponentScalarFunction **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::ScalarFunction > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::ScalarFunction > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::ComponentScalarFunction const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptComponentScalarFunctionGradient_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunctionGradient *arg1 = 0 ;
  std::vector< double > arg2 ;
  std::vector< double > *argp2 ;
  sgpp::optimization::ComponentScalarFunctionGradient *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::ScalarFunctionGradient **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunctionGradient & reference is null");
    return 0;
  } 
  argp2 = *(std::vector< double > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< double >");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (sgpp::optimization::ComponentScalarFunctionGradient *)new sgpp::optimization::ComponentScalarFunctionGradient(*arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::ComponentScalarFunctionGradient **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptComponentScalarFunctionGradient_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunctionGradient *arg1 = 0 ;
  sgpp::optimization::ComponentScalarFunctionGradient *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::ScalarFunctionGradient **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunctionGradient & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::optimization::ComponentScalarFunctionGradient *)new sgpp::optimization::ComponentScalarFunctionGradient(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::ComponentScalarFunctionGradient **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptComponentScalarFunctionGradient_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  sgpp::optimization::VectorFunctionGradient *arg1 = 0 ;
  size_t arg2 ;
  std::vector< double > arg3 ;
  std::vector< double > *argp3 ;
  sgpp::optimization::ComponentScalarFunctionGradient *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(sgpp::optimization::VectorFunctionGradient **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::VectorFunctionGradient & reference is null");
    return 0;
  } 
  arg2 = (size_t)jarg2; 
  argp3 = *(std::vector< double > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< double >");
    return 0;
  }
  arg3 = *argp3; 
  {
    try {
      result = (sgpp::optimization::ComponentScalarFunctionGradient *)new sgpp::optimization::ComponentScalarFunctionGradient(*arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::ComponentScalarFunctionGradient **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptComponentScalarFunctionGradient_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  sgpp::optimization::VectorFunctionGradient *arg1 = 0 ;
  size_t arg2 ;
  sgpp::optimization::ComponentScalarFunctionGradient *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::VectorFunctionGradient **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::VectorFunctionGradient & reference is null");
    return 0;
  } 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (sgpp::optimization::ComponentScalarFunctionGradient *)new sgpp::optimization::ComponentScalarFunctionGradient(*arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::ComponentScalarFunctionGradient **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptComponentScalarFunctionGradient(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::ComponentScalarFunctionGradient *arg1 = (sgpp::optimization::ComponentScalarFunctionGradient *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::ComponentScalarFunctionGradient **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptComponentScalarFunctionGradient_1eval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jdouble jresult = 0 ;
  sgpp::optimization::ComponentScalarFunctionGradient *arg1 = (sgpp::optimization::ComponentScalarFunctionGradient *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::optimization::ComponentScalarFunctionGradient **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->eval((sgpp::base::DataVector const &)*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptComponentScalarFunctionGradient_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::ComponentScalarFunctionGradient *arg1 = (sgpp::optimization::ComponentScalarFunctionGradient *) 0 ;
  std::unique_ptr< sgpp::optimization::ScalarFunctionGradient > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::ComponentScalarFunctionGradient **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::ScalarFunctionGradient > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::ScalarFunctionGradient > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::ComponentScalarFunctionGradient const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptComponentScalarFunctionHessian_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunctionHessian *arg1 = 0 ;
  std::vector< double > arg2 ;
  std::vector< double > *argp2 ;
  sgpp::optimization::ComponentScalarFunctionHessian *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::ScalarFunctionHessian **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunctionHessian & reference is null");
    return 0;
  } 
  argp2 = *(std::vector< double > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< double >");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (sgpp::optimization::ComponentScalarFunctionHessian *)new sgpp::optimization::ComponentScalarFunctionHessian(*arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::ComponentScalarFunctionHessian **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptComponentScalarFunctionHessian_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunctionHessian *arg1 = 0 ;
  sgpp::optimization::ComponentScalarFunctionHessian *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::ScalarFunctionHessian **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunctionHessian & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::optimization::ComponentScalarFunctionHessian *)new sgpp::optimization::ComponentScalarFunctionHessian(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::ComponentScalarFunctionHessian **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptComponentScalarFunctionHessian_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  sgpp::optimization::VectorFunctionHessian *arg1 = 0 ;
  size_t arg2 ;
  std::vector< double > arg3 ;
  std::vector< double > *argp3 ;
  sgpp::optimization::ComponentScalarFunctionHessian *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(sgpp::optimization::VectorFunctionHessian **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::VectorFunctionHessian & reference is null");
    return 0;
  } 
  arg2 = (size_t)jarg2; 
  argp3 = *(std::vector< double > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< double >");
    return 0;
  }
  arg3 = *argp3; 
  {
    try {
      result = (sgpp::optimization::ComponentScalarFunctionHessian *)new sgpp::optimization::ComponentScalarFunctionHessian(*arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::ComponentScalarFunctionHessian **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptComponentScalarFunctionHessian_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  sgpp::optimization::VectorFunctionHessian *arg1 = 0 ;
  size_t arg2 ;
  sgpp::optimization::ComponentScalarFunctionHessian *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::VectorFunctionHessian **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::VectorFunctionHessian & reference is null");
    return 0;
  } 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (sgpp::optimization::ComponentScalarFunctionHessian *)new sgpp::optimization::ComponentScalarFunctionHessian(*arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::ComponentScalarFunctionHessian **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptComponentScalarFunctionHessian(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::ComponentScalarFunctionHessian *arg1 = (sgpp::optimization::ComponentScalarFunctionHessian *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::ComponentScalarFunctionHessian **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptComponentScalarFunctionHessian_1eval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jdouble jresult = 0 ;
  sgpp::optimization::ComponentScalarFunctionHessian *arg1 = (sgpp::optimization::ComponentScalarFunctionHessian *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  sgpp::base::DataMatrix *arg4 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(sgpp::optimization::ComponentScalarFunctionHessian **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  arg4 = *(sgpp::base::DataMatrix **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->eval((sgpp::base::DataVector const &)*arg2,*arg3,*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptComponentScalarFunctionHessian_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::ComponentScalarFunctionHessian *arg1 = (sgpp::optimization::ComponentScalarFunctionHessian *) 0 ;
  std::unique_ptr< sgpp::optimization::ScalarFunctionHessian > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::ComponentScalarFunctionHessian **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::ScalarFunctionHessian > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::ScalarFunctionHessian > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::ComponentScalarFunctionHessian const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptWrapperScalarFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  size_t arg1 ;
  SwigValueWrapper< std::function< double (sgpp::base::DataVector const &) > > arg2 ;
  sgpp::optimization::WrapperScalarFunction::FunctionEvalType *argp2 ;
  sgpp::optimization::WrapperScalarFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  argp2 = *(sgpp::optimization::WrapperScalarFunction::FunctionEvalType **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null sgpp::optimization::WrapperScalarFunction::FunctionEvalType");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (sgpp::optimization::WrapperScalarFunction *)new sgpp::optimization::WrapperScalarFunction(arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::WrapperScalarFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptWrapperScalarFunction(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::WrapperScalarFunction *arg1 = (sgpp::optimization::WrapperScalarFunction *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::WrapperScalarFunction **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptWrapperScalarFunction_1eval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::WrapperScalarFunction *arg1 = (sgpp::optimization::WrapperScalarFunction *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::WrapperScalarFunction **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->eval((sgpp::base::DataVector const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptWrapperScalarFunction_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::WrapperScalarFunction *arg1 = (sgpp::optimization::WrapperScalarFunction *) 0 ;
  std::unique_ptr< sgpp::optimization::ScalarFunction > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::WrapperScalarFunction **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::ScalarFunction > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::ScalarFunction > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::WrapperScalarFunction const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptWrapperScalarFunctionGradient(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  size_t arg1 ;
  SwigValueWrapper< std::function< double (sgpp::base::DataVector const &,sgpp::base::DataVector &) > > arg2 ;
  sgpp::optimization::WrapperScalarFunctionGradient::FunctionGradientEvalType *argp2 ;
  sgpp::optimization::WrapperScalarFunctionGradient *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  argp2 = *(sgpp::optimization::WrapperScalarFunctionGradient::FunctionGradientEvalType **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null sgpp::optimization::WrapperScalarFunctionGradient::FunctionGradientEvalType");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (sgpp::optimization::WrapperScalarFunctionGradient *)new sgpp::optimization::WrapperScalarFunctionGradient(arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::WrapperScalarFunctionGradient **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptWrapperScalarFunctionGradient(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::WrapperScalarFunctionGradient *arg1 = (sgpp::optimization::WrapperScalarFunctionGradient *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::WrapperScalarFunctionGradient **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptWrapperScalarFunctionGradient_1eval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jdouble jresult = 0 ;
  sgpp::optimization::WrapperScalarFunctionGradient *arg1 = (sgpp::optimization::WrapperScalarFunctionGradient *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::optimization::WrapperScalarFunctionGradient **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->eval((sgpp::base::DataVector const &)*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptWrapperScalarFunctionGradient_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::WrapperScalarFunctionGradient *arg1 = (sgpp::optimization::WrapperScalarFunctionGradient *) 0 ;
  std::unique_ptr< sgpp::optimization::ScalarFunctionGradient > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::WrapperScalarFunctionGradient **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::ScalarFunctionGradient > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::ScalarFunctionGradient > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::WrapperScalarFunctionGradient const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptWrapperScalarFunctionHessian(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  size_t arg1 ;
  SwigValueWrapper< std::function< double (sgpp::base::DataVector const &,sgpp::base::DataVector &,sgpp::base::DataMatrix &) > > arg2 ;
  sgpp::optimization::WrapperScalarFunctionHessian::FunctionHessianEvalType *argp2 ;
  sgpp::optimization::WrapperScalarFunctionHessian *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  argp2 = *(sgpp::optimization::WrapperScalarFunctionHessian::FunctionHessianEvalType **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null sgpp::optimization::WrapperScalarFunctionHessian::FunctionHessianEvalType");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (sgpp::optimization::WrapperScalarFunctionHessian *)new sgpp::optimization::WrapperScalarFunctionHessian(arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::WrapperScalarFunctionHessian **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptWrapperScalarFunctionHessian(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::WrapperScalarFunctionHessian *arg1 = (sgpp::optimization::WrapperScalarFunctionHessian *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::WrapperScalarFunctionHessian **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptWrapperScalarFunctionHessian_1eval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jdouble jresult = 0 ;
  sgpp::optimization::WrapperScalarFunctionHessian *arg1 = (sgpp::optimization::WrapperScalarFunctionHessian *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  sgpp::base::DataMatrix *arg4 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(sgpp::optimization::WrapperScalarFunctionHessian **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  arg4 = *(sgpp::base::DataMatrix **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->eval((sgpp::base::DataVector const &)*arg2,*arg3,*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptWrapperScalarFunctionHessian_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::WrapperScalarFunctionHessian *arg1 = (sgpp::optimization::WrapperScalarFunctionHessian *) 0 ;
  std::unique_ptr< sgpp::optimization::ScalarFunctionHessian > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::WrapperScalarFunctionHessian **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::ScalarFunctionHessian > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::ScalarFunctionHessian > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::WrapperScalarFunctionHessian const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptWrapperVectorFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  SwigValueWrapper< std::function< void (sgpp::base::DataVector const &,sgpp::base::DataVector &) > > arg3 ;
  sgpp::optimization::WrapperVectorFunction::FunctionEvalType *argp3 ;
  sgpp::optimization::WrapperVectorFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  argp3 = *(sgpp::optimization::WrapperVectorFunction::FunctionEvalType **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null sgpp::optimization::WrapperVectorFunction::FunctionEvalType");
    return 0;
  }
  arg3 = *argp3; 
  {
    try {
      result = (sgpp::optimization::WrapperVectorFunction *)new sgpp::optimization::WrapperVectorFunction(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::WrapperVectorFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptWrapperVectorFunction(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::WrapperVectorFunction *arg1 = (sgpp::optimization::WrapperVectorFunction *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::WrapperVectorFunction **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptWrapperVectorFunction_1eval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::optimization::WrapperVectorFunction *arg1 = (sgpp::optimization::WrapperVectorFunction *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::optimization::WrapperVectorFunction **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->eval((sgpp::base::DataVector const &)*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptWrapperVectorFunction_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::WrapperVectorFunction *arg1 = (sgpp::optimization::WrapperVectorFunction *) 0 ;
  std::unique_ptr< sgpp::optimization::VectorFunction > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::WrapperVectorFunction **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::VectorFunction > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::VectorFunction > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::WrapperVectorFunction const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptWrapperVectorFunctionGradient(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  SwigValueWrapper< std::function< void (sgpp::base::DataVector const &,sgpp::base::DataVector &,sgpp::base::DataMatrix &) > > arg3 ;
  sgpp::optimization::WrapperVectorFunctionGradient::FunctionGradientEvalType *argp3 ;
  sgpp::optimization::WrapperVectorFunctionGradient *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  argp3 = *(sgpp::optimization::WrapperVectorFunctionGradient::FunctionGradientEvalType **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null sgpp::optimization::WrapperVectorFunctionGradient::FunctionGradientEvalType");
    return 0;
  }
  arg3 = *argp3; 
  {
    try {
      result = (sgpp::optimization::WrapperVectorFunctionGradient *)new sgpp::optimization::WrapperVectorFunctionGradient(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::WrapperVectorFunctionGradient **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptWrapperVectorFunctionGradient(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::WrapperVectorFunctionGradient *arg1 = (sgpp::optimization::WrapperVectorFunctionGradient *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::WrapperVectorFunctionGradient **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptWrapperVectorFunctionGradient_1eval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  sgpp::optimization::WrapperVectorFunctionGradient *arg1 = (sgpp::optimization::WrapperVectorFunctionGradient *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  sgpp::base::DataMatrix *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(sgpp::optimization::WrapperVectorFunctionGradient **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg4 = *(sgpp::base::DataMatrix **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->eval((sgpp::base::DataVector const &)*arg2,*arg3,*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptWrapperVectorFunctionGradient_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::WrapperVectorFunctionGradient *arg1 = (sgpp::optimization::WrapperVectorFunctionGradient *) 0 ;
  std::unique_ptr< sgpp::optimization::VectorFunctionGradient > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::WrapperVectorFunctionGradient **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::VectorFunctionGradient > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::VectorFunctionGradient > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::WrapperVectorFunctionGradient const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptWrapperVectorFunctionHessian(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  SwigValueWrapper< std::function< void (sgpp::base::DataVector const &,sgpp::base::DataVector &,sgpp::base::DataMatrix &,std::vector< sgpp::base::DataMatrix > &) > > arg3 ;
  sgpp::optimization::WrapperVectorFunctionHessian::FunctionHessianEvalType *argp3 ;
  sgpp::optimization::WrapperVectorFunctionHessian *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  argp3 = *(sgpp::optimization::WrapperVectorFunctionHessian::FunctionHessianEvalType **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null sgpp::optimization::WrapperVectorFunctionHessian::FunctionHessianEvalType");
    return 0;
  }
  arg3 = *argp3; 
  {
    try {
      result = (sgpp::optimization::WrapperVectorFunctionHessian *)new sgpp::optimization::WrapperVectorFunctionHessian(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::WrapperVectorFunctionHessian **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptWrapperVectorFunctionHessian(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::WrapperVectorFunctionHessian *arg1 = (sgpp::optimization::WrapperVectorFunctionHessian *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::WrapperVectorFunctionHessian **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptWrapperVectorFunctionHessian_1eval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5) {
  sgpp::optimization::WrapperVectorFunctionHessian *arg1 = (sgpp::optimization::WrapperVectorFunctionHessian *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  sgpp::base::DataMatrix *arg4 = 0 ;
  std::vector< sgpp::base::DataMatrix > *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(sgpp::optimization::WrapperVectorFunctionHessian **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  arg4 = *(sgpp::base::DataMatrix **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return ;
  } 
  arg5 = *(std::vector< sgpp::base::DataMatrix > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< sgpp::base::DataMatrix > & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->eval((sgpp::base::DataVector const &)*arg2,*arg3,*arg4,*arg5);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptWrapperVectorFunctionHessian_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::WrapperVectorFunctionHessian *arg1 = (sgpp::optimization::WrapperVectorFunctionHessian *) 0 ;
  std::unique_ptr< sgpp::optimization::VectorFunctionHessian > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::WrapperVectorFunctionHessian **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::VectorFunctionHessian > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::VectorFunctionHessian > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::WrapperVectorFunctionHessian const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptEmptyVectorFunction_1getInstance(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::WrapperVectorFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::WrapperVectorFunction *) &sgpp::optimization::EmptyVectorFunction::getInstance();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::WrapperVectorFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptEmptyVectorFunction(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::EmptyVectorFunction *arg1 = (sgpp::optimization::EmptyVectorFunction *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::EmptyVectorFunction **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptEmptyVectorFunctionGradient_1getInstance(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::WrapperVectorFunctionGradient *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::WrapperVectorFunctionGradient *) &sgpp::optimization::EmptyVectorFunctionGradient::getInstance();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::WrapperVectorFunctionGradient **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptEmptyVectorFunctionGradient(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::EmptyVectorFunctionGradient *arg1 = (sgpp::optimization::EmptyVectorFunctionGradient *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::EmptyVectorFunctionGradient **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptHashRefinementMultiple_1getNumberOfRefinablePoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  sgpp::optimization::HashRefinementMultiple *arg1 = (sgpp::optimization::HashRefinementMultiple *) 0 ;
  sgpp::base::GridStorage *arg2 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::HashRefinementMultiple **)&jarg1; 
  arg2 = *(sgpp::base::GridStorage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->getNumberOfRefinablePoints(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptHashRefinementMultiple_1refineGridpoint1D(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  sgpp::optimization::HashRefinementMultiple *arg1 = (sgpp::optimization::HashRefinementMultiple *) 0 ;
  sgpp::base::GridStorage *arg2 = 0 ;
  sgpp::base::GridPoint *arg3 = 0 ;
  size_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::optimization::HashRefinementMultiple **)&jarg1; 
  arg2 = *(sgpp::base::GridStorage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::GridPoint **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridPoint & reference is null");
    return ;
  } 
  arg4 = (size_t)jarg4; 
  {
    try {
      (arg1)->refineGridpoint1D(*arg2,*arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptHashRefinementMultiple(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::HashRefinementMultiple *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::HashRefinementMultiple *)new sgpp::optimization::HashRefinementMultiple();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::HashRefinementMultiple **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptHashRefinementMultiple(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::HashRefinementMultiple *arg1 = (sgpp::optimization::HashRefinementMultiple *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::HashRefinementMultiple **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptIterativeGridGenerator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::base::Grid *arg2 = 0 ;
  size_t arg3 ;
  sgpp::optimization::IterativeGridGenerator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::base::Grid **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (sgpp::optimization::IterativeGridGenerator *)new SwigDirector_OptIterativeGridGenerator(jenv,*arg1,*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::IterativeGridGenerator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptIterativeGridGenerator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::IterativeGridGenerator *arg1 = (sgpp::optimization::IterativeGridGenerator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::IterativeGridGenerator **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_sgpp_jsgppJNI_OptIterativeGridGenerator_1generate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  sgpp::optimization::IterativeGridGenerator *arg1 = (sgpp::optimization::IterativeGridGenerator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::IterativeGridGenerator **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->generate();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptIterativeGridGenerator_1getGrid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::IterativeGridGenerator *arg1 = (sgpp::optimization::IterativeGridGenerator *) 0 ;
  sgpp::base::Grid *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::IterativeGridGenerator **)&jarg1; 
  {
    try {
      result = (sgpp::base::Grid *) &((sgpp::optimization::IterativeGridGenerator const *)arg1)->getGrid();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::Grid **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptIterativeGridGenerator_1getFunctionValues(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::IterativeGridGenerator *arg1 = (sgpp::optimization::IterativeGridGenerator *) 0 ;
  sgpp::base::DataVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::IterativeGridGenerator **)&jarg1; 
  {
    try {
      result = (sgpp::base::DataVector *) &((sgpp::optimization::IterativeGridGenerator const *)arg1)->getFunctionValues();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::DataVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptIterativeGridGenerator_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  sgpp::optimization::IterativeGridGenerator *obj = *((sgpp::optimization::IterativeGridGenerator **)&objarg);
  (void)jcls;
  SwigDirector_OptIterativeGridGenerator *director = dynamic_cast<SwigDirector_OptIterativeGridGenerator *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptIterativeGridGenerator_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  sgpp::optimization::IterativeGridGenerator *obj = *((sgpp::optimization::IterativeGridGenerator **)&objarg);
  SwigDirector_OptIterativeGridGenerator *director = dynamic_cast<SwigDirector_OptIterativeGridGenerator *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptIterativeGridGeneratorLinearSurplus_1DEFAULT_1ADAPTIVITY_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)sgpp::optimization::IterativeGridGeneratorLinearSurplus::DEFAULT_ADAPTIVITY;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptIterativeGridGeneratorLinearSurplus_1DEFAULT_1INITIAL_1LEVEL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)sgpp::optimization::IterativeGridGeneratorLinearSurplus::DEFAULT_INITIAL_LEVEL;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptIterativeGridGeneratorLinearSurplus_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jdouble jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::base::Grid *arg2 = 0 ;
  size_t arg3 ;
  double arg4 ;
  sgpp::base::level_t arg5 ;
  sgpp::optimization::IterativeGridGeneratorLinearSurplus *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::base::Grid **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (sgpp::base::level_t)jarg5; 
  {
    try {
      result = (sgpp::optimization::IterativeGridGeneratorLinearSurplus *)new sgpp::optimization::IterativeGridGeneratorLinearSurplus(*arg1,*arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::IterativeGridGeneratorLinearSurplus **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptIterativeGridGeneratorLinearSurplus_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::base::Grid *arg2 = 0 ;
  size_t arg3 ;
  double arg4 ;
  sgpp::optimization::IterativeGridGeneratorLinearSurplus *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::base::Grid **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (sgpp::optimization::IterativeGridGeneratorLinearSurplus *)new sgpp::optimization::IterativeGridGeneratorLinearSurplus(*arg1,*arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::IterativeGridGeneratorLinearSurplus **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptIterativeGridGeneratorLinearSurplus_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::base::Grid *arg2 = 0 ;
  size_t arg3 ;
  sgpp::optimization::IterativeGridGeneratorLinearSurplus *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::base::Grid **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (sgpp::optimization::IterativeGridGeneratorLinearSurplus *)new sgpp::optimization::IterativeGridGeneratorLinearSurplus(*arg1,*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::IterativeGridGeneratorLinearSurplus **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptIterativeGridGeneratorLinearSurplus(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::IterativeGridGeneratorLinearSurplus *arg1 = (sgpp::optimization::IterativeGridGeneratorLinearSurplus *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::IterativeGridGeneratorLinearSurplus **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_sgpp_jsgppJNI_OptIterativeGridGeneratorLinearSurplus_1generate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  sgpp::optimization::IterativeGridGeneratorLinearSurplus *arg1 = (sgpp::optimization::IterativeGridGeneratorLinearSurplus *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::IterativeGridGeneratorLinearSurplus **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->generate();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptIterativeGridGeneratorLinearSurplus_1getAdaptivity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::optimization::IterativeGridGeneratorLinearSurplus *arg1 = (sgpp::optimization::IterativeGridGeneratorLinearSurplus *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::IterativeGridGeneratorLinearSurplus **)&jarg1; 
  {
    try {
      result = (double)((sgpp::optimization::IterativeGridGeneratorLinearSurplus const *)arg1)->getAdaptivity();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptIterativeGridGeneratorLinearSurplus_1setAdaptivity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::optimization::IterativeGridGeneratorLinearSurplus *arg1 = (sgpp::optimization::IterativeGridGeneratorLinearSurplus *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::IterativeGridGeneratorLinearSurplus **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setAdaptivity(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptIterativeGridGeneratorLinearSurplus_1getInitialLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::IterativeGridGeneratorLinearSurplus *arg1 = (sgpp::optimization::IterativeGridGeneratorLinearSurplus *) 0 ;
  sgpp::base::level_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::IterativeGridGeneratorLinearSurplus **)&jarg1; 
  {
    try {
      result = (sgpp::base::level_t)((sgpp::optimization::IterativeGridGeneratorLinearSurplus const *)arg1)->getInitialLevel();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptIterativeGridGeneratorLinearSurplus_1setInitialLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::IterativeGridGeneratorLinearSurplus *arg1 = (sgpp::optimization::IterativeGridGeneratorLinearSurplus *) 0 ;
  sgpp::base::level_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::IterativeGridGeneratorLinearSurplus **)&jarg1; 
  arg2 = (sgpp::base::level_t)jarg2; 
  {
    try {
      (arg1)->setInitialLevel(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptIterativeGridGeneratorRitterNovak_1DEFAULT_1ADAPTIVITY_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)sgpp::optimization::IterativeGridGeneratorRitterNovak::DEFAULT_ADAPTIVITY;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptIterativeGridGeneratorRitterNovak_1DEFAULT_1INITIAL_1LEVEL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)sgpp::optimization::IterativeGridGeneratorRitterNovak::DEFAULT_INITIAL_LEVEL;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptIterativeGridGeneratorRitterNovak_1DEFAULT_1MAX_1LEVEL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)sgpp::optimization::IterativeGridGeneratorRitterNovak::DEFAULT_MAX_LEVEL;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptIterativeGridGeneratorRitterNovak_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jdouble jarg4, jlong jarg5, jlong jarg6, jint jarg7) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::base::Grid *arg2 = 0 ;
  size_t arg3 ;
  double arg4 ;
  sgpp::base::level_t arg5 ;
  sgpp::base::level_t arg6 ;
  sgpp::optimization::IterativeGridGeneratorRitterNovak::PowMethod arg7 ;
  sgpp::optimization::IterativeGridGeneratorRitterNovak *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::base::Grid **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (sgpp::base::level_t)jarg5; 
  arg6 = (sgpp::base::level_t)jarg6; 
  arg7 = (sgpp::optimization::IterativeGridGeneratorRitterNovak::PowMethod)jarg7; 
  {
    try {
      result = (sgpp::optimization::IterativeGridGeneratorRitterNovak *)new sgpp::optimization::IterativeGridGeneratorRitterNovak(*arg1,*arg2,arg3,arg4,arg5,arg6,arg7);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::IterativeGridGeneratorRitterNovak **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptIterativeGridGeneratorRitterNovak_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jdouble jarg4, jlong jarg5, jlong jarg6) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::base::Grid *arg2 = 0 ;
  size_t arg3 ;
  double arg4 ;
  sgpp::base::level_t arg5 ;
  sgpp::base::level_t arg6 ;
  sgpp::optimization::IterativeGridGeneratorRitterNovak *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::base::Grid **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (sgpp::base::level_t)jarg5; 
  arg6 = (sgpp::base::level_t)jarg6; 
  {
    try {
      result = (sgpp::optimization::IterativeGridGeneratorRitterNovak *)new sgpp::optimization::IterativeGridGeneratorRitterNovak(*arg1,*arg2,arg3,arg4,arg5,arg6);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::IterativeGridGeneratorRitterNovak **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptIterativeGridGeneratorRitterNovak_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jdouble jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::base::Grid *arg2 = 0 ;
  size_t arg3 ;
  double arg4 ;
  sgpp::base::level_t arg5 ;
  sgpp::optimization::IterativeGridGeneratorRitterNovak *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::base::Grid **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (sgpp::base::level_t)jarg5; 
  {
    try {
      result = (sgpp::optimization::IterativeGridGeneratorRitterNovak *)new sgpp::optimization::IterativeGridGeneratorRitterNovak(*arg1,*arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::IterativeGridGeneratorRitterNovak **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptIterativeGridGeneratorRitterNovak_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::base::Grid *arg2 = 0 ;
  size_t arg3 ;
  double arg4 ;
  sgpp::optimization::IterativeGridGeneratorRitterNovak *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::base::Grid **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (sgpp::optimization::IterativeGridGeneratorRitterNovak *)new sgpp::optimization::IterativeGridGeneratorRitterNovak(*arg1,*arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::IterativeGridGeneratorRitterNovak **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptIterativeGridGeneratorRitterNovak_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::base::Grid *arg2 = 0 ;
  size_t arg3 ;
  sgpp::optimization::IterativeGridGeneratorRitterNovak *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::base::Grid **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (sgpp::optimization::IterativeGridGeneratorRitterNovak *)new sgpp::optimization::IterativeGridGeneratorRitterNovak(*arg1,*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::IterativeGridGeneratorRitterNovak **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptIterativeGridGeneratorRitterNovak(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::IterativeGridGeneratorRitterNovak *arg1 = (sgpp::optimization::IterativeGridGeneratorRitterNovak *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::IterativeGridGeneratorRitterNovak **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_sgpp_jsgppJNI_OptIterativeGridGeneratorRitterNovak_1generate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  sgpp::optimization::IterativeGridGeneratorRitterNovak *arg1 = (sgpp::optimization::IterativeGridGeneratorRitterNovak *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::IterativeGridGeneratorRitterNovak **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->generate();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptIterativeGridGeneratorRitterNovak_1getAdaptivity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::optimization::IterativeGridGeneratorRitterNovak *arg1 = (sgpp::optimization::IterativeGridGeneratorRitterNovak *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::IterativeGridGeneratorRitterNovak **)&jarg1; 
  {
    try {
      result = (double)((sgpp::optimization::IterativeGridGeneratorRitterNovak const *)arg1)->getAdaptivity();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptIterativeGridGeneratorRitterNovak_1setAdaptivity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::optimization::IterativeGridGeneratorRitterNovak *arg1 = (sgpp::optimization::IterativeGridGeneratorRitterNovak *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::IterativeGridGeneratorRitterNovak **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setAdaptivity(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptIterativeGridGeneratorRitterNovak_1getInitialLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::IterativeGridGeneratorRitterNovak *arg1 = (sgpp::optimization::IterativeGridGeneratorRitterNovak *) 0 ;
  sgpp::base::level_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::IterativeGridGeneratorRitterNovak **)&jarg1; 
  {
    try {
      result = (sgpp::base::level_t)((sgpp::optimization::IterativeGridGeneratorRitterNovak const *)arg1)->getInitialLevel();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptIterativeGridGeneratorRitterNovak_1setInitialLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::IterativeGridGeneratorRitterNovak *arg1 = (sgpp::optimization::IterativeGridGeneratorRitterNovak *) 0 ;
  sgpp::base::level_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::IterativeGridGeneratorRitterNovak **)&jarg1; 
  arg2 = (sgpp::base::level_t)jarg2; 
  {
    try {
      (arg1)->setInitialLevel(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptIterativeGridGeneratorRitterNovak_1getMaxLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::IterativeGridGeneratorRitterNovak *arg1 = (sgpp::optimization::IterativeGridGeneratorRitterNovak *) 0 ;
  sgpp::base::level_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::IterativeGridGeneratorRitterNovak **)&jarg1; 
  {
    try {
      result = (sgpp::base::level_t)((sgpp::optimization::IterativeGridGeneratorRitterNovak const *)arg1)->getMaxLevel();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptIterativeGridGeneratorRitterNovak_1setMaxLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::IterativeGridGeneratorRitterNovak *arg1 = (sgpp::optimization::IterativeGridGeneratorRitterNovak *) 0 ;
  sgpp::base::level_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::IterativeGridGeneratorRitterNovak **)&jarg1; 
  arg2 = (sgpp::base::level_t)jarg2; 
  {
    try {
      (arg1)->setMaxLevel(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_sgpp_jsgppJNI_OptIterativeGridGeneratorRitterNovak_1getPowMethod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  sgpp::optimization::IterativeGridGeneratorRitterNovak *arg1 = (sgpp::optimization::IterativeGridGeneratorRitterNovak *) 0 ;
  sgpp::optimization::IterativeGridGeneratorRitterNovak::PowMethod result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::IterativeGridGeneratorRitterNovak **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::IterativeGridGeneratorRitterNovak::PowMethod)((sgpp::optimization::IterativeGridGeneratorRitterNovak const *)arg1)->getPowMethod();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptIterativeGridGeneratorRitterNovak_1setPowMethod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  sgpp::optimization::IterativeGridGeneratorRitterNovak *arg1 = (sgpp::optimization::IterativeGridGeneratorRitterNovak *) 0 ;
  sgpp::optimization::IterativeGridGeneratorRitterNovak::PowMethod arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::IterativeGridGeneratorRitterNovak **)&jarg1; 
  arg2 = (sgpp::optimization::IterativeGridGeneratorRitterNovak::PowMethod)jarg2; 
  {
    try {
      (arg1)->setPowMethod(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptIterativeGridGeneratorSOO_1DEFAULT_1ADAPTIVITY_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)sgpp::optimization::IterativeGridGeneratorSOO::DEFAULT_ADAPTIVITY;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptIterativeGridGeneratorSOO_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::base::Grid *arg2 = 0 ;
  size_t arg3 ;
  double arg4 ;
  sgpp::optimization::IterativeGridGeneratorSOO *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::base::Grid **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (sgpp::optimization::IterativeGridGeneratorSOO *)new sgpp::optimization::IterativeGridGeneratorSOO(*arg1,*arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::IterativeGridGeneratorSOO **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptIterativeGridGeneratorSOO_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::base::Grid *arg2 = 0 ;
  size_t arg3 ;
  sgpp::optimization::IterativeGridGeneratorSOO *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::base::Grid **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (sgpp::optimization::IterativeGridGeneratorSOO *)new sgpp::optimization::IterativeGridGeneratorSOO(*arg1,*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::IterativeGridGeneratorSOO **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptIterativeGridGeneratorSOO(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::IterativeGridGeneratorSOO *arg1 = (sgpp::optimization::IterativeGridGeneratorSOO *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::IterativeGridGeneratorSOO **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_sgpp_jsgppJNI_OptIterativeGridGeneratorSOO_1generate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  sgpp::optimization::IterativeGridGeneratorSOO *arg1 = (sgpp::optimization::IterativeGridGeneratorSOO *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::IterativeGridGeneratorSOO **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->generate();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptIterativeGridGeneratorSOO_1getAdaptivity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::IterativeGridGeneratorSOO *arg1 = (sgpp::optimization::IterativeGridGeneratorSOO *) 0 ;
  sgpp::optimization::IterativeGridGeneratorSOO::AdaptivityFunction result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::IterativeGridGeneratorSOO **)&jarg1; 
  {
    try {
      result = ((sgpp::optimization::IterativeGridGeneratorSOO const *)arg1)->getAdaptivity();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::IterativeGridGeneratorSOO::AdaptivityFunction **)&jresult = new sgpp::optimization::IterativeGridGeneratorSOO::AdaptivityFunction((const sgpp::optimization::IterativeGridGeneratorSOO::AdaptivityFunction &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptIterativeGridGeneratorSOO_1setAdaptivity_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::optimization::IterativeGridGeneratorSOO *arg1 = (sgpp::optimization::IterativeGridGeneratorSOO *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::IterativeGridGeneratorSOO **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setAdaptivity(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptIterativeGridGeneratorSOO_1setAdaptivity_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::IterativeGridGeneratorSOO *arg1 = (sgpp::optimization::IterativeGridGeneratorSOO *) 0 ;
  sgpp::optimization::IterativeGridGeneratorSOO::AdaptivityFunction arg2 ;
  sgpp::optimization::IterativeGridGeneratorSOO::AdaptivityFunction *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::IterativeGridGeneratorSOO **)&jarg1; 
  argp2 = *(sgpp::optimization::IterativeGridGeneratorSOO::AdaptivityFunction **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null sgpp::optimization::IterativeGridGeneratorSOO::AdaptivityFunction");
    return ;
  }
  arg2 = *argp2; 
  {
    try {
      (arg1)->setAdaptivity(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OperationMultipleHierarchisation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::OperationMultipleHierarchisation *arg1 = (sgpp::optimization::OperationMultipleHierarchisation *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::OperationMultipleHierarchisation **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_sgpp_jsgppJNI_OperationMultipleHierarchisation_1doHierarchisation_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  sgpp::optimization::OperationMultipleHierarchisation *arg1 = (sgpp::optimization::OperationMultipleHierarchisation *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::OperationMultipleHierarchisation **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->doHierarchisation(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OperationMultipleHierarchisation_1doDehierarchisation_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::optimization::OperationMultipleHierarchisation *arg1 = (sgpp::optimization::OperationMultipleHierarchisation *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::OperationMultipleHierarchisation **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->doDehierarchisation(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_sgpp_jsgppJNI_OperationMultipleHierarchisation_1doHierarchisation_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  sgpp::optimization::OperationMultipleHierarchisation *arg1 = (sgpp::optimization::OperationMultipleHierarchisation *) 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::OperationMultipleHierarchisation **)&jarg1; 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->doHierarchisation(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OperationMultipleHierarchisation_1doDehierarchisation_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::optimization::OperationMultipleHierarchisation *arg1 = (sgpp::optimization::OperationMultipleHierarchisation *) 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::OperationMultipleHierarchisation **)&jarg1; 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->doDehierarchisation(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptSLE(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::SLE *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::SLE *)new SwigDirector_OptSLE(jenv);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::SLE **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptSLE(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::SLE *arg1 = (sgpp::optimization::SLE *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::SLE **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_sgpp_jsgppJNI_OptSLE_1isMatrixEntryNonZero(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  sgpp::optimization::SLE *arg1 = (sgpp::optimization::SLE *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::SLE **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (bool)(arg1)->isMatrixEntryNonZero(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptSLE_1getMatrixEntry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jdouble jresult = 0 ;
  sgpp::optimization::SLE *arg1 = (sgpp::optimization::SLE *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::SLE **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (double)(arg1)->getMatrixEntry(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptSLE_1matrixVectorMultiplication(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::optimization::SLE *arg1 = (sgpp::optimization::SLE *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::optimization::SLE **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->matrixVectorMultiplication((sgpp::base::DataVector const &)*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptSLE_1matrixVectorMultiplicationSwigExplicitOptSLE(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::optimization::SLE *arg1 = (sgpp::optimization::SLE *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::optimization::SLE **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->sgpp::optimization::SLE::matrixVectorMultiplication((sgpp::base::DataVector const &)*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptSLE_1countNNZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::SLE *arg1 = (sgpp::optimization::SLE *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::SLE **)&jarg1; 
  {
    try {
      result = (arg1)->countNNZ();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptSLE_1countNNZSwigExplicitOptSLE(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::SLE *arg1 = (sgpp::optimization::SLE *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::SLE **)&jarg1; 
  {
    try {
      result = (arg1)->sgpp::optimization::SLE::countNNZ();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptSLE_1getDimension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::SLE *arg1 = (sgpp::optimization::SLE *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::SLE **)&jarg1; 
  {
    try {
      result = ((sgpp::optimization::SLE const *)arg1)->getDimension();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_sgpp_jsgppJNI_OptSLE_1isCloneable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  sgpp::optimization::SLE *arg1 = (sgpp::optimization::SLE *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::SLE **)&jarg1; 
  {
    try {
      result = (bool)((sgpp::optimization::SLE const *)arg1)->isCloneable();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_sgpp_jsgppJNI_OptSLE_1isCloneableSwigExplicitOptSLE(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  sgpp::optimization::SLE *arg1 = (sgpp::optimization::SLE *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::SLE **)&jarg1; 
  {
    try {
      result = (bool)((sgpp::optimization::SLE const *)arg1)->sgpp::optimization::SLE::isCloneable();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptSLE_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  sgpp::optimization::SLE *obj = *((sgpp::optimization::SLE **)&objarg);
  (void)jcls;
  SwigDirector_OptSLE *director = dynamic_cast<SwigDirector_OptSLE *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptSLE_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  sgpp::optimization::SLE *obj = *((sgpp::optimization::SLE **)&objarg);
  SwigDirector_OptSLE *director = dynamic_cast<SwigDirector_OptSLE *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1CloneableSLE(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::CloneableSLE *arg1 = (sgpp::optimization::CloneableSLE *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::CloneableSLE **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_CloneableSLE_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::CloneableSLE *arg1 = (sgpp::optimization::CloneableSLE *) 0 ;
  std::unique_ptr< sgpp::optimization::CloneableSLE > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::CloneableSLE **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::CloneableSLE > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::CloneableSLE > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::CloneableSLE const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_sgpp_jsgppJNI_CloneableSLE_1isCloneable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  sgpp::optimization::CloneableSLE *arg1 = (sgpp::optimization::CloneableSLE *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::CloneableSLE **)&jarg1; 
  {
    try {
      result = (bool)((sgpp::optimization::CloneableSLE const *)arg1)->isCloneable();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptFullSLE(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::DataMatrix *arg1 = 0 ;
  sgpp::optimization::FullSLE *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::DataMatrix **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::optimization::FullSLE *)new sgpp::optimization::FullSLE(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::FullSLE **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptFullSLE(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::FullSLE *arg1 = (sgpp::optimization::FullSLE *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::FullSLE **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_sgpp_jsgppJNI_OptFullSLE_1isMatrixEntryNonZero(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  sgpp::optimization::FullSLE *arg1 = (sgpp::optimization::FullSLE *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::FullSLE **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (bool)(arg1)->isMatrixEntryNonZero(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptFullSLE_1getMatrixEntry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jdouble jresult = 0 ;
  sgpp::optimization::FullSLE *arg1 = (sgpp::optimization::FullSLE *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::FullSLE **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (double)(arg1)->getMatrixEntry(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptFullSLE_1getA(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::FullSLE *arg1 = (sgpp::optimization::FullSLE *) 0 ;
  sgpp::base::DataMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::FullSLE **)&jarg1; 
  {
    try {
      result = (sgpp::base::DataMatrix *) &(arg1)->getA();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::DataMatrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptFullSLE_1getDimension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::FullSLE *arg1 = (sgpp::optimization::FullSLE *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::FullSLE **)&jarg1; 
  {
    try {
      result = ((sgpp::optimization::FullSLE const *)arg1)->getDimension();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptFullSLE_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::FullSLE *arg1 = (sgpp::optimization::FullSLE *) 0 ;
  std::unique_ptr< sgpp::optimization::CloneableSLE > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::FullSLE **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::CloneableSLE > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::CloneableSLE > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::FullSLE const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptHierarchisationSLE_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::Grid *arg1 = 0 ;
  sgpp::optimization::HierarchisationSLE *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::Grid **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::optimization::HierarchisationSLE *)new sgpp::optimization::HierarchisationSLE(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::HierarchisationSLE **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptHierarchisationSLE_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  sgpp::base::Grid *arg1 = 0 ;
  sgpp::base::GridStorage *arg2 = 0 ;
  sgpp::optimization::HierarchisationSLE *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::Grid **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::base::GridStorage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::optimization::HierarchisationSLE *)new sgpp::optimization::HierarchisationSLE(*arg1,*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::HierarchisationSLE **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_sgpp_jsgppJNI_OptHierarchisationSLE_1isMatrixEntryNonZero(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  sgpp::optimization::HierarchisationSLE *arg1 = (sgpp::optimization::HierarchisationSLE *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::HierarchisationSLE **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (bool)(arg1)->isMatrixEntryNonZero(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptHierarchisationSLE_1getMatrixEntry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jdouble jresult = 0 ;
  sgpp::optimization::HierarchisationSLE *arg1 = (sgpp::optimization::HierarchisationSLE *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::HierarchisationSLE **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (double)(arg1)->getMatrixEntry(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptHierarchisationSLE_1getGrid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::HierarchisationSLE *arg1 = (sgpp::optimization::HierarchisationSLE *) 0 ;
  sgpp::base::Grid *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::HierarchisationSLE **)&jarg1; 
  {
    try {
      result = (sgpp::base::Grid *) &(arg1)->getGrid();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::Grid **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptHierarchisationSLE_1getGridStorage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::HierarchisationSLE *arg1 = (sgpp::optimization::HierarchisationSLE *) 0 ;
  sgpp::base::GridStorage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::HierarchisationSLE **)&jarg1; 
  {
    try {
      result = (sgpp::base::GridStorage *) &(arg1)->getGridStorage();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::GridStorage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptHierarchisationSLE_1getDimension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::HierarchisationSLE *arg1 = (sgpp::optimization::HierarchisationSLE *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::HierarchisationSLE **)&jarg1; 
  {
    try {
      result = ((sgpp::optimization::HierarchisationSLE const *)arg1)->getDimension();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptHierarchisationSLE_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::HierarchisationSLE *arg1 = (sgpp::optimization::HierarchisationSLE *) 0 ;
  std::unique_ptr< sgpp::optimization::CloneableSLE > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::HierarchisationSLE **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::CloneableSLE > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::CloneableSLE > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::HierarchisationSLE const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptHierarchisationSLE(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::HierarchisationSLE *arg1 = (sgpp::optimization::HierarchisationSLE *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::HierarchisationSLE **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptSLESolver(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::sle_solver::SLESolver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::sle_solver::SLESolver *)new SwigDirector_OptSLESolver(jenv);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::sle_solver::SLESolver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptSLESolver(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::sle_solver::SLESolver *arg1 = (sgpp::optimization::sle_solver::SLESolver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::sle_solver::SLESolver **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_sgpp_jsgppJNI_OptSLESolver_1solve_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  sgpp::optimization::sle_solver::SLESolver *arg1 = (sgpp::optimization::sle_solver::SLESolver *) 0 ;
  sgpp::optimization::SLE *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  sgpp::base::DataVector *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(sgpp::optimization::sle_solver::SLESolver **)&jarg1; 
  arg2 = *(sgpp::optimization::SLE **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::SLE & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  arg4 = *(sgpp::base::DataVector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((sgpp::optimization::sle_solver::SLESolver const *)arg1)->solve(*arg2,*arg3,*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_sgpp_jsgppJNI_OptSLESolver_1solve_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  sgpp::optimization::sle_solver::SLESolver *arg1 = (sgpp::optimization::sle_solver::SLESolver *) 0 ;
  sgpp::optimization::SLE *arg2 = 0 ;
  sgpp::base::DataMatrix *arg3 = 0 ;
  sgpp::base::DataMatrix *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(sgpp::optimization::sle_solver::SLESolver **)&jarg1; 
  arg2 = *(sgpp::optimization::SLE **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::SLE & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::base::DataMatrix **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return 0;
  } 
  arg4 = *(sgpp::base::DataMatrix **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((sgpp::optimization::sle_solver::SLESolver const *)arg1)->solve(*arg2,*arg3,*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_sgpp_jsgppJNI_OptSLESolver_1solveSwigExplicitOptSLESolver_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  sgpp::optimization::sle_solver::SLESolver *arg1 = (sgpp::optimization::sle_solver::SLESolver *) 0 ;
  sgpp::optimization::SLE *arg2 = 0 ;
  sgpp::base::DataMatrix *arg3 = 0 ;
  sgpp::base::DataMatrix *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(sgpp::optimization::sle_solver::SLESolver **)&jarg1; 
  arg2 = *(sgpp::optimization::SLE **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::SLE & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::base::DataMatrix **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return 0;
  } 
  arg4 = *(sgpp::base::DataMatrix **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((sgpp::optimization::sle_solver::SLESolver const *)arg1)->sgpp::optimization::sle_solver::SLESolver::solve(*arg2,*arg3,*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptSLESolver_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  sgpp::optimization::sle_solver::SLESolver *obj = *((sgpp::optimization::sle_solver::SLESolver **)&objarg);
  (void)jcls;
  SwigDirector_OptSLESolver *director = dynamic_cast<SwigDirector_OptSLESolver *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptSLESolver_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  sgpp::optimization::sle_solver::SLESolver *obj = *((sgpp::optimization::sle_solver::SLESolver **)&objarg);
  SwigDirector_OptSLESolver *director = dynamic_cast<SwigDirector_OptSLESolver *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptArmadillo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::sle_solver::Armadillo *arg1 = (sgpp::optimization::sle_solver::Armadillo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::sle_solver::Armadillo **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_sgpp_jsgppJNI_OptArmadillo_1solve_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  sgpp::optimization::sle_solver::Armadillo *arg1 = (sgpp::optimization::sle_solver::Armadillo *) 0 ;
  sgpp::optimization::SLE *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  sgpp::base::DataVector *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(sgpp::optimization::sle_solver::Armadillo **)&jarg1; 
  arg2 = *(sgpp::optimization::SLE **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::SLE & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  arg4 = *(sgpp::base::DataVector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((sgpp::optimization::sle_solver::Armadillo const *)arg1)->solve(*arg2,*arg3,*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_sgpp_jsgppJNI_OptArmadillo_1solve_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  sgpp::optimization::sle_solver::Armadillo *arg1 = (sgpp::optimization::sle_solver::Armadillo *) 0 ;
  sgpp::optimization::SLE *arg2 = 0 ;
  sgpp::base::DataMatrix *arg3 = 0 ;
  sgpp::base::DataMatrix *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(sgpp::optimization::sle_solver::Armadillo **)&jarg1; 
  arg2 = *(sgpp::optimization::SLE **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::SLE & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::base::DataMatrix **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return 0;
  } 
  arg4 = *(sgpp::base::DataMatrix **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((sgpp::optimization::sle_solver::Armadillo const *)arg1)->solve(*arg2,*arg3,*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptArmadillo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::sle_solver::Armadillo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::sle_solver::Armadillo *)new sgpp::optimization::sle_solver::Armadillo();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::sle_solver::Armadillo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptAutoSLESolver_1MAX_1DIM_1FOR_1FULL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  result = sgpp::optimization::sle_solver::Auto::MAX_DIM_FOR_FULL;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptAutoSLESolver_1MAX_1DIM_1FOR_1GAUSSIAN_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  result = sgpp::optimization::sle_solver::Auto::MAX_DIM_FOR_GAUSSIAN;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptAutoSLESolver_1MAX_1NNZ_1RATIO_1FOR_1SPARSE_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)sgpp::optimization::sle_solver::Auto::MAX_NNZ_RATIO_FOR_SPARSE;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptAutoSLESolver_1ESTIMATE_1NNZ_1ROWS_1SAMPLE_1SIZE_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)sgpp::optimization::sle_solver::Auto::ESTIMATE_NNZ_ROWS_SAMPLE_SIZE;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptAutoSLESolver(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::sle_solver::Auto *arg1 = (sgpp::optimization::sle_solver::Auto *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::sle_solver::Auto **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_sgpp_jsgppJNI_OptAutoSLESolver_1solve_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  sgpp::optimization::sle_solver::Auto *arg1 = (sgpp::optimization::sle_solver::Auto *) 0 ;
  sgpp::optimization::SLE *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  sgpp::base::DataVector *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(sgpp::optimization::sle_solver::Auto **)&jarg1; 
  arg2 = *(sgpp::optimization::SLE **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::SLE & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  arg4 = *(sgpp::base::DataVector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((sgpp::optimization::sle_solver::Auto const *)arg1)->solve(*arg2,*arg3,*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_sgpp_jsgppJNI_OptAutoSLESolver_1solve_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  sgpp::optimization::sle_solver::Auto *arg1 = (sgpp::optimization::sle_solver::Auto *) 0 ;
  sgpp::optimization::SLE *arg2 = 0 ;
  sgpp::base::DataMatrix *arg3 = 0 ;
  sgpp::base::DataMatrix *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(sgpp::optimization::sle_solver::Auto **)&jarg1; 
  arg2 = *(sgpp::optimization::SLE **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::SLE & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::base::DataMatrix **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return 0;
  } 
  arg4 = *(sgpp::base::DataMatrix **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((sgpp::optimization::sle_solver::Auto const *)arg1)->solve(*arg2,*arg3,*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptAutoSLESolver(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::sle_solver::Auto *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::sle_solver::Auto *)new sgpp::optimization::sle_solver::Auto();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::sle_solver::Auto **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptBiCGStab_1DEFAULT_1MAX_1IT_1COUNT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  result = sgpp::optimization::sle_solver::BiCGStab::DEFAULT_MAX_IT_COUNT;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptBiCGStab_1DEFAULT_1TOLERANCE_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)sgpp::optimization::sle_solver::BiCGStab::DEFAULT_TOLERANCE;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptBiCGStab_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::sle_solver::BiCGStab *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::sle_solver::BiCGStab *)new sgpp::optimization::sle_solver::BiCGStab();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::sle_solver::BiCGStab **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptBiCGStab_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  size_t arg1 ;
  double arg2 ;
  sgpp::base::DataVector *arg3 = 0 ;
  sgpp::optimization::sle_solver::BiCGStab *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = (size_t)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::optimization::sle_solver::BiCGStab *)new sgpp::optimization::sle_solver::BiCGStab(arg1,arg2,(sgpp::base::DataVector const &)*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::sle_solver::BiCGStab **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptBiCGStab(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::sle_solver::BiCGStab *arg1 = (sgpp::optimization::sle_solver::BiCGStab *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::sle_solver::BiCGStab **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_sgpp_jsgppJNI_OptBiCGStab_1solve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  sgpp::optimization::sle_solver::BiCGStab *arg1 = (sgpp::optimization::sle_solver::BiCGStab *) 0 ;
  sgpp::optimization::SLE *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  sgpp::base::DataVector *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(sgpp::optimization::sle_solver::BiCGStab **)&jarg1; 
  arg2 = *(sgpp::optimization::SLE **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::SLE & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  arg4 = *(sgpp::base::DataVector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((sgpp::optimization::sle_solver::BiCGStab const *)arg1)->solve(*arg2,*arg3,*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptBiCGStab_1getMaxItCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::sle_solver::BiCGStab *arg1 = (sgpp::optimization::sle_solver::BiCGStab *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::sle_solver::BiCGStab **)&jarg1; 
  {
    try {
      result = ((sgpp::optimization::sle_solver::BiCGStab const *)arg1)->getMaxItCount();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptBiCGStab_1setMaxItCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::sle_solver::BiCGStab *arg1 = (sgpp::optimization::sle_solver::BiCGStab *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::sle_solver::BiCGStab **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      (arg1)->setMaxItCount(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptBiCGStab_1getTolerance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::optimization::sle_solver::BiCGStab *arg1 = (sgpp::optimization::sle_solver::BiCGStab *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::sle_solver::BiCGStab **)&jarg1; 
  {
    try {
      result = (double)((sgpp::optimization::sle_solver::BiCGStab const *)arg1)->getTolerance();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptBiCGStab_1setTolerance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::optimization::sle_solver::BiCGStab *arg1 = (sgpp::optimization::sle_solver::BiCGStab *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::sle_solver::BiCGStab **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setTolerance(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptBiCGStab_1getStartingPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::sle_solver::BiCGStab *arg1 = (sgpp::optimization::sle_solver::BiCGStab *) 0 ;
  sgpp::base::DataVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::sle_solver::BiCGStab **)&jarg1; 
  {
    try {
      result = (sgpp::base::DataVector *) &((sgpp::optimization::sle_solver::BiCGStab const *)arg1)->getStartingPoint();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::DataVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptBiCGStab_1setStartingPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::optimization::sle_solver::BiCGStab *arg1 = (sgpp::optimization::sle_solver::BiCGStab *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::sle_solver::BiCGStab **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setStartingPoint((sgpp::base::DataVector const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptEigen(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::sle_solver::Eigen *arg1 = (sgpp::optimization::sle_solver::Eigen *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::sle_solver::Eigen **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_sgpp_jsgppJNI_OptEigen_1solve_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  sgpp::optimization::sle_solver::Eigen *arg1 = (sgpp::optimization::sle_solver::Eigen *) 0 ;
  sgpp::optimization::SLE *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  sgpp::base::DataVector *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(sgpp::optimization::sle_solver::Eigen **)&jarg1; 
  arg2 = *(sgpp::optimization::SLE **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::SLE & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  arg4 = *(sgpp::base::DataVector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((sgpp::optimization::sle_solver::Eigen const *)arg1)->solve(*arg2,*arg3,*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_sgpp_jsgppJNI_OptEigen_1solve_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  sgpp::optimization::sle_solver::Eigen *arg1 = (sgpp::optimization::sle_solver::Eigen *) 0 ;
  sgpp::optimization::SLE *arg2 = 0 ;
  sgpp::base::DataMatrix *arg3 = 0 ;
  sgpp::base::DataMatrix *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(sgpp::optimization::sle_solver::Eigen **)&jarg1; 
  arg2 = *(sgpp::optimization::SLE **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::SLE & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::base::DataMatrix **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return 0;
  } 
  arg4 = *(sgpp::base::DataMatrix **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((sgpp::optimization::sle_solver::Eigen const *)arg1)->solve(*arg2,*arg3,*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptEigen(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::sle_solver::Eigen *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::sle_solver::Eigen *)new sgpp::optimization::sle_solver::Eigen();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::sle_solver::Eigen **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptGaussianElimination(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::sle_solver::GaussianElimination *arg1 = (sgpp::optimization::sle_solver::GaussianElimination *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::sle_solver::GaussianElimination **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_sgpp_jsgppJNI_OptGaussianElimination_1solve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  sgpp::optimization::sle_solver::GaussianElimination *arg1 = (sgpp::optimization::sle_solver::GaussianElimination *) 0 ;
  sgpp::optimization::SLE *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  sgpp::base::DataVector *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(sgpp::optimization::sle_solver::GaussianElimination **)&jarg1; 
  arg2 = *(sgpp::optimization::SLE **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::SLE & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  arg4 = *(sgpp::base::DataVector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((sgpp::optimization::sle_solver::GaussianElimination const *)arg1)->solve(*arg2,*arg3,*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptGaussianElimination(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::sle_solver::GaussianElimination *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::sle_solver::GaussianElimination *)new sgpp::optimization::sle_solver::GaussianElimination();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::sle_solver::GaussianElimination **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptGmmpp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::sle_solver::Gmmpp *arg1 = (sgpp::optimization::sle_solver::Gmmpp *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::sle_solver::Gmmpp **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_sgpp_jsgppJNI_OptGmmpp_1solve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  sgpp::optimization::sle_solver::Gmmpp *arg1 = (sgpp::optimization::sle_solver::Gmmpp *) 0 ;
  sgpp::optimization::SLE *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  sgpp::base::DataVector *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(sgpp::optimization::sle_solver::Gmmpp **)&jarg1; 
  arg2 = *(sgpp::optimization::SLE **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::SLE & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  arg4 = *(sgpp::base::DataVector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((sgpp::optimization::sle_solver::Gmmpp const *)arg1)->solve(*arg2,*arg3,*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptGmmpp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::sle_solver::Gmmpp *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::sle_solver::Gmmpp *)new sgpp::optimization::sle_solver::Gmmpp();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::sle_solver::Gmmpp **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptUMFPACK(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::sle_solver::UMFPACK *arg1 = (sgpp::optimization::sle_solver::UMFPACK *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::sle_solver::UMFPACK **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_sgpp_jsgppJNI_OptUMFPACK_1solve_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  sgpp::optimization::sle_solver::UMFPACK *arg1 = (sgpp::optimization::sle_solver::UMFPACK *) 0 ;
  sgpp::optimization::SLE *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  sgpp::base::DataVector *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(sgpp::optimization::sle_solver::UMFPACK **)&jarg1; 
  arg2 = *(sgpp::optimization::SLE **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::SLE & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  arg4 = *(sgpp::base::DataVector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((sgpp::optimization::sle_solver::UMFPACK const *)arg1)->solve(*arg2,*arg3,*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_sgpp_jsgppJNI_OptUMFPACK_1solve_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  sgpp::optimization::sle_solver::UMFPACK *arg1 = (sgpp::optimization::sle_solver::UMFPACK *) 0 ;
  sgpp::optimization::SLE *arg2 = 0 ;
  sgpp::base::DataMatrix *arg3 = 0 ;
  sgpp::base::DataMatrix *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(sgpp::optimization::sle_solver::UMFPACK **)&jarg1; 
  arg2 = *(sgpp::optimization::SLE **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::SLE & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::base::DataMatrix **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return 0;
  } 
  arg4 = *(sgpp::base::DataMatrix **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((sgpp::optimization::sle_solver::UMFPACK const *)arg1)->solve(*arg2,*arg3,*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptUMFPACK(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::sle_solver::UMFPACK *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::sle_solver::UMFPACK *)new sgpp::optimization::sle_solver::UMFPACK();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::sle_solver::UMFPACK **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptUnconstrainedOptimizer_1DEFAULT_1N_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  result = sgpp::optimization::optimizer::UnconstrainedOptimizer::DEFAULT_N;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptUnconstrainedOptimizer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::optimizer::UnconstrainedOptimizer *arg1 = (sgpp::optimization::optimizer::UnconstrainedOptimizer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::optimizer::UnconstrainedOptimizer **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptUnconstrainedOptimizer_1optimize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::optimization::optimizer::UnconstrainedOptimizer *arg1 = (sgpp::optimization::optimizer::UnconstrainedOptimizer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::UnconstrainedOptimizer **)&jarg1; 
  {
    try {
      (arg1)->optimize();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptUnconstrainedOptimizer_1getObjectiveFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::optimizer::UnconstrainedOptimizer *arg1 = (sgpp::optimization::optimizer::UnconstrainedOptimizer *) 0 ;
  sgpp::optimization::ScalarFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::UnconstrainedOptimizer **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::ScalarFunction *) &((sgpp::optimization::optimizer::UnconstrainedOptimizer const *)arg1)->getObjectiveFunction();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::ScalarFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptUnconstrainedOptimizer_1getN(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::optimizer::UnconstrainedOptimizer *arg1 = (sgpp::optimization::optimizer::UnconstrainedOptimizer *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::UnconstrainedOptimizer **)&jarg1; 
  {
    try {
      result = ((sgpp::optimization::optimizer::UnconstrainedOptimizer const *)arg1)->getN();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptUnconstrainedOptimizer_1setN(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::optimizer::UnconstrainedOptimizer *arg1 = (sgpp::optimization::optimizer::UnconstrainedOptimizer *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::UnconstrainedOptimizer **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      (arg1)->setN(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptUnconstrainedOptimizer_1getStartingPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::optimizer::UnconstrainedOptimizer *arg1 = (sgpp::optimization::optimizer::UnconstrainedOptimizer *) 0 ;
  sgpp::base::DataVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::UnconstrainedOptimizer **)&jarg1; 
  {
    try {
      result = (sgpp::base::DataVector *) &((sgpp::optimization::optimizer::UnconstrainedOptimizer const *)arg1)->getStartingPoint();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::DataVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptUnconstrainedOptimizer_1setStartingPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::optimization::optimizer::UnconstrainedOptimizer *arg1 = (sgpp::optimization::optimizer::UnconstrainedOptimizer *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::optimizer::UnconstrainedOptimizer **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setStartingPoint((sgpp::base::DataVector const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptUnconstrainedOptimizer_1getOptimalPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::optimizer::UnconstrainedOptimizer *arg1 = (sgpp::optimization::optimizer::UnconstrainedOptimizer *) 0 ;
  sgpp::base::DataVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::UnconstrainedOptimizer **)&jarg1; 
  {
    try {
      result = (sgpp::base::DataVector *) &((sgpp::optimization::optimizer::UnconstrainedOptimizer const *)arg1)->getOptimalPoint();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::DataVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptUnconstrainedOptimizer_1getOptimalValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::optimization::optimizer::UnconstrainedOptimizer *arg1 = (sgpp::optimization::optimizer::UnconstrainedOptimizer *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::UnconstrainedOptimizer **)&jarg1; 
  {
    try {
      result = (double)((sgpp::optimization::optimizer::UnconstrainedOptimizer const *)arg1)->getOptimalValue();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptUnconstrainedOptimizer_1getHistoryOfOptimalPoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::optimizer::UnconstrainedOptimizer *arg1 = (sgpp::optimization::optimizer::UnconstrainedOptimizer *) 0 ;
  sgpp::base::DataMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::UnconstrainedOptimizer **)&jarg1; 
  {
    try {
      result = (sgpp::base::DataMatrix *) &((sgpp::optimization::optimizer::UnconstrainedOptimizer const *)arg1)->getHistoryOfOptimalPoints();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::DataMatrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptUnconstrainedOptimizer_1getHistoryOfOptimalValues(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::optimizer::UnconstrainedOptimizer *arg1 = (sgpp::optimization::optimizer::UnconstrainedOptimizer *) 0 ;
  sgpp::base::DataVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::UnconstrainedOptimizer **)&jarg1; 
  {
    try {
      result = (sgpp::base::DataVector *) &((sgpp::optimization::optimizer::UnconstrainedOptimizer const *)arg1)->getHistoryOfOptimalValues();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::DataVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptUnconstrainedOptimizer_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::optimizer::UnconstrainedOptimizer *arg1 = (sgpp::optimization::optimizer::UnconstrainedOptimizer *) 0 ;
  std::unique_ptr< sgpp::optimization::optimizer::UnconstrainedOptimizer > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::UnconstrainedOptimizer **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::optimizer::UnconstrainedOptimizer > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::optimizer::UnconstrainedOptimizer > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::optimizer::UnconstrainedOptimizer const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptAdaptiveGradientDescent_1DEFAULT_1TOLERANCE_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)sgpp::optimization::optimizer::AdaptiveGradientDescent::DEFAULT_TOLERANCE;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptAdaptiveGradientDescent_1DEFAULT_1STEP_1SIZE_1INCREASE_1FACTOR_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)sgpp::optimization::optimizer::AdaptiveGradientDescent::DEFAULT_STEP_SIZE_INCREASE_FACTOR;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptAdaptiveGradientDescent_1DEFAULT_1STEP_1SIZE_1DECREASE_1FACTOR_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)sgpp::optimization::optimizer::AdaptiveGradientDescent::DEFAULT_STEP_SIZE_DECREASE_FACTOR;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptAdaptiveGradientDescent_1DEFAULT_1LINE_1SEARCH_1ACCURACY_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)sgpp::optimization::optimizer::AdaptiveGradientDescent::DEFAULT_LINE_SEARCH_ACCURACY;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptAdaptiveGradientDescent_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jdouble jarg7) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::optimization::ScalarFunctionGradient *arg2 = 0 ;
  size_t arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  sgpp::optimization::optimizer::AdaptiveGradientDescent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::optimization::ScalarFunctionGradient **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunctionGradient const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  {
    try {
      result = (sgpp::optimization::optimizer::AdaptiveGradientDescent *)new sgpp::optimization::optimizer::AdaptiveGradientDescent((sgpp::optimization::ScalarFunction const &)*arg1,(sgpp::optimization::ScalarFunctionGradient const &)*arg2,arg3,arg4,arg5,arg6,arg7);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::AdaptiveGradientDescent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptAdaptiveGradientDescent_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::optimization::ScalarFunctionGradient *arg2 = 0 ;
  size_t arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  sgpp::optimization::optimizer::AdaptiveGradientDescent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::optimization::ScalarFunctionGradient **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunctionGradient const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  {
    try {
      result = (sgpp::optimization::optimizer::AdaptiveGradientDescent *)new sgpp::optimization::optimizer::AdaptiveGradientDescent((sgpp::optimization::ScalarFunction const &)*arg1,(sgpp::optimization::ScalarFunctionGradient const &)*arg2,arg3,arg4,arg5,arg6);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::AdaptiveGradientDescent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptAdaptiveGradientDescent_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jdouble jarg4, jdouble jarg5) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::optimization::ScalarFunctionGradient *arg2 = 0 ;
  size_t arg3 ;
  double arg4 ;
  double arg5 ;
  sgpp::optimization::optimizer::AdaptiveGradientDescent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::optimization::ScalarFunctionGradient **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunctionGradient const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  {
    try {
      result = (sgpp::optimization::optimizer::AdaptiveGradientDescent *)new sgpp::optimization::optimizer::AdaptiveGradientDescent((sgpp::optimization::ScalarFunction const &)*arg1,(sgpp::optimization::ScalarFunctionGradient const &)*arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::AdaptiveGradientDescent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptAdaptiveGradientDescent_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::optimization::ScalarFunctionGradient *arg2 = 0 ;
  size_t arg3 ;
  double arg4 ;
  sgpp::optimization::optimizer::AdaptiveGradientDescent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::optimization::ScalarFunctionGradient **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunctionGradient const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (sgpp::optimization::optimizer::AdaptiveGradientDescent *)new sgpp::optimization::optimizer::AdaptiveGradientDescent((sgpp::optimization::ScalarFunction const &)*arg1,(sgpp::optimization::ScalarFunctionGradient const &)*arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::AdaptiveGradientDescent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptAdaptiveGradientDescent_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::optimization::ScalarFunctionGradient *arg2 = 0 ;
  size_t arg3 ;
  sgpp::optimization::optimizer::AdaptiveGradientDescent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::optimization::ScalarFunctionGradient **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunctionGradient const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (sgpp::optimization::optimizer::AdaptiveGradientDescent *)new sgpp::optimization::optimizer::AdaptiveGradientDescent((sgpp::optimization::ScalarFunction const &)*arg1,(sgpp::optimization::ScalarFunctionGradient const &)*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::AdaptiveGradientDescent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptAdaptiveGradientDescent_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::optimization::ScalarFunctionGradient *arg2 = 0 ;
  sgpp::optimization::optimizer::AdaptiveGradientDescent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::optimization::ScalarFunctionGradient **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunctionGradient const & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::optimization::optimizer::AdaptiveGradientDescent *)new sgpp::optimization::optimizer::AdaptiveGradientDescent((sgpp::optimization::ScalarFunction const &)*arg1,(sgpp::optimization::ScalarFunctionGradient const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::AdaptiveGradientDescent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptAdaptiveGradientDescent_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::optimizer::AdaptiveGradientDescent *arg1 = 0 ;
  sgpp::optimization::optimizer::AdaptiveGradientDescent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::AdaptiveGradientDescent **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::optimizer::AdaptiveGradientDescent const & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::optimization::optimizer::AdaptiveGradientDescent *)new sgpp::optimization::optimizer::AdaptiveGradientDescent((sgpp::optimization::optimizer::AdaptiveGradientDescent const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::AdaptiveGradientDescent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptAdaptiveGradientDescent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::optimizer::AdaptiveGradientDescent *arg1 = (sgpp::optimization::optimizer::AdaptiveGradientDescent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::optimizer::AdaptiveGradientDescent **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptAdaptiveGradientDescent_1optimize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::optimization::optimizer::AdaptiveGradientDescent *arg1 = (sgpp::optimization::optimizer::AdaptiveGradientDescent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::AdaptiveGradientDescent **)&jarg1; 
  {
    try {
      (arg1)->optimize();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptAdaptiveGradientDescent_1getObjectiveGradient(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::optimizer::AdaptiveGradientDescent *arg1 = (sgpp::optimization::optimizer::AdaptiveGradientDescent *) 0 ;
  sgpp::optimization::ScalarFunctionGradient *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::AdaptiveGradientDescent **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::ScalarFunctionGradient *) &((sgpp::optimization::optimizer::AdaptiveGradientDescent const *)arg1)->getObjectiveGradient();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::ScalarFunctionGradient **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptAdaptiveGradientDescent_1getTolerance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::optimization::optimizer::AdaptiveGradientDescent *arg1 = (sgpp::optimization::optimizer::AdaptiveGradientDescent *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::AdaptiveGradientDescent **)&jarg1; 
  {
    try {
      result = (double)((sgpp::optimization::optimizer::AdaptiveGradientDescent const *)arg1)->getTolerance();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptAdaptiveGradientDescent_1setTolerance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::optimization::optimizer::AdaptiveGradientDescent *arg1 = (sgpp::optimization::optimizer::AdaptiveGradientDescent *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::AdaptiveGradientDescent **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setTolerance(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptAdaptiveGradientDescent_1getStepSizeIncreaseFactor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::optimization::optimizer::AdaptiveGradientDescent *arg1 = (sgpp::optimization::optimizer::AdaptiveGradientDescent *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::AdaptiveGradientDescent **)&jarg1; 
  {
    try {
      result = (double)((sgpp::optimization::optimizer::AdaptiveGradientDescent const *)arg1)->getStepSizeIncreaseFactor();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptAdaptiveGradientDescent_1setStepSizeIncreaseFactor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::optimization::optimizer::AdaptiveGradientDescent *arg1 = (sgpp::optimization::optimizer::AdaptiveGradientDescent *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::AdaptiveGradientDescent **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setStepSizeIncreaseFactor(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptAdaptiveGradientDescent_1getStepSizeDecreaseFactor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::optimization::optimizer::AdaptiveGradientDescent *arg1 = (sgpp::optimization::optimizer::AdaptiveGradientDescent *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::AdaptiveGradientDescent **)&jarg1; 
  {
    try {
      result = (double)((sgpp::optimization::optimizer::AdaptiveGradientDescent const *)arg1)->getStepSizeDecreaseFactor();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptAdaptiveGradientDescent_1setStepSizeDecreaseFactor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::optimization::optimizer::AdaptiveGradientDescent *arg1 = (sgpp::optimization::optimizer::AdaptiveGradientDescent *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::AdaptiveGradientDescent **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setStepSizeDecreaseFactor(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptAdaptiveGradientDescent_1getLineSearchAccuracy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::optimization::optimizer::AdaptiveGradientDescent *arg1 = (sgpp::optimization::optimizer::AdaptiveGradientDescent *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::AdaptiveGradientDescent **)&jarg1; 
  {
    try {
      result = (double)((sgpp::optimization::optimizer::AdaptiveGradientDescent const *)arg1)->getLineSearchAccuracy();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptAdaptiveGradientDescent_1setLineSearchAccuracy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::optimization::optimizer::AdaptiveGradientDescent *arg1 = (sgpp::optimization::optimizer::AdaptiveGradientDescent *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::AdaptiveGradientDescent **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setLineSearchAccuracy(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptAdaptiveGradientDescent_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::optimizer::AdaptiveGradientDescent *arg1 = (sgpp::optimization::optimizer::AdaptiveGradientDescent *) 0 ;
  std::unique_ptr< sgpp::optimization::optimizer::UnconstrainedOptimizer > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::AdaptiveGradientDescent **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::optimizer::UnconstrainedOptimizer > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::optimizer::UnconstrainedOptimizer > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::optimizer::AdaptiveGradientDescent const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptAdaptiveNewton_1DEFAULT_1TOLERANCE_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)sgpp::optimization::optimizer::AdaptiveNewton::DEFAULT_TOLERANCE;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptAdaptiveNewton_1DEFAULT_1STEP_1SIZE_1INCREASE_1FACTOR_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)sgpp::optimization::optimizer::AdaptiveNewton::DEFAULT_STEP_SIZE_INCREASE_FACTOR;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptAdaptiveNewton_1DEFAULT_1STEP_1SIZE_1DECREASE_1FACTOR_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)sgpp::optimization::optimizer::AdaptiveNewton::DEFAULT_STEP_SIZE_DECREASE_FACTOR;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptAdaptiveNewton_1DEFAULT_1DAMPING_1INCREASE_1FACTOR_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)sgpp::optimization::optimizer::AdaptiveNewton::DEFAULT_DAMPING_INCREASE_FACTOR;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptAdaptiveNewton_1DEFAULT_1DAMPING_1DECREASE_1FACTOR_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)sgpp::optimization::optimizer::AdaptiveNewton::DEFAULT_DAMPING_DECREASE_FACTOR;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptAdaptiveNewton_1DEFAULT_1LINE_1SEARCH_1ACCURACY_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)sgpp::optimization::optimizer::AdaptiveNewton::DEFAULT_LINE_SEARCH_ACCURACY;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptAdaptiveNewton_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jdouble jarg7, jdouble jarg8, jdouble jarg9) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::optimization::ScalarFunctionHessian *arg2 = 0 ;
  size_t arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  sgpp::optimization::optimizer::AdaptiveNewton *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::optimization::ScalarFunctionHessian **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunctionHessian const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  arg9 = (double)jarg9; 
  {
    try {
      result = (sgpp::optimization::optimizer::AdaptiveNewton *)new sgpp::optimization::optimizer::AdaptiveNewton((sgpp::optimization::ScalarFunction const &)*arg1,(sgpp::optimization::ScalarFunctionHessian const &)*arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::AdaptiveNewton **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptAdaptiveNewton_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jdouble jarg7, jdouble jarg8) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::optimization::ScalarFunctionHessian *arg2 = 0 ;
  size_t arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  sgpp::optimization::optimizer::AdaptiveNewton *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::optimization::ScalarFunctionHessian **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunctionHessian const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  {
    try {
      result = (sgpp::optimization::optimizer::AdaptiveNewton *)new sgpp::optimization::optimizer::AdaptiveNewton((sgpp::optimization::ScalarFunction const &)*arg1,(sgpp::optimization::ScalarFunctionHessian const &)*arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::AdaptiveNewton **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptAdaptiveNewton_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jdouble jarg7) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::optimization::ScalarFunctionHessian *arg2 = 0 ;
  size_t arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  sgpp::optimization::optimizer::AdaptiveNewton *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::optimization::ScalarFunctionHessian **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunctionHessian const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  {
    try {
      result = (sgpp::optimization::optimizer::AdaptiveNewton *)new sgpp::optimization::optimizer::AdaptiveNewton((sgpp::optimization::ScalarFunction const &)*arg1,(sgpp::optimization::ScalarFunctionHessian const &)*arg2,arg3,arg4,arg5,arg6,arg7);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::AdaptiveNewton **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptAdaptiveNewton_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::optimization::ScalarFunctionHessian *arg2 = 0 ;
  size_t arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  sgpp::optimization::optimizer::AdaptiveNewton *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::optimization::ScalarFunctionHessian **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunctionHessian const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  {
    try {
      result = (sgpp::optimization::optimizer::AdaptiveNewton *)new sgpp::optimization::optimizer::AdaptiveNewton((sgpp::optimization::ScalarFunction const &)*arg1,(sgpp::optimization::ScalarFunctionHessian const &)*arg2,arg3,arg4,arg5,arg6);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::AdaptiveNewton **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptAdaptiveNewton_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jdouble jarg4, jdouble jarg5) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::optimization::ScalarFunctionHessian *arg2 = 0 ;
  size_t arg3 ;
  double arg4 ;
  double arg5 ;
  sgpp::optimization::optimizer::AdaptiveNewton *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::optimization::ScalarFunctionHessian **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunctionHessian const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  {
    try {
      result = (sgpp::optimization::optimizer::AdaptiveNewton *)new sgpp::optimization::optimizer::AdaptiveNewton((sgpp::optimization::ScalarFunction const &)*arg1,(sgpp::optimization::ScalarFunctionHessian const &)*arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::AdaptiveNewton **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptAdaptiveNewton_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::optimization::ScalarFunctionHessian *arg2 = 0 ;
  size_t arg3 ;
  double arg4 ;
  sgpp::optimization::optimizer::AdaptiveNewton *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::optimization::ScalarFunctionHessian **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunctionHessian const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (sgpp::optimization::optimizer::AdaptiveNewton *)new sgpp::optimization::optimizer::AdaptiveNewton((sgpp::optimization::ScalarFunction const &)*arg1,(sgpp::optimization::ScalarFunctionHessian const &)*arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::AdaptiveNewton **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptAdaptiveNewton_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::optimization::ScalarFunctionHessian *arg2 = 0 ;
  size_t arg3 ;
  sgpp::optimization::optimizer::AdaptiveNewton *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::optimization::ScalarFunctionHessian **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunctionHessian const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (sgpp::optimization::optimizer::AdaptiveNewton *)new sgpp::optimization::optimizer::AdaptiveNewton((sgpp::optimization::ScalarFunction const &)*arg1,(sgpp::optimization::ScalarFunctionHessian const &)*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::AdaptiveNewton **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptAdaptiveNewton_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::optimization::ScalarFunctionHessian *arg2 = 0 ;
  sgpp::optimization::optimizer::AdaptiveNewton *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::optimization::ScalarFunctionHessian **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunctionHessian const & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::optimization::optimizer::AdaptiveNewton *)new sgpp::optimization::optimizer::AdaptiveNewton((sgpp::optimization::ScalarFunction const &)*arg1,(sgpp::optimization::ScalarFunctionHessian const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::AdaptiveNewton **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptAdaptiveNewton_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jdouble jarg7, jdouble jarg8, jdouble jarg9, jlong jarg10, jobject jarg10_) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::optimization::ScalarFunctionHessian *arg2 = 0 ;
  size_t arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  sgpp::optimization::sle_solver::SLESolver *arg10 = 0 ;
  sgpp::optimization::optimizer::AdaptiveNewton *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg10_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::optimization::ScalarFunctionHessian **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunctionHessian const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  arg9 = (double)jarg9; 
  arg10 = *(sgpp::optimization::sle_solver::SLESolver **)&jarg10;
  if (!arg10) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::sle_solver::SLESolver const & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::optimization::optimizer::AdaptiveNewton *)new sgpp::optimization::optimizer::AdaptiveNewton((sgpp::optimization::ScalarFunction const &)*arg1,(sgpp::optimization::ScalarFunctionHessian const &)*arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,(sgpp::optimization::sle_solver::SLESolver const &)*arg10);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::AdaptiveNewton **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptAdaptiveNewton_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::optimizer::AdaptiveNewton *arg1 = 0 ;
  sgpp::optimization::optimizer::AdaptiveNewton *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::AdaptiveNewton **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::optimizer::AdaptiveNewton const & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::optimization::optimizer::AdaptiveNewton *)new sgpp::optimization::optimizer::AdaptiveNewton((sgpp::optimization::optimizer::AdaptiveNewton const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::AdaptiveNewton **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptAdaptiveNewton(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::optimizer::AdaptiveNewton *arg1 = (sgpp::optimization::optimizer::AdaptiveNewton *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::optimizer::AdaptiveNewton **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptAdaptiveNewton_1optimize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::optimization::optimizer::AdaptiveNewton *arg1 = (sgpp::optimization::optimizer::AdaptiveNewton *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::AdaptiveNewton **)&jarg1; 
  {
    try {
      (arg1)->optimize();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptAdaptiveNewton_1getObjectiveHessian(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::optimizer::AdaptiveNewton *arg1 = (sgpp::optimization::optimizer::AdaptiveNewton *) 0 ;
  sgpp::optimization::ScalarFunctionHessian *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::AdaptiveNewton **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::ScalarFunctionHessian *) &((sgpp::optimization::optimizer::AdaptiveNewton const *)arg1)->getObjectiveHessian();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::ScalarFunctionHessian **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptAdaptiveNewton_1getTolerance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::optimization::optimizer::AdaptiveNewton *arg1 = (sgpp::optimization::optimizer::AdaptiveNewton *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::AdaptiveNewton **)&jarg1; 
  {
    try {
      result = (double)((sgpp::optimization::optimizer::AdaptiveNewton const *)arg1)->getTolerance();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptAdaptiveNewton_1setTolerance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::optimization::optimizer::AdaptiveNewton *arg1 = (sgpp::optimization::optimizer::AdaptiveNewton *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::AdaptiveNewton **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setTolerance(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptAdaptiveNewton_1getStepSizeIncreaseFactor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::optimization::optimizer::AdaptiveNewton *arg1 = (sgpp::optimization::optimizer::AdaptiveNewton *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::AdaptiveNewton **)&jarg1; 
  {
    try {
      result = (double)((sgpp::optimization::optimizer::AdaptiveNewton const *)arg1)->getStepSizeIncreaseFactor();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptAdaptiveNewton_1setStepSizeIncreaseFactor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::optimization::optimizer::AdaptiveNewton *arg1 = (sgpp::optimization::optimizer::AdaptiveNewton *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::AdaptiveNewton **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setStepSizeIncreaseFactor(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptAdaptiveNewton_1getStepSizeDecreaseFactor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::optimization::optimizer::AdaptiveNewton *arg1 = (sgpp::optimization::optimizer::AdaptiveNewton *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::AdaptiveNewton **)&jarg1; 
  {
    try {
      result = (double)((sgpp::optimization::optimizer::AdaptiveNewton const *)arg1)->getStepSizeDecreaseFactor();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptAdaptiveNewton_1setStepSizeDecreaseFactor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::optimization::optimizer::AdaptiveNewton *arg1 = (sgpp::optimization::optimizer::AdaptiveNewton *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::AdaptiveNewton **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setStepSizeDecreaseFactor(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptAdaptiveNewton_1getDampingIncreaseFactor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::optimization::optimizer::AdaptiveNewton *arg1 = (sgpp::optimization::optimizer::AdaptiveNewton *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::AdaptiveNewton **)&jarg1; 
  {
    try {
      result = (double)((sgpp::optimization::optimizer::AdaptiveNewton const *)arg1)->getDampingIncreaseFactor();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptAdaptiveNewton_1setDampingIncreaseFactor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::optimization::optimizer::AdaptiveNewton *arg1 = (sgpp::optimization::optimizer::AdaptiveNewton *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::AdaptiveNewton **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setDampingIncreaseFactor(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptAdaptiveNewton_1getDampingDecreaseFactor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::optimization::optimizer::AdaptiveNewton *arg1 = (sgpp::optimization::optimizer::AdaptiveNewton *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::AdaptiveNewton **)&jarg1; 
  {
    try {
      result = (double)((sgpp::optimization::optimizer::AdaptiveNewton const *)arg1)->getDampingDecreaseFactor();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptAdaptiveNewton_1setDampingDecreaseFactor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::optimization::optimizer::AdaptiveNewton *arg1 = (sgpp::optimization::optimizer::AdaptiveNewton *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::AdaptiveNewton **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setDampingDecreaseFactor(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptAdaptiveNewton_1getLineSearchAccuracy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::optimization::optimizer::AdaptiveNewton *arg1 = (sgpp::optimization::optimizer::AdaptiveNewton *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::AdaptiveNewton **)&jarg1; 
  {
    try {
      result = (double)((sgpp::optimization::optimizer::AdaptiveNewton const *)arg1)->getLineSearchAccuracy();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptAdaptiveNewton_1setLineSearchAccuracy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::optimization::optimizer::AdaptiveNewton *arg1 = (sgpp::optimization::optimizer::AdaptiveNewton *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::AdaptiveNewton **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setLineSearchAccuracy(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptAdaptiveNewton_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::optimizer::AdaptiveNewton *arg1 = (sgpp::optimization::optimizer::AdaptiveNewton *) 0 ;
  std::unique_ptr< sgpp::optimization::optimizer::UnconstrainedOptimizer > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::AdaptiveNewton **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::optimizer::UnconstrainedOptimizer > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::optimizer::UnconstrainedOptimizer > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::optimizer::AdaptiveNewton const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptBFGS_1DEFAULT_1TOLERANCE_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)sgpp::optimization::optimizer::BFGS::DEFAULT_TOLERANCE;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptBFGS_1DEFAULT_1STEP_1SIZE_1INCREASE_1FACTOR_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)sgpp::optimization::optimizer::BFGS::DEFAULT_STEP_SIZE_INCREASE_FACTOR;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptBFGS_1DEFAULT_1STEP_1SIZE_1DECREASE_1FACTOR_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)sgpp::optimization::optimizer::BFGS::DEFAULT_STEP_SIZE_DECREASE_FACTOR;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptBFGS_1DEFAULT_1LINE_1SEARCH_1ACCURACY_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)sgpp::optimization::optimizer::BFGS::DEFAULT_LINE_SEARCH_ACCURACY;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptBFGS_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jdouble jarg7) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::optimization::ScalarFunctionGradient *arg2 = 0 ;
  size_t arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  sgpp::optimization::optimizer::BFGS *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::optimization::ScalarFunctionGradient **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunctionGradient const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  {
    try {
      result = (sgpp::optimization::optimizer::BFGS *)new sgpp::optimization::optimizer::BFGS((sgpp::optimization::ScalarFunction const &)*arg1,(sgpp::optimization::ScalarFunctionGradient const &)*arg2,arg3,arg4,arg5,arg6,arg7);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::BFGS **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptBFGS_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::optimization::ScalarFunctionGradient *arg2 = 0 ;
  size_t arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  sgpp::optimization::optimizer::BFGS *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::optimization::ScalarFunctionGradient **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunctionGradient const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  {
    try {
      result = (sgpp::optimization::optimizer::BFGS *)new sgpp::optimization::optimizer::BFGS((sgpp::optimization::ScalarFunction const &)*arg1,(sgpp::optimization::ScalarFunctionGradient const &)*arg2,arg3,arg4,arg5,arg6);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::BFGS **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptBFGS_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jdouble jarg4, jdouble jarg5) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::optimization::ScalarFunctionGradient *arg2 = 0 ;
  size_t arg3 ;
  double arg4 ;
  double arg5 ;
  sgpp::optimization::optimizer::BFGS *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::optimization::ScalarFunctionGradient **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunctionGradient const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  {
    try {
      result = (sgpp::optimization::optimizer::BFGS *)new sgpp::optimization::optimizer::BFGS((sgpp::optimization::ScalarFunction const &)*arg1,(sgpp::optimization::ScalarFunctionGradient const &)*arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::BFGS **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptBFGS_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::optimization::ScalarFunctionGradient *arg2 = 0 ;
  size_t arg3 ;
  double arg4 ;
  sgpp::optimization::optimizer::BFGS *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::optimization::ScalarFunctionGradient **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunctionGradient const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (sgpp::optimization::optimizer::BFGS *)new sgpp::optimization::optimizer::BFGS((sgpp::optimization::ScalarFunction const &)*arg1,(sgpp::optimization::ScalarFunctionGradient const &)*arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::BFGS **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptBFGS_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::optimization::ScalarFunctionGradient *arg2 = 0 ;
  size_t arg3 ;
  sgpp::optimization::optimizer::BFGS *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::optimization::ScalarFunctionGradient **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunctionGradient const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (sgpp::optimization::optimizer::BFGS *)new sgpp::optimization::optimizer::BFGS((sgpp::optimization::ScalarFunction const &)*arg1,(sgpp::optimization::ScalarFunctionGradient const &)*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::BFGS **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptBFGS_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::optimization::ScalarFunctionGradient *arg2 = 0 ;
  sgpp::optimization::optimizer::BFGS *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::optimization::ScalarFunctionGradient **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunctionGradient const & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::optimization::optimizer::BFGS *)new sgpp::optimization::optimizer::BFGS((sgpp::optimization::ScalarFunction const &)*arg1,(sgpp::optimization::ScalarFunctionGradient const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::BFGS **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptBFGS_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::optimizer::BFGS *arg1 = 0 ;
  sgpp::optimization::optimizer::BFGS *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::BFGS **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::optimizer::BFGS const & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::optimization::optimizer::BFGS *)new sgpp::optimization::optimizer::BFGS((sgpp::optimization::optimizer::BFGS const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::BFGS **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptBFGS(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::optimizer::BFGS *arg1 = (sgpp::optimization::optimizer::BFGS *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::optimizer::BFGS **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptBFGS_1optimize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::optimization::optimizer::BFGS *arg1 = (sgpp::optimization::optimizer::BFGS *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::BFGS **)&jarg1; 
  {
    try {
      (arg1)->optimize();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptBFGS_1getObjectiveGradient(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::optimizer::BFGS *arg1 = (sgpp::optimization::optimizer::BFGS *) 0 ;
  sgpp::optimization::ScalarFunctionGradient *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::BFGS **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::ScalarFunctionGradient *) &((sgpp::optimization::optimizer::BFGS const *)arg1)->getObjectiveGradient();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::ScalarFunctionGradient **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptBFGS_1getTolerance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::optimization::optimizer::BFGS *arg1 = (sgpp::optimization::optimizer::BFGS *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::BFGS **)&jarg1; 
  {
    try {
      result = (double)((sgpp::optimization::optimizer::BFGS const *)arg1)->getTolerance();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptBFGS_1setTolerance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::optimization::optimizer::BFGS *arg1 = (sgpp::optimization::optimizer::BFGS *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::BFGS **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setTolerance(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptBFGS_1getStepSizeIncreaseFactor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::optimization::optimizer::BFGS *arg1 = (sgpp::optimization::optimizer::BFGS *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::BFGS **)&jarg1; 
  {
    try {
      result = (double)((sgpp::optimization::optimizer::BFGS const *)arg1)->getStepSizeIncreaseFactor();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptBFGS_1setStepSizeIncreaseFactor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::optimization::optimizer::BFGS *arg1 = (sgpp::optimization::optimizer::BFGS *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::BFGS **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setStepSizeIncreaseFactor(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptBFGS_1getStepSizeDecreaseFactor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::optimization::optimizer::BFGS *arg1 = (sgpp::optimization::optimizer::BFGS *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::BFGS **)&jarg1; 
  {
    try {
      result = (double)((sgpp::optimization::optimizer::BFGS const *)arg1)->getStepSizeDecreaseFactor();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptBFGS_1setStepSizeDecreaseFactor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::optimization::optimizer::BFGS *arg1 = (sgpp::optimization::optimizer::BFGS *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::BFGS **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setStepSizeDecreaseFactor(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptBFGS_1getLineSearchAccuracy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::optimization::optimizer::BFGS *arg1 = (sgpp::optimization::optimizer::BFGS *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::BFGS **)&jarg1; 
  {
    try {
      result = (double)((sgpp::optimization::optimizer::BFGS const *)arg1)->getLineSearchAccuracy();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptBFGS_1setLineSearchAccuracy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::optimization::optimizer::BFGS *arg1 = (sgpp::optimization::optimizer::BFGS *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::BFGS **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setLineSearchAccuracy(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptBFGS_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::optimizer::BFGS *arg1 = (sgpp::optimization::optimizer::BFGS *) 0 ;
  std::unique_ptr< sgpp::optimization::optimizer::UnconstrainedOptimizer > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::BFGS **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::optimizer::UnconstrainedOptimizer > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::optimizer::UnconstrainedOptimizer > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::optimizer::BFGS const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptCMAES_1DEFAULT_1MAX_1FCN_1EVAL_1COUNT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  result = sgpp::optimization::optimizer::CMAES::DEFAULT_MAX_FCN_EVAL_COUNT;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptCMAES_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  size_t arg2 ;
  sgpp::optimization::optimizer::CMAES *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (sgpp::optimization::optimizer::CMAES *)new sgpp::optimization::optimizer::CMAES((sgpp::optimization::ScalarFunction const &)*arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::CMAES **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptCMAES_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::optimization::optimizer::CMAES *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::optimization::optimizer::CMAES *)new sgpp::optimization::optimizer::CMAES((sgpp::optimization::ScalarFunction const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::CMAES **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptCMAES_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::optimizer::CMAES *arg1 = 0 ;
  sgpp::optimization::optimizer::CMAES *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::CMAES **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::optimizer::CMAES const & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::optimization::optimizer::CMAES *)new sgpp::optimization::optimizer::CMAES((sgpp::optimization::optimizer::CMAES const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::CMAES **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptCMAES(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::optimizer::CMAES *arg1 = (sgpp::optimization::optimizer::CMAES *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::optimizer::CMAES **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptCMAES_1optimize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::optimization::optimizer::CMAES *arg1 = (sgpp::optimization::optimizer::CMAES *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::CMAES **)&jarg1; 
  {
    try {
      (arg1)->optimize();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptCMAES_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::optimizer::CMAES *arg1 = (sgpp::optimization::optimizer::CMAES *) 0 ;
  std::unique_ptr< sgpp::optimization::optimizer::UnconstrainedOptimizer > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::CMAES **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::optimizer::UnconstrainedOptimizer > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::optimizer::UnconstrainedOptimizer > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::optimizer::CMAES const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptDifferentialEvolution_1DEFAULT_1CROSSOVER_1PROBABILITY_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)sgpp::optimization::optimizer::DifferentialEvolution::DEFAULT_CROSSOVER_PROBABILITY;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptDifferentialEvolution_1DEFAULT_1SCALING_1FACTOR_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)sgpp::optimization::optimizer::DifferentialEvolution::DEFAULT_SCALING_FACTOR;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptDifferentialEvolution_1DEFAULT_1IDLE_1GENERATIONS_1COUNT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  result = sgpp::optimization::optimizer::DifferentialEvolution::DEFAULT_IDLE_GENERATIONS_COUNT;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptDifferentialEvolution_1DEFAULT_1AVG_1IMPROVEMENT_1THRESHOLD_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)sgpp::optimization::optimizer::DifferentialEvolution::DEFAULT_AVG_IMPROVEMENT_THRESHOLD;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptDifferentialEvolution_1DEFAULT_1MAX_1DISTANCE_1THRESHOLD_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)sgpp::optimization::optimizer::DifferentialEvolution::DEFAULT_MAX_DISTANCE_THRESHOLD;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptDifferentialEvolution_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jdouble jarg4, jdouble jarg5, jlong jarg6, jdouble jarg7, jdouble jarg8) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  size_t arg2 ;
  size_t arg3 ;
  double arg4 ;
  double arg5 ;
  size_t arg6 ;
  double arg7 ;
  double arg8 ;
  sgpp::optimization::optimizer::DifferentialEvolution *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (size_t)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  {
    try {
      result = (sgpp::optimization::optimizer::DifferentialEvolution *)new sgpp::optimization::optimizer::DifferentialEvolution((sgpp::optimization::ScalarFunction const &)*arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::DifferentialEvolution **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptDifferentialEvolution_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jdouble jarg4, jdouble jarg5, jlong jarg6, jdouble jarg7) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  size_t arg2 ;
  size_t arg3 ;
  double arg4 ;
  double arg5 ;
  size_t arg6 ;
  double arg7 ;
  sgpp::optimization::optimizer::DifferentialEvolution *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (size_t)jarg6; 
  arg7 = (double)jarg7; 
  {
    try {
      result = (sgpp::optimization::optimizer::DifferentialEvolution *)new sgpp::optimization::optimizer::DifferentialEvolution((sgpp::optimization::ScalarFunction const &)*arg1,arg2,arg3,arg4,arg5,arg6,arg7);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::DifferentialEvolution **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptDifferentialEvolution_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jdouble jarg4, jdouble jarg5, jlong jarg6) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  size_t arg2 ;
  size_t arg3 ;
  double arg4 ;
  double arg5 ;
  size_t arg6 ;
  sgpp::optimization::optimizer::DifferentialEvolution *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (size_t)jarg6; 
  {
    try {
      result = (sgpp::optimization::optimizer::DifferentialEvolution *)new sgpp::optimization::optimizer::DifferentialEvolution((sgpp::optimization::ScalarFunction const &)*arg1,arg2,arg3,arg4,arg5,arg6);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::DifferentialEvolution **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptDifferentialEvolution_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jdouble jarg4, jdouble jarg5) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  size_t arg2 ;
  size_t arg3 ;
  double arg4 ;
  double arg5 ;
  sgpp::optimization::optimizer::DifferentialEvolution *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  {
    try {
      result = (sgpp::optimization::optimizer::DifferentialEvolution *)new sgpp::optimization::optimizer::DifferentialEvolution((sgpp::optimization::ScalarFunction const &)*arg1,arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::DifferentialEvolution **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptDifferentialEvolution_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  size_t arg2 ;
  size_t arg3 ;
  double arg4 ;
  sgpp::optimization::optimizer::DifferentialEvolution *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (sgpp::optimization::optimizer::DifferentialEvolution *)new sgpp::optimization::optimizer::DifferentialEvolution((sgpp::optimization::ScalarFunction const &)*arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::DifferentialEvolution **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptDifferentialEvolution_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  size_t arg2 ;
  size_t arg3 ;
  sgpp::optimization::optimizer::DifferentialEvolution *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (sgpp::optimization::optimizer::DifferentialEvolution *)new sgpp::optimization::optimizer::DifferentialEvolution((sgpp::optimization::ScalarFunction const &)*arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::DifferentialEvolution **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptDifferentialEvolution_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  size_t arg2 ;
  sgpp::optimization::optimizer::DifferentialEvolution *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (sgpp::optimization::optimizer::DifferentialEvolution *)new sgpp::optimization::optimizer::DifferentialEvolution((sgpp::optimization::ScalarFunction const &)*arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::DifferentialEvolution **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptDifferentialEvolution_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::optimization::optimizer::DifferentialEvolution *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::optimization::optimizer::DifferentialEvolution *)new sgpp::optimization::optimizer::DifferentialEvolution((sgpp::optimization::ScalarFunction const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::DifferentialEvolution **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptDifferentialEvolution_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::optimizer::DifferentialEvolution *arg1 = 0 ;
  sgpp::optimization::optimizer::DifferentialEvolution *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::DifferentialEvolution **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::optimizer::DifferentialEvolution const & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::optimization::optimizer::DifferentialEvolution *)new sgpp::optimization::optimizer::DifferentialEvolution((sgpp::optimization::optimizer::DifferentialEvolution const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::DifferentialEvolution **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptDifferentialEvolution(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::optimizer::DifferentialEvolution *arg1 = (sgpp::optimization::optimizer::DifferentialEvolution *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::optimizer::DifferentialEvolution **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptDifferentialEvolution_1optimize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::optimization::optimizer::DifferentialEvolution *arg1 = (sgpp::optimization::optimizer::DifferentialEvolution *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::DifferentialEvolution **)&jarg1; 
  {
    try {
      (arg1)->optimize();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptDifferentialEvolution_1getPopulationSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::optimizer::DifferentialEvolution *arg1 = (sgpp::optimization::optimizer::DifferentialEvolution *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::DifferentialEvolution **)&jarg1; 
  {
    try {
      result = ((sgpp::optimization::optimizer::DifferentialEvolution const *)arg1)->getPopulationSize();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptDifferentialEvolution_1setPopulationSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::optimizer::DifferentialEvolution *arg1 = (sgpp::optimization::optimizer::DifferentialEvolution *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::DifferentialEvolution **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      (arg1)->setPopulationSize(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptDifferentialEvolution_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::optimizer::DifferentialEvolution *arg1 = (sgpp::optimization::optimizer::DifferentialEvolution *) 0 ;
  std::unique_ptr< sgpp::optimization::optimizer::UnconstrainedOptimizer > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::DifferentialEvolution **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::optimizer::UnconstrainedOptimizer > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::optimizer::UnconstrainedOptimizer > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::optimizer::DifferentialEvolution const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptGradientDescent_1DEFAULT_1MAX_1IT_1COUNT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  result = sgpp::optimization::optimizer::GradientDescent::DEFAULT_MAX_IT_COUNT;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptGradientDescent_1DEFAULT_1BETA_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)sgpp::optimization::optimizer::GradientDescent::DEFAULT_BETA;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptGradientDescent_1DEFAULT_1GAMMA_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)sgpp::optimization::optimizer::GradientDescent::DEFAULT_GAMMA;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptGradientDescent_1DEFAULT_1TOLERANCE_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)sgpp::optimization::optimizer::GradientDescent::DEFAULT_TOLERANCE;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptGradientDescent_1DEFAULT_1EPSILON_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)sgpp::optimization::optimizer::GradientDescent::DEFAULT_EPSILON;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptGradientDescent_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jdouble jarg7) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::optimization::ScalarFunctionGradient *arg2 = 0 ;
  size_t arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  sgpp::optimization::optimizer::GradientDescent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::optimization::ScalarFunctionGradient **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunctionGradient const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  {
    try {
      result = (sgpp::optimization::optimizer::GradientDescent *)new sgpp::optimization::optimizer::GradientDescent((sgpp::optimization::ScalarFunction const &)*arg1,(sgpp::optimization::ScalarFunctionGradient const &)*arg2,arg3,arg4,arg5,arg6,arg7);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::GradientDescent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptGradientDescent_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::optimization::ScalarFunctionGradient *arg2 = 0 ;
  size_t arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  sgpp::optimization::optimizer::GradientDescent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::optimization::ScalarFunctionGradient **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunctionGradient const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  {
    try {
      result = (sgpp::optimization::optimizer::GradientDescent *)new sgpp::optimization::optimizer::GradientDescent((sgpp::optimization::ScalarFunction const &)*arg1,(sgpp::optimization::ScalarFunctionGradient const &)*arg2,arg3,arg4,arg5,arg6);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::GradientDescent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptGradientDescent_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jdouble jarg4, jdouble jarg5) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::optimization::ScalarFunctionGradient *arg2 = 0 ;
  size_t arg3 ;
  double arg4 ;
  double arg5 ;
  sgpp::optimization::optimizer::GradientDescent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::optimization::ScalarFunctionGradient **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunctionGradient const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  {
    try {
      result = (sgpp::optimization::optimizer::GradientDescent *)new sgpp::optimization::optimizer::GradientDescent((sgpp::optimization::ScalarFunction const &)*arg1,(sgpp::optimization::ScalarFunctionGradient const &)*arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::GradientDescent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptGradientDescent_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::optimization::ScalarFunctionGradient *arg2 = 0 ;
  size_t arg3 ;
  double arg4 ;
  sgpp::optimization::optimizer::GradientDescent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::optimization::ScalarFunctionGradient **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunctionGradient const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (sgpp::optimization::optimizer::GradientDescent *)new sgpp::optimization::optimizer::GradientDescent((sgpp::optimization::ScalarFunction const &)*arg1,(sgpp::optimization::ScalarFunctionGradient const &)*arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::GradientDescent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptGradientDescent_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::optimization::ScalarFunctionGradient *arg2 = 0 ;
  size_t arg3 ;
  sgpp::optimization::optimizer::GradientDescent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::optimization::ScalarFunctionGradient **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunctionGradient const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (sgpp::optimization::optimizer::GradientDescent *)new sgpp::optimization::optimizer::GradientDescent((sgpp::optimization::ScalarFunction const &)*arg1,(sgpp::optimization::ScalarFunctionGradient const &)*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::GradientDescent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptGradientDescent_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::optimization::ScalarFunctionGradient *arg2 = 0 ;
  sgpp::optimization::optimizer::GradientDescent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::optimization::ScalarFunctionGradient **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunctionGradient const & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::optimization::optimizer::GradientDescent *)new sgpp::optimization::optimizer::GradientDescent((sgpp::optimization::ScalarFunction const &)*arg1,(sgpp::optimization::ScalarFunctionGradient const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::GradientDescent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptGradientDescent_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::optimizer::GradientDescent *arg1 = 0 ;
  sgpp::optimization::optimizer::GradientDescent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::GradientDescent **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::optimizer::GradientDescent const & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::optimization::optimizer::GradientDescent *)new sgpp::optimization::optimizer::GradientDescent((sgpp::optimization::optimizer::GradientDescent const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::GradientDescent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptGradientDescent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::optimizer::GradientDescent *arg1 = (sgpp::optimization::optimizer::GradientDescent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::optimizer::GradientDescent **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptGradientDescent_1optimize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::optimization::optimizer::GradientDescent *arg1 = (sgpp::optimization::optimizer::GradientDescent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::GradientDescent **)&jarg1; 
  {
    try {
      (arg1)->optimize();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptGradientDescent_1getObjectiveGradient(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::optimizer::GradientDescent *arg1 = (sgpp::optimization::optimizer::GradientDescent *) 0 ;
  sgpp::optimization::ScalarFunctionGradient *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::GradientDescent **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::ScalarFunctionGradient *) &((sgpp::optimization::optimizer::GradientDescent const *)arg1)->getObjectiveGradient();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::ScalarFunctionGradient **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptGradientDescent_1getBeta(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::optimization::optimizer::GradientDescent *arg1 = (sgpp::optimization::optimizer::GradientDescent *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::GradientDescent **)&jarg1; 
  {
    try {
      result = (double)((sgpp::optimization::optimizer::GradientDescent const *)arg1)->getBeta();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptGradientDescent_1setBeta(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::optimization::optimizer::GradientDescent *arg1 = (sgpp::optimization::optimizer::GradientDescent *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::GradientDescent **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setBeta(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptGradientDescent_1getGamma(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::optimization::optimizer::GradientDescent *arg1 = (sgpp::optimization::optimizer::GradientDescent *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::GradientDescent **)&jarg1; 
  {
    try {
      result = (double)((sgpp::optimization::optimizer::GradientDescent const *)arg1)->getGamma();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptGradientDescent_1setGamma(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::optimization::optimizer::GradientDescent *arg1 = (sgpp::optimization::optimizer::GradientDescent *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::GradientDescent **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setGamma(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptGradientDescent_1getTolerance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::optimization::optimizer::GradientDescent *arg1 = (sgpp::optimization::optimizer::GradientDescent *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::GradientDescent **)&jarg1; 
  {
    try {
      result = (double)((sgpp::optimization::optimizer::GradientDescent const *)arg1)->getTolerance();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptGradientDescent_1setTolerance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::optimization::optimizer::GradientDescent *arg1 = (sgpp::optimization::optimizer::GradientDescent *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::GradientDescent **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setTolerance(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptGradientDescent_1getEpsilon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::optimization::optimizer::GradientDescent *arg1 = (sgpp::optimization::optimizer::GradientDescent *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::GradientDescent **)&jarg1; 
  {
    try {
      result = (double)((sgpp::optimization::optimizer::GradientDescent const *)arg1)->getEpsilon();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptGradientDescent_1setEpsilon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::optimization::optimizer::GradientDescent *arg1 = (sgpp::optimization::optimizer::GradientDescent *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::GradientDescent **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setEpsilon(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptGradientDescent_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::optimizer::GradientDescent *arg1 = (sgpp::optimization::optimizer::GradientDescent *) 0 ;
  std::unique_ptr< sgpp::optimization::optimizer::UnconstrainedOptimizer > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::GradientDescent **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::optimizer::UnconstrainedOptimizer > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::optimizer::UnconstrainedOptimizer > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::optimizer::GradientDescent const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptMultiStart_1DEFAULT_1MAX_1FCN_1EVAL_1COUNT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  result = sgpp::optimization::optimizer::MultiStart::DEFAULT_MAX_FCN_EVAL_COUNT;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptMultiStart_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  size_t arg2 ;
  size_t arg3 ;
  sgpp::optimization::optimizer::MultiStart *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (sgpp::optimization::optimizer::MultiStart *)new sgpp::optimization::optimizer::MultiStart((sgpp::optimization::ScalarFunction const &)*arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::MultiStart **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptMultiStart_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  size_t arg2 ;
  sgpp::optimization::optimizer::MultiStart *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (sgpp::optimization::optimizer::MultiStart *)new sgpp::optimization::optimizer::MultiStart((sgpp::optimization::ScalarFunction const &)*arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::MultiStart **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptMultiStart_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::optimization::optimizer::MultiStart *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::optimization::optimizer::MultiStart *)new sgpp::optimization::optimizer::MultiStart((sgpp::optimization::ScalarFunction const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::MultiStart **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptMultiStart_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  sgpp::optimization::optimizer::UnconstrainedOptimizer *arg1 = 0 ;
  size_t arg2 ;
  size_t arg3 ;
  sgpp::optimization::optimizer::MultiStart *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::UnconstrainedOptimizer **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::optimizer::UnconstrainedOptimizer const & reference is null");
    return 0;
  } 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (sgpp::optimization::optimizer::MultiStart *)new sgpp::optimization::optimizer::MultiStart((sgpp::optimization::optimizer::UnconstrainedOptimizer const &)*arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::MultiStart **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptMultiStart_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  sgpp::optimization::optimizer::UnconstrainedOptimizer *arg1 = 0 ;
  size_t arg2 ;
  sgpp::optimization::optimizer::MultiStart *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::UnconstrainedOptimizer **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::optimizer::UnconstrainedOptimizer const & reference is null");
    return 0;
  } 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (sgpp::optimization::optimizer::MultiStart *)new sgpp::optimization::optimizer::MultiStart((sgpp::optimization::optimizer::UnconstrainedOptimizer const &)*arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::MultiStart **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptMultiStart_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::optimizer::UnconstrainedOptimizer *arg1 = 0 ;
  sgpp::optimization::optimizer::MultiStart *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::UnconstrainedOptimizer **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::optimizer::UnconstrainedOptimizer const & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::optimization::optimizer::MultiStart *)new sgpp::optimization::optimizer::MultiStart((sgpp::optimization::optimizer::UnconstrainedOptimizer const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::MultiStart **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptMultiStart_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::optimizer::MultiStart *arg1 = 0 ;
  sgpp::optimization::optimizer::MultiStart *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::MultiStart **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::optimizer::MultiStart const & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::optimization::optimizer::MultiStart *)new sgpp::optimization::optimizer::MultiStart((sgpp::optimization::optimizer::MultiStart const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::MultiStart **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptMultiStart(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::optimizer::MultiStart *arg1 = (sgpp::optimization::optimizer::MultiStart *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::optimizer::MultiStart **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptMultiStart_1optimize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::optimization::optimizer::MultiStart *arg1 = (sgpp::optimization::optimizer::MultiStart *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::MultiStart **)&jarg1; 
  {
    try {
      (arg1)->optimize();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptMultiStart_1getPopulationSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::optimizer::MultiStart *arg1 = (sgpp::optimization::optimizer::MultiStart *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::MultiStart **)&jarg1; 
  {
    try {
      result = ((sgpp::optimization::optimizer::MultiStart const *)arg1)->getPopulationSize();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptMultiStart_1setPopulationSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::optimizer::MultiStart *arg1 = (sgpp::optimization::optimizer::MultiStart *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::MultiStart **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      (arg1)->setPopulationSize(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptMultiStart_1getHistoryOfInnerIterations(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::optimizer::MultiStart *arg1 = (sgpp::optimization::optimizer::MultiStart *) 0 ;
  std::vector< size_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::MultiStart **)&jarg1; 
  {
    try {
      result = (std::vector< size_t > *) &((sgpp::optimization::optimizer::MultiStart const *)arg1)->getHistoryOfInnerIterations();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< size_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptMultiStart_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::optimizer::MultiStart *arg1 = (sgpp::optimization::optimizer::MultiStart *) 0 ;
  std::unique_ptr< sgpp::optimization::optimizer::UnconstrainedOptimizer > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::MultiStart **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::optimizer::UnconstrainedOptimizer > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::optimizer::UnconstrainedOptimizer > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::optimizer::MultiStart const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptNelderMead_1DEFAULT_1ALPHA_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)sgpp::optimization::optimizer::NelderMead::DEFAULT_ALPHA;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptNelderMead_1DEFAULT_1BETA_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)sgpp::optimization::optimizer::NelderMead::DEFAULT_BETA;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptNelderMead_1DEFAULT_1GAMMA_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)sgpp::optimization::optimizer::NelderMead::DEFAULT_GAMMA;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptNelderMead_1DEFAULT_1DELTA_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)sgpp::optimization::optimizer::NelderMead::DEFAULT_DELTA;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptNelderMead_1DEFAULT_1MAX_1FCN_1EVAL_1COUNT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  result = sgpp::optimization::optimizer::NelderMead::DEFAULT_MAX_FCN_EVAL_COUNT;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptNelderMead_1STARTING_1SIMPLEX_1EDGE_1LENGTH_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)sgpp::optimization::optimizer::NelderMead::STARTING_SIMPLEX_EDGE_LENGTH;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptNelderMead_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  size_t arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  sgpp::optimization::optimizer::NelderMead *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = (size_t)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  {
    try {
      result = (sgpp::optimization::optimizer::NelderMead *)new sgpp::optimization::optimizer::NelderMead((sgpp::optimization::ScalarFunction const &)*arg1,arg2,arg3,arg4,arg5,arg6);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::NelderMead **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptNelderMead_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  size_t arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  sgpp::optimization::optimizer::NelderMead *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = (size_t)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  {
    try {
      result = (sgpp::optimization::optimizer::NelderMead *)new sgpp::optimization::optimizer::NelderMead((sgpp::optimization::ScalarFunction const &)*arg1,arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::NelderMead **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptNelderMead_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdouble jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  size_t arg2 ;
  double arg3 ;
  double arg4 ;
  sgpp::optimization::optimizer::NelderMead *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = (size_t)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (sgpp::optimization::optimizer::NelderMead *)new sgpp::optimization::optimizer::NelderMead((sgpp::optimization::ScalarFunction const &)*arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::NelderMead **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptNelderMead_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  size_t arg2 ;
  double arg3 ;
  sgpp::optimization::optimizer::NelderMead *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = (size_t)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      result = (sgpp::optimization::optimizer::NelderMead *)new sgpp::optimization::optimizer::NelderMead((sgpp::optimization::ScalarFunction const &)*arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::NelderMead **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptNelderMead_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  size_t arg2 ;
  sgpp::optimization::optimizer::NelderMead *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (sgpp::optimization::optimizer::NelderMead *)new sgpp::optimization::optimizer::NelderMead((sgpp::optimization::ScalarFunction const &)*arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::NelderMead **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptNelderMead_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::optimization::optimizer::NelderMead *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::optimization::optimizer::NelderMead *)new sgpp::optimization::optimizer::NelderMead((sgpp::optimization::ScalarFunction const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::NelderMead **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptNelderMead_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::optimizer::NelderMead *arg1 = 0 ;
  sgpp::optimization::optimizer::NelderMead *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::NelderMead **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::optimizer::NelderMead const & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::optimization::optimizer::NelderMead *)new sgpp::optimization::optimizer::NelderMead((sgpp::optimization::optimizer::NelderMead const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::NelderMead **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptNelderMead(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::optimizer::NelderMead *arg1 = (sgpp::optimization::optimizer::NelderMead *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::optimizer::NelderMead **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptNelderMead_1optimize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::optimization::optimizer::NelderMead *arg1 = (sgpp::optimization::optimizer::NelderMead *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::NelderMead **)&jarg1; 
  {
    try {
      (arg1)->optimize();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptNelderMead_1getAlpha(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::optimization::optimizer::NelderMead *arg1 = (sgpp::optimization::optimizer::NelderMead *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::NelderMead **)&jarg1; 
  {
    try {
      result = (double)((sgpp::optimization::optimizer::NelderMead const *)arg1)->getAlpha();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptNelderMead_1setAlpha(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::optimization::optimizer::NelderMead *arg1 = (sgpp::optimization::optimizer::NelderMead *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::NelderMead **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setAlpha(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptNelderMead_1getBeta(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::optimization::optimizer::NelderMead *arg1 = (sgpp::optimization::optimizer::NelderMead *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::NelderMead **)&jarg1; 
  {
    try {
      result = (double)((sgpp::optimization::optimizer::NelderMead const *)arg1)->getBeta();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptNelderMead_1setBeta(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::optimization::optimizer::NelderMead *arg1 = (sgpp::optimization::optimizer::NelderMead *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::NelderMead **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setBeta(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptNelderMead_1getGamma(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::optimization::optimizer::NelderMead *arg1 = (sgpp::optimization::optimizer::NelderMead *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::NelderMead **)&jarg1; 
  {
    try {
      result = (double)((sgpp::optimization::optimizer::NelderMead const *)arg1)->getGamma();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptNelderMead_1setGamma(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::optimization::optimizer::NelderMead *arg1 = (sgpp::optimization::optimizer::NelderMead *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::NelderMead **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setGamma(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptNelderMead_1getDelta(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::optimization::optimizer::NelderMead *arg1 = (sgpp::optimization::optimizer::NelderMead *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::NelderMead **)&jarg1; 
  {
    try {
      result = (double)((sgpp::optimization::optimizer::NelderMead const *)arg1)->getDelta();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptNelderMead_1setDelta(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::optimization::optimizer::NelderMead *arg1 = (sgpp::optimization::optimizer::NelderMead *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::NelderMead **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setDelta(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptNelderMead_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::optimizer::NelderMead *arg1 = (sgpp::optimization::optimizer::NelderMead *) 0 ;
  std::unique_ptr< sgpp::optimization::optimizer::UnconstrainedOptimizer > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::NelderMead **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::optimizer::UnconstrainedOptimizer > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::optimizer::UnconstrainedOptimizer > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::optimizer::NelderMead const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptNewton_1DEFAULT_1BETA_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)sgpp::optimization::optimizer::Newton::DEFAULT_BETA;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptNewton_1DEFAULT_1GAMMA_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)sgpp::optimization::optimizer::Newton::DEFAULT_GAMMA;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptNewton_1DEFAULT_1TOLERANCE_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)sgpp::optimization::optimizer::Newton::DEFAULT_TOLERANCE;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptNewton_1DEFAULT_1EPSILON_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)sgpp::optimization::optimizer::Newton::DEFAULT_EPSILON;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptNewton_1DEFAULT_1ALPHA1_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)sgpp::optimization::optimizer::Newton::DEFAULT_ALPHA1;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptNewton_1DEFAULT_1ALPHA2_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)sgpp::optimization::optimizer::Newton::DEFAULT_ALPHA2;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptNewton_1DEFAULT_1P_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)sgpp::optimization::optimizer::Newton::DEFAULT_P;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptNewton_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jdouble jarg7, jdouble jarg8, jdouble jarg9, jdouble jarg10) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::optimization::ScalarFunctionHessian *arg2 = 0 ;
  size_t arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  double arg10 ;
  sgpp::optimization::optimizer::Newton *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::optimization::ScalarFunctionHessian **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunctionHessian const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  arg9 = (double)jarg9; 
  arg10 = (double)jarg10; 
  {
    try {
      result = (sgpp::optimization::optimizer::Newton *)new sgpp::optimization::optimizer::Newton((sgpp::optimization::ScalarFunction const &)*arg1,(sgpp::optimization::ScalarFunctionHessian const &)*arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::Newton **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptNewton_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jdouble jarg7, jdouble jarg8, jdouble jarg9) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::optimization::ScalarFunctionHessian *arg2 = 0 ;
  size_t arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  sgpp::optimization::optimizer::Newton *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::optimization::ScalarFunctionHessian **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunctionHessian const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  arg9 = (double)jarg9; 
  {
    try {
      result = (sgpp::optimization::optimizer::Newton *)new sgpp::optimization::optimizer::Newton((sgpp::optimization::ScalarFunction const &)*arg1,(sgpp::optimization::ScalarFunctionHessian const &)*arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::Newton **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptNewton_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jdouble jarg7, jdouble jarg8) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::optimization::ScalarFunctionHessian *arg2 = 0 ;
  size_t arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  sgpp::optimization::optimizer::Newton *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::optimization::ScalarFunctionHessian **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunctionHessian const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  {
    try {
      result = (sgpp::optimization::optimizer::Newton *)new sgpp::optimization::optimizer::Newton((sgpp::optimization::ScalarFunction const &)*arg1,(sgpp::optimization::ScalarFunctionHessian const &)*arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::Newton **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptNewton_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jdouble jarg7) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::optimization::ScalarFunctionHessian *arg2 = 0 ;
  size_t arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  sgpp::optimization::optimizer::Newton *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::optimization::ScalarFunctionHessian **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunctionHessian const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  {
    try {
      result = (sgpp::optimization::optimizer::Newton *)new sgpp::optimization::optimizer::Newton((sgpp::optimization::ScalarFunction const &)*arg1,(sgpp::optimization::ScalarFunctionHessian const &)*arg2,arg3,arg4,arg5,arg6,arg7);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::Newton **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptNewton_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::optimization::ScalarFunctionHessian *arg2 = 0 ;
  size_t arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  sgpp::optimization::optimizer::Newton *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::optimization::ScalarFunctionHessian **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunctionHessian const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  {
    try {
      result = (sgpp::optimization::optimizer::Newton *)new sgpp::optimization::optimizer::Newton((sgpp::optimization::ScalarFunction const &)*arg1,(sgpp::optimization::ScalarFunctionHessian const &)*arg2,arg3,arg4,arg5,arg6);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::Newton **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptNewton_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jdouble jarg4, jdouble jarg5) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::optimization::ScalarFunctionHessian *arg2 = 0 ;
  size_t arg3 ;
  double arg4 ;
  double arg5 ;
  sgpp::optimization::optimizer::Newton *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::optimization::ScalarFunctionHessian **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunctionHessian const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  {
    try {
      result = (sgpp::optimization::optimizer::Newton *)new sgpp::optimization::optimizer::Newton((sgpp::optimization::ScalarFunction const &)*arg1,(sgpp::optimization::ScalarFunctionHessian const &)*arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::Newton **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptNewton_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::optimization::ScalarFunctionHessian *arg2 = 0 ;
  size_t arg3 ;
  double arg4 ;
  sgpp::optimization::optimizer::Newton *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::optimization::ScalarFunctionHessian **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunctionHessian const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (sgpp::optimization::optimizer::Newton *)new sgpp::optimization::optimizer::Newton((sgpp::optimization::ScalarFunction const &)*arg1,(sgpp::optimization::ScalarFunctionHessian const &)*arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::Newton **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptNewton_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::optimization::ScalarFunctionHessian *arg2 = 0 ;
  size_t arg3 ;
  sgpp::optimization::optimizer::Newton *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::optimization::ScalarFunctionHessian **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunctionHessian const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (sgpp::optimization::optimizer::Newton *)new sgpp::optimization::optimizer::Newton((sgpp::optimization::ScalarFunction const &)*arg1,(sgpp::optimization::ScalarFunctionHessian const &)*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::Newton **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptNewton_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::optimization::ScalarFunctionHessian *arg2 = 0 ;
  sgpp::optimization::optimizer::Newton *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::optimization::ScalarFunctionHessian **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunctionHessian const & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::optimization::optimizer::Newton *)new sgpp::optimization::optimizer::Newton((sgpp::optimization::ScalarFunction const &)*arg1,(sgpp::optimization::ScalarFunctionHessian const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::Newton **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptNewton_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jdouble jarg7, jdouble jarg8, jdouble jarg9, jdouble jarg10, jlong jarg11, jobject jarg11_) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::optimization::ScalarFunctionHessian *arg2 = 0 ;
  size_t arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  double arg10 ;
  sgpp::optimization::sle_solver::SLESolver *arg11 = 0 ;
  sgpp::optimization::optimizer::Newton *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg11_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::optimization::ScalarFunctionHessian **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunctionHessian const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  arg9 = (double)jarg9; 
  arg10 = (double)jarg10; 
  arg11 = *(sgpp::optimization::sle_solver::SLESolver **)&jarg11;
  if (!arg11) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::sle_solver::SLESolver const & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::optimization::optimizer::Newton *)new sgpp::optimization::optimizer::Newton((sgpp::optimization::ScalarFunction const &)*arg1,(sgpp::optimization::ScalarFunctionHessian const &)*arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,(sgpp::optimization::sle_solver::SLESolver const &)*arg11);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::Newton **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptNewton_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::optimizer::Newton *arg1 = 0 ;
  sgpp::optimization::optimizer::Newton *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::Newton **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::optimizer::Newton const & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::optimization::optimizer::Newton *)new sgpp::optimization::optimizer::Newton((sgpp::optimization::optimizer::Newton const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::Newton **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptNewton(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::optimizer::Newton *arg1 = (sgpp::optimization::optimizer::Newton *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::optimizer::Newton **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptNewton_1optimize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::optimization::optimizer::Newton *arg1 = (sgpp::optimization::optimizer::Newton *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::Newton **)&jarg1; 
  {
    try {
      (arg1)->optimize();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptNewton_1getObjectiveHessian(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::optimizer::Newton *arg1 = (sgpp::optimization::optimizer::Newton *) 0 ;
  sgpp::optimization::ScalarFunctionHessian *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::Newton **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::ScalarFunctionHessian *) &((sgpp::optimization::optimizer::Newton const *)arg1)->getObjectiveHessian();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::ScalarFunctionHessian **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptNewton_1getBeta(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::optimization::optimizer::Newton *arg1 = (sgpp::optimization::optimizer::Newton *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::Newton **)&jarg1; 
  {
    try {
      result = (double)((sgpp::optimization::optimizer::Newton const *)arg1)->getBeta();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptNewton_1setBeta(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::optimization::optimizer::Newton *arg1 = (sgpp::optimization::optimizer::Newton *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::Newton **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setBeta(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptNewton_1getGamma(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::optimization::optimizer::Newton *arg1 = (sgpp::optimization::optimizer::Newton *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::Newton **)&jarg1; 
  {
    try {
      result = (double)((sgpp::optimization::optimizer::Newton const *)arg1)->getGamma();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptNewton_1setGamma(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::optimization::optimizer::Newton *arg1 = (sgpp::optimization::optimizer::Newton *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::Newton **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setGamma(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptNewton_1getTolerance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::optimization::optimizer::Newton *arg1 = (sgpp::optimization::optimizer::Newton *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::Newton **)&jarg1; 
  {
    try {
      result = (double)((sgpp::optimization::optimizer::Newton const *)arg1)->getTolerance();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptNewton_1setTolerance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::optimization::optimizer::Newton *arg1 = (sgpp::optimization::optimizer::Newton *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::Newton **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setTolerance(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptNewton_1getEpsilon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::optimization::optimizer::Newton *arg1 = (sgpp::optimization::optimizer::Newton *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::Newton **)&jarg1; 
  {
    try {
      result = (double)((sgpp::optimization::optimizer::Newton const *)arg1)->getEpsilon();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptNewton_1setEpsilon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::optimization::optimizer::Newton *arg1 = (sgpp::optimization::optimizer::Newton *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::Newton **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setEpsilon(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptNewton_1getAlpha1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::optimization::optimizer::Newton *arg1 = (sgpp::optimization::optimizer::Newton *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::Newton **)&jarg1; 
  {
    try {
      result = (double)((sgpp::optimization::optimizer::Newton const *)arg1)->getAlpha1();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptNewton_1setAlpha1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::optimization::optimizer::Newton *arg1 = (sgpp::optimization::optimizer::Newton *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::Newton **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setAlpha1(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptNewton_1getAlpha2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::optimization::optimizer::Newton *arg1 = (sgpp::optimization::optimizer::Newton *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::Newton **)&jarg1; 
  {
    try {
      result = (double)((sgpp::optimization::optimizer::Newton const *)arg1)->getAlpha2();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptNewton_1setAlpha2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::optimization::optimizer::Newton *arg1 = (sgpp::optimization::optimizer::Newton *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::Newton **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setAlpha2(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptNewton_1getP(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::optimization::optimizer::Newton *arg1 = (sgpp::optimization::optimizer::Newton *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::Newton **)&jarg1; 
  {
    try {
      result = (double)((sgpp::optimization::optimizer::Newton const *)arg1)->getP();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptNewton_1setP(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::optimization::optimizer::Newton *arg1 = (sgpp::optimization::optimizer::Newton *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::Newton **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setP(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptNewton_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::optimizer::Newton *arg1 = (sgpp::optimization::optimizer::Newton *) 0 ;
  std::unique_ptr< sgpp::optimization::optimizer::UnconstrainedOptimizer > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::Newton **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::optimizer::UnconstrainedOptimizer > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::optimizer::UnconstrainedOptimizer > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::optimizer::Newton const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptNLCG_1DEFAULT_1BETA_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)sgpp::optimization::optimizer::NLCG::DEFAULT_BETA;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptNLCG_1DEFAULT_1GAMMA_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)sgpp::optimization::optimizer::NLCG::DEFAULT_GAMMA;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptNLCG_1DEFAULT_1TOLERANCE_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)sgpp::optimization::optimizer::NLCG::DEFAULT_TOLERANCE;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptNLCG_1DEFAULT_1EPSILON_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)sgpp::optimization::optimizer::NLCG::DEFAULT_EPSILON;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptNLCG_1DEFAULT_1RESTART_1THRESHOLD_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)sgpp::optimization::optimizer::NLCG::DEFAULT_RESTART_THRESHOLD;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptNLCG_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jdouble jarg7, jdouble jarg8) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::optimization::ScalarFunctionGradient *arg2 = 0 ;
  size_t arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  sgpp::optimization::optimizer::NLCG *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::optimization::ScalarFunctionGradient **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunctionGradient const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  {
    try {
      result = (sgpp::optimization::optimizer::NLCG *)new sgpp::optimization::optimizer::NLCG((sgpp::optimization::ScalarFunction const &)*arg1,(sgpp::optimization::ScalarFunctionGradient const &)*arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::NLCG **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptNLCG_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jdouble jarg7) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::optimization::ScalarFunctionGradient *arg2 = 0 ;
  size_t arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  sgpp::optimization::optimizer::NLCG *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::optimization::ScalarFunctionGradient **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunctionGradient const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  {
    try {
      result = (sgpp::optimization::optimizer::NLCG *)new sgpp::optimization::optimizer::NLCG((sgpp::optimization::ScalarFunction const &)*arg1,(sgpp::optimization::ScalarFunctionGradient const &)*arg2,arg3,arg4,arg5,arg6,arg7);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::NLCG **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptNLCG_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::optimization::ScalarFunctionGradient *arg2 = 0 ;
  size_t arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  sgpp::optimization::optimizer::NLCG *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::optimization::ScalarFunctionGradient **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunctionGradient const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  {
    try {
      result = (sgpp::optimization::optimizer::NLCG *)new sgpp::optimization::optimizer::NLCG((sgpp::optimization::ScalarFunction const &)*arg1,(sgpp::optimization::ScalarFunctionGradient const &)*arg2,arg3,arg4,arg5,arg6);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::NLCG **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptNLCG_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jdouble jarg4, jdouble jarg5) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::optimization::ScalarFunctionGradient *arg2 = 0 ;
  size_t arg3 ;
  double arg4 ;
  double arg5 ;
  sgpp::optimization::optimizer::NLCG *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::optimization::ScalarFunctionGradient **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunctionGradient const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  {
    try {
      result = (sgpp::optimization::optimizer::NLCG *)new sgpp::optimization::optimizer::NLCG((sgpp::optimization::ScalarFunction const &)*arg1,(sgpp::optimization::ScalarFunctionGradient const &)*arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::NLCG **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptNLCG_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::optimization::ScalarFunctionGradient *arg2 = 0 ;
  size_t arg3 ;
  double arg4 ;
  sgpp::optimization::optimizer::NLCG *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::optimization::ScalarFunctionGradient **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunctionGradient const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (sgpp::optimization::optimizer::NLCG *)new sgpp::optimization::optimizer::NLCG((sgpp::optimization::ScalarFunction const &)*arg1,(sgpp::optimization::ScalarFunctionGradient const &)*arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::NLCG **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptNLCG_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::optimization::ScalarFunctionGradient *arg2 = 0 ;
  size_t arg3 ;
  sgpp::optimization::optimizer::NLCG *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::optimization::ScalarFunctionGradient **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunctionGradient const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (sgpp::optimization::optimizer::NLCG *)new sgpp::optimization::optimizer::NLCG((sgpp::optimization::ScalarFunction const &)*arg1,(sgpp::optimization::ScalarFunctionGradient const &)*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::NLCG **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptNLCG_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::optimization::ScalarFunctionGradient *arg2 = 0 ;
  sgpp::optimization::optimizer::NLCG *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::optimization::ScalarFunctionGradient **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunctionGradient const & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::optimization::optimizer::NLCG *)new sgpp::optimization::optimizer::NLCG((sgpp::optimization::ScalarFunction const &)*arg1,(sgpp::optimization::ScalarFunctionGradient const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::NLCG **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptNLCG_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::optimizer::NLCG *arg1 = 0 ;
  sgpp::optimization::optimizer::NLCG *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::NLCG **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::optimizer::NLCG const & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::optimization::optimizer::NLCG *)new sgpp::optimization::optimizer::NLCG((sgpp::optimization::optimizer::NLCG const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::NLCG **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptNLCG(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::optimizer::NLCG *arg1 = (sgpp::optimization::optimizer::NLCG *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::optimizer::NLCG **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptNLCG_1optimize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::optimization::optimizer::NLCG *arg1 = (sgpp::optimization::optimizer::NLCG *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::NLCG **)&jarg1; 
  {
    try {
      (arg1)->optimize();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptNLCG_1getObjectiveGradient(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::optimizer::NLCG *arg1 = (sgpp::optimization::optimizer::NLCG *) 0 ;
  sgpp::optimization::ScalarFunctionGradient *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::NLCG **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::ScalarFunctionGradient *) &((sgpp::optimization::optimizer::NLCG const *)arg1)->getObjectiveGradient();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::ScalarFunctionGradient **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptNLCG_1getBeta(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::optimization::optimizer::NLCG *arg1 = (sgpp::optimization::optimizer::NLCG *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::NLCG **)&jarg1; 
  {
    try {
      result = (double)((sgpp::optimization::optimizer::NLCG const *)arg1)->getBeta();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptNLCG_1setBeta(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::optimization::optimizer::NLCG *arg1 = (sgpp::optimization::optimizer::NLCG *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::NLCG **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setBeta(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptNLCG_1getGamma(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::optimization::optimizer::NLCG *arg1 = (sgpp::optimization::optimizer::NLCG *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::NLCG **)&jarg1; 
  {
    try {
      result = (double)((sgpp::optimization::optimizer::NLCG const *)arg1)->getGamma();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptNLCG_1setGamma(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::optimization::optimizer::NLCG *arg1 = (sgpp::optimization::optimizer::NLCG *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::NLCG **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setGamma(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptNLCG_1getTolerance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::optimization::optimizer::NLCG *arg1 = (sgpp::optimization::optimizer::NLCG *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::NLCG **)&jarg1; 
  {
    try {
      result = (double)((sgpp::optimization::optimizer::NLCG const *)arg1)->getTolerance();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptNLCG_1setTolerance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::optimization::optimizer::NLCG *arg1 = (sgpp::optimization::optimizer::NLCG *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::NLCG **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setTolerance(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptNLCG_1getEpsilon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::optimization::optimizer::NLCG *arg1 = (sgpp::optimization::optimizer::NLCG *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::NLCG **)&jarg1; 
  {
    try {
      result = (double)((sgpp::optimization::optimizer::NLCG const *)arg1)->getEpsilon();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptNLCG_1setEpsilon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::optimization::optimizer::NLCG *arg1 = (sgpp::optimization::optimizer::NLCG *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::NLCG **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setEpsilon(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptNLCG_1getRestartThreshold(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::optimization::optimizer::NLCG *arg1 = (sgpp::optimization::optimizer::NLCG *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::NLCG **)&jarg1; 
  {
    try {
      result = (double)((sgpp::optimization::optimizer::NLCG const *)arg1)->getRestartThreshold();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptNLCG_1setRestartThreshold(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::optimization::optimizer::NLCG *arg1 = (sgpp::optimization::optimizer::NLCG *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::NLCG **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setRestartThreshold(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptNLCG_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::optimizer::NLCG *arg1 = (sgpp::optimization::optimizer::NLCG *) 0 ;
  std::unique_ptr< sgpp::optimization::optimizer::UnconstrainedOptimizer > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::NLCG **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::optimizer::UnconstrainedOptimizer > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::optimizer::UnconstrainedOptimizer > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::optimizer::NLCG const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptRprop_1DEFAULT_1TOLERANCE_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)sgpp::optimization::optimizer::Rprop::DEFAULT_TOLERANCE;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptRprop_1DEFAULT_1INITIAL_1STEP_1SIZE_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)sgpp::optimization::optimizer::Rprop::DEFAULT_INITIAL_STEP_SIZE;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptRprop_1DEFAULT_1STEP_1SIZE_1INCREASE_1FACTOR_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)sgpp::optimization::optimizer::Rprop::DEFAULT_STEP_SIZE_INCREASE_FACTOR;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptRprop_1DEFAULT_1STEP_1SIZE_1DECREASE_1FACTOR_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)sgpp::optimization::optimizer::Rprop::DEFAULT_STEP_SIZE_DECREASE_FACTOR;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptRprop_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jdouble jarg7) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::optimization::ScalarFunctionGradient *arg2 = 0 ;
  size_t arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  sgpp::optimization::optimizer::Rprop *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::optimization::ScalarFunctionGradient **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunctionGradient const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  {
    try {
      result = (sgpp::optimization::optimizer::Rprop *)new sgpp::optimization::optimizer::Rprop((sgpp::optimization::ScalarFunction const &)*arg1,(sgpp::optimization::ScalarFunctionGradient const &)*arg2,arg3,arg4,arg5,arg6,arg7);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::Rprop **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptRprop_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::optimization::ScalarFunctionGradient *arg2 = 0 ;
  size_t arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  sgpp::optimization::optimizer::Rprop *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::optimization::ScalarFunctionGradient **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunctionGradient const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  {
    try {
      result = (sgpp::optimization::optimizer::Rprop *)new sgpp::optimization::optimizer::Rprop((sgpp::optimization::ScalarFunction const &)*arg1,(sgpp::optimization::ScalarFunctionGradient const &)*arg2,arg3,arg4,arg5,arg6);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::Rprop **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptRprop_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jdouble jarg4, jdouble jarg5) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::optimization::ScalarFunctionGradient *arg2 = 0 ;
  size_t arg3 ;
  double arg4 ;
  double arg5 ;
  sgpp::optimization::optimizer::Rprop *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::optimization::ScalarFunctionGradient **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunctionGradient const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  {
    try {
      result = (sgpp::optimization::optimizer::Rprop *)new sgpp::optimization::optimizer::Rprop((sgpp::optimization::ScalarFunction const &)*arg1,(sgpp::optimization::ScalarFunctionGradient const &)*arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::Rprop **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptRprop_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::optimization::ScalarFunctionGradient *arg2 = 0 ;
  size_t arg3 ;
  double arg4 ;
  sgpp::optimization::optimizer::Rprop *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::optimization::ScalarFunctionGradient **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunctionGradient const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (sgpp::optimization::optimizer::Rprop *)new sgpp::optimization::optimizer::Rprop((sgpp::optimization::ScalarFunction const &)*arg1,(sgpp::optimization::ScalarFunctionGradient const &)*arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::Rprop **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptRprop_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::optimization::ScalarFunctionGradient *arg2 = 0 ;
  size_t arg3 ;
  sgpp::optimization::optimizer::Rprop *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::optimization::ScalarFunctionGradient **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunctionGradient const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (sgpp::optimization::optimizer::Rprop *)new sgpp::optimization::optimizer::Rprop((sgpp::optimization::ScalarFunction const &)*arg1,(sgpp::optimization::ScalarFunctionGradient const &)*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::Rprop **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptRprop_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::optimization::ScalarFunctionGradient *arg2 = 0 ;
  sgpp::optimization::optimizer::Rprop *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::optimization::ScalarFunctionGradient **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunctionGradient const & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::optimization::optimizer::Rprop *)new sgpp::optimization::optimizer::Rprop((sgpp::optimization::ScalarFunction const &)*arg1,(sgpp::optimization::ScalarFunctionGradient const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::Rprop **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptRprop_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::optimizer::Rprop *arg1 = 0 ;
  sgpp::optimization::optimizer::Rprop *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::Rprop **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::optimizer::Rprop const & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::optimization::optimizer::Rprop *)new sgpp::optimization::optimizer::Rprop((sgpp::optimization::optimizer::Rprop const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::Rprop **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptRprop(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::optimizer::Rprop *arg1 = (sgpp::optimization::optimizer::Rprop *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::optimizer::Rprop **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptRprop_1optimize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::optimization::optimizer::Rprop *arg1 = (sgpp::optimization::optimizer::Rprop *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::Rprop **)&jarg1; 
  {
    try {
      (arg1)->optimize();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptRprop_1getObjectiveGradient(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::optimizer::Rprop *arg1 = (sgpp::optimization::optimizer::Rprop *) 0 ;
  sgpp::optimization::ScalarFunctionGradient *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::Rprop **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::ScalarFunctionGradient *) &((sgpp::optimization::optimizer::Rprop const *)arg1)->getObjectiveGradient();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::ScalarFunctionGradient **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptRprop_1getTolerance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::optimization::optimizer::Rprop *arg1 = (sgpp::optimization::optimizer::Rprop *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::Rprop **)&jarg1; 
  {
    try {
      result = (double)((sgpp::optimization::optimizer::Rprop const *)arg1)->getTolerance();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptRprop_1setTolerance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::optimization::optimizer::Rprop *arg1 = (sgpp::optimization::optimizer::Rprop *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::Rprop **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setTolerance(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptRprop_1getInitialStepSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::optimization::optimizer::Rprop *arg1 = (sgpp::optimization::optimizer::Rprop *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::Rprop **)&jarg1; 
  {
    try {
      result = (double)((sgpp::optimization::optimizer::Rprop const *)arg1)->getInitialStepSize();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptRprop_1setInitialStepSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::optimization::optimizer::Rprop *arg1 = (sgpp::optimization::optimizer::Rprop *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::Rprop **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setInitialStepSize(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptRprop_1getStepSizeIncreaseFactor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::optimization::optimizer::Rprop *arg1 = (sgpp::optimization::optimizer::Rprop *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::Rprop **)&jarg1; 
  {
    try {
      result = (double)((sgpp::optimization::optimizer::Rprop const *)arg1)->getStepSizeIncreaseFactor();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptRprop_1setStepSizeIncreaseFactor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::optimization::optimizer::Rprop *arg1 = (sgpp::optimization::optimizer::Rprop *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::Rprop **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setStepSizeIncreaseFactor(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptRprop_1getStepSizeDecreaseFactor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::optimization::optimizer::Rprop *arg1 = (sgpp::optimization::optimizer::Rprop *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::Rprop **)&jarg1; 
  {
    try {
      result = (double)((sgpp::optimization::optimizer::Rprop const *)arg1)->getStepSizeDecreaseFactor();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptRprop_1setStepSizeDecreaseFactor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::optimization::optimizer::Rprop *arg1 = (sgpp::optimization::optimizer::Rprop *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::Rprop **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setStepSizeDecreaseFactor(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptRprop_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::optimizer::Rprop *arg1 = (sgpp::optimization::optimizer::Rprop *) 0 ;
  std::unique_ptr< sgpp::optimization::optimizer::UnconstrainedOptimizer > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::Rprop **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::optimizer::UnconstrainedOptimizer > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::optimizer::UnconstrainedOptimizer > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::optimizer::Rprop const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptLeastSquaresOptimizer_1DEFAULT_1N_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  result = sgpp::optimization::optimizer::LeastSquaresOptimizer::DEFAULT_N;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptLeastSquaresOptimizer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::optimizer::LeastSquaresOptimizer *arg1 = (sgpp::optimization::optimizer::LeastSquaresOptimizer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::optimizer::LeastSquaresOptimizer **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptLeastSquaresOptimizer_1optimize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::optimization::optimizer::LeastSquaresOptimizer *arg1 = (sgpp::optimization::optimizer::LeastSquaresOptimizer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::LeastSquaresOptimizer **)&jarg1; 
  {
    try {
      (arg1)->optimize();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptLeastSquaresOptimizer_1getPhiFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::optimizer::LeastSquaresOptimizer *arg1 = (sgpp::optimization::optimizer::LeastSquaresOptimizer *) 0 ;
  sgpp::optimization::VectorFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::LeastSquaresOptimizer **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::VectorFunction *) &((sgpp::optimization::optimizer::LeastSquaresOptimizer const *)arg1)->getPhiFunction();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::VectorFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptLeastSquaresOptimizer_1getN(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::optimizer::LeastSquaresOptimizer *arg1 = (sgpp::optimization::optimizer::LeastSquaresOptimizer *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::LeastSquaresOptimizer **)&jarg1; 
  {
    try {
      result = ((sgpp::optimization::optimizer::LeastSquaresOptimizer const *)arg1)->getN();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptLeastSquaresOptimizer_1setN(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::optimizer::LeastSquaresOptimizer *arg1 = (sgpp::optimization::optimizer::LeastSquaresOptimizer *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::LeastSquaresOptimizer **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      (arg1)->setN(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptLeastSquaresOptimizer_1getStartingPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::optimizer::LeastSquaresOptimizer *arg1 = (sgpp::optimization::optimizer::LeastSquaresOptimizer *) 0 ;
  sgpp::base::DataVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::LeastSquaresOptimizer **)&jarg1; 
  {
    try {
      result = (sgpp::base::DataVector *) &((sgpp::optimization::optimizer::LeastSquaresOptimizer const *)arg1)->getStartingPoint();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::DataVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptLeastSquaresOptimizer_1setStartingPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::optimization::optimizer::LeastSquaresOptimizer *arg1 = (sgpp::optimization::optimizer::LeastSquaresOptimizer *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::optimizer::LeastSquaresOptimizer **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setStartingPoint((sgpp::base::DataVector const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptLeastSquaresOptimizer_1getOptimalPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::optimizer::LeastSquaresOptimizer *arg1 = (sgpp::optimization::optimizer::LeastSquaresOptimizer *) 0 ;
  sgpp::base::DataVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::LeastSquaresOptimizer **)&jarg1; 
  {
    try {
      result = (sgpp::base::DataVector *) &((sgpp::optimization::optimizer::LeastSquaresOptimizer const *)arg1)->getOptimalPoint();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::DataVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptLeastSquaresOptimizer_1getOptimalValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::optimization::optimizer::LeastSquaresOptimizer *arg1 = (sgpp::optimization::optimizer::LeastSquaresOptimizer *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::LeastSquaresOptimizer **)&jarg1; 
  {
    try {
      result = (double)((sgpp::optimization::optimizer::LeastSquaresOptimizer const *)arg1)->getOptimalValue();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptLeastSquaresOptimizer_1getHistoryOfOptimalPoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::optimizer::LeastSquaresOptimizer *arg1 = (sgpp::optimization::optimizer::LeastSquaresOptimizer *) 0 ;
  sgpp::base::DataMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::LeastSquaresOptimizer **)&jarg1; 
  {
    try {
      result = (sgpp::base::DataMatrix *) &((sgpp::optimization::optimizer::LeastSquaresOptimizer const *)arg1)->getHistoryOfOptimalPoints();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::DataMatrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptLeastSquaresOptimizer_1getHistoryOfOptimalValues(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::optimizer::LeastSquaresOptimizer *arg1 = (sgpp::optimization::optimizer::LeastSquaresOptimizer *) 0 ;
  sgpp::base::DataVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::LeastSquaresOptimizer **)&jarg1; 
  {
    try {
      result = (sgpp::base::DataVector *) &((sgpp::optimization::optimizer::LeastSquaresOptimizer const *)arg1)->getHistoryOfOptimalValues();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::DataVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptLeastSquaresOptimizer_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::optimizer::LeastSquaresOptimizer *arg1 = (sgpp::optimization::optimizer::LeastSquaresOptimizer *) 0 ;
  std::unique_ptr< sgpp::optimization::optimizer::LeastSquaresOptimizer > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::LeastSquaresOptimizer **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::optimizer::LeastSquaresOptimizer > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::optimizer::LeastSquaresOptimizer > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::optimizer::LeastSquaresOptimizer const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptLevenbergMarquardt_1DEFAULT_1TOLERANCE_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)sgpp::optimization::optimizer::LevenbergMarquardt::DEFAULT_TOLERANCE;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptLevenbergMarquardt_1DEFAULT_1INITIAL_1DAMPING_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)sgpp::optimization::optimizer::LevenbergMarquardt::DEFAULT_INITIAL_DAMPING;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptLevenbergMarquardt_1DEFAULT_1ACCEPTANCE_1THRESHOLD_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)sgpp::optimization::optimizer::LevenbergMarquardt::DEFAULT_ACCEPTANCE_THRESHOLD;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptLevenbergMarquardt_1DEFAULT_1EFFECTIVENESS_1THRESHOLD_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)sgpp::optimization::optimizer::LevenbergMarquardt::DEFAULT_EFFECTIVENESS_THRESHOLD;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptLevenbergMarquardt_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jdouble jarg7) {
  jlong jresult = 0 ;
  sgpp::optimization::VectorFunction *arg1 = 0 ;
  sgpp::optimization::VectorFunctionGradient *arg2 = 0 ;
  size_t arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  sgpp::optimization::optimizer::LevenbergMarquardt *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::VectorFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::VectorFunction const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::optimization::VectorFunctionGradient **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::VectorFunctionGradient const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  {
    try {
      result = (sgpp::optimization::optimizer::LevenbergMarquardt *)new sgpp::optimization::optimizer::LevenbergMarquardt((sgpp::optimization::VectorFunction const &)*arg1,(sgpp::optimization::VectorFunctionGradient const &)*arg2,arg3,arg4,arg5,arg6,arg7);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::LevenbergMarquardt **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptLevenbergMarquardt_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  jlong jresult = 0 ;
  sgpp::optimization::VectorFunction *arg1 = 0 ;
  sgpp::optimization::VectorFunctionGradient *arg2 = 0 ;
  size_t arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  sgpp::optimization::optimizer::LevenbergMarquardt *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::VectorFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::VectorFunction const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::optimization::VectorFunctionGradient **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::VectorFunctionGradient const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  {
    try {
      result = (sgpp::optimization::optimizer::LevenbergMarquardt *)new sgpp::optimization::optimizer::LevenbergMarquardt((sgpp::optimization::VectorFunction const &)*arg1,(sgpp::optimization::VectorFunctionGradient const &)*arg2,arg3,arg4,arg5,arg6);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::LevenbergMarquardt **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptLevenbergMarquardt_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jdouble jarg4, jdouble jarg5) {
  jlong jresult = 0 ;
  sgpp::optimization::VectorFunction *arg1 = 0 ;
  sgpp::optimization::VectorFunctionGradient *arg2 = 0 ;
  size_t arg3 ;
  double arg4 ;
  double arg5 ;
  sgpp::optimization::optimizer::LevenbergMarquardt *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::VectorFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::VectorFunction const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::optimization::VectorFunctionGradient **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::VectorFunctionGradient const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  {
    try {
      result = (sgpp::optimization::optimizer::LevenbergMarquardt *)new sgpp::optimization::optimizer::LevenbergMarquardt((sgpp::optimization::VectorFunction const &)*arg1,(sgpp::optimization::VectorFunctionGradient const &)*arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::LevenbergMarquardt **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptLevenbergMarquardt_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  sgpp::optimization::VectorFunction *arg1 = 0 ;
  sgpp::optimization::VectorFunctionGradient *arg2 = 0 ;
  size_t arg3 ;
  double arg4 ;
  sgpp::optimization::optimizer::LevenbergMarquardt *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::VectorFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::VectorFunction const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::optimization::VectorFunctionGradient **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::VectorFunctionGradient const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (sgpp::optimization::optimizer::LevenbergMarquardt *)new sgpp::optimization::optimizer::LevenbergMarquardt((sgpp::optimization::VectorFunction const &)*arg1,(sgpp::optimization::VectorFunctionGradient const &)*arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::LevenbergMarquardt **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptLevenbergMarquardt_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  sgpp::optimization::VectorFunction *arg1 = 0 ;
  sgpp::optimization::VectorFunctionGradient *arg2 = 0 ;
  size_t arg3 ;
  sgpp::optimization::optimizer::LevenbergMarquardt *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::VectorFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::VectorFunction const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::optimization::VectorFunctionGradient **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::VectorFunctionGradient const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (sgpp::optimization::optimizer::LevenbergMarquardt *)new sgpp::optimization::optimizer::LevenbergMarquardt((sgpp::optimization::VectorFunction const &)*arg1,(sgpp::optimization::VectorFunctionGradient const &)*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::LevenbergMarquardt **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptLevenbergMarquardt_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  sgpp::optimization::VectorFunction *arg1 = 0 ;
  sgpp::optimization::VectorFunctionGradient *arg2 = 0 ;
  sgpp::optimization::optimizer::LevenbergMarquardt *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::VectorFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::VectorFunction const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::optimization::VectorFunctionGradient **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::VectorFunctionGradient const & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::optimization::optimizer::LevenbergMarquardt *)new sgpp::optimization::optimizer::LevenbergMarquardt((sgpp::optimization::VectorFunction const &)*arg1,(sgpp::optimization::VectorFunctionGradient const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::LevenbergMarquardt **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptLevenbergMarquardt_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jdouble jarg7, jlong jarg8, jobject jarg8_) {
  jlong jresult = 0 ;
  sgpp::optimization::VectorFunction *arg1 = 0 ;
  sgpp::optimization::VectorFunctionGradient *arg2 = 0 ;
  size_t arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  sgpp::optimization::sle_solver::SLESolver *arg8 = 0 ;
  sgpp::optimization::optimizer::LevenbergMarquardt *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg8_;
  arg1 = *(sgpp::optimization::VectorFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::VectorFunction const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::optimization::VectorFunctionGradient **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::VectorFunctionGradient const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = *(sgpp::optimization::sle_solver::SLESolver **)&jarg8;
  if (!arg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::sle_solver::SLESolver const & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::optimization::optimizer::LevenbergMarquardt *)new sgpp::optimization::optimizer::LevenbergMarquardt((sgpp::optimization::VectorFunction const &)*arg1,(sgpp::optimization::VectorFunctionGradient const &)*arg2,arg3,arg4,arg5,arg6,arg7,(sgpp::optimization::sle_solver::SLESolver const &)*arg8);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::LevenbergMarquardt **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptLevenbergMarquardt_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::optimizer::LevenbergMarquardt *arg1 = 0 ;
  sgpp::optimization::optimizer::LevenbergMarquardt *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::LevenbergMarquardt **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::optimizer::LevenbergMarquardt const & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::optimization::optimizer::LevenbergMarquardt *)new sgpp::optimization::optimizer::LevenbergMarquardt((sgpp::optimization::optimizer::LevenbergMarquardt const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::LevenbergMarquardt **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptLevenbergMarquardt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::optimizer::LevenbergMarquardt *arg1 = (sgpp::optimization::optimizer::LevenbergMarquardt *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::optimizer::LevenbergMarquardt **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptLevenbergMarquardt_1optimize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::optimization::optimizer::LevenbergMarquardt *arg1 = (sgpp::optimization::optimizer::LevenbergMarquardt *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::LevenbergMarquardt **)&jarg1; 
  {
    try {
      (arg1)->optimize();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptLevenbergMarquardt_1getPhiGradient(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::optimizer::LevenbergMarquardt *arg1 = (sgpp::optimization::optimizer::LevenbergMarquardt *) 0 ;
  sgpp::optimization::VectorFunctionGradient *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::LevenbergMarquardt **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::VectorFunctionGradient *) &((sgpp::optimization::optimizer::LevenbergMarquardt const *)arg1)->getPhiGradient();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::VectorFunctionGradient **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptLevenbergMarquardt_1getTolerance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::optimization::optimizer::LevenbergMarquardt *arg1 = (sgpp::optimization::optimizer::LevenbergMarquardt *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::LevenbergMarquardt **)&jarg1; 
  {
    try {
      result = (double)((sgpp::optimization::optimizer::LevenbergMarquardt const *)arg1)->getTolerance();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptLevenbergMarquardt_1setTolerance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::optimization::optimizer::LevenbergMarquardt *arg1 = (sgpp::optimization::optimizer::LevenbergMarquardt *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::LevenbergMarquardt **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setTolerance(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptLevenbergMarquardt_1getInitialDamping(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::optimization::optimizer::LevenbergMarquardt *arg1 = (sgpp::optimization::optimizer::LevenbergMarquardt *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::LevenbergMarquardt **)&jarg1; 
  {
    try {
      result = (double)((sgpp::optimization::optimizer::LevenbergMarquardt const *)arg1)->getInitialDamping();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptLevenbergMarquardt_1setInitialDamping(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::optimization::optimizer::LevenbergMarquardt *arg1 = (sgpp::optimization::optimizer::LevenbergMarquardt *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::LevenbergMarquardt **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setInitialDamping(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptLevenbergMarquardt_1getAcceptanceThreshold(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::optimization::optimizer::LevenbergMarquardt *arg1 = (sgpp::optimization::optimizer::LevenbergMarquardt *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::LevenbergMarquardt **)&jarg1; 
  {
    try {
      result = (double)((sgpp::optimization::optimizer::LevenbergMarquardt const *)arg1)->getAcceptanceThreshold();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptLevenbergMarquardt_1setAcceptanceThreshold(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::optimization::optimizer::LevenbergMarquardt *arg1 = (sgpp::optimization::optimizer::LevenbergMarquardt *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::LevenbergMarquardt **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setAcceptanceThreshold(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptLevenbergMarquardt_1getEffectivenessThreshold(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::optimization::optimizer::LevenbergMarquardt *arg1 = (sgpp::optimization::optimizer::LevenbergMarquardt *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::LevenbergMarquardt **)&jarg1; 
  {
    try {
      result = (double)((sgpp::optimization::optimizer::LevenbergMarquardt const *)arg1)->getEffectivenessThreshold();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptLevenbergMarquardt_1setEffectivenessThreshold(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::optimization::optimizer::LevenbergMarquardt *arg1 = (sgpp::optimization::optimizer::LevenbergMarquardt *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::LevenbergMarquardt **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setEffectivenessThreshold(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptLevenbergMarquardt_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::optimizer::LevenbergMarquardt *arg1 = (sgpp::optimization::optimizer::LevenbergMarquardt *) 0 ;
  std::unique_ptr< sgpp::optimization::optimizer::LeastSquaresOptimizer > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::LevenbergMarquardt **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::optimizer::LeastSquaresOptimizer > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::optimizer::LeastSquaresOptimizer > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::optimizer::LevenbergMarquardt const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptConstrainedOptimizer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::optimizer::ConstrainedOptimizer *arg1 = (sgpp::optimization::optimizer::ConstrainedOptimizer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::optimizer::ConstrainedOptimizer **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptConstrainedOptimizer_1getInequalityConstraintFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::optimizer::ConstrainedOptimizer *arg1 = (sgpp::optimization::optimizer::ConstrainedOptimizer *) 0 ;
  sgpp::optimization::VectorFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::ConstrainedOptimizer **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::VectorFunction *) &((sgpp::optimization::optimizer::ConstrainedOptimizer const *)arg1)->getInequalityConstraintFunction();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::VectorFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptConstrainedOptimizer_1getEqualityConstraintFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::optimizer::ConstrainedOptimizer *arg1 = (sgpp::optimization::optimizer::ConstrainedOptimizer *) 0 ;
  sgpp::optimization::VectorFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::ConstrainedOptimizer **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::VectorFunction *) &((sgpp::optimization::optimizer::ConstrainedOptimizer const *)arg1)->getEqualityConstraintFunction();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::VectorFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptAugmentedLagrangian_1DEFAULT_1X_1TOLERANCE_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)sgpp::optimization::optimizer::AugmentedLagrangian::DEFAULT_X_TOLERANCE;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptAugmentedLagrangian_1DEFAULT_1CONSTRAINT_1TOLERANCE_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)sgpp::optimization::optimizer::AugmentedLagrangian::DEFAULT_CONSTRAINT_TOLERANCE;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptAugmentedLagrangian_1DEFAULT_1PENALTY_1START_1VALUE_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)sgpp::optimization::optimizer::AugmentedLagrangian::DEFAULT_PENALTY_START_VALUE;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptAugmentedLagrangian_1DEFAULT_1PENALTY_1INCREASE_1FACTOR_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)sgpp::optimization::optimizer::AugmentedLagrangian::DEFAULT_PENALTY_INCREASE_FACTOR;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptAugmentedLagrangian_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7, jdouble jarg8, jdouble jarg9, jdouble jarg10, jdouble jarg11) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::optimization::ScalarFunctionGradient *arg2 = 0 ;
  sgpp::optimization::VectorFunction *arg3 = 0 ;
  sgpp::optimization::VectorFunctionGradient *arg4 = 0 ;
  sgpp::optimization::VectorFunction *arg5 = 0 ;
  sgpp::optimization::VectorFunctionGradient *arg6 = 0 ;
  size_t arg7 ;
  double arg8 ;
  double arg9 ;
  double arg10 ;
  double arg11 ;
  sgpp::optimization::optimizer::AugmentedLagrangian *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::optimization::ScalarFunctionGradient **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunctionGradient const & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::optimization::VectorFunction **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::VectorFunction const & reference is null");
    return 0;
  } 
  arg4 = *(sgpp::optimization::VectorFunctionGradient **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::VectorFunctionGradient const & reference is null");
    return 0;
  } 
  arg5 = *(sgpp::optimization::VectorFunction **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::VectorFunction const & reference is null");
    return 0;
  } 
  arg6 = *(sgpp::optimization::VectorFunctionGradient **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::VectorFunctionGradient const & reference is null");
    return 0;
  } 
  arg7 = (size_t)jarg7; 
  arg8 = (double)jarg8; 
  arg9 = (double)jarg9; 
  arg10 = (double)jarg10; 
  arg11 = (double)jarg11; 
  {
    try {
      result = (sgpp::optimization::optimizer::AugmentedLagrangian *)new sgpp::optimization::optimizer::AugmentedLagrangian((sgpp::optimization::ScalarFunction const &)*arg1,(sgpp::optimization::ScalarFunctionGradient const &)*arg2,(sgpp::optimization::VectorFunction const &)*arg3,(sgpp::optimization::VectorFunctionGradient const &)*arg4,(sgpp::optimization::VectorFunction const &)*arg5,(sgpp::optimization::VectorFunctionGradient const &)*arg6,arg7,arg8,arg9,arg10,arg11);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::AugmentedLagrangian **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptAugmentedLagrangian_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7, jdouble jarg8, jdouble jarg9, jdouble jarg10) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::optimization::ScalarFunctionGradient *arg2 = 0 ;
  sgpp::optimization::VectorFunction *arg3 = 0 ;
  sgpp::optimization::VectorFunctionGradient *arg4 = 0 ;
  sgpp::optimization::VectorFunction *arg5 = 0 ;
  sgpp::optimization::VectorFunctionGradient *arg6 = 0 ;
  size_t arg7 ;
  double arg8 ;
  double arg9 ;
  double arg10 ;
  sgpp::optimization::optimizer::AugmentedLagrangian *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::optimization::ScalarFunctionGradient **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunctionGradient const & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::optimization::VectorFunction **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::VectorFunction const & reference is null");
    return 0;
  } 
  arg4 = *(sgpp::optimization::VectorFunctionGradient **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::VectorFunctionGradient const & reference is null");
    return 0;
  } 
  arg5 = *(sgpp::optimization::VectorFunction **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::VectorFunction const & reference is null");
    return 0;
  } 
  arg6 = *(sgpp::optimization::VectorFunctionGradient **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::VectorFunctionGradient const & reference is null");
    return 0;
  } 
  arg7 = (size_t)jarg7; 
  arg8 = (double)jarg8; 
  arg9 = (double)jarg9; 
  arg10 = (double)jarg10; 
  {
    try {
      result = (sgpp::optimization::optimizer::AugmentedLagrangian *)new sgpp::optimization::optimizer::AugmentedLagrangian((sgpp::optimization::ScalarFunction const &)*arg1,(sgpp::optimization::ScalarFunctionGradient const &)*arg2,(sgpp::optimization::VectorFunction const &)*arg3,(sgpp::optimization::VectorFunctionGradient const &)*arg4,(sgpp::optimization::VectorFunction const &)*arg5,(sgpp::optimization::VectorFunctionGradient const &)*arg6,arg7,arg8,arg9,arg10);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::AugmentedLagrangian **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptAugmentedLagrangian_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7, jdouble jarg8, jdouble jarg9) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::optimization::ScalarFunctionGradient *arg2 = 0 ;
  sgpp::optimization::VectorFunction *arg3 = 0 ;
  sgpp::optimization::VectorFunctionGradient *arg4 = 0 ;
  sgpp::optimization::VectorFunction *arg5 = 0 ;
  sgpp::optimization::VectorFunctionGradient *arg6 = 0 ;
  size_t arg7 ;
  double arg8 ;
  double arg9 ;
  sgpp::optimization::optimizer::AugmentedLagrangian *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::optimization::ScalarFunctionGradient **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunctionGradient const & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::optimization::VectorFunction **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::VectorFunction const & reference is null");
    return 0;
  } 
  arg4 = *(sgpp::optimization::VectorFunctionGradient **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::VectorFunctionGradient const & reference is null");
    return 0;
  } 
  arg5 = *(sgpp::optimization::VectorFunction **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::VectorFunction const & reference is null");
    return 0;
  } 
  arg6 = *(sgpp::optimization::VectorFunctionGradient **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::VectorFunctionGradient const & reference is null");
    return 0;
  } 
  arg7 = (size_t)jarg7; 
  arg8 = (double)jarg8; 
  arg9 = (double)jarg9; 
  {
    try {
      result = (sgpp::optimization::optimizer::AugmentedLagrangian *)new sgpp::optimization::optimizer::AugmentedLagrangian((sgpp::optimization::ScalarFunction const &)*arg1,(sgpp::optimization::ScalarFunctionGradient const &)*arg2,(sgpp::optimization::VectorFunction const &)*arg3,(sgpp::optimization::VectorFunctionGradient const &)*arg4,(sgpp::optimization::VectorFunction const &)*arg5,(sgpp::optimization::VectorFunctionGradient const &)*arg6,arg7,arg8,arg9);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::AugmentedLagrangian **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptAugmentedLagrangian_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7, jdouble jarg8) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::optimization::ScalarFunctionGradient *arg2 = 0 ;
  sgpp::optimization::VectorFunction *arg3 = 0 ;
  sgpp::optimization::VectorFunctionGradient *arg4 = 0 ;
  sgpp::optimization::VectorFunction *arg5 = 0 ;
  sgpp::optimization::VectorFunctionGradient *arg6 = 0 ;
  size_t arg7 ;
  double arg8 ;
  sgpp::optimization::optimizer::AugmentedLagrangian *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::optimization::ScalarFunctionGradient **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunctionGradient const & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::optimization::VectorFunction **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::VectorFunction const & reference is null");
    return 0;
  } 
  arg4 = *(sgpp::optimization::VectorFunctionGradient **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::VectorFunctionGradient const & reference is null");
    return 0;
  } 
  arg5 = *(sgpp::optimization::VectorFunction **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::VectorFunction const & reference is null");
    return 0;
  } 
  arg6 = *(sgpp::optimization::VectorFunctionGradient **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::VectorFunctionGradient const & reference is null");
    return 0;
  } 
  arg7 = (size_t)jarg7; 
  arg8 = (double)jarg8; 
  {
    try {
      result = (sgpp::optimization::optimizer::AugmentedLagrangian *)new sgpp::optimization::optimizer::AugmentedLagrangian((sgpp::optimization::ScalarFunction const &)*arg1,(sgpp::optimization::ScalarFunctionGradient const &)*arg2,(sgpp::optimization::VectorFunction const &)*arg3,(sgpp::optimization::VectorFunctionGradient const &)*arg4,(sgpp::optimization::VectorFunction const &)*arg5,(sgpp::optimization::VectorFunctionGradient const &)*arg6,arg7,arg8);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::AugmentedLagrangian **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptAugmentedLagrangian_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::optimization::ScalarFunctionGradient *arg2 = 0 ;
  sgpp::optimization::VectorFunction *arg3 = 0 ;
  sgpp::optimization::VectorFunctionGradient *arg4 = 0 ;
  sgpp::optimization::VectorFunction *arg5 = 0 ;
  sgpp::optimization::VectorFunctionGradient *arg6 = 0 ;
  size_t arg7 ;
  sgpp::optimization::optimizer::AugmentedLagrangian *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::optimization::ScalarFunctionGradient **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunctionGradient const & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::optimization::VectorFunction **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::VectorFunction const & reference is null");
    return 0;
  } 
  arg4 = *(sgpp::optimization::VectorFunctionGradient **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::VectorFunctionGradient const & reference is null");
    return 0;
  } 
  arg5 = *(sgpp::optimization::VectorFunction **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::VectorFunction const & reference is null");
    return 0;
  } 
  arg6 = *(sgpp::optimization::VectorFunctionGradient **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::VectorFunctionGradient const & reference is null");
    return 0;
  } 
  arg7 = (size_t)jarg7; 
  {
    try {
      result = (sgpp::optimization::optimizer::AugmentedLagrangian *)new sgpp::optimization::optimizer::AugmentedLagrangian((sgpp::optimization::ScalarFunction const &)*arg1,(sgpp::optimization::ScalarFunctionGradient const &)*arg2,(sgpp::optimization::VectorFunction const &)*arg3,(sgpp::optimization::VectorFunctionGradient const &)*arg4,(sgpp::optimization::VectorFunction const &)*arg5,(sgpp::optimization::VectorFunctionGradient const &)*arg6,arg7);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::AugmentedLagrangian **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptAugmentedLagrangian_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::optimization::ScalarFunctionGradient *arg2 = 0 ;
  sgpp::optimization::VectorFunction *arg3 = 0 ;
  sgpp::optimization::VectorFunctionGradient *arg4 = 0 ;
  sgpp::optimization::VectorFunction *arg5 = 0 ;
  sgpp::optimization::VectorFunctionGradient *arg6 = 0 ;
  sgpp::optimization::optimizer::AugmentedLagrangian *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::optimization::ScalarFunctionGradient **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunctionGradient const & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::optimization::VectorFunction **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::VectorFunction const & reference is null");
    return 0;
  } 
  arg4 = *(sgpp::optimization::VectorFunctionGradient **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::VectorFunctionGradient const & reference is null");
    return 0;
  } 
  arg5 = *(sgpp::optimization::VectorFunction **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::VectorFunction const & reference is null");
    return 0;
  } 
  arg6 = *(sgpp::optimization::VectorFunctionGradient **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::VectorFunctionGradient const & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::optimization::optimizer::AugmentedLagrangian *)new sgpp::optimization::optimizer::AugmentedLagrangian((sgpp::optimization::ScalarFunction const &)*arg1,(sgpp::optimization::ScalarFunctionGradient const &)*arg2,(sgpp::optimization::VectorFunction const &)*arg3,(sgpp::optimization::VectorFunctionGradient const &)*arg4,(sgpp::optimization::VectorFunction const &)*arg5,(sgpp::optimization::VectorFunctionGradient const &)*arg6);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::AugmentedLagrangian **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptAugmentedLagrangian_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::optimizer::AugmentedLagrangian *arg1 = 0 ;
  sgpp::optimization::optimizer::AugmentedLagrangian *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::AugmentedLagrangian **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::optimizer::AugmentedLagrangian const & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::optimization::optimizer::AugmentedLagrangian *)new sgpp::optimization::optimizer::AugmentedLagrangian((sgpp::optimization::optimizer::AugmentedLagrangian const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::AugmentedLagrangian **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptAugmentedLagrangian(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::optimizer::AugmentedLagrangian *arg1 = (sgpp::optimization::optimizer::AugmentedLagrangian *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::optimizer::AugmentedLagrangian **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptAugmentedLagrangian_1optimize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::optimization::optimizer::AugmentedLagrangian *arg1 = (sgpp::optimization::optimizer::AugmentedLagrangian *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::AugmentedLagrangian **)&jarg1; 
  {
    try {
      (arg1)->optimize();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptAugmentedLagrangian_1findFeasiblePoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::optimizer::AugmentedLagrangian *arg1 = (sgpp::optimization::optimizer::AugmentedLagrangian *) 0 ;
  sgpp::base::DataVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::AugmentedLagrangian **)&jarg1; 
  {
    try {
      result = ((sgpp::optimization::optimizer::AugmentedLagrangian const *)arg1)->findFeasiblePoint();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::DataVector **)&jresult = new sgpp::base::DataVector((const sgpp::base::DataVector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptAugmentedLagrangian_1getObjectiveGradient(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::optimizer::AugmentedLagrangian *arg1 = (sgpp::optimization::optimizer::AugmentedLagrangian *) 0 ;
  sgpp::optimization::ScalarFunctionGradient *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::AugmentedLagrangian **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::ScalarFunctionGradient *) &((sgpp::optimization::optimizer::AugmentedLagrangian const *)arg1)->getObjectiveGradient();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::ScalarFunctionGradient **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptAugmentedLagrangian_1getInequalityConstraintGradient(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::optimizer::AugmentedLagrangian *arg1 = (sgpp::optimization::optimizer::AugmentedLagrangian *) 0 ;
  sgpp::optimization::VectorFunctionGradient *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::AugmentedLagrangian **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::VectorFunctionGradient *) &((sgpp::optimization::optimizer::AugmentedLagrangian const *)arg1)->getInequalityConstraintGradient();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::VectorFunctionGradient **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptAugmentedLagrangian_1getEqualityConstraintGradient(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::optimizer::AugmentedLagrangian *arg1 = (sgpp::optimization::optimizer::AugmentedLagrangian *) 0 ;
  sgpp::optimization::VectorFunctionGradient *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::AugmentedLagrangian **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::VectorFunctionGradient *) &((sgpp::optimization::optimizer::AugmentedLagrangian const *)arg1)->getEqualityConstraintGradient();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::VectorFunctionGradient **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptAugmentedLagrangian_1getXTolerance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::optimization::optimizer::AugmentedLagrangian *arg1 = (sgpp::optimization::optimizer::AugmentedLagrangian *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::AugmentedLagrangian **)&jarg1; 
  {
    try {
      result = (double)((sgpp::optimization::optimizer::AugmentedLagrangian const *)arg1)->getXTolerance();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptAugmentedLagrangian_1setXTolerance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::optimization::optimizer::AugmentedLagrangian *arg1 = (sgpp::optimization::optimizer::AugmentedLagrangian *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::AugmentedLagrangian **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setXTolerance(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptAugmentedLagrangian_1getConstraintTolerance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::optimization::optimizer::AugmentedLagrangian *arg1 = (sgpp::optimization::optimizer::AugmentedLagrangian *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::AugmentedLagrangian **)&jarg1; 
  {
    try {
      result = (double)((sgpp::optimization::optimizer::AugmentedLagrangian const *)arg1)->getConstraintTolerance();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptAugmentedLagrangian_1setConstraintTolerance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::optimization::optimizer::AugmentedLagrangian *arg1 = (sgpp::optimization::optimizer::AugmentedLagrangian *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::AugmentedLagrangian **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setConstraintTolerance(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptAugmentedLagrangian_1getPenaltyStartValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::optimization::optimizer::AugmentedLagrangian *arg1 = (sgpp::optimization::optimizer::AugmentedLagrangian *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::AugmentedLagrangian **)&jarg1; 
  {
    try {
      result = (double)((sgpp::optimization::optimizer::AugmentedLagrangian const *)arg1)->getPenaltyStartValue();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptAugmentedLagrangian_1setPenaltyStartValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::optimization::optimizer::AugmentedLagrangian *arg1 = (sgpp::optimization::optimizer::AugmentedLagrangian *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::AugmentedLagrangian **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setPenaltyStartValue(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptAugmentedLagrangian_1getPenaltyIncreaseFactor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::optimization::optimizer::AugmentedLagrangian *arg1 = (sgpp::optimization::optimizer::AugmentedLagrangian *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::AugmentedLagrangian **)&jarg1; 
  {
    try {
      result = (double)((sgpp::optimization::optimizer::AugmentedLagrangian const *)arg1)->getPenaltyIncreaseFactor();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptAugmentedLagrangian_1setPenaltyIncreaseFactor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::optimization::optimizer::AugmentedLagrangian *arg1 = (sgpp::optimization::optimizer::AugmentedLagrangian *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::AugmentedLagrangian **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setPenaltyIncreaseFactor(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptAugmentedLagrangian_1getHistoryOfInnerIterationPoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::optimizer::AugmentedLagrangian *arg1 = (sgpp::optimization::optimizer::AugmentedLagrangian *) 0 ;
  sgpp::base::DataMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::AugmentedLagrangian **)&jarg1; 
  {
    try {
      result = (sgpp::base::DataMatrix *) &((sgpp::optimization::optimizer::AugmentedLagrangian const *)arg1)->getHistoryOfInnerIterationPoints();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::DataMatrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptAugmentedLagrangian_1getHistoryOfInnerIterationNumbers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::optimizer::AugmentedLagrangian *arg1 = (sgpp::optimization::optimizer::AugmentedLagrangian *) 0 ;
  std::vector< size_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::AugmentedLagrangian **)&jarg1; 
  {
    try {
      result = (std::vector< size_t > *) &((sgpp::optimization::optimizer::AugmentedLagrangian const *)arg1)->getHistoryOfInnerIterationNumbers();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< size_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptAugmentedLagrangian_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::optimizer::AugmentedLagrangian *arg1 = (sgpp::optimization::optimizer::AugmentedLagrangian *) 0 ;
  std::unique_ptr< sgpp::optimization::optimizer::UnconstrainedOptimizer > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::AugmentedLagrangian **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::optimizer::UnconstrainedOptimizer > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::optimizer::UnconstrainedOptimizer > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::optimizer::AugmentedLagrangian const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptLogBarrier_1DEFAULT_1TOLERANCE_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)sgpp::optimization::optimizer::LogBarrier::DEFAULT_TOLERANCE;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptLogBarrier_1DEFAULT_1BARRIER_1START_1VALUE_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)sgpp::optimization::optimizer::LogBarrier::DEFAULT_BARRIER_START_VALUE;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptLogBarrier_1DEFAULT_1BARRIER_1DECREASE_1FACTOR_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)sgpp::optimization::optimizer::LogBarrier::DEFAULT_BARRIER_DECREASE_FACTOR;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptLogBarrier_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jdouble jarg6, jdouble jarg7, jdouble jarg8) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::optimization::ScalarFunctionGradient *arg2 = 0 ;
  sgpp::optimization::VectorFunction *arg3 = 0 ;
  sgpp::optimization::VectorFunctionGradient *arg4 = 0 ;
  size_t arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  sgpp::optimization::optimizer::LogBarrier *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::optimization::ScalarFunctionGradient **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunctionGradient const & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::optimization::VectorFunction **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::VectorFunction const & reference is null");
    return 0;
  } 
  arg4 = *(sgpp::optimization::VectorFunctionGradient **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::VectorFunctionGradient const & reference is null");
    return 0;
  } 
  arg5 = (size_t)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  {
    try {
      result = (sgpp::optimization::optimizer::LogBarrier *)new sgpp::optimization::optimizer::LogBarrier((sgpp::optimization::ScalarFunction const &)*arg1,(sgpp::optimization::ScalarFunctionGradient const &)*arg2,(sgpp::optimization::VectorFunction const &)*arg3,(sgpp::optimization::VectorFunctionGradient const &)*arg4,arg5,arg6,arg7,arg8);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::LogBarrier **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptLogBarrier_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jdouble jarg6, jdouble jarg7) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::optimization::ScalarFunctionGradient *arg2 = 0 ;
  sgpp::optimization::VectorFunction *arg3 = 0 ;
  sgpp::optimization::VectorFunctionGradient *arg4 = 0 ;
  size_t arg5 ;
  double arg6 ;
  double arg7 ;
  sgpp::optimization::optimizer::LogBarrier *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::optimization::ScalarFunctionGradient **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunctionGradient const & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::optimization::VectorFunction **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::VectorFunction const & reference is null");
    return 0;
  } 
  arg4 = *(sgpp::optimization::VectorFunctionGradient **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::VectorFunctionGradient const & reference is null");
    return 0;
  } 
  arg5 = (size_t)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  {
    try {
      result = (sgpp::optimization::optimizer::LogBarrier *)new sgpp::optimization::optimizer::LogBarrier((sgpp::optimization::ScalarFunction const &)*arg1,(sgpp::optimization::ScalarFunctionGradient const &)*arg2,(sgpp::optimization::VectorFunction const &)*arg3,(sgpp::optimization::VectorFunctionGradient const &)*arg4,arg5,arg6,arg7);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::LogBarrier **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptLogBarrier_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jdouble jarg6) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::optimization::ScalarFunctionGradient *arg2 = 0 ;
  sgpp::optimization::VectorFunction *arg3 = 0 ;
  sgpp::optimization::VectorFunctionGradient *arg4 = 0 ;
  size_t arg5 ;
  double arg6 ;
  sgpp::optimization::optimizer::LogBarrier *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::optimization::ScalarFunctionGradient **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunctionGradient const & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::optimization::VectorFunction **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::VectorFunction const & reference is null");
    return 0;
  } 
  arg4 = *(sgpp::optimization::VectorFunctionGradient **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::VectorFunctionGradient const & reference is null");
    return 0;
  } 
  arg5 = (size_t)jarg5; 
  arg6 = (double)jarg6; 
  {
    try {
      result = (sgpp::optimization::optimizer::LogBarrier *)new sgpp::optimization::optimizer::LogBarrier((sgpp::optimization::ScalarFunction const &)*arg1,(sgpp::optimization::ScalarFunctionGradient const &)*arg2,(sgpp::optimization::VectorFunction const &)*arg3,(sgpp::optimization::VectorFunctionGradient const &)*arg4,arg5,arg6);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::LogBarrier **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptLogBarrier_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::optimization::ScalarFunctionGradient *arg2 = 0 ;
  sgpp::optimization::VectorFunction *arg3 = 0 ;
  sgpp::optimization::VectorFunctionGradient *arg4 = 0 ;
  size_t arg5 ;
  sgpp::optimization::optimizer::LogBarrier *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::optimization::ScalarFunctionGradient **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunctionGradient const & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::optimization::VectorFunction **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::VectorFunction const & reference is null");
    return 0;
  } 
  arg4 = *(sgpp::optimization::VectorFunctionGradient **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::VectorFunctionGradient const & reference is null");
    return 0;
  } 
  arg5 = (size_t)jarg5; 
  {
    try {
      result = (sgpp::optimization::optimizer::LogBarrier *)new sgpp::optimization::optimizer::LogBarrier((sgpp::optimization::ScalarFunction const &)*arg1,(sgpp::optimization::ScalarFunctionGradient const &)*arg2,(sgpp::optimization::VectorFunction const &)*arg3,(sgpp::optimization::VectorFunctionGradient const &)*arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::LogBarrier **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptLogBarrier_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::optimization::ScalarFunctionGradient *arg2 = 0 ;
  sgpp::optimization::VectorFunction *arg3 = 0 ;
  sgpp::optimization::VectorFunctionGradient *arg4 = 0 ;
  sgpp::optimization::optimizer::LogBarrier *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::optimization::ScalarFunctionGradient **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunctionGradient const & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::optimization::VectorFunction **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::VectorFunction const & reference is null");
    return 0;
  } 
  arg4 = *(sgpp::optimization::VectorFunctionGradient **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::VectorFunctionGradient const & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::optimization::optimizer::LogBarrier *)new sgpp::optimization::optimizer::LogBarrier((sgpp::optimization::ScalarFunction const &)*arg1,(sgpp::optimization::ScalarFunctionGradient const &)*arg2,(sgpp::optimization::VectorFunction const &)*arg3,(sgpp::optimization::VectorFunctionGradient const &)*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::LogBarrier **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptLogBarrier_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::optimizer::LogBarrier *arg1 = 0 ;
  sgpp::optimization::optimizer::LogBarrier *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::LogBarrier **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::optimizer::LogBarrier const & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::optimization::optimizer::LogBarrier *)new sgpp::optimization::optimizer::LogBarrier((sgpp::optimization::optimizer::LogBarrier const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::LogBarrier **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptLogBarrier(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::optimizer::LogBarrier *arg1 = (sgpp::optimization::optimizer::LogBarrier *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::optimizer::LogBarrier **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptLogBarrier_1optimize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::optimization::optimizer::LogBarrier *arg1 = (sgpp::optimization::optimizer::LogBarrier *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::LogBarrier **)&jarg1; 
  {
    try {
      (arg1)->optimize();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptLogBarrier_1getObjectiveGradient(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::optimizer::LogBarrier *arg1 = (sgpp::optimization::optimizer::LogBarrier *) 0 ;
  sgpp::optimization::ScalarFunctionGradient *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::LogBarrier **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::ScalarFunctionGradient *) &((sgpp::optimization::optimizer::LogBarrier const *)arg1)->getObjectiveGradient();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::ScalarFunctionGradient **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptLogBarrier_1getInequalityConstraintGradient(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::optimizer::LogBarrier *arg1 = (sgpp::optimization::optimizer::LogBarrier *) 0 ;
  sgpp::optimization::VectorFunctionGradient *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::LogBarrier **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::VectorFunctionGradient *) &((sgpp::optimization::optimizer::LogBarrier const *)arg1)->getInequalityConstraintGradient();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::VectorFunctionGradient **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptLogBarrier_1getTolerance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::optimization::optimizer::LogBarrier *arg1 = (sgpp::optimization::optimizer::LogBarrier *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::LogBarrier **)&jarg1; 
  {
    try {
      result = (double)((sgpp::optimization::optimizer::LogBarrier const *)arg1)->getTolerance();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptLogBarrier_1setTolerance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::optimization::optimizer::LogBarrier *arg1 = (sgpp::optimization::optimizer::LogBarrier *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::LogBarrier **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setTolerance(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptLogBarrier_1getBarrierStartValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::optimization::optimizer::LogBarrier *arg1 = (sgpp::optimization::optimizer::LogBarrier *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::LogBarrier **)&jarg1; 
  {
    try {
      result = (double)((sgpp::optimization::optimizer::LogBarrier const *)arg1)->getBarrierStartValue();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptLogBarrier_1setBarrierStartValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::optimization::optimizer::LogBarrier *arg1 = (sgpp::optimization::optimizer::LogBarrier *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::LogBarrier **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setBarrierStartValue(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptLogBarrier_1getBarrierDecreaseFactor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::optimization::optimizer::LogBarrier *arg1 = (sgpp::optimization::optimizer::LogBarrier *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::LogBarrier **)&jarg1; 
  {
    try {
      result = (double)((sgpp::optimization::optimizer::LogBarrier const *)arg1)->getBarrierDecreaseFactor();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptLogBarrier_1setBarrierDecreaseFactor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::optimization::optimizer::LogBarrier *arg1 = (sgpp::optimization::optimizer::LogBarrier *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::LogBarrier **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setBarrierDecreaseFactor(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptLogBarrier_1getHistoryOfInnerIterationPoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::optimizer::LogBarrier *arg1 = (sgpp::optimization::optimizer::LogBarrier *) 0 ;
  sgpp::base::DataMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::LogBarrier **)&jarg1; 
  {
    try {
      result = (sgpp::base::DataMatrix *) &((sgpp::optimization::optimizer::LogBarrier const *)arg1)->getHistoryOfInnerIterationPoints();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::DataMatrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptLogBarrier_1getHistoryOfInnerIterationNumbers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::optimizer::LogBarrier *arg1 = (sgpp::optimization::optimizer::LogBarrier *) 0 ;
  std::vector< size_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::LogBarrier **)&jarg1; 
  {
    try {
      result = (std::vector< size_t > *) &((sgpp::optimization::optimizer::LogBarrier const *)arg1)->getHistoryOfInnerIterationNumbers();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< size_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptLogBarrier_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::optimizer::LogBarrier *arg1 = (sgpp::optimization::optimizer::LogBarrier *) 0 ;
  std::unique_ptr< sgpp::optimization::optimizer::UnconstrainedOptimizer > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::LogBarrier **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::optimizer::UnconstrainedOptimizer > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::optimizer::UnconstrainedOptimizer > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::optimizer::LogBarrier const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptSquaredPenalty_1DEFAULT_1X_1TOLERANCE_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)sgpp::optimization::optimizer::SquaredPenalty::DEFAULT_X_TOLERANCE;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptSquaredPenalty_1DEFAULT_1CONSTRAINT_1TOLERANCE_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)sgpp::optimization::optimizer::SquaredPenalty::DEFAULT_CONSTRAINT_TOLERANCE;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptSquaredPenalty_1DEFAULT_1PENALTY_1START_1VALUE_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)sgpp::optimization::optimizer::SquaredPenalty::DEFAULT_PENALTY_START_VALUE;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptSquaredPenalty_1DEFAULT_1PENALTY_1INCREASE_1FACTOR_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)sgpp::optimization::optimizer::SquaredPenalty::DEFAULT_PENALTY_INCREASE_FACTOR;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptSquaredPenalty_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7, jdouble jarg8, jdouble jarg9, jdouble jarg10, jdouble jarg11) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::optimization::ScalarFunctionGradient *arg2 = 0 ;
  sgpp::optimization::VectorFunction *arg3 = 0 ;
  sgpp::optimization::VectorFunctionGradient *arg4 = 0 ;
  sgpp::optimization::VectorFunction *arg5 = 0 ;
  sgpp::optimization::VectorFunctionGradient *arg6 = 0 ;
  size_t arg7 ;
  double arg8 ;
  double arg9 ;
  double arg10 ;
  double arg11 ;
  sgpp::optimization::optimizer::SquaredPenalty *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::optimization::ScalarFunctionGradient **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunctionGradient const & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::optimization::VectorFunction **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::VectorFunction const & reference is null");
    return 0;
  } 
  arg4 = *(sgpp::optimization::VectorFunctionGradient **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::VectorFunctionGradient const & reference is null");
    return 0;
  } 
  arg5 = *(sgpp::optimization::VectorFunction **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::VectorFunction const & reference is null");
    return 0;
  } 
  arg6 = *(sgpp::optimization::VectorFunctionGradient **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::VectorFunctionGradient const & reference is null");
    return 0;
  } 
  arg7 = (size_t)jarg7; 
  arg8 = (double)jarg8; 
  arg9 = (double)jarg9; 
  arg10 = (double)jarg10; 
  arg11 = (double)jarg11; 
  {
    try {
      result = (sgpp::optimization::optimizer::SquaredPenalty *)new sgpp::optimization::optimizer::SquaredPenalty((sgpp::optimization::ScalarFunction const &)*arg1,(sgpp::optimization::ScalarFunctionGradient const &)*arg2,(sgpp::optimization::VectorFunction const &)*arg3,(sgpp::optimization::VectorFunctionGradient const &)*arg4,(sgpp::optimization::VectorFunction const &)*arg5,(sgpp::optimization::VectorFunctionGradient const &)*arg6,arg7,arg8,arg9,arg10,arg11);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::SquaredPenalty **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptSquaredPenalty_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7, jdouble jarg8, jdouble jarg9, jdouble jarg10) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::optimization::ScalarFunctionGradient *arg2 = 0 ;
  sgpp::optimization::VectorFunction *arg3 = 0 ;
  sgpp::optimization::VectorFunctionGradient *arg4 = 0 ;
  sgpp::optimization::VectorFunction *arg5 = 0 ;
  sgpp::optimization::VectorFunctionGradient *arg6 = 0 ;
  size_t arg7 ;
  double arg8 ;
  double arg9 ;
  double arg10 ;
  sgpp::optimization::optimizer::SquaredPenalty *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::optimization::ScalarFunctionGradient **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunctionGradient const & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::optimization::VectorFunction **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::VectorFunction const & reference is null");
    return 0;
  } 
  arg4 = *(sgpp::optimization::VectorFunctionGradient **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::VectorFunctionGradient const & reference is null");
    return 0;
  } 
  arg5 = *(sgpp::optimization::VectorFunction **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::VectorFunction const & reference is null");
    return 0;
  } 
  arg6 = *(sgpp::optimization::VectorFunctionGradient **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::VectorFunctionGradient const & reference is null");
    return 0;
  } 
  arg7 = (size_t)jarg7; 
  arg8 = (double)jarg8; 
  arg9 = (double)jarg9; 
  arg10 = (double)jarg10; 
  {
    try {
      result = (sgpp::optimization::optimizer::SquaredPenalty *)new sgpp::optimization::optimizer::SquaredPenalty((sgpp::optimization::ScalarFunction const &)*arg1,(sgpp::optimization::ScalarFunctionGradient const &)*arg2,(sgpp::optimization::VectorFunction const &)*arg3,(sgpp::optimization::VectorFunctionGradient const &)*arg4,(sgpp::optimization::VectorFunction const &)*arg5,(sgpp::optimization::VectorFunctionGradient const &)*arg6,arg7,arg8,arg9,arg10);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::SquaredPenalty **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptSquaredPenalty_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7, jdouble jarg8, jdouble jarg9) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::optimization::ScalarFunctionGradient *arg2 = 0 ;
  sgpp::optimization::VectorFunction *arg3 = 0 ;
  sgpp::optimization::VectorFunctionGradient *arg4 = 0 ;
  sgpp::optimization::VectorFunction *arg5 = 0 ;
  sgpp::optimization::VectorFunctionGradient *arg6 = 0 ;
  size_t arg7 ;
  double arg8 ;
  double arg9 ;
  sgpp::optimization::optimizer::SquaredPenalty *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::optimization::ScalarFunctionGradient **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunctionGradient const & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::optimization::VectorFunction **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::VectorFunction const & reference is null");
    return 0;
  } 
  arg4 = *(sgpp::optimization::VectorFunctionGradient **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::VectorFunctionGradient const & reference is null");
    return 0;
  } 
  arg5 = *(sgpp::optimization::VectorFunction **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::VectorFunction const & reference is null");
    return 0;
  } 
  arg6 = *(sgpp::optimization::VectorFunctionGradient **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::VectorFunctionGradient const & reference is null");
    return 0;
  } 
  arg7 = (size_t)jarg7; 
  arg8 = (double)jarg8; 
  arg9 = (double)jarg9; 
  {
    try {
      result = (sgpp::optimization::optimizer::SquaredPenalty *)new sgpp::optimization::optimizer::SquaredPenalty((sgpp::optimization::ScalarFunction const &)*arg1,(sgpp::optimization::ScalarFunctionGradient const &)*arg2,(sgpp::optimization::VectorFunction const &)*arg3,(sgpp::optimization::VectorFunctionGradient const &)*arg4,(sgpp::optimization::VectorFunction const &)*arg5,(sgpp::optimization::VectorFunctionGradient const &)*arg6,arg7,arg8,arg9);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::SquaredPenalty **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptSquaredPenalty_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7, jdouble jarg8) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::optimization::ScalarFunctionGradient *arg2 = 0 ;
  sgpp::optimization::VectorFunction *arg3 = 0 ;
  sgpp::optimization::VectorFunctionGradient *arg4 = 0 ;
  sgpp::optimization::VectorFunction *arg5 = 0 ;
  sgpp::optimization::VectorFunctionGradient *arg6 = 0 ;
  size_t arg7 ;
  double arg8 ;
  sgpp::optimization::optimizer::SquaredPenalty *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::optimization::ScalarFunctionGradient **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunctionGradient const & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::optimization::VectorFunction **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::VectorFunction const & reference is null");
    return 0;
  } 
  arg4 = *(sgpp::optimization::VectorFunctionGradient **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::VectorFunctionGradient const & reference is null");
    return 0;
  } 
  arg5 = *(sgpp::optimization::VectorFunction **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::VectorFunction const & reference is null");
    return 0;
  } 
  arg6 = *(sgpp::optimization::VectorFunctionGradient **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::VectorFunctionGradient const & reference is null");
    return 0;
  } 
  arg7 = (size_t)jarg7; 
  arg8 = (double)jarg8; 
  {
    try {
      result = (sgpp::optimization::optimizer::SquaredPenalty *)new sgpp::optimization::optimizer::SquaredPenalty((sgpp::optimization::ScalarFunction const &)*arg1,(sgpp::optimization::ScalarFunctionGradient const &)*arg2,(sgpp::optimization::VectorFunction const &)*arg3,(sgpp::optimization::VectorFunctionGradient const &)*arg4,(sgpp::optimization::VectorFunction const &)*arg5,(sgpp::optimization::VectorFunctionGradient const &)*arg6,arg7,arg8);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::SquaredPenalty **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptSquaredPenalty_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::optimization::ScalarFunctionGradient *arg2 = 0 ;
  sgpp::optimization::VectorFunction *arg3 = 0 ;
  sgpp::optimization::VectorFunctionGradient *arg4 = 0 ;
  sgpp::optimization::VectorFunction *arg5 = 0 ;
  sgpp::optimization::VectorFunctionGradient *arg6 = 0 ;
  size_t arg7 ;
  sgpp::optimization::optimizer::SquaredPenalty *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::optimization::ScalarFunctionGradient **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunctionGradient const & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::optimization::VectorFunction **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::VectorFunction const & reference is null");
    return 0;
  } 
  arg4 = *(sgpp::optimization::VectorFunctionGradient **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::VectorFunctionGradient const & reference is null");
    return 0;
  } 
  arg5 = *(sgpp::optimization::VectorFunction **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::VectorFunction const & reference is null");
    return 0;
  } 
  arg6 = *(sgpp::optimization::VectorFunctionGradient **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::VectorFunctionGradient const & reference is null");
    return 0;
  } 
  arg7 = (size_t)jarg7; 
  {
    try {
      result = (sgpp::optimization::optimizer::SquaredPenalty *)new sgpp::optimization::optimizer::SquaredPenalty((sgpp::optimization::ScalarFunction const &)*arg1,(sgpp::optimization::ScalarFunctionGradient const &)*arg2,(sgpp::optimization::VectorFunction const &)*arg3,(sgpp::optimization::VectorFunctionGradient const &)*arg4,(sgpp::optimization::VectorFunction const &)*arg5,(sgpp::optimization::VectorFunctionGradient const &)*arg6,arg7);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::SquaredPenalty **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptSquaredPenalty_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_) {
  jlong jresult = 0 ;
  sgpp::optimization::ScalarFunction *arg1 = 0 ;
  sgpp::optimization::ScalarFunctionGradient *arg2 = 0 ;
  sgpp::optimization::VectorFunction *arg3 = 0 ;
  sgpp::optimization::VectorFunctionGradient *arg4 = 0 ;
  sgpp::optimization::VectorFunction *arg5 = 0 ;
  sgpp::optimization::VectorFunctionGradient *arg6 = 0 ;
  sgpp::optimization::optimizer::SquaredPenalty *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(sgpp::optimization::ScalarFunction **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunction const & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::optimization::ScalarFunctionGradient **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::ScalarFunctionGradient const & reference is null");
    return 0;
  } 
  arg3 = *(sgpp::optimization::VectorFunction **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::VectorFunction const & reference is null");
    return 0;
  } 
  arg4 = *(sgpp::optimization::VectorFunctionGradient **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::VectorFunctionGradient const & reference is null");
    return 0;
  } 
  arg5 = *(sgpp::optimization::VectorFunction **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::VectorFunction const & reference is null");
    return 0;
  } 
  arg6 = *(sgpp::optimization::VectorFunctionGradient **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::VectorFunctionGradient const & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::optimization::optimizer::SquaredPenalty *)new sgpp::optimization::optimizer::SquaredPenalty((sgpp::optimization::ScalarFunction const &)*arg1,(sgpp::optimization::ScalarFunctionGradient const &)*arg2,(sgpp::optimization::VectorFunction const &)*arg3,(sgpp::optimization::VectorFunctionGradient const &)*arg4,(sgpp::optimization::VectorFunction const &)*arg5,(sgpp::optimization::VectorFunctionGradient const &)*arg6);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::SquaredPenalty **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptSquaredPenalty_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::optimizer::SquaredPenalty *arg1 = 0 ;
  sgpp::optimization::optimizer::SquaredPenalty *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::SquaredPenalty **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::optimizer::SquaredPenalty const & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::optimization::optimizer::SquaredPenalty *)new sgpp::optimization::optimizer::SquaredPenalty((sgpp::optimization::optimizer::SquaredPenalty const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::optimizer::SquaredPenalty **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptSquaredPenalty(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::optimizer::SquaredPenalty *arg1 = (sgpp::optimization::optimizer::SquaredPenalty *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::optimizer::SquaredPenalty **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptSquaredPenalty_1optimize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::optimization::optimizer::SquaredPenalty *arg1 = (sgpp::optimization::optimizer::SquaredPenalty *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::SquaredPenalty **)&jarg1; 
  {
    try {
      (arg1)->optimize();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptSquaredPenalty_1getObjectiveGradient(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::optimizer::SquaredPenalty *arg1 = (sgpp::optimization::optimizer::SquaredPenalty *) 0 ;
  sgpp::optimization::ScalarFunctionGradient *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::SquaredPenalty **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::ScalarFunctionGradient *) &((sgpp::optimization::optimizer::SquaredPenalty const *)arg1)->getObjectiveGradient();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::ScalarFunctionGradient **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptSquaredPenalty_1getInequalityConstraintGradient(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::optimizer::SquaredPenalty *arg1 = (sgpp::optimization::optimizer::SquaredPenalty *) 0 ;
  sgpp::optimization::VectorFunctionGradient *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::SquaredPenalty **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::VectorFunctionGradient *) &((sgpp::optimization::optimizer::SquaredPenalty const *)arg1)->getInequalityConstraintGradient();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::VectorFunctionGradient **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptSquaredPenalty_1getEqualityConstraintGradient(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::optimizer::SquaredPenalty *arg1 = (sgpp::optimization::optimizer::SquaredPenalty *) 0 ;
  sgpp::optimization::VectorFunctionGradient *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::SquaredPenalty **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::VectorFunctionGradient *) &((sgpp::optimization::optimizer::SquaredPenalty const *)arg1)->getEqualityConstraintGradient();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::VectorFunctionGradient **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptSquaredPenalty_1getXTolerance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::optimization::optimizer::SquaredPenalty *arg1 = (sgpp::optimization::optimizer::SquaredPenalty *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::SquaredPenalty **)&jarg1; 
  {
    try {
      result = (double)((sgpp::optimization::optimizer::SquaredPenalty const *)arg1)->getXTolerance();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptSquaredPenalty_1setXTolerance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::optimization::optimizer::SquaredPenalty *arg1 = (sgpp::optimization::optimizer::SquaredPenalty *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::SquaredPenalty **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setXTolerance(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptSquaredPenalty_1getConstraintTolerance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::optimization::optimizer::SquaredPenalty *arg1 = (sgpp::optimization::optimizer::SquaredPenalty *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::SquaredPenalty **)&jarg1; 
  {
    try {
      result = (double)((sgpp::optimization::optimizer::SquaredPenalty const *)arg1)->getConstraintTolerance();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptSquaredPenalty_1setConstraintTolerance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::optimization::optimizer::SquaredPenalty *arg1 = (sgpp::optimization::optimizer::SquaredPenalty *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::SquaredPenalty **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setConstraintTolerance(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptSquaredPenalty_1getPenaltyStartValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::optimization::optimizer::SquaredPenalty *arg1 = (sgpp::optimization::optimizer::SquaredPenalty *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::SquaredPenalty **)&jarg1; 
  {
    try {
      result = (double)((sgpp::optimization::optimizer::SquaredPenalty const *)arg1)->getPenaltyStartValue();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptSquaredPenalty_1setPenaltyStartValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::optimization::optimizer::SquaredPenalty *arg1 = (sgpp::optimization::optimizer::SquaredPenalty *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::SquaredPenalty **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setPenaltyStartValue(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptSquaredPenalty_1getPenaltyIncreaseFactor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::optimization::optimizer::SquaredPenalty *arg1 = (sgpp::optimization::optimizer::SquaredPenalty *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::SquaredPenalty **)&jarg1; 
  {
    try {
      result = (double)((sgpp::optimization::optimizer::SquaredPenalty const *)arg1)->getPenaltyIncreaseFactor();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptSquaredPenalty_1setPenaltyIncreaseFactor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::optimization::optimizer::SquaredPenalty *arg1 = (sgpp::optimization::optimizer::SquaredPenalty *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::SquaredPenalty **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setPenaltyIncreaseFactor(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptSquaredPenalty_1getHistoryOfInnerIterationPoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::optimizer::SquaredPenalty *arg1 = (sgpp::optimization::optimizer::SquaredPenalty *) 0 ;
  sgpp::base::DataMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::SquaredPenalty **)&jarg1; 
  {
    try {
      result = (sgpp::base::DataMatrix *) &((sgpp::optimization::optimizer::SquaredPenalty const *)arg1)->getHistoryOfInnerIterationPoints();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::DataMatrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptSquaredPenalty_1getHistoryOfInnerIterationNumbers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::optimizer::SquaredPenalty *arg1 = (sgpp::optimization::optimizer::SquaredPenalty *) 0 ;
  std::vector< size_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::SquaredPenalty **)&jarg1; 
  {
    try {
      result = (std::vector< size_t > *) &((sgpp::optimization::optimizer::SquaredPenalty const *)arg1)->getHistoryOfInnerIterationNumbers();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(std::vector< size_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptSquaredPenalty_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::optimizer::SquaredPenalty *arg1 = (sgpp::optimization::optimizer::SquaredPenalty *) 0 ;
  std::unique_ptr< sgpp::optimization::optimizer::UnconstrainedOptimizer > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::optimizer::SquaredPenalty **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::optimizer::UnconstrainedOptimizer > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::optimizer::UnconstrainedOptimizer > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::optimizer::SquaredPenalty const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptTestScalarFunction(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::TestScalarFunction *arg1 = (sgpp::optimization::test_problems::TestScalarFunction *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::TestScalarFunction **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptTestScalarFunction_1eval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::test_problems::TestScalarFunction *arg1 = (sgpp::optimization::test_problems::TestScalarFunction *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::TestScalarFunction **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->eval((sgpp::base::DataVector const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptTestScalarFunction_1evalUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::test_problems::TestScalarFunction *arg1 = (sgpp::optimization::test_problems::TestScalarFunction *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::TestScalarFunction **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->evalUndisplaced((sgpp::base::DataVector const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptTestScalarFunction_1getDisplacement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::TestScalarFunction *arg1 = (sgpp::optimization::test_problems::TestScalarFunction *) 0 ;
  sgpp::base::DataVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::TestScalarFunction **)&jarg1; 
  {
    try {
      result = (sgpp::base::DataVector *) &((sgpp::optimization::test_problems::TestScalarFunction const *)arg1)->getDisplacement();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::DataVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptTestScalarFunction_1setDisplacement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::optimization::test_problems::TestScalarFunction *arg1 = (sgpp::optimization::test_problems::TestScalarFunction *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::TestScalarFunction **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setDisplacement((sgpp::base::DataVector const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptTestVectorFunction(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::TestVectorFunction *arg1 = (sgpp::optimization::test_problems::TestVectorFunction *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::TestVectorFunction **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptTestVectorFunction_1eval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::optimization::test_problems::TestVectorFunction *arg1 = (sgpp::optimization::test_problems::TestVectorFunction *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::optimization::test_problems::TestVectorFunction **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->eval((sgpp::base::DataVector const &)*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptTestVectorFunction_1evalUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::optimization::test_problems::TestVectorFunction *arg1 = (sgpp::optimization::test_problems::TestVectorFunction *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::optimization::test_problems::TestVectorFunction **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->evalUndisplaced((sgpp::base::DataVector const &)*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptTestVectorFunction_1getDisplacement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::TestVectorFunction *arg1 = (sgpp::optimization::test_problems::TestVectorFunction *) 0 ;
  sgpp::base::DataVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::TestVectorFunction **)&jarg1; 
  {
    try {
      result = (sgpp::base::DataVector *) &((sgpp::optimization::test_problems::TestVectorFunction const *)arg1)->getDisplacement();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::DataVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptTestVectorFunction_1setDisplacement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::optimization::test_problems::TestVectorFunction *arg1 = (sgpp::optimization::test_problems::TestVectorFunction *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::TestVectorFunction **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setDisplacement((sgpp::base::DataVector const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptUnconstrainedTestProblem_1DEFAULT_1STANDARD_1DEVIATION_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)sgpp::optimization::test_problems::UnconstrainedTestProblem::DEFAULT_STANDARD_DEVIATION;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptUnconstrainedTestProblem(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::UnconstrainedTestProblem *arg1 = (sgpp::optimization::test_problems::UnconstrainedTestProblem *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::UnconstrainedTestProblem **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptUnconstrainedTestProblem_1getObjectiveFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::UnconstrainedTestProblem *arg1 = (sgpp::optimization::test_problems::UnconstrainedTestProblem *) 0 ;
  sgpp::optimization::test_problems::TestScalarFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::UnconstrainedTestProblem **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::TestScalarFunction *) &(arg1)->getObjectiveFunction();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::TestScalarFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptUnconstrainedTestProblem_1getOptimalPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::test_problems::UnconstrainedTestProblem *arg1 = (sgpp::optimization::test_problems::UnconstrainedTestProblem *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::UnconstrainedTestProblem **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->getOptimalPoint(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptUnconstrainedTestProblem_1getOptimalPointUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::test_problems::UnconstrainedTestProblem *arg1 = (sgpp::optimization::test_problems::UnconstrainedTestProblem *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::UnconstrainedTestProblem **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->getOptimalPointUndisplaced(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptUnconstrainedTestProblem_1generateDisplacement_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::optimization::test_problems::UnconstrainedTestProblem *arg1 = (sgpp::optimization::test_problems::UnconstrainedTestProblem *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::UnconstrainedTestProblem **)&jarg1; 
  {
    try {
      (arg1)->generateDisplacement();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptUnconstrainedTestProblem_1generateDisplacement_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::optimization::test_problems::UnconstrainedTestProblem *arg1 = (sgpp::optimization::test_problems::UnconstrainedTestProblem *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::UnconstrainedTestProblem **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->generateDisplacement(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptUnconstrainedTestProblem_1getDisplacement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::UnconstrainedTestProblem *arg1 = (sgpp::optimization::test_problems::UnconstrainedTestProblem *) 0 ;
  sgpp::base::DataVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::UnconstrainedTestProblem **)&jarg1; 
  {
    try {
      result = (sgpp::base::DataVector *) &((sgpp::optimization::test_problems::UnconstrainedTestProblem const *)arg1)->getDisplacement();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::DataVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptUnconstrainedTestProblem_1setDisplacement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::optimization::test_problems::UnconstrainedTestProblem *arg1 = (sgpp::optimization::test_problems::UnconstrainedTestProblem *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::UnconstrainedTestProblem **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setDisplacement((sgpp::base::DataVector const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1AbsoluteValueObjective(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  sgpp::optimization::test_problems::AbsoluteValueObjective *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::AbsoluteValueObjective *)new sgpp::optimization::test_problems::AbsoluteValueObjective(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::AbsoluteValueObjective **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1AbsoluteValueObjective(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::AbsoluteValueObjective *arg1 = (sgpp::optimization::test_problems::AbsoluteValueObjective *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::AbsoluteValueObjective **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_AbsoluteValueObjective_1evalUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::test_problems::AbsoluteValueObjective *arg1 = (sgpp::optimization::test_problems::AbsoluteValueObjective *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::AbsoluteValueObjective **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->evalUndisplaced((sgpp::base::DataVector const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_AbsoluteValueObjective_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::test_problems::AbsoluteValueObjective *arg1 = (sgpp::optimization::test_problems::AbsoluteValueObjective *) 0 ;
  std::unique_ptr< sgpp::optimization::ScalarFunction > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::AbsoluteValueObjective **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::ScalarFunction > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::ScalarFunction > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::test_problems::AbsoluteValueObjective const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptAbsoluteValueObjective(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  sgpp::optimization::test_problems::AbsoluteValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::AbsoluteValue *)new sgpp::optimization::test_problems::AbsoluteValue(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::AbsoluteValue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptAbsoluteValueObjective(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::AbsoluteValue *arg1 = (sgpp::optimization::test_problems::AbsoluteValue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::AbsoluteValue **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptAbsoluteValueObjective_1getObjectiveFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::AbsoluteValue *arg1 = (sgpp::optimization::test_problems::AbsoluteValue *) 0 ;
  sgpp::optimization::test_problems::TestScalarFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::AbsoluteValue **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::TestScalarFunction *) &(arg1)->getObjectiveFunction();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::TestScalarFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptAbsoluteValueObjective_1getOptimalPointUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::test_problems::AbsoluteValue *arg1 = (sgpp::optimization::test_problems::AbsoluteValue *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::AbsoluteValue **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->getOptimalPointUndisplaced(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptAckleyObjective(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  sgpp::optimization::test_problems::AckleyObjective *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::AckleyObjective *)new sgpp::optimization::test_problems::AckleyObjective(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::AckleyObjective **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptAckleyObjective(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::AckleyObjective *arg1 = (sgpp::optimization::test_problems::AckleyObjective *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::AckleyObjective **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptAckleyObjective_1evalUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::test_problems::AckleyObjective *arg1 = (sgpp::optimization::test_problems::AckleyObjective *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::AckleyObjective **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->evalUndisplaced((sgpp::base::DataVector const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptAckleyObjective_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::test_problems::AckleyObjective *arg1 = (sgpp::optimization::test_problems::AckleyObjective *) 0 ;
  std::unique_ptr< sgpp::optimization::ScalarFunction > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::AckleyObjective **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::ScalarFunction > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::ScalarFunction > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::test_problems::AckleyObjective const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptAckley(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  sgpp::optimization::test_problems::Ackley *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::Ackley *)new sgpp::optimization::test_problems::Ackley(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::Ackley **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptAckley(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::Ackley *arg1 = (sgpp::optimization::test_problems::Ackley *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::Ackley **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptAckley_1getObjectiveFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::Ackley *arg1 = (sgpp::optimization::test_problems::Ackley *) 0 ;
  sgpp::optimization::test_problems::TestScalarFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::Ackley **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::TestScalarFunction *) &(arg1)->getObjectiveFunction();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::TestScalarFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptAckley_1getOptimalPointUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::test_problems::Ackley *arg1 = (sgpp::optimization::test_problems::Ackley *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::Ackley **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->getOptimalPointUndisplaced(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptBealeObjective(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::BealeObjective *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::test_problems::BealeObjective *)new sgpp::optimization::test_problems::BealeObjective();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::BealeObjective **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptBealeObjective(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::BealeObjective *arg1 = (sgpp::optimization::test_problems::BealeObjective *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::BealeObjective **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptBealeObjective_1evalUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::test_problems::BealeObjective *arg1 = (sgpp::optimization::test_problems::BealeObjective *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::BealeObjective **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->evalUndisplaced((sgpp::base::DataVector const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptBealeObjective_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::test_problems::BealeObjective *arg1 = (sgpp::optimization::test_problems::BealeObjective *) 0 ;
  std::unique_ptr< sgpp::optimization::ScalarFunction > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::BealeObjective **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::ScalarFunction > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::ScalarFunction > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::test_problems::BealeObjective const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptBeale(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::Beale *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::test_problems::Beale *)new sgpp::optimization::test_problems::Beale();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::Beale **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptBeale(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::Beale *arg1 = (sgpp::optimization::test_problems::Beale *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::Beale **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptBeale_1getObjectiveFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::Beale *arg1 = (sgpp::optimization::test_problems::Beale *) 0 ;
  sgpp::optimization::test_problems::TestScalarFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::Beale **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::TestScalarFunction *) &(arg1)->getObjectiveFunction();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::TestScalarFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptBeale_1getOptimalPointUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::test_problems::Beale *arg1 = (sgpp::optimization::test_problems::Beale *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::Beale **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->getOptimalPointUndisplaced(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptBraninObjective(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::BraninObjective *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::test_problems::BraninObjective *)new sgpp::optimization::test_problems::BraninObjective();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::BraninObjective **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptBraninObjective(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::BraninObjective *arg1 = (sgpp::optimization::test_problems::BraninObjective *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::BraninObjective **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptBraninObjective_1evalUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::test_problems::BraninObjective *arg1 = (sgpp::optimization::test_problems::BraninObjective *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::BraninObjective **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->evalUndisplaced((sgpp::base::DataVector const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptBraninObjective_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::test_problems::BraninObjective *arg1 = (sgpp::optimization::test_problems::BraninObjective *) 0 ;
  std::unique_ptr< sgpp::optimization::ScalarFunction > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::BraninObjective **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::ScalarFunction > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::ScalarFunction > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::test_problems::BraninObjective const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptBranin(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::Branin *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::test_problems::Branin *)new sgpp::optimization::test_problems::Branin();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::Branin **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptBranin(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::Branin *arg1 = (sgpp::optimization::test_problems::Branin *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::Branin **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptBranin_1getObjectiveFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::Branin *arg1 = (sgpp::optimization::test_problems::Branin *) 0 ;
  sgpp::optimization::test_problems::TestScalarFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::Branin **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::TestScalarFunction *) &(arg1)->getObjectiveFunction();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::TestScalarFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptBranin_1getOptimalPointUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::test_problems::Branin *arg1 = (sgpp::optimization::test_problems::Branin *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::Branin **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->getOptimalPointUndisplaced(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptBubbleWrapObjective(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  sgpp::optimization::test_problems::BubbleWrapObjective *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::BubbleWrapObjective *)new sgpp::optimization::test_problems::BubbleWrapObjective(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::BubbleWrapObjective **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptBubbleWrapObjective(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::BubbleWrapObjective *arg1 = (sgpp::optimization::test_problems::BubbleWrapObjective *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::BubbleWrapObjective **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptBubbleWrapObjective_1evalUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::test_problems::BubbleWrapObjective *arg1 = (sgpp::optimization::test_problems::BubbleWrapObjective *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::BubbleWrapObjective **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->evalUndisplaced((sgpp::base::DataVector const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptBubbleWrapObjective_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::test_problems::BubbleWrapObjective *arg1 = (sgpp::optimization::test_problems::BubbleWrapObjective *) 0 ;
  std::unique_ptr< sgpp::optimization::ScalarFunction > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::BubbleWrapObjective **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::ScalarFunction > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::ScalarFunction > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::test_problems::BubbleWrapObjective const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptBubbleWrap(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  sgpp::optimization::test_problems::BubbleWrap *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::BubbleWrap *)new sgpp::optimization::test_problems::BubbleWrap(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::BubbleWrap **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptBubbleWrap(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::BubbleWrap *arg1 = (sgpp::optimization::test_problems::BubbleWrap *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::BubbleWrap **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptBubbleWrap_1getObjectiveFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::BubbleWrap *arg1 = (sgpp::optimization::test_problems::BubbleWrap *) 0 ;
  sgpp::optimization::test_problems::TestScalarFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::BubbleWrap **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::TestScalarFunction *) &(arg1)->getObjectiveFunction();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::TestScalarFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptBubbleWrap_1getOptimalPointUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::test_problems::BubbleWrap *arg1 = (sgpp::optimization::test_problems::BubbleWrap *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::BubbleWrap **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->getOptimalPointUndisplaced(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptEasomYangObjective(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  sgpp::optimization::test_problems::EasomYangObjective *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::EasomYangObjective *)new sgpp::optimization::test_problems::EasomYangObjective(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::EasomYangObjective **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptEasomYangObjective(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::EasomYangObjective *arg1 = (sgpp::optimization::test_problems::EasomYangObjective *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::EasomYangObjective **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptEasomYangObjective_1evalUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::test_problems::EasomYangObjective *arg1 = (sgpp::optimization::test_problems::EasomYangObjective *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::EasomYangObjective **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->evalUndisplaced((sgpp::base::DataVector const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptEasomYangObjective_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::test_problems::EasomYangObjective *arg1 = (sgpp::optimization::test_problems::EasomYangObjective *) 0 ;
  std::unique_ptr< sgpp::optimization::ScalarFunction > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::EasomYangObjective **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::ScalarFunction > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::ScalarFunction > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::test_problems::EasomYangObjective const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptEasomYang(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  sgpp::optimization::test_problems::EasomYang *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::EasomYang *)new sgpp::optimization::test_problems::EasomYang(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::EasomYang **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptEasomYang(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::EasomYang *arg1 = (sgpp::optimization::test_problems::EasomYang *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::EasomYang **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptEasomYang_1getObjectiveFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::EasomYang *arg1 = (sgpp::optimization::test_problems::EasomYang *) 0 ;
  sgpp::optimization::test_problems::TestScalarFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::EasomYang **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::TestScalarFunction *) &(arg1)->getObjectiveFunction();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::TestScalarFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptEasomYang_1getOptimalPointUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::test_problems::EasomYang *arg1 = (sgpp::optimization::test_problems::EasomYang *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::EasomYang **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->getOptimalPointUndisplaced(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptEggholderObjective(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::EggholderObjective *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::test_problems::EggholderObjective *)new sgpp::optimization::test_problems::EggholderObjective();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::EggholderObjective **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptEggholderObjective(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::EggholderObjective *arg1 = (sgpp::optimization::test_problems::EggholderObjective *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::EggholderObjective **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptEggholderObjective_1evalUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::test_problems::EggholderObjective *arg1 = (sgpp::optimization::test_problems::EggholderObjective *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::EggholderObjective **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->evalUndisplaced((sgpp::base::DataVector const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptEggholderObjective_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::test_problems::EggholderObjective *arg1 = (sgpp::optimization::test_problems::EggholderObjective *) 0 ;
  std::unique_ptr< sgpp::optimization::ScalarFunction > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::EggholderObjective **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::ScalarFunction > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::ScalarFunction > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::test_problems::EggholderObjective const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptEggholder(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::Eggholder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::test_problems::Eggholder *)new sgpp::optimization::test_problems::Eggholder();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::Eggholder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptEggholder(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::Eggholder *arg1 = (sgpp::optimization::test_problems::Eggholder *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::Eggholder **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptEggholder_1getObjectiveFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::Eggholder *arg1 = (sgpp::optimization::test_problems::Eggholder *) 0 ;
  sgpp::optimization::test_problems::TestScalarFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::Eggholder **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::TestScalarFunction *) &(arg1)->getObjectiveFunction();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::TestScalarFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptEggholder_1getOptimalPointUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::test_problems::Eggholder *arg1 = (sgpp::optimization::test_problems::Eggholder *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::Eggholder **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->getOptimalPointUndisplaced(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptGoldsteinPriceObjective(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::GoldsteinPriceObjective *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::test_problems::GoldsteinPriceObjective *)new sgpp::optimization::test_problems::GoldsteinPriceObjective();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::GoldsteinPriceObjective **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptGoldsteinPriceObjective(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::GoldsteinPriceObjective *arg1 = (sgpp::optimization::test_problems::GoldsteinPriceObjective *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::GoldsteinPriceObjective **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptGoldsteinPriceObjective_1evalUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::test_problems::GoldsteinPriceObjective *arg1 = (sgpp::optimization::test_problems::GoldsteinPriceObjective *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::GoldsteinPriceObjective **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->evalUndisplaced((sgpp::base::DataVector const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptGoldsteinPriceObjective_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::test_problems::GoldsteinPriceObjective *arg1 = (sgpp::optimization::test_problems::GoldsteinPriceObjective *) 0 ;
  std::unique_ptr< sgpp::optimization::ScalarFunction > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::GoldsteinPriceObjective **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::ScalarFunction > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::ScalarFunction > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::test_problems::GoldsteinPriceObjective const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptGoldsteinPrice(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::GoldsteinPrice *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::test_problems::GoldsteinPrice *)new sgpp::optimization::test_problems::GoldsteinPrice();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::GoldsteinPrice **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptGoldsteinPrice(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::GoldsteinPrice *arg1 = (sgpp::optimization::test_problems::GoldsteinPrice *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::GoldsteinPrice **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptGoldsteinPrice_1getObjectiveFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::GoldsteinPrice *arg1 = (sgpp::optimization::test_problems::GoldsteinPrice *) 0 ;
  sgpp::optimization::test_problems::TestScalarFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::GoldsteinPrice **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::TestScalarFunction *) &(arg1)->getObjectiveFunction();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::TestScalarFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptGoldsteinPrice_1getOptimalPointUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::test_problems::GoldsteinPrice *arg1 = (sgpp::optimization::test_problems::GoldsteinPrice *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::GoldsteinPrice **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->getOptimalPointUndisplaced(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptGriewankObjective(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  sgpp::optimization::test_problems::GriewankObjective *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::GriewankObjective *)new sgpp::optimization::test_problems::GriewankObjective(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::GriewankObjective **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptGriewankObjective(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::GriewankObjective *arg1 = (sgpp::optimization::test_problems::GriewankObjective *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::GriewankObjective **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptGriewankObjective_1evalUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::test_problems::GriewankObjective *arg1 = (sgpp::optimization::test_problems::GriewankObjective *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::GriewankObjective **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->evalUndisplaced((sgpp::base::DataVector const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptGriewankObjective_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::test_problems::GriewankObjective *arg1 = (sgpp::optimization::test_problems::GriewankObjective *) 0 ;
  std::unique_ptr< sgpp::optimization::ScalarFunction > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::GriewankObjective **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::ScalarFunction > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::ScalarFunction > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::test_problems::GriewankObjective const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptGriewank(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  sgpp::optimization::test_problems::Griewank *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::Griewank *)new sgpp::optimization::test_problems::Griewank(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::Griewank **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptGriewank(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::Griewank *arg1 = (sgpp::optimization::test_problems::Griewank *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::Griewank **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptGriewank_1getObjectiveFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::Griewank *arg1 = (sgpp::optimization::test_problems::Griewank *) 0 ;
  sgpp::optimization::test_problems::TestScalarFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::Griewank **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::TestScalarFunction *) &(arg1)->getObjectiveFunction();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::TestScalarFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptGriewank_1getOptimalPointUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::test_problems::Griewank *arg1 = (sgpp::optimization::test_problems::Griewank *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::Griewank **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->getOptimalPointUndisplaced(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptHartman3Objective(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::Hartman3Objective *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::test_problems::Hartman3Objective *)new sgpp::optimization::test_problems::Hartman3Objective();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::Hartman3Objective **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptHartman3Objective(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::Hartman3Objective *arg1 = (sgpp::optimization::test_problems::Hartman3Objective *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::Hartman3Objective **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptHartman3Objective_1evalUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::test_problems::Hartman3Objective *arg1 = (sgpp::optimization::test_problems::Hartman3Objective *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::Hartman3Objective **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->evalUndisplaced((sgpp::base::DataVector const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptHartman3Objective_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::test_problems::Hartman3Objective *arg1 = (sgpp::optimization::test_problems::Hartman3Objective *) 0 ;
  std::unique_ptr< sgpp::optimization::ScalarFunction > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::Hartman3Objective **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::ScalarFunction > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::ScalarFunction > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::test_problems::Hartman3Objective const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptHartman3(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::Hartman3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::test_problems::Hartman3 *)new sgpp::optimization::test_problems::Hartman3();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::Hartman3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptHartman3(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::Hartman3 *arg1 = (sgpp::optimization::test_problems::Hartman3 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::Hartman3 **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptHartman3_1getObjectiveFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::Hartman3 *arg1 = (sgpp::optimization::test_problems::Hartman3 *) 0 ;
  sgpp::optimization::test_problems::TestScalarFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::Hartman3 **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::TestScalarFunction *) &(arg1)->getObjectiveFunction();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::TestScalarFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptHartman3_1getOptimalPointUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::test_problems::Hartman3 *arg1 = (sgpp::optimization::test_problems::Hartman3 *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::Hartman3 **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->getOptimalPointUndisplaced(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptHartman6Objective(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::Hartman6Objective *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::test_problems::Hartman6Objective *)new sgpp::optimization::test_problems::Hartman6Objective();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::Hartman6Objective **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptHartman6Objective(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::Hartman6Objective *arg1 = (sgpp::optimization::test_problems::Hartman6Objective *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::Hartman6Objective **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptHartman6Objective_1evalUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::test_problems::Hartman6Objective *arg1 = (sgpp::optimization::test_problems::Hartman6Objective *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::Hartman6Objective **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->evalUndisplaced((sgpp::base::DataVector const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptHartman6Objective_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::test_problems::Hartman6Objective *arg1 = (sgpp::optimization::test_problems::Hartman6Objective *) 0 ;
  std::unique_ptr< sgpp::optimization::ScalarFunction > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::Hartman6Objective **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::ScalarFunction > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::ScalarFunction > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::test_problems::Hartman6Objective const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptHartman6(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::Hartman6 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::test_problems::Hartman6 *)new sgpp::optimization::test_problems::Hartman6();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::Hartman6 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptHartman6(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::Hartman6 *arg1 = (sgpp::optimization::test_problems::Hartman6 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::Hartman6 **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptHartman6_1getObjectiveFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::Hartman6 *arg1 = (sgpp::optimization::test_problems::Hartman6 *) 0 ;
  sgpp::optimization::test_problems::TestScalarFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::Hartman6 **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::TestScalarFunction *) &(arg1)->getObjectiveFunction();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::TestScalarFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptHartman6_1getOptimalPointUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::test_problems::Hartman6 *arg1 = (sgpp::optimization::test_problems::Hartman6 *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::Hartman6 **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->getOptimalPointUndisplaced(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptHimmelblauObjective(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::HimmelblauObjective *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::test_problems::HimmelblauObjective *)new sgpp::optimization::test_problems::HimmelblauObjective();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::HimmelblauObjective **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptHimmelblauObjective(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::HimmelblauObjective *arg1 = (sgpp::optimization::test_problems::HimmelblauObjective *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::HimmelblauObjective **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptHimmelblauObjective_1evalUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::test_problems::HimmelblauObjective *arg1 = (sgpp::optimization::test_problems::HimmelblauObjective *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::HimmelblauObjective **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->evalUndisplaced((sgpp::base::DataVector const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptHimmelblauObjective_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::test_problems::HimmelblauObjective *arg1 = (sgpp::optimization::test_problems::HimmelblauObjective *) 0 ;
  std::unique_ptr< sgpp::optimization::ScalarFunction > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::HimmelblauObjective **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::ScalarFunction > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::ScalarFunction > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::test_problems::HimmelblauObjective const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptHimmelblau(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::Himmelblau *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::test_problems::Himmelblau *)new sgpp::optimization::test_problems::Himmelblau();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::Himmelblau **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptHimmelblau(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::Himmelblau *arg1 = (sgpp::optimization::test_problems::Himmelblau *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::Himmelblau **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptHimmelblau_1getObjectiveFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::Himmelblau *arg1 = (sgpp::optimization::test_problems::Himmelblau *) 0 ;
  sgpp::optimization::test_problems::TestScalarFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::Himmelblau **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::TestScalarFunction *) &(arg1)->getObjectiveFunction();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::TestScalarFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptHimmelblau_1getOptimalPointUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::test_problems::Himmelblau *arg1 = (sgpp::optimization::test_problems::Himmelblau *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::Himmelblau **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->getOptimalPointUndisplaced(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptHoelderTableObjective(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::HoelderTableObjective *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::test_problems::HoelderTableObjective *)new sgpp::optimization::test_problems::HoelderTableObjective();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::HoelderTableObjective **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptHoelderTableObjective(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::HoelderTableObjective *arg1 = (sgpp::optimization::test_problems::HoelderTableObjective *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::HoelderTableObjective **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptHoelderTableObjective_1evalUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::test_problems::HoelderTableObjective *arg1 = (sgpp::optimization::test_problems::HoelderTableObjective *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::HoelderTableObjective **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->evalUndisplaced((sgpp::base::DataVector const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptHoelderTableObjective_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::test_problems::HoelderTableObjective *arg1 = (sgpp::optimization::test_problems::HoelderTableObjective *) 0 ;
  std::unique_ptr< sgpp::optimization::ScalarFunction > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::HoelderTableObjective **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::ScalarFunction > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::ScalarFunction > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::test_problems::HoelderTableObjective const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptHoelderTable(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::HoelderTable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::test_problems::HoelderTable *)new sgpp::optimization::test_problems::HoelderTable();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::HoelderTable **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptHoelderTable(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::HoelderTable *arg1 = (sgpp::optimization::test_problems::HoelderTable *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::HoelderTable **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptHoelderTable_1getObjectiveFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::HoelderTable *arg1 = (sgpp::optimization::test_problems::HoelderTable *) 0 ;
  sgpp::optimization::test_problems::TestScalarFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::HoelderTable **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::TestScalarFunction *) &(arg1)->getObjectiveFunction();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::TestScalarFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptHoelderTable_1getOptimalPointUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::test_problems::HoelderTable *arg1 = (sgpp::optimization::test_problems::HoelderTable *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::HoelderTable **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->getOptimalPointUndisplaced(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptIncreasingPowerObjective(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  sgpp::optimization::test_problems::IncreasingPowerObjective *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::IncreasingPowerObjective *)new sgpp::optimization::test_problems::IncreasingPowerObjective(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::IncreasingPowerObjective **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptIncreasingPowerObjective(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::IncreasingPowerObjective *arg1 = (sgpp::optimization::test_problems::IncreasingPowerObjective *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::IncreasingPowerObjective **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptIncreasingPowerObjective_1evalUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::test_problems::IncreasingPowerObjective *arg1 = (sgpp::optimization::test_problems::IncreasingPowerObjective *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::IncreasingPowerObjective **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->evalUndisplaced((sgpp::base::DataVector const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptIncreasingPowerObjective_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::test_problems::IncreasingPowerObjective *arg1 = (sgpp::optimization::test_problems::IncreasingPowerObjective *) 0 ;
  std::unique_ptr< sgpp::optimization::ScalarFunction > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::IncreasingPowerObjective **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::ScalarFunction > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::ScalarFunction > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::test_problems::IncreasingPowerObjective const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptIncreasingPower(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  sgpp::optimization::test_problems::IncreasingPower *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::IncreasingPower *)new sgpp::optimization::test_problems::IncreasingPower(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::IncreasingPower **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptIncreasingPower(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::IncreasingPower *arg1 = (sgpp::optimization::test_problems::IncreasingPower *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::IncreasingPower **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptIncreasingPower_1getObjectiveFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::IncreasingPower *arg1 = (sgpp::optimization::test_problems::IncreasingPower *) 0 ;
  sgpp::optimization::test_problems::TestScalarFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::IncreasingPower **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::TestScalarFunction *) &(arg1)->getObjectiveFunction();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::TestScalarFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptIncreasingPower_1getOptimalPointUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::test_problems::IncreasingPower *arg1 = (sgpp::optimization::test_problems::IncreasingPower *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::IncreasingPower **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->getOptimalPointUndisplaced(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptMichalewiczObjective(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::MichalewiczObjective *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::test_problems::MichalewiczObjective *)new sgpp::optimization::test_problems::MichalewiczObjective();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::MichalewiczObjective **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptMichalewiczObjective(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::MichalewiczObjective *arg1 = (sgpp::optimization::test_problems::MichalewiczObjective *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::MichalewiczObjective **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptMichalewiczObjective_1evalUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::test_problems::MichalewiczObjective *arg1 = (sgpp::optimization::test_problems::MichalewiczObjective *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::MichalewiczObjective **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->evalUndisplaced((sgpp::base::DataVector const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptMichalewiczObjective_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::test_problems::MichalewiczObjective *arg1 = (sgpp::optimization::test_problems::MichalewiczObjective *) 0 ;
  std::unique_ptr< sgpp::optimization::ScalarFunction > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::MichalewiczObjective **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::ScalarFunction > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::ScalarFunction > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::test_problems::MichalewiczObjective const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptMichalewicz(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::Michalewicz *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::test_problems::Michalewicz *)new sgpp::optimization::test_problems::Michalewicz();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::Michalewicz **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptMichalewicz(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::Michalewicz *arg1 = (sgpp::optimization::test_problems::Michalewicz *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::Michalewicz **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptMichalewicz_1getObjectiveFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::Michalewicz *arg1 = (sgpp::optimization::test_problems::Michalewicz *) 0 ;
  sgpp::optimization::test_problems::TestScalarFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::Michalewicz **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::TestScalarFunction *) &(arg1)->getObjectiveFunction();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::TestScalarFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptMichalewicz_1getOptimalPointUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::test_problems::Michalewicz *arg1 = (sgpp::optimization::test_problems::Michalewicz *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::Michalewicz **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->getOptimalPointUndisplaced(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptMladineoObjective(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::MladineoObjective *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::test_problems::MladineoObjective *)new sgpp::optimization::test_problems::MladineoObjective();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::MladineoObjective **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptMladineoObjective(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::MladineoObjective *arg1 = (sgpp::optimization::test_problems::MladineoObjective *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::MladineoObjective **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptMladineoObjective_1evalUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::test_problems::MladineoObjective *arg1 = (sgpp::optimization::test_problems::MladineoObjective *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::MladineoObjective **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->evalUndisplaced((sgpp::base::DataVector const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptMladineoObjective_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::test_problems::MladineoObjective *arg1 = (sgpp::optimization::test_problems::MladineoObjective *) 0 ;
  std::unique_ptr< sgpp::optimization::ScalarFunction > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::MladineoObjective **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::ScalarFunction > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::ScalarFunction > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::test_problems::MladineoObjective const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptMladineo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::Mladineo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::test_problems::Mladineo *)new sgpp::optimization::test_problems::Mladineo();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::Mladineo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptMladineo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::Mladineo *arg1 = (sgpp::optimization::test_problems::Mladineo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::Mladineo **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptMladineo_1getObjectiveFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::Mladineo *arg1 = (sgpp::optimization::test_problems::Mladineo *) 0 ;
  sgpp::optimization::test_problems::TestScalarFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::Mladineo **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::TestScalarFunction *) &(arg1)->getObjectiveFunction();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::TestScalarFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptMladineo_1getOptimalPointUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::test_problems::Mladineo *arg1 = (sgpp::optimization::test_problems::Mladineo *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::Mladineo **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->getOptimalPointUndisplaced(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptPermObjective(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  sgpp::optimization::test_problems::PermObjective *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::PermObjective *)new sgpp::optimization::test_problems::PermObjective(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::PermObjective **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptPermObjective(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::PermObjective *arg1 = (sgpp::optimization::test_problems::PermObjective *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::PermObjective **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptPermObjective_1evalUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::test_problems::PermObjective *arg1 = (sgpp::optimization::test_problems::PermObjective *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::PermObjective **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->evalUndisplaced((sgpp::base::DataVector const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptPermObjective_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::test_problems::PermObjective *arg1 = (sgpp::optimization::test_problems::PermObjective *) 0 ;
  std::unique_ptr< sgpp::optimization::ScalarFunction > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::PermObjective **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::ScalarFunction > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::ScalarFunction > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::test_problems::PermObjective const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptPerm(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  sgpp::optimization::test_problems::Perm *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::Perm *)new sgpp::optimization::test_problems::Perm(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::Perm **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptPerm(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::Perm *arg1 = (sgpp::optimization::test_problems::Perm *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::Perm **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptPerm_1getObjectiveFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::Perm *arg1 = (sgpp::optimization::test_problems::Perm *) 0 ;
  sgpp::optimization::test_problems::TestScalarFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::Perm **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::TestScalarFunction *) &(arg1)->getObjectiveFunction();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::TestScalarFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptPerm_1getOptimalPointUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::test_problems::Perm *arg1 = (sgpp::optimization::test_problems::Perm *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::Perm **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->getOptimalPointUndisplaced(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptRastriginObjective(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  sgpp::optimization::test_problems::RastriginObjective *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::RastriginObjective *)new sgpp::optimization::test_problems::RastriginObjective(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::RastriginObjective **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptRastriginObjective(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::RastriginObjective *arg1 = (sgpp::optimization::test_problems::RastriginObjective *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::RastriginObjective **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptRastriginObjective_1evalUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::test_problems::RastriginObjective *arg1 = (sgpp::optimization::test_problems::RastriginObjective *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::RastriginObjective **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->evalUndisplaced((sgpp::base::DataVector const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptRastriginObjective_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::test_problems::RastriginObjective *arg1 = (sgpp::optimization::test_problems::RastriginObjective *) 0 ;
  std::unique_ptr< sgpp::optimization::ScalarFunction > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::RastriginObjective **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::ScalarFunction > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::ScalarFunction > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::test_problems::RastriginObjective const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptRastrigin(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  sgpp::optimization::test_problems::Rastrigin *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::Rastrigin *)new sgpp::optimization::test_problems::Rastrigin(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::Rastrigin **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptRastrigin(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::Rastrigin *arg1 = (sgpp::optimization::test_problems::Rastrigin *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::Rastrigin **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptRastrigin_1getObjectiveFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::Rastrigin *arg1 = (sgpp::optimization::test_problems::Rastrigin *) 0 ;
  sgpp::optimization::test_problems::TestScalarFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::Rastrigin **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::TestScalarFunction *) &(arg1)->getObjectiveFunction();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::TestScalarFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptRastrigin_1getOptimalPointUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::test_problems::Rastrigin *arg1 = (sgpp::optimization::test_problems::Rastrigin *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::Rastrigin **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->getOptimalPointUndisplaced(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptRosenbrockObjective(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  sgpp::optimization::test_problems::RosenbrockObjective *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::RosenbrockObjective *)new sgpp::optimization::test_problems::RosenbrockObjective(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::RosenbrockObjective **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptRosenbrockObjective(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::RosenbrockObjective *arg1 = (sgpp::optimization::test_problems::RosenbrockObjective *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::RosenbrockObjective **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptRosenbrockObjective_1evalUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::test_problems::RosenbrockObjective *arg1 = (sgpp::optimization::test_problems::RosenbrockObjective *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::RosenbrockObjective **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->evalUndisplaced((sgpp::base::DataVector const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptRosenbrockObjective_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::test_problems::RosenbrockObjective *arg1 = (sgpp::optimization::test_problems::RosenbrockObjective *) 0 ;
  std::unique_ptr< sgpp::optimization::ScalarFunction > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::RosenbrockObjective **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::ScalarFunction > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::ScalarFunction > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::test_problems::RosenbrockObjective const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptRosenbrock(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  sgpp::optimization::test_problems::Rosenbrock *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::Rosenbrock *)new sgpp::optimization::test_problems::Rosenbrock(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::Rosenbrock **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptRosenbrock(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::Rosenbrock *arg1 = (sgpp::optimization::test_problems::Rosenbrock *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::Rosenbrock **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptRosenbrock_1getObjectiveFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::Rosenbrock *arg1 = (sgpp::optimization::test_problems::Rosenbrock *) 0 ;
  sgpp::optimization::test_problems::TestScalarFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::Rosenbrock **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::TestScalarFunction *) &(arg1)->getObjectiveFunction();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::TestScalarFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptRosenbrock_1getOptimalPointUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::test_problems::Rosenbrock *arg1 = (sgpp::optimization::test_problems::Rosenbrock *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::Rosenbrock **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->getOptimalPointUndisplaced(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptSHCBObjective(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::SHCBObjective *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::test_problems::SHCBObjective *)new sgpp::optimization::test_problems::SHCBObjective();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::SHCBObjective **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptSHCBObjective(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::SHCBObjective *arg1 = (sgpp::optimization::test_problems::SHCBObjective *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::SHCBObjective **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptSHCBObjective_1evalUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::test_problems::SHCBObjective *arg1 = (sgpp::optimization::test_problems::SHCBObjective *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::SHCBObjective **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->evalUndisplaced((sgpp::base::DataVector const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptSHCBObjective_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::test_problems::SHCBObjective *arg1 = (sgpp::optimization::test_problems::SHCBObjective *) 0 ;
  std::unique_ptr< sgpp::optimization::ScalarFunction > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::SHCBObjective **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::ScalarFunction > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::ScalarFunction > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::test_problems::SHCBObjective const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptSHCB(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::SHCB *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::test_problems::SHCB *)new sgpp::optimization::test_problems::SHCB();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::SHCB **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptSHCB(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::SHCB *arg1 = (sgpp::optimization::test_problems::SHCB *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::SHCB **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptSHCB_1getObjectiveFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::SHCB *arg1 = (sgpp::optimization::test_problems::SHCB *) 0 ;
  sgpp::optimization::test_problems::TestScalarFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::SHCB **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::TestScalarFunction *) &(arg1)->getObjectiveFunction();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::TestScalarFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptSHCB_1getOptimalPointUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::test_problems::SHCB *arg1 = (sgpp::optimization::test_problems::SHCB *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::SHCB **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->getOptimalPointUndisplaced(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptSchwefelObjective(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  sgpp::optimization::test_problems::SchwefelObjective *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::SchwefelObjective *)new sgpp::optimization::test_problems::SchwefelObjective(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::SchwefelObjective **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptSchwefelObjective(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::SchwefelObjective *arg1 = (sgpp::optimization::test_problems::SchwefelObjective *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::SchwefelObjective **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptSchwefelObjective_1evalUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::test_problems::SchwefelObjective *arg1 = (sgpp::optimization::test_problems::SchwefelObjective *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::SchwefelObjective **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->evalUndisplaced((sgpp::base::DataVector const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptSchwefelObjective_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::test_problems::SchwefelObjective *arg1 = (sgpp::optimization::test_problems::SchwefelObjective *) 0 ;
  std::unique_ptr< sgpp::optimization::ScalarFunction > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::SchwefelObjective **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::ScalarFunction > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::ScalarFunction > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::test_problems::SchwefelObjective const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptSchwefel(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  sgpp::optimization::test_problems::Schwefel *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::Schwefel *)new sgpp::optimization::test_problems::Schwefel(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::Schwefel **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptSchwefel(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::Schwefel *arg1 = (sgpp::optimization::test_problems::Schwefel *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::Schwefel **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptSchwefel_1getObjectiveFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::Schwefel *arg1 = (sgpp::optimization::test_problems::Schwefel *) 0 ;
  sgpp::optimization::test_problems::TestScalarFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::Schwefel **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::TestScalarFunction *) &(arg1)->getObjectiveFunction();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::TestScalarFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptSchwefel_1getOptimalPointUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::test_problems::Schwefel *arg1 = (sgpp::optimization::test_problems::Schwefel *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::Schwefel **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->getOptimalPointUndisplaced(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptSphereObjective(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  sgpp::optimization::test_problems::SphereObjective *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::SphereObjective *)new sgpp::optimization::test_problems::SphereObjective(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::SphereObjective **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptSphereObjective(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::SphereObjective *arg1 = (sgpp::optimization::test_problems::SphereObjective *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::SphereObjective **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptSphereObjective_1evalUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::test_problems::SphereObjective *arg1 = (sgpp::optimization::test_problems::SphereObjective *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::SphereObjective **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->evalUndisplaced((sgpp::base::DataVector const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptSphereObjective_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::test_problems::SphereObjective *arg1 = (sgpp::optimization::test_problems::SphereObjective *) 0 ;
  std::unique_ptr< sgpp::optimization::ScalarFunction > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::SphereObjective **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::ScalarFunction > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::ScalarFunction > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::test_problems::SphereObjective const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptSphere(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  sgpp::optimization::test_problems::Sphere *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::Sphere *)new sgpp::optimization::test_problems::Sphere(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::Sphere **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptSphere(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::Sphere *arg1 = (sgpp::optimization::test_problems::Sphere *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::Sphere **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptSphere_1getObjectiveFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::Sphere *arg1 = (sgpp::optimization::test_problems::Sphere *) 0 ;
  sgpp::optimization::test_problems::TestScalarFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::Sphere **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::TestScalarFunction *) &(arg1)->getObjectiveFunction();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::TestScalarFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptSphere_1getOptimalPointUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::test_problems::Sphere *arg1 = (sgpp::optimization::test_problems::Sphere *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::Sphere **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->getOptimalPointUndisplaced(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptTremblingParabolaObjective(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  sgpp::optimization::test_problems::TremblingParabolaObjective *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (sgpp::optimization::test_problems::TremblingParabolaObjective *)new sgpp::optimization::test_problems::TremblingParabolaObjective(arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::TremblingParabolaObjective **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptTremblingParabolaObjective(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::TremblingParabolaObjective *arg1 = (sgpp::optimization::test_problems::TremblingParabolaObjective *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::TremblingParabolaObjective **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptTremblingParabolaObjective_1evalUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::test_problems::TremblingParabolaObjective *arg1 = (sgpp::optimization::test_problems::TremblingParabolaObjective *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::TremblingParabolaObjective **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->evalUndisplaced((sgpp::base::DataVector const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptTremblingParabolaObjective_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::test_problems::TremblingParabolaObjective *arg1 = (sgpp::optimization::test_problems::TremblingParabolaObjective *) 0 ;
  std::unique_ptr< sgpp::optimization::ScalarFunction > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::TremblingParabolaObjective **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::ScalarFunction > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::ScalarFunction > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::test_problems::TremblingParabolaObjective const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptTremblingParabola(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  sgpp::optimization::test_problems::TremblingParabola *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (sgpp::optimization::test_problems::TremblingParabola *)new sgpp::optimization::test_problems::TremblingParabola(arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::TremblingParabola **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptTremblingParabola(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::TremblingParabola *arg1 = (sgpp::optimization::test_problems::TremblingParabola *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::TremblingParabola **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptTremblingParabola_1getObjectiveFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::TremblingParabola *arg1 = (sgpp::optimization::test_problems::TremblingParabola *) 0 ;
  sgpp::optimization::test_problems::TestScalarFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::TremblingParabola **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::TestScalarFunction *) &(arg1)->getObjectiveFunction();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::TestScalarFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptTremblingParabola_1getOptimalPointUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::test_problems::TremblingParabola *arg1 = (sgpp::optimization::test_problems::TremblingParabola *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::TremblingParabola **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->getOptimalPointUndisplaced(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptConstrainedTestProblem_1DEFAULT_1STANDARD_1DEVIATION_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)sgpp::optimization::test_problems::ConstrainedTestProblem::DEFAULT_STANDARD_DEVIATION;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptConstrainedTestProblem(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::ConstrainedTestProblem *arg1 = (sgpp::optimization::test_problems::ConstrainedTestProblem *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::ConstrainedTestProblem **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptConstrainedTestProblem_1getObjectiveFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::ConstrainedTestProblem *arg1 = (sgpp::optimization::test_problems::ConstrainedTestProblem *) 0 ;
  sgpp::optimization::test_problems::TestScalarFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::ConstrainedTestProblem **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::TestScalarFunction *) &(arg1)->getObjectiveFunction();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::TestScalarFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptConstrainedTestProblem_1getInequalityConstraintFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::ConstrainedTestProblem *arg1 = (sgpp::optimization::test_problems::ConstrainedTestProblem *) 0 ;
  sgpp::optimization::test_problems::TestVectorFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::ConstrainedTestProblem **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::TestVectorFunction *) &(arg1)->getInequalityConstraintFunction();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::TestVectorFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptConstrainedTestProblem_1getEqualityConstraintFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::ConstrainedTestProblem *arg1 = (sgpp::optimization::test_problems::ConstrainedTestProblem *) 0 ;
  sgpp::optimization::test_problems::TestVectorFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::ConstrainedTestProblem **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::TestVectorFunction *) &(arg1)->getEqualityConstraintFunction();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::TestVectorFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptConstrainedTestProblem_1getOptimalPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::test_problems::ConstrainedTestProblem *arg1 = (sgpp::optimization::test_problems::ConstrainedTestProblem *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::ConstrainedTestProblem **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->getOptimalPoint(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptConstrainedTestProblem_1getOptimalPointUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::test_problems::ConstrainedTestProblem *arg1 = (sgpp::optimization::test_problems::ConstrainedTestProblem *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::ConstrainedTestProblem **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->getOptimalPointUndisplaced(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptConstrainedTestProblem_1generateDisplacement_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::optimization::test_problems::ConstrainedTestProblem *arg1 = (sgpp::optimization::test_problems::ConstrainedTestProblem *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::ConstrainedTestProblem **)&jarg1; 
  {
    try {
      (arg1)->generateDisplacement();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptConstrainedTestProblem_1generateDisplacement_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sgpp::optimization::test_problems::ConstrainedTestProblem *arg1 = (sgpp::optimization::test_problems::ConstrainedTestProblem *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::ConstrainedTestProblem **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->generateDisplacement(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptConstrainedTestProblem_1getDisplacement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::ConstrainedTestProblem *arg1 = (sgpp::optimization::test_problems::ConstrainedTestProblem *) 0 ;
  sgpp::base::DataVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::ConstrainedTestProblem **)&jarg1; 
  {
    try {
      result = (sgpp::base::DataVector *) &((sgpp::optimization::test_problems::ConstrainedTestProblem const *)arg1)->getDisplacement();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::base::DataVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptConstrainedTestProblem_1setDisplacement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::optimization::test_problems::ConstrainedTestProblem *arg1 = (sgpp::optimization::test_problems::ConstrainedTestProblem *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::ConstrainedTestProblem **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setDisplacement((sgpp::base::DataVector const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptFloudasObjective(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::FloudasObjective *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::test_problems::FloudasObjective *)new sgpp::optimization::test_problems::FloudasObjective();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::FloudasObjective **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptFloudasObjective(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::FloudasObjective *arg1 = (sgpp::optimization::test_problems::FloudasObjective *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::FloudasObjective **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptFloudasObjective_1evalUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::test_problems::FloudasObjective *arg1 = (sgpp::optimization::test_problems::FloudasObjective *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::FloudasObjective **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->evalUndisplaced((sgpp::base::DataVector const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptFloudasObjective_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::test_problems::FloudasObjective *arg1 = (sgpp::optimization::test_problems::FloudasObjective *) 0 ;
  std::unique_ptr< sgpp::optimization::ScalarFunction > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::FloudasObjective **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::ScalarFunction > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::ScalarFunction > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::test_problems::FloudasObjective const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptFloudasInequalityConstraint(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::FloudasInequalityConstraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::test_problems::FloudasInequalityConstraint *)new sgpp::optimization::test_problems::FloudasInequalityConstraint();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::FloudasInequalityConstraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptFloudasInequalityConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::FloudasInequalityConstraint *arg1 = (sgpp::optimization::test_problems::FloudasInequalityConstraint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::FloudasInequalityConstraint **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptFloudasInequalityConstraint_1evalUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::optimization::test_problems::FloudasInequalityConstraint *arg1 = (sgpp::optimization::test_problems::FloudasInequalityConstraint *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::optimization::test_problems::FloudasInequalityConstraint **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->evalUndisplaced((sgpp::base::DataVector const &)*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptFloudasInequalityConstraint_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::test_problems::FloudasInequalityConstraint *arg1 = (sgpp::optimization::test_problems::FloudasInequalityConstraint *) 0 ;
  std::unique_ptr< sgpp::optimization::VectorFunction > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::FloudasInequalityConstraint **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::VectorFunction > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::VectorFunction > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::test_problems::FloudasInequalityConstraint const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptFloudasEqualityConstraint(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::FloudasEqualityConstraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::test_problems::FloudasEqualityConstraint *)new sgpp::optimization::test_problems::FloudasEqualityConstraint();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::FloudasEqualityConstraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptFloudasEqualityConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::FloudasEqualityConstraint *arg1 = (sgpp::optimization::test_problems::FloudasEqualityConstraint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::FloudasEqualityConstraint **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptFloudasEqualityConstraint_1evalUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::optimization::test_problems::FloudasEqualityConstraint *arg1 = (sgpp::optimization::test_problems::FloudasEqualityConstraint *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::optimization::test_problems::FloudasEqualityConstraint **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->evalUndisplaced((sgpp::base::DataVector const &)*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptFloudasEqualityConstraint_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::test_problems::FloudasEqualityConstraint *arg1 = (sgpp::optimization::test_problems::FloudasEqualityConstraint *) 0 ;
  std::unique_ptr< sgpp::optimization::VectorFunction > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::FloudasEqualityConstraint **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::VectorFunction > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::VectorFunction > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::test_problems::FloudasEqualityConstraint const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptFloudas(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::Floudas *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::test_problems::Floudas *)new sgpp::optimization::test_problems::Floudas();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::Floudas **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptFloudas(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::Floudas *arg1 = (sgpp::optimization::test_problems::Floudas *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::Floudas **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptFloudas_1getObjectiveFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::Floudas *arg1 = (sgpp::optimization::test_problems::Floudas *) 0 ;
  sgpp::optimization::test_problems::TestScalarFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::Floudas **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::TestScalarFunction *) &(arg1)->getObjectiveFunction();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::TestScalarFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptFloudas_1getInequalityConstraintFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::Floudas *arg1 = (sgpp::optimization::test_problems::Floudas *) 0 ;
  sgpp::optimization::test_problems::TestVectorFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::Floudas **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::TestVectorFunction *) &(arg1)->getInequalityConstraintFunction();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::TestVectorFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptFloudas_1getEqualityConstraintFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::Floudas *arg1 = (sgpp::optimization::test_problems::Floudas *) 0 ;
  sgpp::optimization::test_problems::TestVectorFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::Floudas **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::TestVectorFunction *) &(arg1)->getEqualityConstraintFunction();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::TestVectorFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptFloudas_1getOptimalPointUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::test_problems::Floudas *arg1 = (sgpp::optimization::test_problems::Floudas *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::Floudas **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->getOptimalPointUndisplaced(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptG03Objective(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  sgpp::optimization::test_problems::G03Objective *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::G03Objective *)new sgpp::optimization::test_problems::G03Objective(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::G03Objective **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptG03Objective(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::G03Objective *arg1 = (sgpp::optimization::test_problems::G03Objective *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::G03Objective **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptG03Objective_1evalUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::test_problems::G03Objective *arg1 = (sgpp::optimization::test_problems::G03Objective *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::G03Objective **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->evalUndisplaced((sgpp::base::DataVector const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptG03Objective_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::test_problems::G03Objective *arg1 = (sgpp::optimization::test_problems::G03Objective *) 0 ;
  std::unique_ptr< sgpp::optimization::ScalarFunction > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::G03Objective **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::ScalarFunction > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::ScalarFunction > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::test_problems::G03Objective const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptG03InequalityConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  sgpp::optimization::test_problems::G03InequalityConstraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::G03InequalityConstraint *)new sgpp::optimization::test_problems::G03InequalityConstraint(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::G03InequalityConstraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptG03InequalityConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::G03InequalityConstraint *arg1 = (sgpp::optimization::test_problems::G03InequalityConstraint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::G03InequalityConstraint **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptG03InequalityConstraint_1evalUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::optimization::test_problems::G03InequalityConstraint *arg1 = (sgpp::optimization::test_problems::G03InequalityConstraint *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::optimization::test_problems::G03InequalityConstraint **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->evalUndisplaced((sgpp::base::DataVector const &)*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptG03InequalityConstraint_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::test_problems::G03InequalityConstraint *arg1 = (sgpp::optimization::test_problems::G03InequalityConstraint *) 0 ;
  std::unique_ptr< sgpp::optimization::VectorFunction > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::G03InequalityConstraint **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::VectorFunction > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::VectorFunction > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::test_problems::G03InequalityConstraint const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptG03EqualityConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  sgpp::optimization::test_problems::G03EqualityConstraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::G03EqualityConstraint *)new sgpp::optimization::test_problems::G03EqualityConstraint(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::G03EqualityConstraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptG03EqualityConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::G03EqualityConstraint *arg1 = (sgpp::optimization::test_problems::G03EqualityConstraint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::G03EqualityConstraint **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptG03EqualityConstraint_1evalUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::optimization::test_problems::G03EqualityConstraint *arg1 = (sgpp::optimization::test_problems::G03EqualityConstraint *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::optimization::test_problems::G03EqualityConstraint **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->evalUndisplaced((sgpp::base::DataVector const &)*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptG03EqualityConstraint_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::test_problems::G03EqualityConstraint *arg1 = (sgpp::optimization::test_problems::G03EqualityConstraint *) 0 ;
  std::unique_ptr< sgpp::optimization::VectorFunction > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::G03EqualityConstraint **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::VectorFunction > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::VectorFunction > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::test_problems::G03EqualityConstraint const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptG03(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  sgpp::optimization::test_problems::G03 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::G03 *)new sgpp::optimization::test_problems::G03(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::G03 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptG03(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::G03 *arg1 = (sgpp::optimization::test_problems::G03 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::G03 **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptG03_1getObjectiveFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::G03 *arg1 = (sgpp::optimization::test_problems::G03 *) 0 ;
  sgpp::optimization::test_problems::TestScalarFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::G03 **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::TestScalarFunction *) &(arg1)->getObjectiveFunction();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::TestScalarFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptG03_1getInequalityConstraintFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::G03 *arg1 = (sgpp::optimization::test_problems::G03 *) 0 ;
  sgpp::optimization::test_problems::TestVectorFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::G03 **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::TestVectorFunction *) &(arg1)->getInequalityConstraintFunction();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::TestVectorFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptG03_1getEqualityConstraintFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::G03 *arg1 = (sgpp::optimization::test_problems::G03 *) 0 ;
  sgpp::optimization::test_problems::TestVectorFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::G03 **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::TestVectorFunction *) &(arg1)->getEqualityConstraintFunction();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::TestVectorFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptG03_1getOptimalPointUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::test_problems::G03 *arg1 = (sgpp::optimization::test_problems::G03 *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::G03 **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->getOptimalPointUndisplaced(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptG04Objective(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::G04Objective *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::test_problems::G04Objective *)new sgpp::optimization::test_problems::G04Objective();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::G04Objective **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptG04Objective(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::G04Objective *arg1 = (sgpp::optimization::test_problems::G04Objective *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::G04Objective **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptG04Objective_1evalUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::test_problems::G04Objective *arg1 = (sgpp::optimization::test_problems::G04Objective *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::G04Objective **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->evalUndisplaced((sgpp::base::DataVector const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptG04Objective_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::test_problems::G04Objective *arg1 = (sgpp::optimization::test_problems::G04Objective *) 0 ;
  std::unique_ptr< sgpp::optimization::ScalarFunction > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::G04Objective **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::ScalarFunction > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::ScalarFunction > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::test_problems::G04Objective const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptG04InequalityConstraint(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::G04InequalityConstraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::test_problems::G04InequalityConstraint *)new sgpp::optimization::test_problems::G04InequalityConstraint();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::G04InequalityConstraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptG04InequalityConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::G04InequalityConstraint *arg1 = (sgpp::optimization::test_problems::G04InequalityConstraint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::G04InequalityConstraint **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptG04InequalityConstraint_1evalUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::optimization::test_problems::G04InequalityConstraint *arg1 = (sgpp::optimization::test_problems::G04InequalityConstraint *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::optimization::test_problems::G04InequalityConstraint **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->evalUndisplaced((sgpp::base::DataVector const &)*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptG04InequalityConstraint_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::test_problems::G04InequalityConstraint *arg1 = (sgpp::optimization::test_problems::G04InequalityConstraint *) 0 ;
  std::unique_ptr< sgpp::optimization::VectorFunction > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::G04InequalityConstraint **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::VectorFunction > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::VectorFunction > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::test_problems::G04InequalityConstraint const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptG04EqualityConstraint(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::G04EqualityConstraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::test_problems::G04EqualityConstraint *)new sgpp::optimization::test_problems::G04EqualityConstraint();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::G04EqualityConstraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptG04EqualityConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::G04EqualityConstraint *arg1 = (sgpp::optimization::test_problems::G04EqualityConstraint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::G04EqualityConstraint **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptG04EqualityConstraint_1evalUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::optimization::test_problems::G04EqualityConstraint *arg1 = (sgpp::optimization::test_problems::G04EqualityConstraint *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::optimization::test_problems::G04EqualityConstraint **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->evalUndisplaced((sgpp::base::DataVector const &)*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptG04EqualityConstraint_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::test_problems::G04EqualityConstraint *arg1 = (sgpp::optimization::test_problems::G04EqualityConstraint *) 0 ;
  std::unique_ptr< sgpp::optimization::VectorFunction > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::G04EqualityConstraint **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::VectorFunction > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::VectorFunction > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::test_problems::G04EqualityConstraint const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptG04(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::G04 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::test_problems::G04 *)new sgpp::optimization::test_problems::G04();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::G04 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptG04(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::G04 *arg1 = (sgpp::optimization::test_problems::G04 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::G04 **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptG04_1getObjectiveFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::G04 *arg1 = (sgpp::optimization::test_problems::G04 *) 0 ;
  sgpp::optimization::test_problems::TestScalarFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::G04 **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::TestScalarFunction *) &(arg1)->getObjectiveFunction();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::TestScalarFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptG04_1getInequalityConstraintFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::G04 *arg1 = (sgpp::optimization::test_problems::G04 *) 0 ;
  sgpp::optimization::test_problems::TestVectorFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::G04 **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::TestVectorFunction *) &(arg1)->getInequalityConstraintFunction();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::TestVectorFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptG04_1getEqualityConstraintFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::G04 *arg1 = (sgpp::optimization::test_problems::G04 *) 0 ;
  sgpp::optimization::test_problems::TestVectorFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::G04 **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::TestVectorFunction *) &(arg1)->getEqualityConstraintFunction();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::TestVectorFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptG04_1getOptimalPointUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::test_problems::G04 *arg1 = (sgpp::optimization::test_problems::G04 *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::G04 **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->getOptimalPointUndisplaced(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptG05Objective(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::G05Objective *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::test_problems::G05Objective *)new sgpp::optimization::test_problems::G05Objective();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::G05Objective **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptG05Objective(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::G05Objective *arg1 = (sgpp::optimization::test_problems::G05Objective *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::G05Objective **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptG05Objective_1evalUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::test_problems::G05Objective *arg1 = (sgpp::optimization::test_problems::G05Objective *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::G05Objective **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->evalUndisplaced((sgpp::base::DataVector const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptG05Objective_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::test_problems::G05Objective *arg1 = (sgpp::optimization::test_problems::G05Objective *) 0 ;
  std::unique_ptr< sgpp::optimization::ScalarFunction > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::G05Objective **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::ScalarFunction > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::ScalarFunction > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::test_problems::G05Objective const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptG05InequalityConstraint(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::G05InequalityConstraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::test_problems::G05InequalityConstraint *)new sgpp::optimization::test_problems::G05InequalityConstraint();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::G05InequalityConstraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptG05InequalityConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::G05InequalityConstraint *arg1 = (sgpp::optimization::test_problems::G05InequalityConstraint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::G05InequalityConstraint **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptG05InequalityConstraint_1evalUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::optimization::test_problems::G05InequalityConstraint *arg1 = (sgpp::optimization::test_problems::G05InequalityConstraint *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::optimization::test_problems::G05InequalityConstraint **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->evalUndisplaced((sgpp::base::DataVector const &)*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptG05InequalityConstraint_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::test_problems::G05InequalityConstraint *arg1 = (sgpp::optimization::test_problems::G05InequalityConstraint *) 0 ;
  std::unique_ptr< sgpp::optimization::VectorFunction > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::G05InequalityConstraint **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::VectorFunction > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::VectorFunction > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::test_problems::G05InequalityConstraint const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptG05EqualityConstraint(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::G05EqualityConstraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::test_problems::G05EqualityConstraint *)new sgpp::optimization::test_problems::G05EqualityConstraint();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::G05EqualityConstraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptG05EqualityConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::G05EqualityConstraint *arg1 = (sgpp::optimization::test_problems::G05EqualityConstraint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::G05EqualityConstraint **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptG05EqualityConstraint_1evalUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::optimization::test_problems::G05EqualityConstraint *arg1 = (sgpp::optimization::test_problems::G05EqualityConstraint *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::optimization::test_problems::G05EqualityConstraint **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->evalUndisplaced((sgpp::base::DataVector const &)*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptG05EqualityConstraint_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::test_problems::G05EqualityConstraint *arg1 = (sgpp::optimization::test_problems::G05EqualityConstraint *) 0 ;
  std::unique_ptr< sgpp::optimization::VectorFunction > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::G05EqualityConstraint **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::VectorFunction > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::VectorFunction > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::test_problems::G05EqualityConstraint const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptG05(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::G05 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::test_problems::G05 *)new sgpp::optimization::test_problems::G05();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::G05 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptG05(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::G05 *arg1 = (sgpp::optimization::test_problems::G05 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::G05 **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptG05_1getObjectiveFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::G05 *arg1 = (sgpp::optimization::test_problems::G05 *) 0 ;
  sgpp::optimization::test_problems::TestScalarFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::G05 **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::TestScalarFunction *) &(arg1)->getObjectiveFunction();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::TestScalarFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptG05_1getInequalityConstraintFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::G05 *arg1 = (sgpp::optimization::test_problems::G05 *) 0 ;
  sgpp::optimization::test_problems::TestVectorFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::G05 **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::TestVectorFunction *) &(arg1)->getInequalityConstraintFunction();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::TestVectorFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptG05_1getEqualityConstraintFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::G05 *arg1 = (sgpp::optimization::test_problems::G05 *) 0 ;
  sgpp::optimization::test_problems::TestVectorFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::G05 **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::TestVectorFunction *) &(arg1)->getEqualityConstraintFunction();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::TestVectorFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptG05_1getOptimalPointUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::test_problems::G05 *arg1 = (sgpp::optimization::test_problems::G05 *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::G05 **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->getOptimalPointUndisplaced(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptG06Objective(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::G06Objective *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::test_problems::G06Objective *)new sgpp::optimization::test_problems::G06Objective();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::G06Objective **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptG06Objective(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::G06Objective *arg1 = (sgpp::optimization::test_problems::G06Objective *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::G06Objective **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptG06Objective_1evalUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::test_problems::G06Objective *arg1 = (sgpp::optimization::test_problems::G06Objective *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::G06Objective **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->evalUndisplaced((sgpp::base::DataVector const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptG06Objective_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::test_problems::G06Objective *arg1 = (sgpp::optimization::test_problems::G06Objective *) 0 ;
  std::unique_ptr< sgpp::optimization::ScalarFunction > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::G06Objective **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::ScalarFunction > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::ScalarFunction > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::test_problems::G06Objective const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptG06InequalityConstraint(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::G06InequalityConstraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::test_problems::G06InequalityConstraint *)new sgpp::optimization::test_problems::G06InequalityConstraint();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::G06InequalityConstraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptG06InequalityConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::G06InequalityConstraint *arg1 = (sgpp::optimization::test_problems::G06InequalityConstraint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::G06InequalityConstraint **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptG06InequalityConstraint_1evalUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::optimization::test_problems::G06InequalityConstraint *arg1 = (sgpp::optimization::test_problems::G06InequalityConstraint *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::optimization::test_problems::G06InequalityConstraint **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->evalUndisplaced((sgpp::base::DataVector const &)*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptG06InequalityConstraint_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::test_problems::G06InequalityConstraint *arg1 = (sgpp::optimization::test_problems::G06InequalityConstraint *) 0 ;
  std::unique_ptr< sgpp::optimization::VectorFunction > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::G06InequalityConstraint **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::VectorFunction > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::VectorFunction > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::test_problems::G06InequalityConstraint const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptG06EqualityConstraint(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::G06EqualityConstraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::test_problems::G06EqualityConstraint *)new sgpp::optimization::test_problems::G06EqualityConstraint();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::G06EqualityConstraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptG06EqualityConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::G06EqualityConstraint *arg1 = (sgpp::optimization::test_problems::G06EqualityConstraint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::G06EqualityConstraint **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptG06EqualityConstraint_1evalUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::optimization::test_problems::G06EqualityConstraint *arg1 = (sgpp::optimization::test_problems::G06EqualityConstraint *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::optimization::test_problems::G06EqualityConstraint **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->evalUndisplaced((sgpp::base::DataVector const &)*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptG06EqualityConstraint_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::test_problems::G06EqualityConstraint *arg1 = (sgpp::optimization::test_problems::G06EqualityConstraint *) 0 ;
  std::unique_ptr< sgpp::optimization::VectorFunction > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::G06EqualityConstraint **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::VectorFunction > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::VectorFunction > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::test_problems::G06EqualityConstraint const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptG06(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::G06 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::test_problems::G06 *)new sgpp::optimization::test_problems::G06();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::G06 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptG06(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::G06 *arg1 = (sgpp::optimization::test_problems::G06 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::G06 **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptG06_1getObjectiveFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::G06 *arg1 = (sgpp::optimization::test_problems::G06 *) 0 ;
  sgpp::optimization::test_problems::TestScalarFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::G06 **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::TestScalarFunction *) &(arg1)->getObjectiveFunction();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::TestScalarFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptG06_1getInequalityConstraintFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::G06 *arg1 = (sgpp::optimization::test_problems::G06 *) 0 ;
  sgpp::optimization::test_problems::TestVectorFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::G06 **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::TestVectorFunction *) &(arg1)->getInequalityConstraintFunction();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::TestVectorFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptG06_1getEqualityConstraintFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::G06 *arg1 = (sgpp::optimization::test_problems::G06 *) 0 ;
  sgpp::optimization::test_problems::TestVectorFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::G06 **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::TestVectorFunction *) &(arg1)->getEqualityConstraintFunction();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::TestVectorFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptG06_1getOptimalPointUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::test_problems::G06 *arg1 = (sgpp::optimization::test_problems::G06 *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::G06 **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->getOptimalPointUndisplaced(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptG08Objective(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::G08Objective *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::test_problems::G08Objective *)new sgpp::optimization::test_problems::G08Objective();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::G08Objective **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptG08Objective(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::G08Objective *arg1 = (sgpp::optimization::test_problems::G08Objective *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::G08Objective **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptG08Objective_1evalUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::test_problems::G08Objective *arg1 = (sgpp::optimization::test_problems::G08Objective *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::G08Objective **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->evalUndisplaced((sgpp::base::DataVector const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptG08Objective_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::test_problems::G08Objective *arg1 = (sgpp::optimization::test_problems::G08Objective *) 0 ;
  std::unique_ptr< sgpp::optimization::ScalarFunction > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::G08Objective **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::ScalarFunction > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::ScalarFunction > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::test_problems::G08Objective const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptG08InequalityConstraint(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::G08InequalityConstraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::test_problems::G08InequalityConstraint *)new sgpp::optimization::test_problems::G08InequalityConstraint();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::G08InequalityConstraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptG08InequalityConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::G08InequalityConstraint *arg1 = (sgpp::optimization::test_problems::G08InequalityConstraint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::G08InequalityConstraint **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptG08InequalityConstraint_1evalUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::optimization::test_problems::G08InequalityConstraint *arg1 = (sgpp::optimization::test_problems::G08InequalityConstraint *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::optimization::test_problems::G08InequalityConstraint **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->evalUndisplaced((sgpp::base::DataVector const &)*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptG08InequalityConstraint_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::test_problems::G08InequalityConstraint *arg1 = (sgpp::optimization::test_problems::G08InequalityConstraint *) 0 ;
  std::unique_ptr< sgpp::optimization::VectorFunction > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::G08InequalityConstraint **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::VectorFunction > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::VectorFunction > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::test_problems::G08InequalityConstraint const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptG08EqualityConstraint(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::G08EqualityConstraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::test_problems::G08EqualityConstraint *)new sgpp::optimization::test_problems::G08EqualityConstraint();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::G08EqualityConstraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptG08EqualityConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::G08EqualityConstraint *arg1 = (sgpp::optimization::test_problems::G08EqualityConstraint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::G08EqualityConstraint **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptG08EqualityConstraint_1evalUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::optimization::test_problems::G08EqualityConstraint *arg1 = (sgpp::optimization::test_problems::G08EqualityConstraint *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::optimization::test_problems::G08EqualityConstraint **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->evalUndisplaced((sgpp::base::DataVector const &)*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptG08EqualityConstraint_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::test_problems::G08EqualityConstraint *arg1 = (sgpp::optimization::test_problems::G08EqualityConstraint *) 0 ;
  std::unique_ptr< sgpp::optimization::VectorFunction > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::G08EqualityConstraint **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::VectorFunction > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::VectorFunction > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::test_problems::G08EqualityConstraint const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptG08(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::G08 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::test_problems::G08 *)new sgpp::optimization::test_problems::G08();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::G08 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptG08(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::G08 *arg1 = (sgpp::optimization::test_problems::G08 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::G08 **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptG08_1getObjectiveFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::G08 *arg1 = (sgpp::optimization::test_problems::G08 *) 0 ;
  sgpp::optimization::test_problems::TestScalarFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::G08 **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::TestScalarFunction *) &(arg1)->getObjectiveFunction();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::TestScalarFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptG08_1getInequalityConstraintFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::G08 *arg1 = (sgpp::optimization::test_problems::G08 *) 0 ;
  sgpp::optimization::test_problems::TestVectorFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::G08 **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::TestVectorFunction *) &(arg1)->getInequalityConstraintFunction();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::TestVectorFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptG08_1getEqualityConstraintFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::G08 *arg1 = (sgpp::optimization::test_problems::G08 *) 0 ;
  sgpp::optimization::test_problems::TestVectorFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::G08 **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::TestVectorFunction *) &(arg1)->getEqualityConstraintFunction();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::TestVectorFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptG08_1getOptimalPointUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::test_problems::G08 *arg1 = (sgpp::optimization::test_problems::G08 *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::G08 **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->getOptimalPointUndisplaced(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptG09Objective(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::G09Objective *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::test_problems::G09Objective *)new sgpp::optimization::test_problems::G09Objective();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::G09Objective **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptG09Objective(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::G09Objective *arg1 = (sgpp::optimization::test_problems::G09Objective *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::G09Objective **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptG09Objective_1evalUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::test_problems::G09Objective *arg1 = (sgpp::optimization::test_problems::G09Objective *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::G09Objective **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->evalUndisplaced((sgpp::base::DataVector const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptG09Objective_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::test_problems::G09Objective *arg1 = (sgpp::optimization::test_problems::G09Objective *) 0 ;
  std::unique_ptr< sgpp::optimization::ScalarFunction > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::G09Objective **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::ScalarFunction > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::ScalarFunction > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::test_problems::G09Objective const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptG09InequalityConstraint(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::G09InequalityConstraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::test_problems::G09InequalityConstraint *)new sgpp::optimization::test_problems::G09InequalityConstraint();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::G09InequalityConstraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptG09InequalityConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::G09InequalityConstraint *arg1 = (sgpp::optimization::test_problems::G09InequalityConstraint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::G09InequalityConstraint **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptG09InequalityConstraint_1evalUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::optimization::test_problems::G09InequalityConstraint *arg1 = (sgpp::optimization::test_problems::G09InequalityConstraint *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::optimization::test_problems::G09InequalityConstraint **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->evalUndisplaced((sgpp::base::DataVector const &)*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptG09InequalityConstraint_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::test_problems::G09InequalityConstraint *arg1 = (sgpp::optimization::test_problems::G09InequalityConstraint *) 0 ;
  std::unique_ptr< sgpp::optimization::VectorFunction > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::G09InequalityConstraint **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::VectorFunction > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::VectorFunction > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::test_problems::G09InequalityConstraint const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptG09EqualityConstraint(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::G09EqualityConstraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::test_problems::G09EqualityConstraint *)new sgpp::optimization::test_problems::G09EqualityConstraint();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::G09EqualityConstraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptG09EqualityConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::G09EqualityConstraint *arg1 = (sgpp::optimization::test_problems::G09EqualityConstraint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::G09EqualityConstraint **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptG09EqualityConstraint_1evalUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::optimization::test_problems::G09EqualityConstraint *arg1 = (sgpp::optimization::test_problems::G09EqualityConstraint *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::optimization::test_problems::G09EqualityConstraint **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->evalUndisplaced((sgpp::base::DataVector const &)*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptG09EqualityConstraint_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::test_problems::G09EqualityConstraint *arg1 = (sgpp::optimization::test_problems::G09EqualityConstraint *) 0 ;
  std::unique_ptr< sgpp::optimization::VectorFunction > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::G09EqualityConstraint **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::VectorFunction > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::VectorFunction > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::test_problems::G09EqualityConstraint const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptG09(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::G09 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::test_problems::G09 *)new sgpp::optimization::test_problems::G09();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::G09 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptG09(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::G09 *arg1 = (sgpp::optimization::test_problems::G09 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::G09 **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptG09_1getObjectiveFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::G09 *arg1 = (sgpp::optimization::test_problems::G09 *) 0 ;
  sgpp::optimization::test_problems::TestScalarFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::G09 **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::TestScalarFunction *) &(arg1)->getObjectiveFunction();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::TestScalarFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptG09_1getInequalityConstraintFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::G09 *arg1 = (sgpp::optimization::test_problems::G09 *) 0 ;
  sgpp::optimization::test_problems::TestVectorFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::G09 **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::TestVectorFunction *) &(arg1)->getInequalityConstraintFunction();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::TestVectorFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptG09_1getEqualityConstraintFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::G09 *arg1 = (sgpp::optimization::test_problems::G09 *) 0 ;
  sgpp::optimization::test_problems::TestVectorFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::G09 **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::TestVectorFunction *) &(arg1)->getEqualityConstraintFunction();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::TestVectorFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptG09_1getOptimalPointUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::test_problems::G09 *arg1 = (sgpp::optimization::test_problems::G09 *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::G09 **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->getOptimalPointUndisplaced(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptG10Objective(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::G10Objective *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::test_problems::G10Objective *)new sgpp::optimization::test_problems::G10Objective();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::G10Objective **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptG10Objective(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::G10Objective *arg1 = (sgpp::optimization::test_problems::G10Objective *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::G10Objective **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptG10Objective_1evalUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::test_problems::G10Objective *arg1 = (sgpp::optimization::test_problems::G10Objective *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::G10Objective **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->evalUndisplaced((sgpp::base::DataVector const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptG10Objective_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::test_problems::G10Objective *arg1 = (sgpp::optimization::test_problems::G10Objective *) 0 ;
  std::unique_ptr< sgpp::optimization::ScalarFunction > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::G10Objective **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::ScalarFunction > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::ScalarFunction > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::test_problems::G10Objective const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptG10InequalityConstraint(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::G10InequalityConstraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::test_problems::G10InequalityConstraint *)new sgpp::optimization::test_problems::G10InequalityConstraint();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::G10InequalityConstraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptG10InequalityConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::G10InequalityConstraint *arg1 = (sgpp::optimization::test_problems::G10InequalityConstraint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::G10InequalityConstraint **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptG10InequalityConstraint_1evalUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::optimization::test_problems::G10InequalityConstraint *arg1 = (sgpp::optimization::test_problems::G10InequalityConstraint *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::optimization::test_problems::G10InequalityConstraint **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->evalUndisplaced((sgpp::base::DataVector const &)*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptG10InequalityConstraint_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::test_problems::G10InequalityConstraint *arg1 = (sgpp::optimization::test_problems::G10InequalityConstraint *) 0 ;
  std::unique_ptr< sgpp::optimization::VectorFunction > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::G10InequalityConstraint **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::VectorFunction > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::VectorFunction > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::test_problems::G10InequalityConstraint const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptG10EqualityConstraint(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::G10EqualityConstraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::test_problems::G10EqualityConstraint *)new sgpp::optimization::test_problems::G10EqualityConstraint();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::G10EqualityConstraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptG10EqualityConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::G10EqualityConstraint *arg1 = (sgpp::optimization::test_problems::G10EqualityConstraint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::G10EqualityConstraint **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptG10EqualityConstraint_1evalUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::optimization::test_problems::G10EqualityConstraint *arg1 = (sgpp::optimization::test_problems::G10EqualityConstraint *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::optimization::test_problems::G10EqualityConstraint **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->evalUndisplaced((sgpp::base::DataVector const &)*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptG10EqualityConstraint_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::test_problems::G10EqualityConstraint *arg1 = (sgpp::optimization::test_problems::G10EqualityConstraint *) 0 ;
  std::unique_ptr< sgpp::optimization::VectorFunction > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::G10EqualityConstraint **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::VectorFunction > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::VectorFunction > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::test_problems::G10EqualityConstraint const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptG10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::G10 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::test_problems::G10 *)new sgpp::optimization::test_problems::G10();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::G10 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptG10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::G10 *arg1 = (sgpp::optimization::test_problems::G10 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::G10 **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptG10_1getObjectiveFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::G10 *arg1 = (sgpp::optimization::test_problems::G10 *) 0 ;
  sgpp::optimization::test_problems::TestScalarFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::G10 **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::TestScalarFunction *) &(arg1)->getObjectiveFunction();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::TestScalarFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptG10_1getInequalityConstraintFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::G10 *arg1 = (sgpp::optimization::test_problems::G10 *) 0 ;
  sgpp::optimization::test_problems::TestVectorFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::G10 **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::TestVectorFunction *) &(arg1)->getInequalityConstraintFunction();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::TestVectorFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptG10_1getEqualityConstraintFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::G10 *arg1 = (sgpp::optimization::test_problems::G10 *) 0 ;
  sgpp::optimization::test_problems::TestVectorFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::G10 **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::TestVectorFunction *) &(arg1)->getEqualityConstraintFunction();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::TestVectorFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptG10_1getOptimalPointUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::test_problems::G10 *arg1 = (sgpp::optimization::test_problems::G10 *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::G10 **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->getOptimalPointUndisplaced(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptG11Objective(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::G11Objective *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::test_problems::G11Objective *)new sgpp::optimization::test_problems::G11Objective();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::G11Objective **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptG11Objective(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::G11Objective *arg1 = (sgpp::optimization::test_problems::G11Objective *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::G11Objective **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptG11Objective_1evalUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::test_problems::G11Objective *arg1 = (sgpp::optimization::test_problems::G11Objective *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::G11Objective **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->evalUndisplaced((sgpp::base::DataVector const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptG11Objective_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::test_problems::G11Objective *arg1 = (sgpp::optimization::test_problems::G11Objective *) 0 ;
  std::unique_ptr< sgpp::optimization::ScalarFunction > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::G11Objective **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::ScalarFunction > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::ScalarFunction > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::test_problems::G11Objective const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptG11InequalityConstraint(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::G11InequalityConstraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::test_problems::G11InequalityConstraint *)new sgpp::optimization::test_problems::G11InequalityConstraint();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::G11InequalityConstraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptG11InequalityConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::G11InequalityConstraint *arg1 = (sgpp::optimization::test_problems::G11InequalityConstraint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::G11InequalityConstraint **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptG11InequalityConstraint_1evalUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::optimization::test_problems::G11InequalityConstraint *arg1 = (sgpp::optimization::test_problems::G11InequalityConstraint *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::optimization::test_problems::G11InequalityConstraint **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->evalUndisplaced((sgpp::base::DataVector const &)*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptG11InequalityConstraint_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::test_problems::G11InequalityConstraint *arg1 = (sgpp::optimization::test_problems::G11InequalityConstraint *) 0 ;
  std::unique_ptr< sgpp::optimization::VectorFunction > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::G11InequalityConstraint **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::VectorFunction > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::VectorFunction > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::test_problems::G11InequalityConstraint const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptG11EqualityConstraint(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::G11EqualityConstraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::test_problems::G11EqualityConstraint *)new sgpp::optimization::test_problems::G11EqualityConstraint();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::G11EqualityConstraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptG11EqualityConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::G11EqualityConstraint *arg1 = (sgpp::optimization::test_problems::G11EqualityConstraint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::G11EqualityConstraint **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptG11EqualityConstraint_1evalUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::optimization::test_problems::G11EqualityConstraint *arg1 = (sgpp::optimization::test_problems::G11EqualityConstraint *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::optimization::test_problems::G11EqualityConstraint **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->evalUndisplaced((sgpp::base::DataVector const &)*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptG11EqualityConstraint_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::test_problems::G11EqualityConstraint *arg1 = (sgpp::optimization::test_problems::G11EqualityConstraint *) 0 ;
  std::unique_ptr< sgpp::optimization::VectorFunction > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::G11EqualityConstraint **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::VectorFunction > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::VectorFunction > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::test_problems::G11EqualityConstraint const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptG11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::G11 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::test_problems::G11 *)new sgpp::optimization::test_problems::G11();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::G11 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptG11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::G11 *arg1 = (sgpp::optimization::test_problems::G11 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::G11 **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptG11_1getObjectiveFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::G11 *arg1 = (sgpp::optimization::test_problems::G11 *) 0 ;
  sgpp::optimization::test_problems::TestScalarFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::G11 **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::TestScalarFunction *) &(arg1)->getObjectiveFunction();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::TestScalarFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptG11_1getInequalityConstraintFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::G11 *arg1 = (sgpp::optimization::test_problems::G11 *) 0 ;
  sgpp::optimization::test_problems::TestVectorFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::G11 **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::TestVectorFunction *) &(arg1)->getInequalityConstraintFunction();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::TestVectorFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptG11_1getEqualityConstraintFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::G11 *arg1 = (sgpp::optimization::test_problems::G11 *) 0 ;
  sgpp::optimization::test_problems::TestVectorFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::G11 **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::TestVectorFunction *) &(arg1)->getEqualityConstraintFunction();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::TestVectorFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptG11_1getOptimalPointUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::test_problems::G11 *arg1 = (sgpp::optimization::test_problems::G11 *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::G11 **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->getOptimalPointUndisplaced(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptG12Objective(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::G12Objective *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::test_problems::G12Objective *)new sgpp::optimization::test_problems::G12Objective();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::G12Objective **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptG12Objective(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::G12Objective *arg1 = (sgpp::optimization::test_problems::G12Objective *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::G12Objective **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptG12Objective_1evalUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::test_problems::G12Objective *arg1 = (sgpp::optimization::test_problems::G12Objective *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::G12Objective **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->evalUndisplaced((sgpp::base::DataVector const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptG12Objective_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::test_problems::G12Objective *arg1 = (sgpp::optimization::test_problems::G12Objective *) 0 ;
  std::unique_ptr< sgpp::optimization::ScalarFunction > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::G12Objective **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::ScalarFunction > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::ScalarFunction > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::test_problems::G12Objective const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptG12InequalityConstraint(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::G12InequalityConstraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::test_problems::G12InequalityConstraint *)new sgpp::optimization::test_problems::G12InequalityConstraint();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::G12InequalityConstraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptG12InequalityConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::G12InequalityConstraint *arg1 = (sgpp::optimization::test_problems::G12InequalityConstraint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::G12InequalityConstraint **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptG12InequalityConstraint_1evalUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::optimization::test_problems::G12InequalityConstraint *arg1 = (sgpp::optimization::test_problems::G12InequalityConstraint *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::optimization::test_problems::G12InequalityConstraint **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->evalUndisplaced((sgpp::base::DataVector const &)*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptG12InequalityConstraint_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::test_problems::G12InequalityConstraint *arg1 = (sgpp::optimization::test_problems::G12InequalityConstraint *) 0 ;
  std::unique_ptr< sgpp::optimization::VectorFunction > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::G12InequalityConstraint **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::VectorFunction > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::VectorFunction > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::test_problems::G12InequalityConstraint const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptG12EqualityConstraint(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::G12EqualityConstraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::test_problems::G12EqualityConstraint *)new sgpp::optimization::test_problems::G12EqualityConstraint();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::G12EqualityConstraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptG12EqualityConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::G12EqualityConstraint *arg1 = (sgpp::optimization::test_problems::G12EqualityConstraint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::G12EqualityConstraint **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptG12EqualityConstraint_1evalUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::optimization::test_problems::G12EqualityConstraint *arg1 = (sgpp::optimization::test_problems::G12EqualityConstraint *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::optimization::test_problems::G12EqualityConstraint **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->evalUndisplaced((sgpp::base::DataVector const &)*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptG12EqualityConstraint_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::test_problems::G12EqualityConstraint *arg1 = (sgpp::optimization::test_problems::G12EqualityConstraint *) 0 ;
  std::unique_ptr< sgpp::optimization::VectorFunction > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::G12EqualityConstraint **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::VectorFunction > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::VectorFunction > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::test_problems::G12EqualityConstraint const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptG12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::G12 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::test_problems::G12 *)new sgpp::optimization::test_problems::G12();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::G12 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptG12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::G12 *arg1 = (sgpp::optimization::test_problems::G12 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::G12 **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptG12_1getObjectiveFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::G12 *arg1 = (sgpp::optimization::test_problems::G12 *) 0 ;
  sgpp::optimization::test_problems::TestScalarFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::G12 **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::TestScalarFunction *) &(arg1)->getObjectiveFunction();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::TestScalarFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptG12_1getInequalityConstraintFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::G12 *arg1 = (sgpp::optimization::test_problems::G12 *) 0 ;
  sgpp::optimization::test_problems::TestVectorFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::G12 **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::TestVectorFunction *) &(arg1)->getInequalityConstraintFunction();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::TestVectorFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptG12_1getEqualityConstraintFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::G12 *arg1 = (sgpp::optimization::test_problems::G12 *) 0 ;
  sgpp::optimization::test_problems::TestVectorFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::G12 **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::TestVectorFunction *) &(arg1)->getEqualityConstraintFunction();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::TestVectorFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptG12_1getOptimalPointUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::test_problems::G12 *arg1 = (sgpp::optimization::test_problems::G12 *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::G12 **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->getOptimalPointUndisplaced(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptG13Objective(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::G13Objective *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::test_problems::G13Objective *)new sgpp::optimization::test_problems::G13Objective();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::G13Objective **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptG13Objective(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::G13Objective *arg1 = (sgpp::optimization::test_problems::G13Objective *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::G13Objective **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptG13Objective_1evalUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::test_problems::G13Objective *arg1 = (sgpp::optimization::test_problems::G13Objective *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::G13Objective **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->evalUndisplaced((sgpp::base::DataVector const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptG13Objective_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::test_problems::G13Objective *arg1 = (sgpp::optimization::test_problems::G13Objective *) 0 ;
  std::unique_ptr< sgpp::optimization::ScalarFunction > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::G13Objective **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::ScalarFunction > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::ScalarFunction > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::test_problems::G13Objective const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptG13InequalityConstraint(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::G13InequalityConstraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::test_problems::G13InequalityConstraint *)new sgpp::optimization::test_problems::G13InequalityConstraint();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::G13InequalityConstraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptG13InequalityConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::G13InequalityConstraint *arg1 = (sgpp::optimization::test_problems::G13InequalityConstraint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::G13InequalityConstraint **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptG13InequalityConstraint_1evalUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::optimization::test_problems::G13InequalityConstraint *arg1 = (sgpp::optimization::test_problems::G13InequalityConstraint *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::optimization::test_problems::G13InequalityConstraint **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->evalUndisplaced((sgpp::base::DataVector const &)*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptG13InequalityConstraint_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::test_problems::G13InequalityConstraint *arg1 = (sgpp::optimization::test_problems::G13InequalityConstraint *) 0 ;
  std::unique_ptr< sgpp::optimization::VectorFunction > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::G13InequalityConstraint **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::VectorFunction > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::VectorFunction > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::test_problems::G13InequalityConstraint const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptG13EqualityConstraint(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::G13EqualityConstraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::test_problems::G13EqualityConstraint *)new sgpp::optimization::test_problems::G13EqualityConstraint();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::G13EqualityConstraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptG13EqualityConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::G13EqualityConstraint *arg1 = (sgpp::optimization::test_problems::G13EqualityConstraint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::G13EqualityConstraint **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptG13EqualityConstraint_1evalUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::optimization::test_problems::G13EqualityConstraint *arg1 = (sgpp::optimization::test_problems::G13EqualityConstraint *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::optimization::test_problems::G13EqualityConstraint **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->evalUndisplaced((sgpp::base::DataVector const &)*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptG13EqualityConstraint_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::test_problems::G13EqualityConstraint *arg1 = (sgpp::optimization::test_problems::G13EqualityConstraint *) 0 ;
  std::unique_ptr< sgpp::optimization::VectorFunction > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::G13EqualityConstraint **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::VectorFunction > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::VectorFunction > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::test_problems::G13EqualityConstraint const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptG13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::G13 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::test_problems::G13 *)new sgpp::optimization::test_problems::G13();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::G13 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptG13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::G13 *arg1 = (sgpp::optimization::test_problems::G13 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::G13 **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptG13_1getObjectiveFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::G13 *arg1 = (sgpp::optimization::test_problems::G13 *) 0 ;
  sgpp::optimization::test_problems::TestScalarFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::G13 **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::TestScalarFunction *) &(arg1)->getObjectiveFunction();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::TestScalarFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptG13_1getInequalityConstraintFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::G13 *arg1 = (sgpp::optimization::test_problems::G13 *) 0 ;
  sgpp::optimization::test_problems::TestVectorFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::G13 **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::TestVectorFunction *) &(arg1)->getInequalityConstraintFunction();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::TestVectorFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptG13_1getEqualityConstraintFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::G13 *arg1 = (sgpp::optimization::test_problems::G13 *) 0 ;
  sgpp::optimization::test_problems::TestVectorFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::G13 **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::TestVectorFunction *) &(arg1)->getEqualityConstraintFunction();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::TestVectorFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptG13_1getOptimalPointUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::test_problems::G13 *arg1 = (sgpp::optimization::test_problems::G13 *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::G13 **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->getOptimalPointUndisplaced(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptSimionescuObjective(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::SimionescuObjective *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::test_problems::SimionescuObjective *)new sgpp::optimization::test_problems::SimionescuObjective();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::SimionescuObjective **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptSimionescuObjective(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::SimionescuObjective *arg1 = (sgpp::optimization::test_problems::SimionescuObjective *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::SimionescuObjective **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptSimionescuObjective_1evalUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::test_problems::SimionescuObjective *arg1 = (sgpp::optimization::test_problems::SimionescuObjective *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::SimionescuObjective **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->evalUndisplaced((sgpp::base::DataVector const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptSimionescuObjective_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::test_problems::SimionescuObjective *arg1 = (sgpp::optimization::test_problems::SimionescuObjective *) 0 ;
  std::unique_ptr< sgpp::optimization::ScalarFunction > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::SimionescuObjective **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::ScalarFunction > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::ScalarFunction > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::test_problems::SimionescuObjective const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptSimionescuInequalityConstraint(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::SimionescuInequalityConstraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::test_problems::SimionescuInequalityConstraint *)new sgpp::optimization::test_problems::SimionescuInequalityConstraint();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::SimionescuInequalityConstraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptSimionescuInequalityConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::SimionescuInequalityConstraint *arg1 = (sgpp::optimization::test_problems::SimionescuInequalityConstraint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::SimionescuInequalityConstraint **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptSimionescuInequalityConstraint_1evalUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::optimization::test_problems::SimionescuInequalityConstraint *arg1 = (sgpp::optimization::test_problems::SimionescuInequalityConstraint *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::optimization::test_problems::SimionescuInequalityConstraint **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->evalUndisplaced((sgpp::base::DataVector const &)*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptSimionescuInequalityConstraint_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::test_problems::SimionescuInequalityConstraint *arg1 = (sgpp::optimization::test_problems::SimionescuInequalityConstraint *) 0 ;
  std::unique_ptr< sgpp::optimization::VectorFunction > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::SimionescuInequalityConstraint **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::VectorFunction > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::VectorFunction > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::test_problems::SimionescuInequalityConstraint const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptSimionescuEqualityConstraint(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::SimionescuEqualityConstraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::test_problems::SimionescuEqualityConstraint *)new sgpp::optimization::test_problems::SimionescuEqualityConstraint();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::SimionescuEqualityConstraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptSimionescuEqualityConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::SimionescuEqualityConstraint *arg1 = (sgpp::optimization::test_problems::SimionescuEqualityConstraint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::SimionescuEqualityConstraint **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptSimionescuEqualityConstraint_1evalUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::optimization::test_problems::SimionescuEqualityConstraint *arg1 = (sgpp::optimization::test_problems::SimionescuEqualityConstraint *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::optimization::test_problems::SimionescuEqualityConstraint **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->evalUndisplaced((sgpp::base::DataVector const &)*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptSimionescuEqualityConstraint_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::test_problems::SimionescuEqualityConstraint *arg1 = (sgpp::optimization::test_problems::SimionescuEqualityConstraint *) 0 ;
  std::unique_ptr< sgpp::optimization::VectorFunction > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::SimionescuEqualityConstraint **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::VectorFunction > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::VectorFunction > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::test_problems::SimionescuEqualityConstraint const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptSimionescu(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::Simionescu *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::test_problems::Simionescu *)new sgpp::optimization::test_problems::Simionescu();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::Simionescu **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptSimionescu(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::Simionescu *arg1 = (sgpp::optimization::test_problems::Simionescu *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::Simionescu **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptSimionescu_1getObjectiveFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::Simionescu *arg1 = (sgpp::optimization::test_problems::Simionescu *) 0 ;
  sgpp::optimization::test_problems::TestScalarFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::Simionescu **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::TestScalarFunction *) &(arg1)->getObjectiveFunction();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::TestScalarFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptSimionescu_1getInequalityConstraintFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::Simionescu *arg1 = (sgpp::optimization::test_problems::Simionescu *) 0 ;
  sgpp::optimization::test_problems::TestVectorFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::Simionescu **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::TestVectorFunction *) &(arg1)->getInequalityConstraintFunction();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::TestVectorFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptSimionescu_1getEqualityConstraintFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::Simionescu *arg1 = (sgpp::optimization::test_problems::Simionescu *) 0 ;
  sgpp::optimization::test_problems::TestVectorFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::Simionescu **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::TestVectorFunction *) &(arg1)->getEqualityConstraintFunction();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::TestVectorFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptSimionescu_1getOptimalPointUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::test_problems::Simionescu *arg1 = (sgpp::optimization::test_problems::Simionescu *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::Simionescu **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->getOptimalPointUndisplaced(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptSolandObjective(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::SolandObjective *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::test_problems::SolandObjective *)new sgpp::optimization::test_problems::SolandObjective();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::SolandObjective **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptSolandObjective(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::SolandObjective *arg1 = (sgpp::optimization::test_problems::SolandObjective *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::SolandObjective **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptSolandObjective_1evalUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::test_problems::SolandObjective *arg1 = (sgpp::optimization::test_problems::SolandObjective *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::SolandObjective **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->evalUndisplaced((sgpp::base::DataVector const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptSolandObjective_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::test_problems::SolandObjective *arg1 = (sgpp::optimization::test_problems::SolandObjective *) 0 ;
  std::unique_ptr< sgpp::optimization::ScalarFunction > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::SolandObjective **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::ScalarFunction > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::ScalarFunction > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::test_problems::SolandObjective const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptSolandInequalityConstraint(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::SolandInequalityConstraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::test_problems::SolandInequalityConstraint *)new sgpp::optimization::test_problems::SolandInequalityConstraint();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::SolandInequalityConstraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptSolandInequalityConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::SolandInequalityConstraint *arg1 = (sgpp::optimization::test_problems::SolandInequalityConstraint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::SolandInequalityConstraint **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptSolandInequalityConstraint_1evalUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::optimization::test_problems::SolandInequalityConstraint *arg1 = (sgpp::optimization::test_problems::SolandInequalityConstraint *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::optimization::test_problems::SolandInequalityConstraint **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->evalUndisplaced((sgpp::base::DataVector const &)*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptSolandInequalityConstraint_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::test_problems::SolandInequalityConstraint *arg1 = (sgpp::optimization::test_problems::SolandInequalityConstraint *) 0 ;
  std::unique_ptr< sgpp::optimization::VectorFunction > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::SolandInequalityConstraint **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::VectorFunction > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::VectorFunction > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::test_problems::SolandInequalityConstraint const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptSolandEqualityConstraint(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::SolandEqualityConstraint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::test_problems::SolandEqualityConstraint *)new sgpp::optimization::test_problems::SolandEqualityConstraint();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::SolandEqualityConstraint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptSolandEqualityConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::SolandEqualityConstraint *arg1 = (sgpp::optimization::test_problems::SolandEqualityConstraint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::SolandEqualityConstraint **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptSolandEqualityConstraint_1evalUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  sgpp::optimization::test_problems::SolandEqualityConstraint *arg1 = (sgpp::optimization::test_problems::SolandEqualityConstraint *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(sgpp::optimization::test_problems::SolandEqualityConstraint **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->evalUndisplaced((sgpp::base::DataVector const &)*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptSolandEqualityConstraint_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::test_problems::SolandEqualityConstraint *arg1 = (sgpp::optimization::test_problems::SolandEqualityConstraint *) 0 ;
  std::unique_ptr< sgpp::optimization::VectorFunction > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::SolandEqualityConstraint **)&jarg1; 
  arg2 = *(std::unique_ptr< sgpp::optimization::VectorFunction > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< sgpp::optimization::VectorFunction > & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::test_problems::SolandEqualityConstraint const *)arg1)->clone(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptSoland(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::Soland *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::test_problems::Soland *)new sgpp::optimization::test_problems::Soland();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::Soland **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptSoland(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::test_problems::Soland *arg1 = (sgpp::optimization::test_problems::Soland *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::test_problems::Soland **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptSoland_1getObjectiveFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::Soland *arg1 = (sgpp::optimization::test_problems::Soland *) 0 ;
  sgpp::optimization::test_problems::TestScalarFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::Soland **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::TestScalarFunction *) &(arg1)->getObjectiveFunction();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::TestScalarFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptSoland_1getInequalityConstraintFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::Soland *arg1 = (sgpp::optimization::test_problems::Soland *) 0 ;
  sgpp::optimization::test_problems::TestVectorFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::Soland **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::TestVectorFunction *) &(arg1)->getInequalityConstraintFunction();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::TestVectorFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptSoland_1getEqualityConstraintFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::test_problems::Soland *arg1 = (sgpp::optimization::test_problems::Soland *) 0 ;
  sgpp::optimization::test_problems::TestVectorFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::test_problems::Soland **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::test_problems::TestVectorFunction *) &(arg1)->getEqualityConstraintFunction();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::test_problems::TestVectorFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptSoland_1getOptimalPointUndisplaced(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  sgpp::optimization::test_problems::Soland *arg1 = (sgpp::optimization::test_problems::Soland *) 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::test_problems::Soland **)&jarg1; 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->getOptimalPointUndisplaced(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptFileIOWriteGrid_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  std::string *arg1 = 0 ;
  sgpp::base::GridStorage *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(sgpp::base::GridStorage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage const & reference is null");
    return ;
  } 
  {
    try {
      sgpp::optimization::file_io::writeGrid((std::string const &)*arg1,(sgpp::base::HashGridStorage const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptFileIOWriteGrid_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  std::string *arg1 = 0 ;
  sgpp::base::GridStorage *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(sgpp::base::GridStorage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage const & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return ;
  } 
  {
    try {
      sgpp::optimization::file_io::writeGrid((std::string const &)*arg1,(sgpp::base::HashGridStorage const &)*arg2,(sgpp::base::DataVector const &)*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptFileIOReadGrid_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  std::string *arg1 = 0 ;
  sgpp::base::GridStorage *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(sgpp::base::GridStorage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage & reference is null");
    return ;
  } 
  {
    try {
      sgpp::optimization::file_io::readGrid((std::string const &)*arg1,*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptFileIOReadGrid_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  std::string *arg1 = 0 ;
  sgpp::base::GridStorage *arg2 = 0 ;
  sgpp::base::DataVector *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(sgpp::base::GridStorage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridStorage & reference is null");
    return ;
  } 
  arg3 = *(sgpp::base::DataVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      sgpp::optimization::file_io::readGrid((std::string const &)*arg1,*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptFileIOWriteMatrix_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  std::string *arg1 = 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return ;
  } 
  {
    try {
      sgpp::optimization::file_io::writeMatrix((std::string const &)*arg1,*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptFileIOReadMatrix_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  std::string *arg1 = 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return ;
  } 
  {
    try {
      sgpp::optimization::file_io::readMatrix((std::string const &)*arg1,*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptFileIOWriteVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  std::string *arg1 = 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      sgpp::optimization::file_io::writeVector((std::string const &)*arg1,*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptFileIOReadVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  std::string *arg1 = 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector & reference is null");
    return ;
  } 
  {
    try {
      sgpp::optimization::file_io::readVector((std::string const &)*arg1,*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptMathSchurDecomposition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::base::DataMatrix *arg1 = 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::DataMatrix **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return ;
  } 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return ;
  } 
  {
    try {
      sgpp::optimization::math::schurDecomposition(*arg1,*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptMathQRDecomposition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::base::DataMatrix *arg1 = 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::DataMatrix **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return ;
  } 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return ;
  } 
  {
    try {
      sgpp::optimization::math::QRDecomposition(*arg1,*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptMathHessenbergForm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::base::DataMatrix *arg1 = 0 ;
  sgpp::base::DataMatrix *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::base::DataMatrix **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return ;
  } 
  arg2 = *(sgpp::base::DataMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return ;
  } 
  {
    try {
      sgpp::optimization::math::hessenbergForm(*arg1,*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptMathHouseholderTransformation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_) {
  sgpp::base::DataMatrix *arg1 = 0 ;
  size_t arg2 ;
  size_t arg3 ;
  sgpp::base::DataMatrix *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(sgpp::base::DataMatrix **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix const & reference is null");
    return ;
  } 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = *(sgpp::base::DataMatrix **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataMatrix & reference is null");
    return ;
  } 
  {
    try {
      sgpp::optimization::math::householderTransformation((sgpp::base::DataMatrix const &)*arg1,arg2,arg3,*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptMutexType_1lock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::optimization::MutexType *arg1 = (sgpp::optimization::MutexType *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::MutexType **)&jarg1; 
  {
    try {
      (arg1)->lock();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptMutexType_1unlock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::optimization::MutexType *arg1 = (sgpp::optimization::MutexType *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::MutexType **)&jarg1; 
  {
    try {
      (arg1)->unlock();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_new_1OptMutexType(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::MutexType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::MutexType *)new sgpp::optimization::MutexType();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::MutexType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptMutexType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::MutexType *arg1 = (sgpp::optimization::MutexType *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::MutexType **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_optOperatorInsertion_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  std::ostream *arg1 = 0 ;
  sgpp::base::DataVector *arg2 = 0 ;
  std::ostream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(std::ostream **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ostream & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::base::DataVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::DataVector const & reference is null");
    return 0;
  } 
  {
    try {
      result = (std::ostream *) &sgpp::optimization::operator <<(*arg1,(sgpp::base::DataVector const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(std::ostream **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_optOperatorInsertion_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  std::ostream *arg1 = 0 ;
  sgpp::base::GridPoint *arg2 = 0 ;
  std::ostream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(std::ostream **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ostream & reference is null");
    return 0;
  } 
  arg2 = *(sgpp::base::GridPoint **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::GridPoint const & reference is null");
    return 0;
  } 
  {
    try {
      result = (std::ostream *) &sgpp::optimization::operator <<(*arg1,(sgpp::base::HashGridPoint const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(std::ostream **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_sgpp_jsgppJNI_OptPrinter_1DEFAULT_1VERBOSITY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)sgpp::optimization::Printer::DEFAULT_VERBOSITY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptPrinter_1getInstance(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sgpp::optimization::Printer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (sgpp::optimization::Printer *) &sgpp::optimization::Printer::getInstance();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::Printer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptPrinter_1printStatusBegin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  sgpp::optimization::Printer *arg1 = (sgpp::optimization::Printer *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::Printer **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->printStatusBegin((std::string const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptPrinter_1printStatusUpdate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  sgpp::optimization::Printer *arg1 = (sgpp::optimization::Printer *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::Printer **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->printStatusUpdate((std::string const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptPrinter_1printStatusNewLine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::optimization::Printer *arg1 = (sgpp::optimization::Printer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::Printer **)&jarg1; 
  {
    try {
      (arg1)->printStatusNewLine();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptPrinter_1printStatusIdentation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::optimization::Printer *arg1 = (sgpp::optimization::Printer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::Printer **)&jarg1; 
  {
    try {
      (arg1)->printStatusIdentation();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptPrinter_1printStatusEnd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  sgpp::optimization::Printer *arg1 = (sgpp::optimization::Printer *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::Printer **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->printStatusEnd((std::string const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptPrinter_1printStatusEnd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::optimization::Printer *arg1 = (sgpp::optimization::Printer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::Printer **)&jarg1; 
  {
    try {
      (arg1)->printStatusEnd();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptPrinter_1enableStatusPrinting(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::optimization::Printer *arg1 = (sgpp::optimization::Printer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::Printer **)&jarg1; 
  {
    try {
      (arg1)->enableStatusPrinting();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptPrinter_1disableStatusPrinting(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  sgpp::optimization::Printer *arg1 = (sgpp::optimization::Printer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::Printer **)&jarg1; 
  {
    try {
      (arg1)->disableStatusPrinting();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_sgpp_jsgppJNI_OptPrinter_1isStatusPrintingEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  sgpp::optimization::Printer *arg1 = (sgpp::optimization::Printer *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::Printer **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->isStatusPrintingEnabled();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_sgpp_jsgppJNI_OptPrinter_1getVerbosity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  sgpp::optimization::Printer *arg1 = (sgpp::optimization::Printer *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::Printer **)&jarg1; 
  {
    try {
      result = (int)((sgpp::optimization::Printer const *)arg1)->getVerbosity();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptPrinter_1setVerbosity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  sgpp::optimization::Printer *arg1 = (sgpp::optimization::Printer *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::Printer **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->setVerbosity(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_sgpp_jsgppJNI_OptPrinter_1getLastDurationSecs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sgpp::optimization::Printer *arg1 = (sgpp::optimization::Printer *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::Printer **)&jarg1; 
  {
    try {
      result = (double)((sgpp::optimization::Printer const *)arg1)->getLastDurationSecs();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptPrinter_1getMutex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::Printer *arg1 = (sgpp::optimization::Printer *) 0 ;
  sgpp::optimization::MutexType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::Printer **)&jarg1; 
  {
    try {
      result = (sgpp::optimization::MutexType *) &(arg1)->getMutex();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::MutexType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptPrinter_1getStream(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::Printer *arg1 = (sgpp::optimization::Printer *) 0 ;
  std::ostream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::Printer **)&jarg1; 
  {
    try {
      result = (std::ostream *)((sgpp::optimization::Printer const *)arg1)->getStream();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(std::ostream **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptPrinter_1setStream(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::Printer *arg1 = (sgpp::optimization::Printer *) 0 ;
  std::ostream *arg2 = (std::ostream *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::Printer **)&jarg1; 
  arg2 = *(std::ostream **)&jarg2; 
  {
    try {
      (arg1)->setStream(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptPrinter_1getLineLengthLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::optimization::Printer *arg1 = (sgpp::optimization::Printer *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::Printer **)&jarg1; 
  {
    try {
      result = (arg1)->getLineLengthLimit();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptPrinter_1setLineLengthLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  sgpp::optimization::Printer *arg1 = (sgpp::optimization::Printer *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::optimization::Printer **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      (arg1)->setLineLengthLimit(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptPrinter_1printIterativeGridGenerator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::optimization::Printer *arg1 = (sgpp::optimization::Printer *) 0 ;
  sgpp::optimization::IterativeGridGenerator *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::Printer **)&jarg1; 
  arg2 = *(sgpp::optimization::IterativeGridGenerator **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::IterativeGridGenerator const & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::Printer const *)arg1)->printIterativeGridGenerator((sgpp::optimization::IterativeGridGenerator const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptPrinter_1printSLE(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sgpp::optimization::Printer *arg1 = (sgpp::optimization::Printer *) 0 ;
  sgpp::optimization::SLE *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sgpp::optimization::Printer **)&jarg1; 
  arg2 = *(sgpp::optimization::SLE **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::optimization::SLE & reference is null");
    return ;
  } 
  {
    try {
      ((sgpp::optimization::Printer const *)arg1)->printSLE(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_delete_1OptPrinter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sgpp::optimization::Printer *arg1 = (sgpp::optimization::Printer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sgpp::optimization::Printer **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_createOperationMultipleHierarchisation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sgpp::base::Grid *arg1 = 0 ;
  sgpp::optimization::OperationMultipleHierarchisation *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sgpp::base::Grid **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sgpp::base::Grid & reference is null");
    return 0;
  } 
  {
    try {
      result = (sgpp::optimization::OperationMultipleHierarchisation *)sgpp::op_factory::createOperationMultipleHierarchisation(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(sgpp::optimization::OperationMultipleHierarchisation **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptFileIOWriteMatrix_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  std::string *arg1 = 0 ;
  std::vector< double > *arg2 = 0 ;
  size_t arg3 ;
  size_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(std::vector< double > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > const & reference is null");
    return ;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  {
    try {
      sgpp::optimization::file_io::SWIGTEMPLATEDISAMBIGUATOR writeMatrix< double >((std::string const &)*arg1,(std::vector< double > const &)*arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptFileIOReadMatrix_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  std::string *arg1 = 0 ;
  std::vector< double > *arg2 = 0 ;
  size_t *arg3 = 0 ;
  size_t *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(std::vector< double > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > & reference is null");
    return ;
  } 
  arg3 = *(size_t **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "size_t & reference is null");
    return ;
  } 
  arg4 = *(size_t **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "size_t & reference is null");
    return ;
  } 
  {
    try {
      sgpp::optimization::file_io::SWIGTEMPLATEDISAMBIGUATOR readMatrix< double >((std::string const &)*arg1,*arg2,*arg3,*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptFileIOWriteVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  std::string *arg1 = 0 ;
  std::vector< double > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(std::vector< double > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > const & reference is null");
    return ;
  } 
  {
    try {
      sgpp::optimization::file_io::SWIGTEMPLATEDISAMBIGUATOR writeVector< double >((std::string const &)*arg1,(std::vector< double > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_OptFileIOReadVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  std::string *arg1 = 0 ;
  std::vector< double > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(std::vector< double > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > & reference is null");
    return ;
  } 
  {
    try {
      sgpp::optimization::file_io::SWIGTEMPLATEDISAMBIGUATOR readVector< double >((std::string const &)*arg1,*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DataVector_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(std::vector< double > **)&baseptr = *(sgpp::base::DataVector **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DataMatrix_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(std::vector< double > **)&baseptr = *(sgpp::base::DataMatrix **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_Stretching_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::base::BoundingBox **)&baseptr = *(sgpp::base::Stretching **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_SurplusRefinementFunctor_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::base::RefinementFunctor **)&baseptr = *(sgpp::base::SurplusRefinementFunctor **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OperationQuadratureMC_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::base::OperationQuadrature **)&baseptr = *(sgpp::base::OperationQuadratureMC **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_RefinementDecorator_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::base::AbstractRefinement **)&baseptr = *(sgpp::base::RefinementDecorator **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_HashRefinement_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::base::AbstractRefinement **)&baseptr = *(sgpp::base::HashRefinement **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_HashRefinementBoundaries_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::base::AbstractRefinement **)&baseptr = *(sgpp::base::HashRefinementBoundaries **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_PredictiveRefinementIndicator_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::base::RefinementFunctor **)&baseptr = *(sgpp::base::PredictiveRefinementIndicator **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_PredictiveRefinement_1refinement_1key_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::base::AbstractRefinement_refinement_key **)&baseptr = *(sgpp::base::PredictiveRefinement_refinement_key **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_PredictiveRefinement_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::base::RefinementDecorator **)&baseptr = *(sgpp::base::PredictiveRefinement **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_ForwardSelectorRefinementIndicator_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::base::RefinementFunctor **)&baseptr = *(sgpp::base::ForwardSelectorRefinementIndicator **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_ForwardSelectorRefinement_1refinement_1key_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::base::AbstractRefinement_refinement_key **)&baseptr = *(sgpp::base::ForwardSelectorRefinement_refinement_key **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_ForwardSelectorRefinement_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::base::RefinementDecorator **)&baseptr = *(sgpp::base::ForwardSelectorRefinement **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_ImpurityRefinementIndicator_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::base::RefinementFunctor **)&baseptr = *(sgpp::base::ImpurityRefinementIndicator **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_ImpurityRefinement_1refinement_1key_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::base::AbstractRefinement_refinement_key **)&baseptr = *(sgpp::base::ImpurityRefinement_refinement_key **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_ImpurityRefinement_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::base::RefinementDecorator **)&baseptr = *(sgpp::base::ImpurityRefinement **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_StandardGridGenerator_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::base::GridGenerator **)&baseptr = *(sgpp::base::StandardGridGenerator **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_L0BoundaryGridGenerator_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::base::GridGenerator **)&baseptr = *(sgpp::base::L0BoundaryGridGenerator **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_PrewaveletGridGenerator_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::base::GridGenerator **)&baseptr = *(sgpp::base::PrewaveletGridGenerator **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_PeriodicGridGenerator_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::base::GridGenerator **)&baseptr = *(sgpp::base::PeriodicGridGenerator **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_StretchedBoundaryGridGenerator_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::base::GridGenerator **)&baseptr = *(sgpp::base::StretchedBoundaryGridGenerator **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_BoundaryGridGenerator_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::base::GridGenerator **)&baseptr = *(sgpp::base::BoundaryGridGenerator **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_SquareRootGridGenerator_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::base::GridGenerator **)&baseptr = *(sgpp::base::SquareRootGridGenerator **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_SurplusVolumeRefinementFunctor_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::base::RefinementFunctor **)&baseptr = *(sgpp::base::SurplusVolumeRefinementFunctor **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_SurplusCoarseningFunctor_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::base::CoarseningFunctor **)&baseptr = *(sgpp::base::SurplusCoarseningFunctor **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_GridPrinterForStretching_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::base::GridPrinter **)&baseptr = *(sgpp::base::GridPrinterForStretching **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_GaussLegendreQuadRule1D_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::base::QuadRule1D **)&baseptr = *(sgpp::base::GaussLegendreQuadRule1D **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_GaussHermiteQuadRule1D_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::base::QuadRule1D **)&baseptr = *(sgpp::base::GaussHermiteQuadRule1D **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OperationEvalPeriodic_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::base::OperationEval **)&baseptr = *(sgpp::base::OperationEvalPeriodic **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OperationMultipleEvalPeriodic_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::base::OperationMultipleEval **)&baseptr = *(sgpp::base::OperationMultipleEvalPeriodic **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_SLinearBase_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::base::Basis< unsigned int,unsigned int > **)&baseptr = *(sgpp::base::LinearBasis< unsigned int,unsigned int > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_SLinearBoundaryBase_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::base::Basis< unsigned int,unsigned int > **)&baseptr = *(sgpp::base::LinearBoundaryBasis< unsigned int,unsigned int > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_SLinearClenshawCurtisBase_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::base::Basis< unsigned int,unsigned int > **)&baseptr = *(sgpp::base::LinearClenshawCurtisBasis< unsigned int,unsigned int > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_SLinearStretchedBase_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::base::LinearBasis< unsigned int,unsigned int > **)&baseptr = *(sgpp::base::LinearStretchedBasis< unsigned int,unsigned int > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_SLinearStretchedBoundaryBase_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::base::LinearBoundaryBasis< unsigned int,unsigned int > **)&baseptr = *(sgpp::base::LinearStretchedBoundaryBasis< unsigned int,unsigned int > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_SLinearModifiedBase_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::base::Basis< unsigned int,unsigned int > **)&baseptr = *(sgpp::base::LinearModifiedBasis< unsigned int,unsigned int > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_SPolyBase_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::base::Basis< unsigned int,unsigned int > **)&baseptr = *(sgpp::base::PolyBasis< unsigned int,unsigned int > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_SWaveletBase_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::base::Basis< unsigned int,unsigned int > **)&baseptr = *(sgpp::base::WaveletBasis< unsigned int,unsigned int > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_SWaveletBoundaryBase_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::base::Basis< unsigned int,unsigned int > **)&baseptr = *(sgpp::base::WaveletBoundaryBasis< unsigned int,unsigned int > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_SWaveletModifiedBase_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::base::Basis< unsigned int,unsigned int > **)&baseptr = *(sgpp::base::WaveletModifiedBasis< unsigned int,unsigned int > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_SBsplineBase_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::base::Basis< unsigned int,unsigned int > **)&baseptr = *(sgpp::base::BsplineBasis< unsigned int,unsigned int > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_SBsplineBoundaryBase_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::base::Basis< unsigned int,unsigned int > **)&baseptr = *(sgpp::base::BsplineBoundaryBasis< unsigned int,unsigned int > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_SBsplineClenshawCurtisBase_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::base::Basis< unsigned int,unsigned int > **)&baseptr = *(sgpp::base::BsplineClenshawCurtisBasis< unsigned int,unsigned int > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_SBsplineModifiedBase_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::base::Basis< unsigned int,unsigned int > **)&baseptr = *(sgpp::base::BsplineModifiedBasis< unsigned int,unsigned int > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_SBsplineModifiedClenshawCurtisBase_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::base::Basis< unsigned int,unsigned int > **)&baseptr = *(sgpp::base::BsplineModifiedClenshawCurtisBasis< unsigned int,unsigned int > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_SFundamentalSplineBase_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::base::Basis< unsigned int,unsigned int > **)&baseptr = *(sgpp::base::FundamentalSplineBasis< unsigned int,unsigned int > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_SFundamentalSplineModifiedBase_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::base::Basis< unsigned int,unsigned int > **)&baseptr = *(sgpp::base::FundamentalSplineModifiedBasis< unsigned int,unsigned int > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_SPrewaveletBase_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::base::Basis< unsigned int,unsigned int > **)&baseptr = *(sgpp::base::PrewaveletBasis< unsigned int,unsigned int > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OperationParabolicPDESolverSystem_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::base::OperationMatrix **)&baseptr = *(sgpp::solver::OperationParabolicPDESolverSystem **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OperationParabolicPDESolverSystemDirichlet_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::solver::OperationParabolicPDESolverSystem **)&baseptr = *(sgpp::pde::OperationParabolicPDESolverSystemDirichlet **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_HeatEquationParabolicPDESolverSystem_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::pde::OperationParabolicPDESolverSystemDirichlet **)&baseptr = *(sgpp::pde::HeatEquationParabolicPDESolverSystem **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_ParabolicPDESolver_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::pde::PDESolver **)&baseptr = *(sgpp::pde::ParabolicPDESolver **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_HeatEquationSolver_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::pde::ParabolicPDESolver **)&baseptr = *(sgpp::pde::HeatEquationSolver **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_HeatEquationSolverWithStretching_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::pde::ParabolicPDESolver **)&baseptr = *(sgpp::pde::HeatEquationSolverWithStretching **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_EllipticPDESolver_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::pde::PDESolver **)&baseptr = *(sgpp::pde::EllipticPDESolver **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_PoissonEquationSolver_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::pde::EllipticPDESolver **)&baseptr = *(sgpp::pde::PoissonEquationSolver **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OperationParabolicPDESolverSystemFreeBoundaries_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::solver::OperationParabolicPDESolverSystem **)&baseptr = *(sgpp::pde::OperationParabolicPDESolverSystemFreeBoundaries **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OperationMatrixLTwoDotExplicitPeriodic_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::base::OperationMatrix **)&baseptr = *(sgpp::pde::OperationMatrixLTwoDotExplicitPeriodic **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OperationMatrixLTwoDotPeriodic_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::base::OperationMatrix **)&baseptr = *(sgpp::pde::OperationMatrixLTwoDotPeriodic **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_SLESolver_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::solver::SGSolver **)&baseptr = *(sgpp::solver::SLESolver **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_ODESolver_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::solver::SGSolver **)&baseptr = *(sgpp::solver::ODESolver **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_ConjugateGradients_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::solver::SLESolver **)&baseptr = *(sgpp::solver::ConjugateGradients **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_BiCGStab_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::solver::SLESolver **)&baseptr = *(sgpp::solver::BiCGStab **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_Euler_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::solver::ODESolver **)&baseptr = *(sgpp::solver::Euler **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_CrankNicolson_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::solver::ODESolver **)&baseptr = *(sgpp::solver::CrankNicolson **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DensitySystemMatrix_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::base::OperationMatrix **)&baseptr = *(sgpp::datadriven::DensitySystemMatrix **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DBMatDecompMatrixSolver_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::solver::SGSolver **)&baseptr = *(sgpp::datadriven::DBMatDecompMatrixSolver **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DBMatDMSChol_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::datadriven::DBMatDecompMatrixSolver **)&baseptr = *(sgpp::datadriven::DBMatDMSChol **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DBMatDMSDenseIChol_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::datadriven::DBMatDMSChol **)&baseptr = *(sgpp::datadriven::DBMatDMSDenseIChol **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DBMatOfflineGE_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::datadriven::DBMatOffline **)&baseptr = *(sgpp::datadriven::DBMatOfflineGE **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DBMatOfflineChol_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::datadriven::DBMatOfflineGE **)&baseptr = *(sgpp::datadriven::DBMatOfflineChol **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DBMatOfflineDenseIChol_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::datadriven::DBMatOfflineChol **)&baseptr = *(sgpp::datadriven::DBMatOfflineDenseIChol **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DBMatOnlineDE_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::datadriven::DBMatOnline **)&baseptr = *(sgpp::datadriven::DBMatOnlineDE **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DBMatOnlineDEChol_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::datadriven::DBMatOnlineDE **)&baseptr = *(sgpp::datadriven::DBMatOnlineDEChol **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_GaussianKDE_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::datadriven::DensityEstimator **)&baseptr = *(sgpp::datadriven::GaussianKDE **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_LearnerSGDE_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::datadriven::DensityEstimator **)&baseptr = *(sgpp::datadriven::LearnerSGDE **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_MultiGridRefinementFunctor_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::base::RefinementFunctor **)&baseptr = *(sgpp::datadriven::MultiGridRefinementFunctor **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_MultiSurplusRefinementFunctor_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::datadriven::MultiGridRefinementFunctor **)&baseptr = *(sgpp::datadriven::MultiSurplusRefinementFunctor **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_DataBasedRefinementFunctor_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::datadriven::MultiGridRefinementFunctor **)&baseptr = *(sgpp::datadriven::DataBasedRefinementFunctor **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_GridPointBasedRefinementFunctor_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::datadriven::MultiGridRefinementFunctor **)&baseptr = *(sgpp::datadriven::GridPointBasedRefinementFunctor **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_ZeroCrossingRefinementFunctor_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::datadriven::MultiGridRefinementFunctor **)&baseptr = *(sgpp::datadriven::ZeroCrossingRefinementFunctor **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_FileSampleProvider_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::datadriven::SampleProvider **)&baseptr = *(sgpp::datadriven::FileSampleProvider **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_ArffFileSampleProvider_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::datadriven::FileSampleProvider **)&baseptr = *(sgpp::datadriven::ArffFileSampleProvider **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_FileSampleDecorator_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::datadriven::FileSampleProvider **)&baseptr = *(sgpp::datadriven::FileSampleDecorator **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_FitterConfigurationLeastSquares_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::datadriven::FitterConfiguration **)&baseptr = *(sgpp::datadriven::FitterConfigurationLeastSquares **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_ModelFittingLeastSquares_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::datadriven::ModelFittingBase **)&baseptr = *(sgpp::datadriven::ModelFittingLeastSquares **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_MSE_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::datadriven::Metric **)&baseptr = *(sgpp::datadriven::MSE **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_SequentialShufflingFunctor_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::datadriven::ShufflingFunctor **)&baseptr = *(sgpp::datadriven::SequentialShufflingFunctor **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_RandomShufflingFunctor_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::datadriven::ShufflingFunctor **)&baseptr = *(sgpp::datadriven::RandomShufflingFunctor **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_SplittingScorer_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::datadriven::Scorer **)&baseptr = *(sgpp::datadriven::SplittingScorer **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_CrossValidation_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::datadriven::Scorer **)&baseptr = *(sgpp::datadriven::CrossValidation **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_SplittingScorerFactory_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::datadriven::ScorerFactory **)&baseptr = *(sgpp::datadriven::SplittingScorerFactory **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_CrossValidationScorerFactory_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::datadriven::ScorerFactory **)&baseptr = *(sgpp::datadriven::CrossValidationScorerFactory **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_LeastSquaresRegressionMinerFactory_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::datadriven::MinerFactory **)&baseptr = *(sgpp::datadriven::LeastSquaresRegressionMinerFactory **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OperationRegularizationDiagonal_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::base::OperationMatrix **)&baseptr = *(sgpp::datadriven::OperationRegularizationDiagonal **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_NaiveSampleGenerator_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::quadrature::SampleGenerator **)&baseptr = *(sgpp::quadrature::NaiveSampleGenerator **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_LatinHypercubeSampleGenerator_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::quadrature::SampleGenerator **)&baseptr = *(sgpp::quadrature::LatinHypercubeSampleGenerator **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_StratifiedSampleGenerator_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::quadrature::SampleGenerator **)&baseptr = *(sgpp::quadrature::StratifiedSampleGenerator **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_HaltonSampleGenerator_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::quadrature::SampleGenerator **)&baseptr = *(sgpp::quadrature::HaltonSampleGenerator **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptInterpolantScalarFunction_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::ScalarFunction **)&baseptr = *(sgpp::optimization::InterpolantScalarFunction **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptInterpolantScalarFunctionGradient_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::ScalarFunctionGradient **)&baseptr = *(sgpp::optimization::InterpolantScalarFunctionGradient **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptInterpolantScalarFunctionHessian_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::ScalarFunctionHessian **)&baseptr = *(sgpp::optimization::InterpolantScalarFunctionHessian **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptInterpolantVectorFunction_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::VectorFunction **)&baseptr = *(sgpp::optimization::InterpolantVectorFunction **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptInterpolantVectorFunctionGradient_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::VectorFunctionGradient **)&baseptr = *(sgpp::optimization::InterpolantVectorFunctionGradient **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptInterpolantVectorFunctionHessian_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::VectorFunctionHessian **)&baseptr = *(sgpp::optimization::InterpolantVectorFunctionHessian **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptComponentScalarFunction_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::ScalarFunction **)&baseptr = *(sgpp::optimization::ComponentScalarFunction **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptComponentScalarFunctionGradient_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::ScalarFunctionGradient **)&baseptr = *(sgpp::optimization::ComponentScalarFunctionGradient **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptComponentScalarFunctionHessian_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::ScalarFunctionHessian **)&baseptr = *(sgpp::optimization::ComponentScalarFunctionHessian **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptWrapperScalarFunction_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::ScalarFunction **)&baseptr = *(sgpp::optimization::WrapperScalarFunction **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptWrapperScalarFunctionGradient_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::ScalarFunctionGradient **)&baseptr = *(sgpp::optimization::WrapperScalarFunctionGradient **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptWrapperScalarFunctionHessian_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::ScalarFunctionHessian **)&baseptr = *(sgpp::optimization::WrapperScalarFunctionHessian **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptWrapperVectorFunction_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::VectorFunction **)&baseptr = *(sgpp::optimization::WrapperVectorFunction **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptWrapperVectorFunctionGradient_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::VectorFunctionGradient **)&baseptr = *(sgpp::optimization::WrapperVectorFunctionGradient **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptWrapperVectorFunctionHessian_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::VectorFunctionHessian **)&baseptr = *(sgpp::optimization::WrapperVectorFunctionHessian **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptHashRefinementMultiple_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::base::HashRefinement **)&baseptr = *(sgpp::optimization::HashRefinementMultiple **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptIterativeGridGeneratorLinearSurplus_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::IterativeGridGenerator **)&baseptr = *(sgpp::optimization::IterativeGridGeneratorLinearSurplus **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptIterativeGridGeneratorRitterNovak_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::IterativeGridGenerator **)&baseptr = *(sgpp::optimization::IterativeGridGeneratorRitterNovak **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptIterativeGridGeneratorSOO_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::IterativeGridGenerator **)&baseptr = *(sgpp::optimization::IterativeGridGeneratorSOO **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_CloneableSLE_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::SLE **)&baseptr = *(sgpp::optimization::CloneableSLE **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptFullSLE_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::CloneableSLE **)&baseptr = *(sgpp::optimization::FullSLE **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptHierarchisationSLE_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::CloneableSLE **)&baseptr = *(sgpp::optimization::HierarchisationSLE **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptArmadillo_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::sle_solver::SLESolver **)&baseptr = *(sgpp::optimization::sle_solver::Armadillo **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptAutoSLESolver_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::sle_solver::SLESolver **)&baseptr = *(sgpp::optimization::sle_solver::Auto **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptBiCGStab_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::sle_solver::SLESolver **)&baseptr = *(sgpp::optimization::sle_solver::BiCGStab **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptEigen_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::sle_solver::SLESolver **)&baseptr = *(sgpp::optimization::sle_solver::Eigen **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptGaussianElimination_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::sle_solver::SLESolver **)&baseptr = *(sgpp::optimization::sle_solver::GaussianElimination **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptGmmpp_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::sle_solver::SLESolver **)&baseptr = *(sgpp::optimization::sle_solver::Gmmpp **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptUMFPACK_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::sle_solver::SLESolver **)&baseptr = *(sgpp::optimization::sle_solver::UMFPACK **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptAdaptiveGradientDescent_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::optimizer::UnconstrainedOptimizer **)&baseptr = *(sgpp::optimization::optimizer::AdaptiveGradientDescent **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptAdaptiveNewton_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::optimizer::UnconstrainedOptimizer **)&baseptr = *(sgpp::optimization::optimizer::AdaptiveNewton **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptBFGS_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::optimizer::UnconstrainedOptimizer **)&baseptr = *(sgpp::optimization::optimizer::BFGS **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptCMAES_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::optimizer::UnconstrainedOptimizer **)&baseptr = *(sgpp::optimization::optimizer::CMAES **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptDifferentialEvolution_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::optimizer::UnconstrainedOptimizer **)&baseptr = *(sgpp::optimization::optimizer::DifferentialEvolution **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptGradientDescent_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::optimizer::UnconstrainedOptimizer **)&baseptr = *(sgpp::optimization::optimizer::GradientDescent **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptMultiStart_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::optimizer::UnconstrainedOptimizer **)&baseptr = *(sgpp::optimization::optimizer::MultiStart **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptNelderMead_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::optimizer::UnconstrainedOptimizer **)&baseptr = *(sgpp::optimization::optimizer::NelderMead **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptNewton_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::optimizer::UnconstrainedOptimizer **)&baseptr = *(sgpp::optimization::optimizer::Newton **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptNLCG_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::optimizer::UnconstrainedOptimizer **)&baseptr = *(sgpp::optimization::optimizer::NLCG **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptRprop_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::optimizer::UnconstrainedOptimizer **)&baseptr = *(sgpp::optimization::optimizer::Rprop **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptLevenbergMarquardt_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::optimizer::LeastSquaresOptimizer **)&baseptr = *(sgpp::optimization::optimizer::LevenbergMarquardt **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptConstrainedOptimizer_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::optimizer::UnconstrainedOptimizer **)&baseptr = *(sgpp::optimization::optimizer::ConstrainedOptimizer **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptAugmentedLagrangian_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::optimizer::ConstrainedOptimizer **)&baseptr = *(sgpp::optimization::optimizer::AugmentedLagrangian **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptLogBarrier_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::optimizer::ConstrainedOptimizer **)&baseptr = *(sgpp::optimization::optimizer::LogBarrier **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptSquaredPenalty_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::optimizer::ConstrainedOptimizer **)&baseptr = *(sgpp::optimization::optimizer::SquaredPenalty **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptTestScalarFunction_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::ScalarFunction **)&baseptr = *(sgpp::optimization::test_problems::TestScalarFunction **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptTestVectorFunction_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::VectorFunction **)&baseptr = *(sgpp::optimization::test_problems::TestVectorFunction **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_AbsoluteValueObjective_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::TestScalarFunction **)&baseptr = *(sgpp::optimization::test_problems::AbsoluteValueObjective **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptAbsoluteValueObjective_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::UnconstrainedTestProblem **)&baseptr = *(sgpp::optimization::test_problems::AbsoluteValue **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptAckleyObjective_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::TestScalarFunction **)&baseptr = *(sgpp::optimization::test_problems::AckleyObjective **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptAckley_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::UnconstrainedTestProblem **)&baseptr = *(sgpp::optimization::test_problems::Ackley **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptBealeObjective_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::TestScalarFunction **)&baseptr = *(sgpp::optimization::test_problems::BealeObjective **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptBeale_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::UnconstrainedTestProblem **)&baseptr = *(sgpp::optimization::test_problems::Beale **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptBraninObjective_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::TestScalarFunction **)&baseptr = *(sgpp::optimization::test_problems::BraninObjective **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptBranin_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::UnconstrainedTestProblem **)&baseptr = *(sgpp::optimization::test_problems::Branin **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptBubbleWrapObjective_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::TestScalarFunction **)&baseptr = *(sgpp::optimization::test_problems::BubbleWrapObjective **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptBubbleWrap_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::UnconstrainedTestProblem **)&baseptr = *(sgpp::optimization::test_problems::BubbleWrap **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptEasomYangObjective_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::TestScalarFunction **)&baseptr = *(sgpp::optimization::test_problems::EasomYangObjective **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptEasomYang_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::UnconstrainedTestProblem **)&baseptr = *(sgpp::optimization::test_problems::EasomYang **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptEggholderObjective_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::TestScalarFunction **)&baseptr = *(sgpp::optimization::test_problems::EggholderObjective **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptEggholder_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::UnconstrainedTestProblem **)&baseptr = *(sgpp::optimization::test_problems::Eggholder **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptGoldsteinPriceObjective_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::TestScalarFunction **)&baseptr = *(sgpp::optimization::test_problems::GoldsteinPriceObjective **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptGoldsteinPrice_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::UnconstrainedTestProblem **)&baseptr = *(sgpp::optimization::test_problems::GoldsteinPrice **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptGriewankObjective_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::TestScalarFunction **)&baseptr = *(sgpp::optimization::test_problems::GriewankObjective **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptGriewank_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::UnconstrainedTestProblem **)&baseptr = *(sgpp::optimization::test_problems::Griewank **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptHartman3Objective_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::TestScalarFunction **)&baseptr = *(sgpp::optimization::test_problems::Hartman3Objective **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptHartman3_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::UnconstrainedTestProblem **)&baseptr = *(sgpp::optimization::test_problems::Hartman3 **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptHartman6Objective_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::TestScalarFunction **)&baseptr = *(sgpp::optimization::test_problems::Hartman6Objective **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptHartman6_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::UnconstrainedTestProblem **)&baseptr = *(sgpp::optimization::test_problems::Hartman6 **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptHimmelblauObjective_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::TestScalarFunction **)&baseptr = *(sgpp::optimization::test_problems::HimmelblauObjective **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptHimmelblau_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::UnconstrainedTestProblem **)&baseptr = *(sgpp::optimization::test_problems::Himmelblau **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptHoelderTableObjective_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::TestScalarFunction **)&baseptr = *(sgpp::optimization::test_problems::HoelderTableObjective **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptHoelderTable_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::UnconstrainedTestProblem **)&baseptr = *(sgpp::optimization::test_problems::HoelderTable **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptIncreasingPowerObjective_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::TestScalarFunction **)&baseptr = *(sgpp::optimization::test_problems::IncreasingPowerObjective **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptIncreasingPower_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::UnconstrainedTestProblem **)&baseptr = *(sgpp::optimization::test_problems::IncreasingPower **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptMichalewiczObjective_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::TestScalarFunction **)&baseptr = *(sgpp::optimization::test_problems::MichalewiczObjective **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptMichalewicz_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::UnconstrainedTestProblem **)&baseptr = *(sgpp::optimization::test_problems::Michalewicz **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptMladineoObjective_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::TestScalarFunction **)&baseptr = *(sgpp::optimization::test_problems::MladineoObjective **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptMladineo_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::UnconstrainedTestProblem **)&baseptr = *(sgpp::optimization::test_problems::Mladineo **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptPermObjective_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::TestScalarFunction **)&baseptr = *(sgpp::optimization::test_problems::PermObjective **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptPerm_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::UnconstrainedTestProblem **)&baseptr = *(sgpp::optimization::test_problems::Perm **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptRastriginObjective_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::TestScalarFunction **)&baseptr = *(sgpp::optimization::test_problems::RastriginObjective **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptRastrigin_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::UnconstrainedTestProblem **)&baseptr = *(sgpp::optimization::test_problems::Rastrigin **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptRosenbrockObjective_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::TestScalarFunction **)&baseptr = *(sgpp::optimization::test_problems::RosenbrockObjective **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptRosenbrock_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::UnconstrainedTestProblem **)&baseptr = *(sgpp::optimization::test_problems::Rosenbrock **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptSHCBObjective_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::TestScalarFunction **)&baseptr = *(sgpp::optimization::test_problems::SHCBObjective **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptSHCB_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::UnconstrainedTestProblem **)&baseptr = *(sgpp::optimization::test_problems::SHCB **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptSchwefelObjective_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::TestScalarFunction **)&baseptr = *(sgpp::optimization::test_problems::SchwefelObjective **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptSchwefel_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::UnconstrainedTestProblem **)&baseptr = *(sgpp::optimization::test_problems::Schwefel **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptSphereObjective_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::TestScalarFunction **)&baseptr = *(sgpp::optimization::test_problems::SphereObjective **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptSphere_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::UnconstrainedTestProblem **)&baseptr = *(sgpp::optimization::test_problems::Sphere **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptTremblingParabolaObjective_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::TestScalarFunction **)&baseptr = *(sgpp::optimization::test_problems::TremblingParabolaObjective **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptTremblingParabola_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::UnconstrainedTestProblem **)&baseptr = *(sgpp::optimization::test_problems::TremblingParabola **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptFloudasObjective_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::TestScalarFunction **)&baseptr = *(sgpp::optimization::test_problems::FloudasObjective **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptFloudasInequalityConstraint_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::TestVectorFunction **)&baseptr = *(sgpp::optimization::test_problems::FloudasInequalityConstraint **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptFloudasEqualityConstraint_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::TestVectorFunction **)&baseptr = *(sgpp::optimization::test_problems::FloudasEqualityConstraint **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptFloudas_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::ConstrainedTestProblem **)&baseptr = *(sgpp::optimization::test_problems::Floudas **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptG03Objective_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::TestScalarFunction **)&baseptr = *(sgpp::optimization::test_problems::G03Objective **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptG03InequalityConstraint_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::TestVectorFunction **)&baseptr = *(sgpp::optimization::test_problems::G03InequalityConstraint **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptG03EqualityConstraint_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::TestVectorFunction **)&baseptr = *(sgpp::optimization::test_problems::G03EqualityConstraint **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptG03_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::ConstrainedTestProblem **)&baseptr = *(sgpp::optimization::test_problems::G03 **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptG04Objective_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::TestScalarFunction **)&baseptr = *(sgpp::optimization::test_problems::G04Objective **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptG04InequalityConstraint_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::TestVectorFunction **)&baseptr = *(sgpp::optimization::test_problems::G04InequalityConstraint **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptG04EqualityConstraint_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::TestVectorFunction **)&baseptr = *(sgpp::optimization::test_problems::G04EqualityConstraint **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptG04_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::ConstrainedTestProblem **)&baseptr = *(sgpp::optimization::test_problems::G04 **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptG05Objective_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::TestScalarFunction **)&baseptr = *(sgpp::optimization::test_problems::G05Objective **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptG05InequalityConstraint_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::TestVectorFunction **)&baseptr = *(sgpp::optimization::test_problems::G05InequalityConstraint **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptG05EqualityConstraint_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::TestVectorFunction **)&baseptr = *(sgpp::optimization::test_problems::G05EqualityConstraint **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptG05_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::ConstrainedTestProblem **)&baseptr = *(sgpp::optimization::test_problems::G05 **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptG06Objective_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::TestScalarFunction **)&baseptr = *(sgpp::optimization::test_problems::G06Objective **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptG06InequalityConstraint_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::TestVectorFunction **)&baseptr = *(sgpp::optimization::test_problems::G06InequalityConstraint **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptG06EqualityConstraint_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::TestVectorFunction **)&baseptr = *(sgpp::optimization::test_problems::G06EqualityConstraint **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptG06_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::ConstrainedTestProblem **)&baseptr = *(sgpp::optimization::test_problems::G06 **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptG08Objective_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::TestScalarFunction **)&baseptr = *(sgpp::optimization::test_problems::G08Objective **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptG08InequalityConstraint_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::TestVectorFunction **)&baseptr = *(sgpp::optimization::test_problems::G08InequalityConstraint **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptG08EqualityConstraint_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::TestVectorFunction **)&baseptr = *(sgpp::optimization::test_problems::G08EqualityConstraint **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptG08_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::ConstrainedTestProblem **)&baseptr = *(sgpp::optimization::test_problems::G08 **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptG09Objective_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::TestScalarFunction **)&baseptr = *(sgpp::optimization::test_problems::G09Objective **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptG09InequalityConstraint_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::TestVectorFunction **)&baseptr = *(sgpp::optimization::test_problems::G09InequalityConstraint **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptG09EqualityConstraint_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::TestVectorFunction **)&baseptr = *(sgpp::optimization::test_problems::G09EqualityConstraint **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptG09_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::ConstrainedTestProblem **)&baseptr = *(sgpp::optimization::test_problems::G09 **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptG10Objective_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::TestScalarFunction **)&baseptr = *(sgpp::optimization::test_problems::G10Objective **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptG10InequalityConstraint_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::TestVectorFunction **)&baseptr = *(sgpp::optimization::test_problems::G10InequalityConstraint **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptG10EqualityConstraint_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::TestVectorFunction **)&baseptr = *(sgpp::optimization::test_problems::G10EqualityConstraint **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptG10_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::ConstrainedTestProblem **)&baseptr = *(sgpp::optimization::test_problems::G10 **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptG11Objective_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::TestScalarFunction **)&baseptr = *(sgpp::optimization::test_problems::G11Objective **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptG11InequalityConstraint_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::TestVectorFunction **)&baseptr = *(sgpp::optimization::test_problems::G11InequalityConstraint **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptG11EqualityConstraint_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::TestVectorFunction **)&baseptr = *(sgpp::optimization::test_problems::G11EqualityConstraint **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptG11_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::ConstrainedTestProblem **)&baseptr = *(sgpp::optimization::test_problems::G11 **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptG12Objective_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::TestScalarFunction **)&baseptr = *(sgpp::optimization::test_problems::G12Objective **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptG12InequalityConstraint_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::TestVectorFunction **)&baseptr = *(sgpp::optimization::test_problems::G12InequalityConstraint **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptG12EqualityConstraint_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::TestVectorFunction **)&baseptr = *(sgpp::optimization::test_problems::G12EqualityConstraint **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptG12_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::ConstrainedTestProblem **)&baseptr = *(sgpp::optimization::test_problems::G12 **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptG13Objective_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::TestScalarFunction **)&baseptr = *(sgpp::optimization::test_problems::G13Objective **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptG13InequalityConstraint_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::TestVectorFunction **)&baseptr = *(sgpp::optimization::test_problems::G13InequalityConstraint **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptG13EqualityConstraint_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::TestVectorFunction **)&baseptr = *(sgpp::optimization::test_problems::G13EqualityConstraint **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptG13_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::ConstrainedTestProblem **)&baseptr = *(sgpp::optimization::test_problems::G13 **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptSimionescuObjective_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::TestScalarFunction **)&baseptr = *(sgpp::optimization::test_problems::SimionescuObjective **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptSimionescuInequalityConstraint_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::TestVectorFunction **)&baseptr = *(sgpp::optimization::test_problems::SimionescuInequalityConstraint **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptSimionescuEqualityConstraint_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::TestVectorFunction **)&baseptr = *(sgpp::optimization::test_problems::SimionescuEqualityConstraint **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptSimionescu_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::ConstrainedTestProblem **)&baseptr = *(sgpp::optimization::test_problems::Simionescu **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptSolandObjective_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::TestScalarFunction **)&baseptr = *(sgpp::optimization::test_problems::SolandObjective **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptSolandInequalityConstraint_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::TestVectorFunction **)&baseptr = *(sgpp::optimization::test_problems::SolandInequalityConstraint **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptSolandEqualityConstraint_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::TestVectorFunction **)&baseptr = *(sgpp::optimization::test_problems::SolandEqualityConstraint **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_sgpp_jsgppJNI_OptSoland_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(sgpp::optimization::test_problems::ConstrainedTestProblem **)&baseptr = *(sgpp::optimization::test_problems::Soland **)&jarg1;
    return baseptr;
}

SWIGEXPORT void JNICALL Java_sgpp_jsgppJNI_swig_1module_1init(JNIEnv *jenv, jclass jcls) {
  int i;
  
  static struct {
    const char *method;
    const char *signature;
  } methods[29] = {
    {
      "SwigDirector_ConjugateGradients_solve__SWIG_0", "(Lsgpp/ConjugateGradients;JJJZZD)V" 
    },
    {
      "SwigDirector_ConjugateGradients_solve__SWIG_1", "(Lsgpp/ConjugateGradients;JJJZZ)V" 
    },
    {
      "SwigDirector_ConjugateGradients_solve__SWIG_2", "(Lsgpp/ConjugateGradients;JJJZ)V" 
    },
    {
      "SwigDirector_ConjugateGradients_solve__SWIG_3", "(Lsgpp/ConjugateGradients;JJJ)V" 
    },
    {
      "SwigDirector_ConjugateGradients_starting", "(Lsgpp/ConjugateGradients;)V" 
    },
    {
      "SwigDirector_ConjugateGradients_calcStarting", "(Lsgpp/ConjugateGradients;)V" 
    },
    {
      "SwigDirector_ConjugateGradients_iterationComplete", "(Lsgpp/ConjugateGradients;)V" 
    },
    {
      "SwigDirector_ConjugateGradients_complete", "(Lsgpp/ConjugateGradients;)V" 
    },
    {
      "SwigDirector_OptScalarFunction_eval", "(Lsgpp/OptScalarFunction;J)D" 
    },
    {
      "SwigDirector_OptScalarFunction_clone", "(Lsgpp/OptScalarFunction;J)V" 
    },
    {
      "SwigDirector_OptScalarFunctionGradient_eval", "(Lsgpp/OptScalarFunctionGradient;JJ)D" 
    },
    {
      "SwigDirector_OptScalarFunctionGradient_clone", "(Lsgpp/OptScalarFunctionGradient;J)V" 
    },
    {
      "SwigDirector_OptScalarFunctionHessian_eval", "(Lsgpp/OptScalarFunctionHessian;JJJ)D" 
    },
    {
      "SwigDirector_OptScalarFunctionHessian_clone", "(Lsgpp/OptScalarFunctionHessian;J)V" 
    },
    {
      "SwigDirector_OptVectorFunction_eval", "(Lsgpp/OptVectorFunction;JJ)V" 
    },
    {
      "SwigDirector_OptVectorFunction_clone", "(Lsgpp/OptVectorFunction;J)V" 
    },
    {
      "SwigDirector_OptVectorFunctionGradient_eval", "(Lsgpp/OptVectorFunctionGradient;JJJ)V" 
    },
    {
      "SwigDirector_OptVectorFunctionGradient_clone", "(Lsgpp/OptVectorFunctionGradient;J)V" 
    },
    {
      "SwigDirector_OptVectorFunctionHessian_eval", "(Lsgpp/OptVectorFunctionHessian;JJJJ)V" 
    },
    {
      "SwigDirector_OptVectorFunctionHessian_clone", "(Lsgpp/OptVectorFunctionHessian;J)V" 
    },
    {
      "SwigDirector_OptIterativeGridGenerator_generate", "(Lsgpp/OptIterativeGridGenerator;)Z" 
    },
    {
      "SwigDirector_OptSLE_isMatrixEntryNonZero", "(Lsgpp/OptSLE;JJ)Z" 
    },
    {
      "SwigDirector_OptSLE_getMatrixEntry", "(Lsgpp/OptSLE;JJ)D" 
    },
    {
      "SwigDirector_OptSLE_matrixVectorMultiplication", "(Lsgpp/OptSLE;JJ)V" 
    },
    {
      "SwigDirector_OptSLE_countNNZ", "(Lsgpp/OptSLE;)J" 
    },
    {
      "SwigDirector_OptSLE_getDimension", "(Lsgpp/OptSLE;)J" 
    },
    {
      "SwigDirector_OptSLE_isCloneable", "(Lsgpp/OptSLE;)Z" 
    },
    {
      "SwigDirector_OptSLESolver_solve__SWIG_0", "(Lsgpp/OptSLESolver;JJJ)Z" 
    },
    {
      "SwigDirector_OptSLESolver_solve__SWIG_1", "(Lsgpp/OptSLESolver;JJJ)Z" 
    }
  };
  Swig::jclass_jsgppJNI = (jclass) jenv->NewGlobalRef(jcls);
  if (!Swig::jclass_jsgppJNI) return;
  for (i = 0; i < (int) (sizeof(methods)/sizeof(methods[0])); ++i) {
    Swig::director_method_ids[i] = jenv->GetStaticMethodID(jcls, methods[i].method, methods[i].signature);
    if (!Swig::director_method_ids[i]) return;
  }
}


#ifdef __cplusplus
}
#endif

