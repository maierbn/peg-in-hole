/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package sgpp;

public class OptLevenbergMarquardt extends OptLeastSquaresOptimizer {
  private transient long swigCPtr;

  protected OptLevenbergMarquardt(long cPtr, boolean cMemoryOwn) {
    super(jsgppJNI.OptLevenbergMarquardt_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(OptLevenbergMarquardt obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        jsgppJNI.delete_OptLevenbergMarquardt(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public OptLevenbergMarquardt(OptVectorFunction phi, OptVectorFunctionGradient phiGradient, long maxItCount, double tolerance, double initialDamping, double acceptanceThreshold, double effectivenessThreshold) {
    this(jsgppJNI.new_OptLevenbergMarquardt__SWIG_0(OptVectorFunction.getCPtr(phi), phi, OptVectorFunctionGradient.getCPtr(phiGradient), phiGradient, maxItCount, tolerance, initialDamping, acceptanceThreshold, effectivenessThreshold), true);
  }

  public OptLevenbergMarquardt(OptVectorFunction phi, OptVectorFunctionGradient phiGradient, long maxItCount, double tolerance, double initialDamping, double acceptanceThreshold) {
    this(jsgppJNI.new_OptLevenbergMarquardt__SWIG_1(OptVectorFunction.getCPtr(phi), phi, OptVectorFunctionGradient.getCPtr(phiGradient), phiGradient, maxItCount, tolerance, initialDamping, acceptanceThreshold), true);
  }

  public OptLevenbergMarquardt(OptVectorFunction phi, OptVectorFunctionGradient phiGradient, long maxItCount, double tolerance, double initialDamping) {
    this(jsgppJNI.new_OptLevenbergMarquardt__SWIG_2(OptVectorFunction.getCPtr(phi), phi, OptVectorFunctionGradient.getCPtr(phiGradient), phiGradient, maxItCount, tolerance, initialDamping), true);
  }

  public OptLevenbergMarquardt(OptVectorFunction phi, OptVectorFunctionGradient phiGradient, long maxItCount, double tolerance) {
    this(jsgppJNI.new_OptLevenbergMarquardt__SWIG_3(OptVectorFunction.getCPtr(phi), phi, OptVectorFunctionGradient.getCPtr(phiGradient), phiGradient, maxItCount, tolerance), true);
  }

  public OptLevenbergMarquardt(OptVectorFunction phi, OptVectorFunctionGradient phiGradient, long maxItCount) {
    this(jsgppJNI.new_OptLevenbergMarquardt__SWIG_4(OptVectorFunction.getCPtr(phi), phi, OptVectorFunctionGradient.getCPtr(phiGradient), phiGradient, maxItCount), true);
  }

  public OptLevenbergMarquardt(OptVectorFunction phi, OptVectorFunctionGradient phiGradient) {
    this(jsgppJNI.new_OptLevenbergMarquardt__SWIG_5(OptVectorFunction.getCPtr(phi), phi, OptVectorFunctionGradient.getCPtr(phiGradient), phiGradient), true);
  }

  public OptLevenbergMarquardt(OptVectorFunction phi, OptVectorFunctionGradient phiGradient, long maxItCount, double tolerance, double initialDamping, double acceptanceThreshold, double effectivenessThreshold, OptSLESolver sleSolver) {
    this(jsgppJNI.new_OptLevenbergMarquardt__SWIG_6(OptVectorFunction.getCPtr(phi), phi, OptVectorFunctionGradient.getCPtr(phiGradient), phiGradient, maxItCount, tolerance, initialDamping, acceptanceThreshold, effectivenessThreshold, OptSLESolver.getCPtr(sleSolver), sleSolver), true);
  }

  public OptLevenbergMarquardt(OptLevenbergMarquardt other) {
    this(jsgppJNI.new_OptLevenbergMarquardt__SWIG_7(OptLevenbergMarquardt.getCPtr(other), other), true);
  }

  public void optimize() {
    jsgppJNI.OptLevenbergMarquardt_optimize(swigCPtr, this);
  }

  public OptVectorFunctionGradient getPhiGradient() {
    return new OptVectorFunctionGradient(jsgppJNI.OptLevenbergMarquardt_getPhiGradient(swigCPtr, this), false);
  }

  public double getTolerance() {
    return jsgppJNI.OptLevenbergMarquardt_getTolerance(swigCPtr, this);
  }

  public void setTolerance(double tolerance) {
    jsgppJNI.OptLevenbergMarquardt_setTolerance(swigCPtr, this, tolerance);
  }

  public double getInitialDamping() {
    return jsgppJNI.OptLevenbergMarquardt_getInitialDamping(swigCPtr, this);
  }

  public void setInitialDamping(double initialDamping) {
    jsgppJNI.OptLevenbergMarquardt_setInitialDamping(swigCPtr, this, initialDamping);
  }

  public double getAcceptanceThreshold() {
    return jsgppJNI.OptLevenbergMarquardt_getAcceptanceThreshold(swigCPtr, this);
  }

  public void setAcceptanceThreshold(double acceptanceThreshold) {
    jsgppJNI.OptLevenbergMarquardt_setAcceptanceThreshold(swigCPtr, this, acceptanceThreshold);
  }

  public double getEffectivenessThreshold() {
    return jsgppJNI.OptLevenbergMarquardt_getEffectivenessThreshold(swigCPtr, this);
  }

  public void setEffectivenessThreshold(double effectivenessThreshold) {
    jsgppJNI.OptLevenbergMarquardt_setEffectivenessThreshold(swigCPtr, this, effectivenessThreshold);
  }

  public void clone(SWIGTYPE_p_std__unique_ptrT_sgpp__optimization__optimizer__LeastSquaresOptimizer_t clone) {
    jsgppJNI.OptLevenbergMarquardt_clone(swigCPtr, this, SWIGTYPE_p_std__unique_ptrT_sgpp__optimization__optimizer__LeastSquaresOptimizer_t.getCPtr(clone));
  }

  public final static double DEFAULT_TOLERANCE = jsgppJNI.OptLevenbergMarquardt_DEFAULT_TOLERANCE_get();
  public final static double DEFAULT_INITIAL_DAMPING = jsgppJNI.OptLevenbergMarquardt_DEFAULT_INITIAL_DAMPING_get();
  public final static double DEFAULT_ACCEPTANCE_THRESHOLD = jsgppJNI.OptLevenbergMarquardt_DEFAULT_ACCEPTANCE_THRESHOLD_get();
  public final static double DEFAULT_EFFECTIVENESS_THRESHOLD = jsgppJNI.OptLevenbergMarquardt_DEFAULT_EFFECTIVENESS_THRESHOLD_get();
}
