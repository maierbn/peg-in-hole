/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package sgpp;

public class DataVectorSP {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected DataVectorSP(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(DataVectorSP obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        jsgppJNI.delete_DataVectorSP(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public DataVectorSP(long size) {
    this(jsgppJNI.new_DataVectorSP__SWIG_0(size), true);
  }

  public DataVectorSP(long size, float value) {
    this(jsgppJNI.new_DataVectorSP__SWIG_1(size, value), true);
  }

  public DataVectorSP(DataVectorSP vec) {
    this(jsgppJNI.new_DataVectorSP__SWIG_2(DataVectorSP.getCPtr(vec), vec), true);
  }

  public DataVectorSP(SWIGTYPE_p_float input, long size) {
    this(jsgppJNI.new_DataVectorSP__SWIG_3(SWIGTYPE_p_float.getCPtr(input), size), true);
  }

  public DataVectorSP(FloatVector input) {
    this(jsgppJNI.new_DataVectorSP__SWIG_4(FloatVector.getCPtr(input), input), true);
  }

  public DataVectorSP(SWIGTYPE_p_std__vectorT_int_t input) {
    this(jsgppJNI.new_DataVectorSP__SWIG_5(SWIGTYPE_p_std__vectorT_int_t.getCPtr(input)), true);
  }

  public void resize(long size) {
    jsgppJNI.DataVectorSP_resize(swigCPtr, this, size);
  }

  public void resizeZero(long nrows) {
    jsgppJNI.DataVectorSP_resizeZero(swigCPtr, this, nrows);
  }

  public void restructure(SizeTVector remainingIndex) {
    jsgppJNI.DataVectorSP_restructure(swigCPtr, this, SizeTVector.getCPtr(remainingIndex), remainingIndex);
  }

  public void addSize(long inc_elems) {
    jsgppJNI.DataVectorSP_addSize(swigCPtr, this, inc_elems);
  }

  public long append() {
    return jsgppJNI.DataVectorSP_append__SWIG_0(swigCPtr, this);
  }

  public long append(float value) {
    return jsgppJNI.DataVectorSP_append__SWIG_1(swigCPtr, this, value);
  }

  public void insert(long index, float value) {
    jsgppJNI.DataVectorSP_insert(swigCPtr, this, index, value);
  }

  public void setAll(float value) {
    jsgppJNI.DataVectorSP_setAll(swigCPtr, this, value);
  }

  public void copyFrom(DataVectorSP vec) {
    jsgppJNI.DataVectorSP_copyFrom(swigCPtr, this, DataVectorSP.getCPtr(vec), vec);
  }

  public DataVectorSP operatorAssignment(DataVectorSP vec) {
    return new DataVectorSP(jsgppJNI.DataVectorSP_operatorAssignment(swigCPtr, this, DataVectorSP.getCPtr(vec), vec), false);
  }

  public float get(long i) {
    return jsgppJNI.DataVectorSP_get(swigCPtr, this, i);
  }

  public void set(long i, float value) {
    jsgppJNI.DataVectorSP_set(swigCPtr, this, i, value);
  }

  public void add(DataVectorSP vec) {
    jsgppJNI.DataVectorSP_add(swigCPtr, this, DataVectorSP.getCPtr(vec), vec);
  }

  public void sub(DataVectorSP vec) {
    jsgppJNI.DataVectorSP_sub(swigCPtr, this, DataVectorSP.getCPtr(vec), vec);
  }

  public void componentwise_mult(DataVectorSP vec) {
    jsgppJNI.DataVectorSP_componentwise_mult(swigCPtr, this, DataVectorSP.getCPtr(vec), vec);
  }

  public void componentwise_div(DataVectorSP vec) {
    jsgppJNI.DataVectorSP_componentwise_div(swigCPtr, this, DataVectorSP.getCPtr(vec), vec);
  }

  public void mult(float scalar) {
    jsgppJNI.DataVectorSP_mult(swigCPtr, this, scalar);
  }

  public void sqr() {
    jsgppJNI.DataVectorSP_sqr(swigCPtr, this);
  }

  public void sqrt() {
    jsgppJNI.DataVectorSP_sqrt(swigCPtr, this);
  }

  public void abs() {
    jsgppJNI.DataVectorSP_abs(swigCPtr, this);
  }

  public float sum() {
    return jsgppJNI.DataVectorSP_sum(swigCPtr, this);
  }

  public float maxNorm() {
    return jsgppJNI.DataVectorSP_maxNorm(swigCPtr, this);
  }

  public float RMSNorm() {
    return jsgppJNI.DataVectorSP_RMSNorm(swigCPtr, this);
  }

  public float l2Norm() {
    return jsgppJNI.DataVectorSP_l2Norm(swigCPtr, this);
  }

  public float min() {
    return jsgppJNI.DataVectorSP_min(swigCPtr, this);
  }

  public float max() {
    return jsgppJNI.DataVectorSP_max(swigCPtr, this);
  }

  public void minmax(SWIGTYPE_p_float min, SWIGTYPE_p_float max) {
    jsgppJNI.DataVectorSP_minmax(swigCPtr, this, SWIGTYPE_p_float.getCPtr(min), SWIGTYPE_p_float.getCPtr(max));
  }

  public void axpy(float a, DataVectorSP x) {
    jsgppJNI.DataVectorSP_axpy(swigCPtr, this, a, DataVectorSP.getCPtr(x), x);
  }

  public float dotProduct(DataVectorSP vec) {
    return jsgppJNI.DataVectorSP_dotProduct(swigCPtr, this, DataVectorSP.getCPtr(vec), vec);
  }

  public long getSize() {
    return jsgppJNI.DataVectorSP_getSize(swigCPtr, this);
  }

  public long getUnused() {
    return jsgppJNI.DataVectorSP_getUnused(swigCPtr, this);
  }

  public long getNumberNonZero() {
    return jsgppJNI.DataVectorSP_getNumberNonZero(swigCPtr, this);
  }

  public long getInc() {
    return jsgppJNI.DataVectorSP_getInc(swigCPtr, this);
  }

  public void setInc(long inc_elems) {
    jsgppJNI.DataVectorSP_setInc(swigCPtr, this, inc_elems);
  }

  public void partitionClasses(float threshold) {
    jsgppJNI.DataVectorSP_partitionClasses(swigCPtr, this, threshold);
  }

  public void normalize() {
    jsgppJNI.DataVectorSP_normalize__SWIG_0(swigCPtr, this);
  }

  public void normalize(float border) {
    jsgppJNI.DataVectorSP_normalize__SWIG_1(swigCPtr, this, border);
  }

  public void toString(SWIGTYPE_p_std__string text) {
    jsgppJNI.DataVectorSP_toString__SWIG_0(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(text));
  }

  public String toString() {
    return jsgppJNI.DataVectorSP_toString__SWIG_1(swigCPtr, this);
  }

}
